{"nodes":[{"pos":[1134,1141],"content":"Decoder","needQuote":true,"needEscape":true,"nodes":[{"content":"Decoder","pos":[0,7]}]},{"pos":[1829,1838],"content":"Decoder()","needQuote":true,"needEscape":true,"nodes":[{"content":"Decoder()","pos":[0,9]}]},{"pos":[2431,2491],"content":"Convert(Byte<bpt id=\"p1\">*</bpt>,Int32,Char<ept id=\"p1\">*</ept>,Int32,Boolean,Int32,Int32,Boolean)","needQuote":true,"needEscape":true,"source":"Convert(Byte*,Int32,Char*,Int32,Boolean,Int32,Int32,Boolean)"},{"pos":[2992,3026],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3091,3125],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3186,3220],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3285,3319],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3382,3416],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3481,3515],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3580,3614],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3681,3715],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4193,4267],"content":"Convert(Byte[],Int32,Int32,Char[],Int32,Int32,Boolean,Int32,Int32,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Convert(Byte[],Int32,Int32,Char[],Int32,Int32,Boolean,Int32,Int32,Boolean)","pos":[0,74]}]},{"pos":[4829,4863],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4928,4962],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5027,5061],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5123,5157],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5222,5256],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5321,5355],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5418,5452],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5517,5551],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5616,5650],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5717,5751],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5951,5959],"content":"Fallback","needQuote":true,"needEscape":true,"nodes":[{"content":"Fallback","pos":[0,8]}]},{"pos":[6255,6289],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6460,6474],"content":"FallbackBuffer","needQuote":true,"needEscape":true,"nodes":[{"content":"FallbackBuffer","pos":[0,14]}]},{"pos":[6795,6829],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7080,7113],"content":"GetCharCount(Byte*,Int32,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetCharCount(Byte*,Int32,Boolean)","pos":[0,33]}]},{"pos":[7474,7508],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7569,7603],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7666,7700],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7757,7791],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8086,8118],"content":"GetCharCount(Byte[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetCharCount(Byte[],Int32,Int32)","pos":[0,32]}]},{"pos":[8479,8513],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8574,8608],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8669,8703],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8760,8794],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9119,9159],"content":"GetCharCount(Byte[],Int32,Int32,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetCharCount(Byte[],Int32,Int32,Boolean)","pos":[0,40]}]},{"pos":[9547,9581],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9642,9676],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9737,9771],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9834,9868],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9925,9959],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10300,10341],"content":"GetChars(Byte<bpt id=\"p1\">*</bpt>,Int32,Char<ept id=\"p1\">*</ept>,Int32,Boolean)","needQuote":true,"needEscape":true,"source":"GetChars(Byte*,Int32,Char*,Int32,Boolean)"},{"pos":[10746,10780],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10845,10879],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10940,10974],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11039,11073],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11136,11170],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11227,11261],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11598,11639],"content":"GetChars(Byte[],Int32,Int32,Char[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetChars(Byte[],Int32,Int32,Char[],Int32)","pos":[0,41]}]},{"pos":[12051,12085],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12150,12184],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12249,12283],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12345,12379],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12444,12478],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12535,12569],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12936,12985],"content":"GetChars(Byte[],Int32,Int32,Char[],Int32,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetChars(Byte[],Int32,Int32,Char[],Int32,Boolean)","pos":[0,49]}]},{"pos":[13424,13458],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13523,13557],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13622,13656],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13718,13752],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13817,13851],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13914,13948],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14005,14039],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14234,14241],"content":"Reset()","needQuote":true,"needEscape":true,"nodes":[{"content":"Reset()","pos":[0,7]}]},{"pos":[14563,14576],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[14668,14677],"content":"Decoder()","needQuote":true,"needEscape":true,"nodes":[{"content":"Decoder()","pos":[0,9]}]},{"pos":[14959,15019],"content":"Convert(Byte<bpt id=\"p1\">*</bpt>,Int32,Char<ept id=\"p1\">*</ept>,Int32,Boolean,Int32,Int32,Boolean)","needQuote":true,"needEscape":true,"source":"Convert(Byte*,Int32,Char*,Int32,Boolean,Int32,Int32,Boolean)"},{"pos":[15263,15268],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[15381,15386],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[15501,15508],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[15625,15630],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[15743,15748],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[15863,15870],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[16155,16229],"content":"Convert(Byte[],Int32,Int32,Char[],Int32,Int32,Boolean,Int32,Int32,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Convert(Byte[],Int32,Int32,Char[],Int32,Int32,Boolean,Int32,Int32,Boolean)","pos":[0,74]}]},{"pos":[16500,16504],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[16617,16622],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[16735,16740],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[16852,16856],"content":"Char","needQuote":true,"needEscape":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[16969,16974],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[17087,17092],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[17207,17214],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[17331,17336],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[17449,17454],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[17569,17576],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[17722,17730],"content":"Fallback","needQuote":true,"needEscape":true,"nodes":[{"content":"Fallback","pos":[0,8]}]},{"pos":[17890,17905],"content":"DecoderFallback","needQuote":true,"needEscape":true,"nodes":[{"content":"DecoderFallback","pos":[0,15]}]},{"pos":[18078,18092],"content":"FallbackBuffer","needQuote":true,"needEscape":true,"nodes":[{"content":"FallbackBuffer","pos":[0,14]}]},{"pos":[18270,18291],"content":"DecoderFallbackBuffer","needQuote":true,"needEscape":true,"nodes":[{"content":"DecoderFallbackBuffer","pos":[0,21]}]},{"pos":[18516,18549],"content":"GetCharCount(Byte*,Int32,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetCharCount(Byte*,Int32,Boolean)","pos":[0,33]}]},{"pos":[18739,18744],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[18857,18862],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[18977,18984],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[19175,19207],"content":"GetCharCount(Byte[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetCharCount(Byte[],Int32,Int32)","pos":[0,32]}]},{"pos":[19395,19400],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[19512,19516],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[19629,19634],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[19747,19752],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[19954,19994],"content":"GetCharCount(Byte[],Int32,Int32,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetCharCount(Byte[],Int32,Int32,Boolean)","pos":[0,40]}]},{"pos":[20198,20203],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[20315,20319],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[20432,20437],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[20550,20555],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[20670,20677],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[20891,20932],"content":"GetChars(Byte<bpt id=\"p1\">*</bpt>,Int32,Char<ept id=\"p1\">*</ept>,Int32,Boolean)","needQuote":true,"needEscape":true,"source":"GetChars(Byte*,Int32,Char*,Int32,Boolean)"},{"pos":[21138,21143],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[21256,21261],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[21374,21379],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[21494,21501],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[21715,21756],"content":"GetChars(Byte[],Int32,Int32,Char[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetChars(Byte[],Int32,Int32,Char[],Int32)","pos":[0,41]}]},{"pos":[21962,21967],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[22079,22083],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[22196,22201],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[22314,22319],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[22431,22435],"content":"Char","needQuote":true,"needEscape":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[22548,22553],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[22778,22827],"content":"GetChars(Byte[],Int32,Int32,Char[],Int32,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetChars(Byte[],Int32,Int32,Char[],Int32,Boolean)","pos":[0,49]}]},{"pos":[23049,23054],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[23166,23170],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[23283,23288],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[23401,23406],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[23518,23522],"content":"Char","needQuote":true,"needEscape":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[23635,23640],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[23755,23762],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[23905,23912],"content":"Reset()","needQuote":true,"needEscape":true,"nodes":[{"content":"Reset()","pos":[0,7]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Text.Decoder\n  id: Decoder\n  children:\n  - System.Text.Decoder.#ctor\n  - System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  - System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  - System.Text.Decoder.Fallback\n  - System.Text.Decoder.FallbackBuffer\n  - System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)\n  - System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)\n  - System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)\n  - System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)\n  - System.Text.Decoder.Reset\n  langs:\n  - csharp\n  name: Decoder\n  nameWithType: Decoder\n  fullName: System.Text.Decoder\n  type: Class\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class Decoder\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.Decoder.#ctor\n  id: '#ctor'\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  name: Decoder()\n  nameWithType: Decoder.Decoder()\n  fullName: System.Text.Decoder.Decoder()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: protected Decoder ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  id: Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  name: Convert(Byte*,Int32,Char*,Int32,Boolean,Int32,Int32,Boolean)\n  nameWithType: Decoder.Convert(Byte*,Int32,Char*,Int32,Boolean,Int32,Int32,Boolean)\n  fullName: System.Text.Decoder.Convert(Byte*,Int32,Char*,Int32,Boolean,Int32,Int32,Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public virtual void Convert (byte* bytes, int byteCount, char* chars, int charCount, bool flush, out int bytesUsed, out int charsUsed, out bool completed);\n    parameters:\n    - id: bytes\n      type: System.Byte*\n      description: Parameter description to be filled\n    - id: byteCount\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: chars\n      type: System.Char*\n      description: Parameter description to be filled\n    - id: charCount\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: flush\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: bytesUsed\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: charsUsed\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: completed\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Text.Decoder.Convert*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  id: Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  name: Convert(Byte[],Int32,Int32,Char[],Int32,Int32,Boolean,Int32,Int32,Boolean)\n  nameWithType: Decoder.Convert(Byte[],Int32,Int32,Char[],Int32,Int32,Boolean,Int32,Int32,Boolean)\n  fullName: System.Text.Decoder.Convert(Byte[],Int32,Int32,Char[],Int32,Int32,Boolean,Int32,Int32,Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public virtual void Convert (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, int charCount, bool flush, out int bytesUsed, out int charsUsed, out bool completed);\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: byteIndex\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: byteCount\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: chars\n      type: System.Char[]\n      description: Parameter description to be filled\n    - id: charIndex\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: charCount\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: flush\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: bytesUsed\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: charsUsed\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: completed\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Text.Decoder.Convert*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.Decoder.Fallback\n  id: Fallback\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  name: Fallback\n  nameWithType: Decoder.Fallback\n  fullName: System.Text.Decoder.Fallback\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public System.Text.DecoderFallback Fallback { get; set; }\n    return:\n      type: System.Text.DecoderFallback\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.Decoder.FallbackBuffer\n  id: FallbackBuffer\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  name: FallbackBuffer\n  nameWithType: Decoder.FallbackBuffer\n  fullName: System.Text.Decoder.FallbackBuffer\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public System.Text.DecoderFallbackBuffer FallbackBuffer { get; }\n    return:\n      type: System.Text.DecoderFallbackBuffer\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)\n  id: GetCharCount(System.Byte*,System.Int32,System.Boolean)\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  name: GetCharCount(Byte*,Int32,Boolean)\n  nameWithType: Decoder.GetCharCount(Byte*,Int32,Boolean)\n  fullName: System.Text.Decoder.GetCharCount(Byte*,Int32,Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public virtual int GetCharCount (byte* bytes, int count, bool flush);\n    parameters:\n    - id: bytes\n      type: System.Byte*\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: flush\n      type: System.Boolean\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Text.Decoder.GetCharCount*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  id: GetCharCount(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  name: GetCharCount(Byte[],Int32,Int32)\n  nameWithType: Decoder.GetCharCount(Byte[],Int32,Int32)\n  fullName: System.Text.Decoder.GetCharCount(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public abstract int GetCharCount (byte[] bytes, int index, int count);\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Text.Decoder.GetCharCount*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)\n  id: GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  name: GetCharCount(Byte[],Int32,Int32,Boolean)\n  nameWithType: Decoder.GetCharCount(Byte[],Int32,Int32,Boolean)\n  fullName: System.Text.Decoder.GetCharCount(Byte[],Int32,Int32,Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public virtual int GetCharCount (byte[] bytes, int index, int count, bool flush);\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: flush\n      type: System.Boolean\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Text.Decoder.GetCharCount*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)\n  id: GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  name: GetChars(Byte*,Int32,Char*,Int32,Boolean)\n  nameWithType: Decoder.GetChars(Byte*,Int32,Char*,Int32,Boolean)\n  fullName: System.Text.Decoder.GetChars(Byte*,Int32,Char*,Int32,Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public virtual int GetChars (byte* bytes, int byteCount, char* chars, int charCount, bool flush);\n    parameters:\n    - id: bytes\n      type: System.Byte*\n      description: Parameter description to be filled\n    - id: byteCount\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: chars\n      type: System.Char*\n      description: Parameter description to be filled\n    - id: charCount\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: flush\n      type: System.Boolean\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Text.Decoder.GetChars*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  name: GetChars(Byte[],Int32,Int32,Char[],Int32)\n  nameWithType: Decoder.GetChars(Byte[],Int32,Int32,Char[],Int32)\n  fullName: System.Text.Decoder.GetChars(Byte[],Int32,Int32,Char[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public abstract int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: byteIndex\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: byteCount\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: chars\n      type: System.Char[]\n      description: Parameter description to be filled\n    - id: charIndex\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Text.Decoder.GetChars*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)\n  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  name: GetChars(Byte[],Int32,Int32,Char[],Int32,Boolean)\n  nameWithType: Decoder.GetChars(Byte[],Int32,Int32,Char[],Int32,Boolean)\n  fullName: System.Text.Decoder.GetChars(Byte[],Int32,Int32,Char[],Int32,Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public virtual int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush);\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: byteIndex\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: byteCount\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: chars\n      type: System.Char[]\n      description: Parameter description to be filled\n    - id: charIndex\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: flush\n      type: System.Boolean\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Text.Decoder.GetChars*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.Decoder.Reset\n  id: Reset\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  name: Reset()\n  nameWithType: Decoder.Reset()\n  fullName: System.Text.Decoder.Reset()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public virtual void Reset ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Text.Decoder.#ctor\n  parent: System.Text.Decoder\n  isExternal: false\n  name: Decoder()\n  nameWithType: Decoder.Decoder()\n  fullName: System.Text.Decoder.Decoder()\n- uid: System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  parent: System.Text.Decoder\n  isExternal: false\n  name: Convert(Byte*,Int32,Char*,Int32,Boolean,Int32,Int32,Boolean)\n  nameWithType: Decoder.Convert(Byte*,Int32,Char*,Int32,Boolean,Int32,Int32,Boolean)\n  fullName: System.Text.Decoder.Convert(Byte*,Int32,Char*,Int32,Boolean,Int32,Int32,Boolean)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  parent: System.Text.Decoder\n  isExternal: false\n  name: Convert(Byte[],Int32,Int32,Char[],Int32,Int32,Boolean,Int32,Int32,Boolean)\n  nameWithType: Decoder.Convert(Byte[],Int32,Int32,Char[],Int32,Int32,Boolean,Int32,Int32,Boolean)\n  fullName: System.Text.Decoder.Convert(Byte[],Int32,Int32,Char[],Int32,Int32,Boolean,Int32,Int32,Boolean)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  nameWithType: Char\n  fullName: System.Char[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Text.Decoder.Fallback\n  parent: System.Text.Decoder\n  isExternal: false\n  name: Fallback\n  nameWithType: Decoder.Fallback\n  fullName: System.Text.Decoder.Fallback\n- uid: System.Text.DecoderFallback\n  parent: System.Text\n  isExternal: false\n  name: DecoderFallback\n  nameWithType: DecoderFallback\n  fullName: System.Text.DecoderFallback\n- uid: System.Text.Decoder.FallbackBuffer\n  parent: System.Text.Decoder\n  isExternal: false\n  name: FallbackBuffer\n  nameWithType: Decoder.FallbackBuffer\n  fullName: System.Text.Decoder.FallbackBuffer\n- uid: System.Text.DecoderFallbackBuffer\n  parent: System.Text\n  isExternal: false\n  name: DecoderFallbackBuffer\n  nameWithType: DecoderFallbackBuffer\n  fullName: System.Text.DecoderFallbackBuffer\n- uid: System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)\n  parent: System.Text.Decoder\n  isExternal: false\n  name: GetCharCount(Byte*,Int32,Boolean)\n  nameWithType: Decoder.GetCharCount(Byte*,Int32,Boolean)\n  fullName: System.Text.Decoder.GetCharCount(Byte*,Int32,Boolean)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Decoder\n  isExternal: false\n  name: GetCharCount(Byte[],Int32,Int32)\n  nameWithType: Decoder.GetCharCount(Byte[],Int32,Int32)\n  fullName: System.Text.Decoder.GetCharCount(Byte[],Int32,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)\n  parent: System.Text.Decoder\n  isExternal: false\n  name: GetCharCount(Byte[],Int32,Int32,Boolean)\n  nameWithType: Decoder.GetCharCount(Byte[],Int32,Int32,Boolean)\n  fullName: System.Text.Decoder.GetCharCount(Byte[],Int32,Int32,Boolean)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)\n  parent: System.Text.Decoder\n  isExternal: false\n  name: GetChars(Byte*,Int32,Char*,Int32,Boolean)\n  nameWithType: Decoder.GetChars(Byte*,Int32,Char*,Int32,Boolean)\n  fullName: System.Text.Decoder.GetChars(Byte*,Int32,Char*,Int32,Boolean)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  parent: System.Text.Decoder\n  isExternal: false\n  name: GetChars(Byte[],Int32,Int32,Char[],Int32)\n  nameWithType: Decoder.GetChars(Byte[],Int32,Int32,Char[],Int32)\n  fullName: System.Text.Decoder.GetChars(Byte[],Int32,Int32,Char[],Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  nameWithType: Char\n  fullName: System.Char[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)\n  parent: System.Text.Decoder\n  isExternal: false\n  name: GetChars(Byte[],Int32,Int32,Char[],Int32,Boolean)\n  nameWithType: Decoder.GetChars(Byte[],Int32,Int32,Char[],Int32,Boolean)\n  fullName: System.Text.Decoder.GetChars(Byte[],Int32,Int32,Char[],Int32,Boolean)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  nameWithType: Char\n  fullName: System.Char[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Text.Decoder.Reset\n  parent: System.Text.Decoder\n  isExternal: false\n  name: Reset()\n  nameWithType: Decoder.Reset()\n  fullName: System.Text.Decoder.Reset()\n- uid: System.Text.Decoder.Convert*\n  parent: System.Text.Decoder\n  isExternal: false\n  nameWithType: Decoder.\n- uid: System.Text.Decoder.GetCharCount*\n  parent: System.Text.Decoder\n  isExternal: false\n  nameWithType: Decoder.\n- uid: System.Text.Decoder.GetChars*\n  parent: System.Text.Decoder\n  isExternal: false\n  nameWithType: Decoder.\n"}