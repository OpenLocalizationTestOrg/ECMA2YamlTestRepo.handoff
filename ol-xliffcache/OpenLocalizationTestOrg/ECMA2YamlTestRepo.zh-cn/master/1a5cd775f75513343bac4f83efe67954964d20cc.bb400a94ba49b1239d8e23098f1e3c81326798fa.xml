{"nodes":[{"pos":[541,555],"content":"ICollection<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"ICollection<T>"},{"pos":[811,845],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[1104,1110],"content":"Add(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"Add(T)","pos":[0,6]}]},{"pos":[1405,1439],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[1634,1641],"content":"Clear()","needQuote":true,"needEscape":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[2097,2108],"content":"Contains(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"Contains(T)","pos":[0,11]}]},{"pos":[2418,2452],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2511,2545],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2780,2797],"content":"CopyTo(T[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"CopyTo(T[],Int32)","pos":[0,17]}]},{"pos":[3139,3173],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3239,3273],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3468,3473],"content":"Count","needQuote":true,"needEscape":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[3760,3794],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3999,4009],"content":"IsReadOnly","needQuote":true,"needEscape":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[4314,4348],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4553,4562],"content":"Remove(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"Remove(T)","pos":[0,9]}]},{"pos":[4866,4900],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4959,4993],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5190,5196],"content":"Add(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"Add(T)","pos":[0,6]}]},{"pos":[5345,5346],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[5512,5519],"content":"Clear()","needQuote":true,"needEscape":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[5761,5772],"content":"Contains(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"Contains(T)","pos":[0,11]}]},{"pos":[5949,5956],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[6057,6058],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[6244,6261],"content":"CopyTo(T[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"CopyTo(T[],Int32)","pos":[0,17]}]},{"pos":[6432,6433],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[6533,6538],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[6719,6724],"content":"Count","needQuote":true,"needEscape":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[6887,6892],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[7078,7088],"content":"IsReadOnly","needQuote":true,"needEscape":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[7263,7270],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[7460,7469],"content":"Remove(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"Remove(T)","pos":[0,9]}]},{"pos":[7642,7649],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[7750,7751],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Generic.ICollection`1\n  id: ICollection`1\n  children:\n  - System.Collections.Generic.ICollection`1.Add(`0)\n  - System.Collections.Generic.ICollection`1.Clear\n  - System.Collections.Generic.ICollection`1.Contains(`0)\n  - System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n  - System.Collections.Generic.ICollection`1.Count\n  - System.Collections.Generic.ICollection`1.IsReadOnly\n  - System.Collections.Generic.ICollection`1.Remove(`0)\n  langs:\n  - csharp\n  name: ICollection<T>\n  nameWithType: ICollection<T>\n  fullName: System.Collections.Generic.ICollection<T>\n  type: Interface\n  syntax:\n    content: 'public interface ICollection<T> : System.Collections.Generic.IEnumerable<T>'\n    typeParameters:\n    - id: T\n      description: Parameter description to be filled\n  implements:\n  - System.Collections.Generic.IEnumerable<T>\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.ICollection`1.Add(`0)\n  id: Add(`0)\n  parent: System.Collections.Generic.ICollection`1\n  langs:\n  - csharp\n  name: Add(T)\n  nameWithType: ICollection<T>.Add(T)\n  fullName: System.Collections.Generic.ICollection<T>.Add(T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public void Add (T item);\n    parameters:\n    - id: item\n      type: T\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.ICollection`1.Clear\n  id: Clear\n  parent: System.Collections.Generic.ICollection`1\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: ICollection<T>.Clear()\n  fullName: System.Collections.Generic.ICollection<T>.Clear()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.ICollection`1.Contains(`0)\n  id: Contains(`0)\n  parent: System.Collections.Generic.ICollection`1\n  langs:\n  - csharp\n  name: Contains(T)\n  nameWithType: ICollection<T>.Contains(T)\n  fullName: System.Collections.Generic.ICollection<T>.Contains(T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public bool Contains (T item);\n    parameters:\n    - id: item\n      type: T\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n  id: CopyTo(`0[],System.Int32)\n  parent: System.Collections.Generic.ICollection`1\n  langs:\n  - csharp\n  name: CopyTo(T[],Int32)\n  nameWithType: ICollection<T>.CopyTo(T[],Int32)\n  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public void CopyTo (T[] array, int arrayIndex);\n    parameters:\n    - id: array\n      type: T[]\n      description: Parameter description to be filled\n    - id: arrayIndex\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.ICollection`1.Count\n  id: Count\n  parent: System.Collections.Generic.ICollection`1\n  langs:\n  - csharp\n  name: Count\n  nameWithType: ICollection<T>.Count\n  fullName: System.Collections.Generic.ICollection<T>.Count\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.ICollection`1.IsReadOnly\n  id: IsReadOnly\n  parent: System.Collections.Generic.ICollection`1\n  langs:\n  - csharp\n  name: IsReadOnly\n  nameWithType: ICollection<T>.IsReadOnly\n  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public bool IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.ICollection`1.Remove(`0)\n  id: Remove(`0)\n  parent: System.Collections.Generic.ICollection`1\n  langs:\n  - csharp\n  name: Remove(T)\n  nameWithType: ICollection<T>.Remove(T)\n  fullName: System.Collections.Generic.ICollection<T>.Remove(T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public bool Remove (T item);\n    parameters:\n    - id: item\n      type: T\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Collections.Generic.ICollection`1.Add(`0)\n  parent: System.Collections.Generic.ICollection`1\n  isExternal: false\n  name: Add(T)\n  nameWithType: ICollection<T>.Add(T)\n  fullName: System.Collections.Generic.ICollection<T>.Add(T)\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Collections.Generic.ICollection`1.Clear\n  parent: System.Collections.Generic.ICollection`1\n  isExternal: false\n  name: Clear()\n  nameWithType: ICollection<T>.Clear()\n  fullName: System.Collections.Generic.ICollection<T>.Clear()\n- uid: System.Collections.Generic.ICollection`1.Contains(`0)\n  parent: System.Collections.Generic.ICollection`1\n  isExternal: false\n  name: Contains(T)\n  nameWithType: ICollection<T>.Contains(T)\n  fullName: System.Collections.Generic.ICollection<T>.Contains(T)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n  parent: System.Collections.Generic.ICollection`1\n  isExternal: false\n  name: CopyTo(T[],Int32)\n  nameWithType: ICollection<T>.CopyTo(T[],Int32)\n  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[],Int32)\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.ICollection`1.Count\n  parent: System.Collections.Generic.ICollection`1\n  isExternal: false\n  name: Count\n  nameWithType: ICollection<T>.Count\n  fullName: System.Collections.Generic.ICollection<T>.Count\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.ICollection`1.IsReadOnly\n  parent: System.Collections.Generic.ICollection`1\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: ICollection<T>.IsReadOnly\n  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Generic.ICollection`1.Remove(`0)\n  parent: System.Collections.Generic.ICollection`1\n  isExternal: false\n  name: Remove(T)\n  nameWithType: ICollection<T>.Remove(T)\n  fullName: System.Collections.Generic.ICollection<T>.Remove(T)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n"}