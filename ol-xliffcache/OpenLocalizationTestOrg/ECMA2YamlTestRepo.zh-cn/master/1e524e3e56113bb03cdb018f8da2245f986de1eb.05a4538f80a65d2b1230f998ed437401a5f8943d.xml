{"nodes":[{"pos":[435,445],"content":"SwitchCase","needQuote":true,"needEscape":true,"nodes":[{"content":"SwitchCase","pos":[0,10]}]},{"pos":[1200,1204],"content":"Body","needQuote":true,"needEscape":true,"nodes":[{"content":"Body","pos":[0,4]}]},{"pos":[1530,1564],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[1757,1767],"content":"TestValues","needQuote":true,"needEscape":true,"nodes":[{"content":"TestValues","pos":[0,10]}]},{"pos":[2213,2247],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2436,2446],"content":"ToString()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[2760,2794],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3201,3243],"content":"Update(IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>,Expression)","needQuote":true,"needEscape":true,"source":"Update(IEnumerable<Expression>,Expression)"},{"pos":[3831,3865],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3947,3981],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4060,4094],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4205,4218],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[4339,4343],"content":"Body","needQuote":true,"needEscape":true,"nodes":[{"content":"Body","pos":[0,4]}]},{"pos":[4532,4542],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[4743,4753],"content":"TestValues","needQuote":true,"needEscape":true,"nodes":[{"content":"TestValues","pos":[0,10]}]},{"pos":[5012,5042],"content":"ReadOnlyCollection<ph id=\"ph1\">&lt;Expression&gt;</ph>","needQuote":true,"needEscape":true,"source":"ReadOnlyCollection<Expression>"},{"pos":[5312,5322],"content":"ToString()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[5485,5491],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[5774,5816],"content":"Update(IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>,Expression)","needQuote":true,"needEscape":true,"source":"Update(IEnumerable<Expression>,Expression)"},{"pos":[6081,6091],"content":"SwitchCase","needQuote":true,"needEscape":true,"nodes":[{"content":"SwitchCase","pos":[0,10]}]},{"pos":[6313,6336],"content":"IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<Expression>"},{"pos":[6568,6578],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Linq.Expressions.SwitchCase\n  id: SwitchCase\n  children:\n  - System.Linq.Expressions.SwitchCase.Body\n  - System.Linq.Expressions.SwitchCase.TestValues\n  - System.Linq.Expressions.SwitchCase.ToString\n  - System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)\n  langs:\n  - csharp\n  name: SwitchCase\n  nameWithType: SwitchCase\n  fullName: System.Linq.Expressions.SwitchCase\n  type: Class\n  syntax:\n    content: >-\n      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Linq.Expressions.Expression/SwitchCaseProxy))]\n\n      public sealed class SwitchCase\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.SwitchCase.Body\n  id: Body\n  parent: System.Linq.Expressions.SwitchCase\n  langs:\n  - csharp\n  name: Body\n  nameWithType: SwitchCase.Body\n  fullName: System.Linq.Expressions.SwitchCase.Body\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public System.Linq.Expressions.Expression Body { get; }\n    return:\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.SwitchCase.TestValues\n  id: TestValues\n  parent: System.Linq.Expressions.SwitchCase\n  langs:\n  - csharp\n  name: TestValues\n  nameWithType: SwitchCase.TestValues\n  fullName: System.Linq.Expressions.SwitchCase.TestValues\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> TestValues { get; }\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.SwitchCase.ToString\n  id: ToString\n  parent: System.Linq.Expressions.SwitchCase\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: SwitchCase.ToString()\n  fullName: System.Linq.Expressions.SwitchCase.ToString()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)\n  id: Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.SwitchCase\n  langs:\n  - csharp\n  name: Update(IEnumerable<Expression>,Expression)\n  nameWithType: SwitchCase.Update(IEnumerable<Expression>,Expression)\n  fullName: System.Linq.Expressions.SwitchCase.Update(IEnumerable<Expression>,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public System.Linq.Expressions.SwitchCase Update (System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> testValues, System.Linq.Expressions.Expression body);\n    parameters:\n    - id: testValues\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: Parameter description to be filled\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.SwitchCase\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Linq.Expressions.SwitchCase.Body\n  parent: System.Linq.Expressions.SwitchCase\n  isExternal: false\n  name: Body\n  nameWithType: SwitchCase.Body\n  fullName: System.Linq.Expressions.SwitchCase.Body\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.SwitchCase.TestValues\n  parent: System.Linq.Expressions.SwitchCase\n  isExternal: false\n  name: TestValues\n  nameWithType: SwitchCase.TestValues\n  fullName: System.Linq.Expressions.SwitchCase.TestValues\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression}\n  parent: System.Collections.ObjectModel\n  isExternal: false\n  name: ReadOnlyCollection<Expression>\n  nameWithType: ReadOnlyCollection<Expression>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression>\n- uid: System.Linq.Expressions.SwitchCase.ToString\n  parent: System.Linq.Expressions.SwitchCase\n  isExternal: false\n  name: ToString()\n  nameWithType: SwitchCase.ToString()\n  fullName: System.Linq.Expressions.SwitchCase.ToString()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.SwitchCase\n  isExternal: false\n  name: Update(IEnumerable<Expression>,Expression)\n  nameWithType: SwitchCase.Update(IEnumerable<Expression>,Expression)\n  fullName: System.Linq.Expressions.SwitchCase.Update(IEnumerable<Expression>,Expression)\n- uid: System.Linq.Expressions.SwitchCase\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: SwitchCase\n  nameWithType: SwitchCase\n  fullName: System.Linq.Expressions.SwitchCase\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Expression>\n  nameWithType: IEnumerable<Expression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n"}