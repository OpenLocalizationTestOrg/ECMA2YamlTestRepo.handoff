{"nodes":[{"pos":[1352,1365],"content":"DynamicILInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"DynamicILInfo","pos":[0,13]}]},{"pos":[2121,2134],"content":"DynamicMethod","needQuote":true,"needEscape":true,"nodes":[{"content":"DynamicMethod","pos":[0,13]}]},{"pos":[2492,2526],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2755,2774],"content":"GetTokenFor(Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"GetTokenFor(Byte[])","pos":[0,19]}]},{"pos":[3119,3153],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3210,3244],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3581,3607],"content":"GetTokenFor(DynamicMethod)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetTokenFor(DynamicMethod)","pos":[0,26]}]},{"pos":[4013,4047],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4104,4138],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4453,4484],"content":"GetTokenFor(RuntimeFieldHandle)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetTokenFor(RuntimeFieldHandle)","pos":[0,31]}]},{"pos":[4869,4903],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4960,4994],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5311,5343],"content":"GetTokenFor(RuntimeMethodHandle)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetTokenFor(RuntimeMethodHandle)","pos":[0,32]}]},{"pos":[5734,5768],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5825,5859],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6172,6202],"content":"GetTokenFor(RuntimeTypeHandle)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetTokenFor(RuntimeTypeHandle)","pos":[0,30]}]},{"pos":[6581,6615],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6672,6706],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6997,7016],"content":"GetTokenFor(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetTokenFor(String)","pos":[0,19]}]},{"pos":[7357,7391],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7448,7482],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7847,7896],"content":"GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)","pos":[0,49]}]},{"pos":[8348,8382],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8461,8495],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8552,8586],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8953,9003],"content":"GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)","pos":[0,50]}]},{"pos":[9461,9495],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9574,9608],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9665,9699],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10008,10029],"content":"SetCode(Byte[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"SetCode(Byte[],Int32)","pos":[0,21]}]},{"pos":[10383,10417],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10485,10519],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10848,10874],"content":"SetCode(Byte*,Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"SetCode(Byte*,Int32,Int32)","pos":[0,26]}]},{"pos":[11250,11284],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11348,11382],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11450,11484],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11775,11796],"content":"SetExceptions(Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"SetExceptions(Byte[])","pos":[0,21]}]},{"pos":[12150,12184],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12505,12531],"content":"SetExceptions(Byte*,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"SetExceptions(Byte*,Int32)","pos":[0,26]}]},{"pos":[12913,12947],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13017,13051],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13356,13381],"content":"SetLocalSignature(Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"SetLocalSignature(Byte[])","pos":[0,25]}]},{"pos":[13755,13789],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14122,14152],"content":"SetLocalSignature(Byte*,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"SetLocalSignature(Byte*,Int32)","pos":[0,30]}]},{"pos":[14553,14587],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14656,14690],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14869,14882],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[15016,15029],"content":"DynamicMethod","needQuote":true,"needEscape":true,"nodes":[{"content":"DynamicMethod","pos":[0,13]}]},{"pos":[15242,15255],"content":"DynamicMethod","needQuote":true,"needEscape":true,"nodes":[{"content":"DynamicMethod","pos":[0,13]}]},{"pos":[15481,15500],"content":"GetTokenFor(Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"GetTokenFor(Byte[])","pos":[0,19]}]},{"pos":[15685,15690],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[15802,15806],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[16023,16049],"content":"GetTokenFor(DynamicMethod)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetTokenFor(DynamicMethod)","pos":[0,26]}]},{"pos":[16248,16253],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[16406,16419],"content":"DynamicMethod","needQuote":true,"needEscape":true,"nodes":[{"content":"DynamicMethod","pos":[0,13]}]},{"pos":[16657,16688],"content":"GetTokenFor(RuntimeFieldHandle)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetTokenFor(RuntimeFieldHandle)","pos":[0,31]}]},{"pos":[16897,16902],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[17028,17046],"content":"RuntimeFieldHandle","needQuote":true,"needEscape":true,"nodes":[{"content":"RuntimeFieldHandle","pos":[0,18]}]},{"pos":[17279,17311],"content":"GetTokenFor(RuntimeMethodHandle)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetTokenFor(RuntimeMethodHandle)","pos":[0,32]}]},{"pos":[17522,17527],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[17654,17673],"content":"RuntimeMethodHandle","needQuote":true,"needEscape":true,"nodes":[{"content":"RuntimeMethodHandle","pos":[0,19]}]},{"pos":[17906,17936],"content":"GetTokenFor(RuntimeTypeHandle)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetTokenFor(RuntimeTypeHandle)","pos":[0,30]}]},{"pos":[18143,18148],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[18273,18290],"content":"RuntimeTypeHandle","needQuote":true,"needEscape":true,"nodes":[{"content":"RuntimeTypeHandle","pos":[0,17]}]},{"pos":[18508,18527],"content":"GetTokenFor(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetTokenFor(String)","pos":[0,19]}]},{"pos":[18712,18717],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[18831,18837],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[19070,19119],"content":"GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)","pos":[0,49]}]},{"pos":[19364,19369],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[19495,19513],"content":"RuntimeFieldHandle","needQuote":true,"needEscape":true,"nodes":[{"content":"RuntimeFieldHandle","pos":[0,18]}]},{"pos":[19664,19681],"content":"RuntimeTypeHandle","needQuote":true,"needEscape":true,"nodes":[{"content":"RuntimeTypeHandle","pos":[0,17]}]},{"pos":[19937,19987],"content":"GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)","pos":[0,50]}]},{"pos":[20234,20239],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[20366,20385],"content":"RuntimeMethodHandle","needQuote":true,"needEscape":true,"nodes":[{"content":"RuntimeMethodHandle","pos":[0,19]}]},{"pos":[20538,20555],"content":"RuntimeTypeHandle","needQuote":true,"needEscape":true,"nodes":[{"content":"RuntimeTypeHandle","pos":[0,17]}]},{"pos":[20782,20803],"content":"SetCode(Byte[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"SetCode(Byte[],Int32)","pos":[0,21]}]},{"pos":[20991,20995],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[21108,21113],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[21328,21354],"content":"SetCode(Byte*,Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"SetCode(Byte*,Int32,Int32)","pos":[0,26]}]},{"pos":[21553,21558],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[21671,21676],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[21872,21893],"content":"SetExceptions(Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"SetExceptions(Byte[])","pos":[0,21]}]},{"pos":[22081,22085],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[22293,22319],"content":"SetExceptions(Byte*,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"SetExceptions(Byte*,Int32)","pos":[0,26]}]},{"pos":[22518,22523],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[22723,22748],"content":"SetLocalSignature(Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"SetLocalSignature(Byte[])","pos":[0,25]}]},{"pos":[22944,22948],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[23160,23190],"content":"SetLocalSignature(Byte*,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"SetLocalSignature(Byte*,Int32)","pos":[0,30]}]},{"pos":[23397,23402],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.Emit.DynamicILInfo\n  id: DynamicILInfo\n  children:\n  - System.Reflection.Emit.DynamicILInfo.DynamicMethod\n  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])\n  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)\n  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)\n  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)\n  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)\n  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)\n  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)\n  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n  - System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)\n  - System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)\n  - System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])\n  - System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)\n  - System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])\n  - System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)\n  langs:\n  - csharp\n  name: DynamicILInfo\n  nameWithType: DynamicILInfo\n  fullName: System.Reflection.Emit.DynamicILInfo\n  type: Class\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class DynamicILInfo\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod\n  id: DynamicMethod\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: DynamicMethod\n  nameWithType: DynamicILInfo.DynamicMethod\n  fullName: System.Reflection.Emit.DynamicILInfo.DynamicMethod\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public System.Reflection.Emit.DynamicMethod DynamicMethod { get; }\n    return:\n      type: System.Reflection.Emit.DynamicMethod\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])\n  id: GetTokenFor(System.Byte[])\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: GetTokenFor(Byte[])\n  nameWithType: DynamicILInfo.GetTokenFor(Byte[])\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public int GetTokenFor (byte[] signature);\n    parameters:\n    - id: signature\n      type: System.Byte[]\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)\n  id: GetTokenFor(System.Reflection.Emit.DynamicMethod)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: GetTokenFor(DynamicMethod)\n  nameWithType: DynamicILInfo.GetTokenFor(DynamicMethod)\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(DynamicMethod)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public int GetTokenFor (System.Reflection.Emit.DynamicMethod method);\n    parameters:\n    - id: method\n      type: System.Reflection.Emit.DynamicMethod\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)\n  id: GetTokenFor(System.RuntimeFieldHandle)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: GetTokenFor(RuntimeFieldHandle)\n  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle)\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public int GetTokenFor (RuntimeFieldHandle field);\n    parameters:\n    - id: field\n      type: System.RuntimeFieldHandle\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)\n  id: GetTokenFor(System.RuntimeMethodHandle)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: GetTokenFor(RuntimeMethodHandle)\n  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle)\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public int GetTokenFor (RuntimeMethodHandle method);\n    parameters:\n    - id: method\n      type: System.RuntimeMethodHandle\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)\n  id: GetTokenFor(System.RuntimeTypeHandle)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: GetTokenFor(RuntimeTypeHandle)\n  nameWithType: DynamicILInfo.GetTokenFor(RuntimeTypeHandle)\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeTypeHandle)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public int GetTokenFor (RuntimeTypeHandle type);\n    parameters:\n    - id: type\n      type: System.RuntimeTypeHandle\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)\n  id: GetTokenFor(System.String)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: GetTokenFor(String)\n  nameWithType: DynamicILInfo.GetTokenFor(String)\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public int GetTokenFor (string literal);\n    parameters:\n    - id: literal\n      type: System.String\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)\n  id: GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)\n  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public int GetTokenFor (RuntimeFieldHandle field, RuntimeTypeHandle contextType);\n    parameters:\n    - id: field\n      type: System.RuntimeFieldHandle\n      description: Parameter description to be filled\n    - id: contextType\n      type: System.RuntimeTypeHandle\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n  id: GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)\n  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public int GetTokenFor (RuntimeMethodHandle method, RuntimeTypeHandle contextType);\n    parameters:\n    - id: method\n      type: System.RuntimeMethodHandle\n      description: Parameter description to be filled\n    - id: contextType\n      type: System.RuntimeTypeHandle\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)\n  id: SetCode(System.Byte[],System.Int32)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: SetCode(Byte[],Int32)\n  nameWithType: DynamicILInfo.SetCode(Byte[],Int32)\n  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public void SetCode (byte[] code, int maxStackSize);\n    parameters:\n    - id: code\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: maxStackSize\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Reflection.Emit.DynamicILInfo.SetCode*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)\n  id: SetCode(System.Byte*,System.Int32,System.Int32)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: SetCode(Byte*,Int32,Int32)\n  nameWithType: DynamicILInfo.SetCode(Byte*,Int32,Int32)\n  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte*,Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public void SetCode (byte* code, int codeSize, int maxStackSize);\n    parameters:\n    - id: code\n      type: System.Byte*\n      description: Parameter description to be filled\n    - id: codeSize\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: maxStackSize\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Reflection.Emit.DynamicILInfo.SetCode*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])\n  id: SetExceptions(System.Byte[])\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: SetExceptions(Byte[])\n  nameWithType: DynamicILInfo.SetExceptions(Byte[])\n  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public void SetExceptions (byte[] exceptions);\n    parameters:\n    - id: exceptions\n      type: System.Byte[]\n      description: Parameter description to be filled\n  overload: System.Reflection.Emit.DynamicILInfo.SetExceptions*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)\n  id: SetExceptions(System.Byte*,System.Int32)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: SetExceptions(Byte*,Int32)\n  nameWithType: DynamicILInfo.SetExceptions(Byte*,Int32)\n  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte*,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public void SetExceptions (byte* exceptions, int exceptionsSize);\n    parameters:\n    - id: exceptions\n      type: System.Byte*\n      description: Parameter description to be filled\n    - id: exceptionsSize\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Reflection.Emit.DynamicILInfo.SetExceptions*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])\n  id: SetLocalSignature(System.Byte[])\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: SetLocalSignature(Byte[])\n  nameWithType: DynamicILInfo.SetLocalSignature(Byte[])\n  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public void SetLocalSignature (byte[] localSignature);\n    parameters:\n    - id: localSignature\n      type: System.Byte[]\n      description: Parameter description to be filled\n  overload: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)\n  id: SetLocalSignature(System.Byte*,System.Int32)\n  parent: System.Reflection.Emit.DynamicILInfo\n  langs:\n  - csharp\n  name: SetLocalSignature(Byte*,Int32)\n  nameWithType: DynamicILInfo.SetLocalSignature(Byte*,Int32)\n  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte*,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public void SetLocalSignature (byte* localSignature, int signatureSize);\n    parameters:\n    - id: localSignature\n      type: System.Byte*\n      description: Parameter description to be filled\n    - id: signatureSize\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: DynamicMethod\n  nameWithType: DynamicILInfo.DynamicMethod\n  fullName: System.Reflection.Emit.DynamicILInfo.DynamicMethod\n- uid: System.Reflection.Emit.DynamicMethod\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: DynamicMethod\n  nameWithType: DynamicMethod\n  fullName: System.Reflection.Emit.DynamicMethod\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: GetTokenFor(Byte[])\n  nameWithType: DynamicILInfo.GetTokenFor(Byte[])\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(Byte[])\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: GetTokenFor(DynamicMethod)\n  nameWithType: DynamicILInfo.GetTokenFor(DynamicMethod)\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(DynamicMethod)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.Emit.DynamicMethod\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: DynamicMethod\n  nameWithType: DynamicMethod\n  fullName: System.Reflection.Emit.DynamicMethod\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: GetTokenFor(RuntimeFieldHandle)\n  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle)\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.RuntimeFieldHandle\n  parent: System\n  isExternal: false\n  name: RuntimeFieldHandle\n  nameWithType: RuntimeFieldHandle\n  fullName: System.RuntimeFieldHandle\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: GetTokenFor(RuntimeMethodHandle)\n  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle)\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.RuntimeMethodHandle\n  parent: System\n  isExternal: false\n  name: RuntimeMethodHandle\n  nameWithType: RuntimeMethodHandle\n  fullName: System.RuntimeMethodHandle\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: GetTokenFor(RuntimeTypeHandle)\n  nameWithType: DynamicILInfo.GetTokenFor(RuntimeTypeHandle)\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeTypeHandle)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.RuntimeTypeHandle\n  parent: System\n  isExternal: false\n  name: RuntimeTypeHandle\n  nameWithType: RuntimeTypeHandle\n  fullName: System.RuntimeTypeHandle\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: GetTokenFor(String)\n  nameWithType: DynamicILInfo.GetTokenFor(String)\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(String)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)\n  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.RuntimeFieldHandle\n  parent: System\n  isExternal: false\n  name: RuntimeFieldHandle\n  nameWithType: RuntimeFieldHandle\n  fullName: System.RuntimeFieldHandle\n- uid: System.RuntimeTypeHandle\n  parent: System\n  isExternal: false\n  name: RuntimeTypeHandle\n  nameWithType: RuntimeTypeHandle\n  fullName: System.RuntimeTypeHandle\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)\n  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)\n  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.RuntimeMethodHandle\n  parent: System\n  isExternal: false\n  name: RuntimeMethodHandle\n  nameWithType: RuntimeMethodHandle\n  fullName: System.RuntimeMethodHandle\n- uid: System.RuntimeTypeHandle\n  parent: System\n  isExternal: false\n  name: RuntimeTypeHandle\n  nameWithType: RuntimeTypeHandle\n  fullName: System.RuntimeTypeHandle\n- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: SetCode(Byte[],Int32)\n  nameWithType: DynamicILInfo.SetCode(Byte[],Int32)\n  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte[],Int32)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: SetCode(Byte*,Int32,Int32)\n  nameWithType: DynamicILInfo.SetCode(Byte*,Int32,Int32)\n  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte*,Int32,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: SetExceptions(Byte[])\n  nameWithType: DynamicILInfo.SetExceptions(Byte[])\n  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte[])\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: SetExceptions(Byte*,Int32)\n  nameWithType: DynamicILInfo.SetExceptions(Byte*,Int32)\n  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte*,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: SetLocalSignature(Byte[])\n  nameWithType: DynamicILInfo.SetLocalSignature(Byte[])\n  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte[])\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  name: SetLocalSignature(Byte*,Int32)\n  nameWithType: DynamicILInfo.SetLocalSignature(Byte*,Int32)\n  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte*,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor*\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  nameWithType: DynamicILInfo.\n- uid: System.Reflection.Emit.DynamicILInfo.SetCode*\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  nameWithType: DynamicILInfo.\n- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions*\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  nameWithType: DynamicILInfo.\n- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*\n  parent: System.Reflection.Emit.DynamicILInfo\n  isExternal: false\n  nameWithType: DynamicILInfo.\n"}