{"nodes":[{"pos":[1605,1618],"content":"UTF32Encoding","needQuote":true,"needEscape":true,"nodes":[{"content":"UTF32Encoding","pos":[0,13]}]},{"pos":[4313,4328],"content":"UTF32Encoding()","needQuote":true,"needEscape":true,"nodes":[{"content":"UTF32Encoding()","pos":[0,15]}]},{"pos":[4796,4826],"content":"UTF32Encoding(Boolean,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"UTF32Encoding(Boolean,Boolean)","pos":[0,30]}]},{"pos":[5193,5227],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5298,5332],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5591,5629],"content":"UTF32Encoding(Boolean,Boolean,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"UTF32Encoding(Boolean,Boolean,Boolean)","pos":[0,38]}]},{"pos":[6043,6077],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6148,6182],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6264,6298],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6495,6509],"content":"Equals(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[6819,6853],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6912,6946],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7155,7175],"content":"GetByteCount(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetByteCount(String)","pos":[0,20]}]},{"pos":[7494,7528],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7585,7619],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7904,7929],"content":"GetByteCount(Char*,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetByteCount(Char*,Int32)","pos":[0,25]}]},{"pos":[8275,8309],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8370,8404],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8461,8495],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8808,8840],"content":"GetByteCount(Char[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetByteCount(Char[],Int32,Int32)","pos":[0,32]}]},{"pos":[9213,9247],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9308,9342],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9403,9437],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9494,9528],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9857,9890],"content":"GetBytes(Char<bpt id=\"p1\">*</bpt>,Int32,Byte<ept id=\"p1\">*</ept>,Int32)","needQuote":true,"needEscape":true,"source":"GetBytes(Char*,Int32,Byte*,Int32)"},{"pos":[10280,10314],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10379,10413],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10474,10508],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10573,10607],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10664,10698],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11053,11094],"content":"GetBytes(Char[],Int32,Int32,Byte[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetBytes(Char[],Int32,Int32,Byte[],Int32)","pos":[0,41]}]},{"pos":[11518,11552],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11617,11651],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11716,11750],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11812,11846],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11911,11945],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12002,12036],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12391,12432],"content":"GetBytes(String,Int32,Int32,Byte[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetBytes(String,Int32,Int32,Byte[],Int32)","pos":[0,41]}]},{"pos":[12848,12882],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12947,12981],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13046,13080],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13142,13176],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13241,13275],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13332,13366],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13647,13672],"content":"GetCharCount(Byte*,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetCharCount(Byte*,Int32)","pos":[0,25]}]},{"pos":[14018,14052],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14113,14147],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14204,14238],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14551,14583],"content":"GetCharCount(Byte[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetCharCount(Byte[],Int32,Int32)","pos":[0,32]}]},{"pos":[14956,14990],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15051,15085],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15146,15180],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15237,15271],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15600,15633],"content":"GetChars(Byte<bpt id=\"p1\">*</bpt>,Int32,Char<ept id=\"p1\">*</ept>,Int32)","needQuote":true,"needEscape":true,"source":"GetChars(Byte*,Int32,Char*,Int32)"},{"pos":[16023,16057],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16122,16156],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16217,16251],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16316,16350],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16407,16441],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16796,16837],"content":"GetChars(Byte[],Int32,Int32,Char[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetChars(Byte[],Int32,Int32,Char[],Int32)","pos":[0,41]}]},{"pos":[17261,17295],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17360,17394],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17459,17493],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17555,17589],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17654,17688],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17745,17779],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18002,18014],"content":"GetDecoder()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetDecoder()","pos":[0,12]}]},{"pos":[18332,18366],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18541,18553],"content":"GetEncoder()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetEncoder()","pos":[0,12]}]},{"pos":[18871,18905],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19082,19095],"content":"GetHashCode()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[19393,19427],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19640,19662],"content":"GetMaxByteCount(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetMaxByteCount(Int32)","pos":[0,22]}]},{"pos":[20000,20034],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20091,20125],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20338,20360],"content":"GetMaxCharCount(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetMaxCharCount(Int32)","pos":[0,22]}]},{"pos":[20698,20732],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20789,20823],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21000,21013],"content":"GetPreamble()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetPreamble()","pos":[0,13]}]},{"pos":[21315,21349],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21604,21633],"content":"GetString(Byte[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetString(Byte[],Int32,Int32)","pos":[0,29]}]},{"pos":[22000,22034],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22095,22129],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22190,22224],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22282,22316],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22434,22454],"content":"System.Text.Encoding","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Text.Encoding","pos":[0,20]}]},{"pos":[22558,22573],"content":"UTF32Encoding()","needQuote":true,"needEscape":true,"nodes":[{"content":"UTF32Encoding()","pos":[0,15]}]},{"pos":[22808,22838],"content":"UTF32Encoding(Boolean,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"UTF32Encoding(Boolean,Boolean)","pos":[0,30]}]},{"pos":[23036,23043],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[23162,23169],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[23370,23408],"content":"UTF32Encoding(Boolean,Boolean,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"UTF32Encoding(Boolean,Boolean,Boolean)","pos":[0,38]}]},{"pos":[23622,23629],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[23748,23755],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[23874,23881],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[24052,24066],"content":"Equals(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[24232,24239],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[24357,24363],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24538,24558],"content":"GetByteCount(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetByteCount(String)","pos":[0,20]}]},{"pos":[24734,24739],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[24853,24859],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[25046,25071],"content":"GetByteCount(Char*,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetByteCount(Char*,Int32)","pos":[0,25]}]},{"pos":[25257,25262],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[25375,25380],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[25579,25611],"content":"GetByteCount(Char[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetByteCount(Char[],Int32,Int32)","pos":[0,32]}]},{"pos":[25811,25816],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[25928,25932],"content":"Char","needQuote":true,"needEscape":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[26045,26050],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[26163,26168],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[26375,26408],"content":"GetBytes(Char<bpt id=\"p1\">*</bpt>,Int32,Byte<ept id=\"p1\">*</ept>,Int32)","needQuote":true,"needEscape":true,"source":"GetBytes(Char*,Int32,Byte*,Int32)"},{"pos":[26610,26615],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[26728,26733],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[26846,26851],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[27073,27114],"content":"GetBytes(Char[],Int32,Int32,Byte[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetBytes(Char[],Int32,Int32,Byte[],Int32)","pos":[0,41]}]},{"pos":[27332,27337],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[27449,27453],"content":"Char","needQuote":true,"needEscape":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[27566,27571],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[27684,27689],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[27801,27805],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[27918,27923],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28145,28186],"content":"GetBytes(String,Int32,Int32,Byte[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetBytes(String,Int32,Int32,Byte[],Int32)","pos":[0,41]}]},{"pos":[28404,28409],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28523,28529],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[28644,28649],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28762,28767],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28879,28883],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[28996,29001],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[29186,29211],"content":"GetCharCount(Byte*,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetCharCount(Byte*,Int32)","pos":[0,25]}]},{"pos":[29397,29402],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[29515,29520],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[29719,29751],"content":"GetCharCount(Byte[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetCharCount(Byte[],Int32,Int32)","pos":[0,32]}]},{"pos":[29951,29956],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[30068,30072],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[30185,30190],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[30303,30308],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[30515,30548],"content":"GetChars(Byte<bpt id=\"p1\">*</bpt>,Int32,Char<ept id=\"p1\">*</ept>,Int32)","needQuote":true,"needEscape":true,"source":"GetChars(Byte*,Int32,Char*,Int32)"},{"pos":[30750,30755],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[30868,30873],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[30986,30991],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[31213,31254],"content":"GetChars(Byte[],Int32,Int32,Char[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetChars(Byte[],Int32,Int32,Char[],Int32)","pos":[0,41]}]},{"pos":[31472,31477],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[31589,31593],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[31706,31711],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[31824,31829],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[31941,31945],"content":"Char","needQuote":true,"needEscape":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[32058,32063],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[32219,32231],"content":"GetDecoder()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetDecoder()","pos":[0,12]}]},{"pos":[32403,32410],"content":"Decoder","needQuote":true,"needEscape":true,"nodes":[{"content":"Decoder","pos":[0,7]}]},{"pos":[32575,32587],"content":"GetEncoder()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetEncoder()","pos":[0,12]}]},{"pos":[32759,32766],"content":"Encoder","needQuote":true,"needEscape":true,"nodes":[{"content":"Encoder","pos":[0,7]}]},{"pos":[32932,32945],"content":"GetHashCode()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[33107,33112],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[33287,33309],"content":"GetMaxByteCount(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetMaxByteCount(Int32)","pos":[0,22]}]},{"pos":[33489,33494],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[33607,33612],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[33787,33809],"content":"GetMaxCharCount(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetMaxCharCount(Int32)","pos":[0,22]}]},{"pos":[33989,33994],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[34107,34112],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[34269,34282],"content":"GetPreamble()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetPreamble()","pos":[0,13]}]},{"pos":[34443,34447],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[34643,34672],"content":"GetString(Byte[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetString(Byte[],Int32,Int32)","pos":[0,29]}]},{"pos":[34867,34873],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[34987,34991],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[35104,35109],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[35222,35227],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Text.UTF32Encoding\n  id: UTF32Encoding\n  children:\n  - System.Text.UTF32Encoding.#ctor\n  - System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean)\n  - System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean,System.Boolean)\n  - System.Text.UTF32Encoding.Equals(System.Object)\n  - System.Text.UTF32Encoding.GetByteCount(System.String)\n  - System.Text.UTF32Encoding.GetByteCount(System.Char*,System.Int32)\n  - System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - System.Text.UTF32Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  - System.Text.UTF32Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Text.UTF32Encoding.GetCharCount(System.Byte*,System.Int32)\n  - System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - System.Text.UTF32Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  - System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - System.Text.UTF32Encoding.GetDecoder\n  - System.Text.UTF32Encoding.GetEncoder\n  - System.Text.UTF32Encoding.GetHashCode\n  - System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\n  - System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)\n  - System.Text.UTF32Encoding.GetPreamble\n  - System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  langs:\n  - csharp\n  name: UTF32Encoding\n  nameWithType: UTF32Encoding\n  fullName: System.Text.UTF32Encoding\n  type: Class\n  syntax:\n    content: 'public sealed class UTF32Encoding : System.Text.Encoding'\n  inheritance:\n  - System.Object\n  - System.Text.Encoding\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Text.Encoding.ASCII\n  - System.Text.Encoding.BigEndianUnicode\n  - System.Text.Encoding.BodyName\n  - System.Text.Encoding.Clone\n  - System.Text.Encoding.CodePage\n  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n  - System.Text.Encoding.DecoderFallback\n  - System.Text.Encoding.Default\n  - System.Text.Encoding.EncoderFallback\n  - System.Text.Encoding.EncodingName\n  - System.Text.Encoding.GetByteCount(System.Char[])\n  - System.Text.Encoding.GetBytes(System.Char[])\n  - System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n  - System.Text.Encoding.GetBytes(System.String)\n  - System.Text.Encoding.GetCharCount(System.Byte[])\n  - System.Text.Encoding.GetChars(System.Byte[])\n  - System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n  - System.Text.Encoding.GetEncoding(System.Int32)\n  - System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  - System.Text.Encoding.GetEncoding(System.String)\n  - System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  - System.Text.Encoding.GetEncodings\n  - System.Text.Encoding.GetString(System.Byte*,System.Int32)\n  - System.Text.Encoding.GetString(System.Byte[])\n  - System.Text.Encoding.HeaderName\n  - System.Text.Encoding.IsAlwaysNormalized\n  - System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n  - System.Text.Encoding.IsBrowserDisplay\n  - System.Text.Encoding.IsBrowserSave\n  - System.Text.Encoding.IsMailNewsDisplay\n  - System.Text.Encoding.IsMailNewsSave\n  - System.Text.Encoding.IsReadOnly\n  - System.Text.Encoding.IsSingleByte\n  - System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n  - System.Text.Encoding.Unicode\n  - System.Text.Encoding.UTF32\n  - System.Text.Encoding.UTF7\n  - System.Text.Encoding.UTF8\n  - System.Text.Encoding.WebName\n  - System.Text.Encoding.WindowsCodePage\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF32Encoding.#ctor\n  id: '#ctor'\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  name: UTF32Encoding()\n  nameWithType: UTF32Encoding.UTF32Encoding()\n  fullName: System.Text.UTF32Encoding.UTF32Encoding()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public UTF32Encoding ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean)\n  id: '#ctor(System.Boolean,System.Boolean)'\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  name: UTF32Encoding(Boolean,Boolean)\n  nameWithType: UTF32Encoding.UTF32Encoding(Boolean,Boolean)\n  fullName: System.Text.UTF32Encoding.UTF32Encoding(Boolean,Boolean)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public UTF32Encoding (bool bigEndian, bool byteOrderMark);\n    parameters:\n    - id: bigEndian\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: byteOrderMark\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean,System.Boolean)\n  id: '#ctor(System.Boolean,System.Boolean,System.Boolean)'\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  name: UTF32Encoding(Boolean,Boolean,Boolean)\n  nameWithType: UTF32Encoding.UTF32Encoding(Boolean,Boolean,Boolean)\n  fullName: System.Text.UTF32Encoding.UTF32Encoding(Boolean,Boolean,Boolean)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public UTF32Encoding (bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters);\n    parameters:\n    - id: bigEndian\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: byteOrderMark\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: throwOnInvalidCharacters\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF32Encoding.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: UTF32Encoding.Equals(Object)\n  fullName: System.Text.UTF32Encoding.Equals(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override bool Equals (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF32Encoding.GetByteCount(System.String)\n  id: GetByteCount(System.String)\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  name: GetByteCount(String)\n  nameWithType: UTF32Encoding.GetByteCount(String)\n  fullName: System.Text.UTF32Encoding.GetByteCount(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override int GetByteCount (string s);\n    parameters:\n    - id: s\n      type: System.String\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Text.UTF32Encoding.GetByteCount*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF32Encoding.GetByteCount(System.Char*,System.Int32)\n  id: GetByteCount(System.Char*,System.Int32)\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  name: GetByteCount(Char*,Int32)\n  nameWithType: UTF32Encoding.GetByteCount(Char*,Int32)\n  fullName: System.Text.UTF32Encoding.GetByteCount(Char*,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override int GetByteCount (char* chars, int count);\n    parameters:\n    - id: chars\n      type: System.Char*\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Text.UTF32Encoding.GetByteCount*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  id: GetByteCount(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  name: GetByteCount(Char[],Int32,Int32)\n  nameWithType: UTF32Encoding.GetByteCount(Char[],Int32,Int32)\n  fullName: System.Text.UTF32Encoding.GetByteCount(Char[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override int GetByteCount (char[] chars, int index, int count);\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: Parameter description to be filled\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Text.UTF32Encoding.GetByteCount*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF32Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  id: GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  name: GetBytes(Char*,Int32,Byte*,Int32)\n  nameWithType: UTF32Encoding.GetBytes(Char*,Int32,Byte*,Int32)\n  fullName: System.Text.UTF32Encoding.GetBytes(Char*,Int32,Byte*,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);\n    parameters:\n    - id: chars\n      type: System.Char*\n      description: Parameter description to be filled\n    - id: charCount\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: bytes\n      type: System.Byte*\n      description: Parameter description to be filled\n    - id: byteCount\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Text.UTF32Encoding.GetBytes*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF32Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  name: GetBytes(Char[],Int32,Int32,Byte[],Int32)\n  nameWithType: UTF32Encoding.GetBytes(Char[],Int32,Int32,Byte[],Int32)\n  fullName: System.Text.UTF32Encoding.GetBytes(Char[],Int32,Int32,Byte[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: Parameter description to be filled\n    - id: charIndex\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: charCount\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: bytes\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: byteIndex\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Text.UTF32Encoding.GetBytes*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  name: GetBytes(String,Int32,Int32,Byte[],Int32)\n  nameWithType: UTF32Encoding.GetBytes(String,Int32,Int32,Byte[],Int32)\n  fullName: System.Text.UTF32Encoding.GetBytes(String,Int32,Int32,Byte[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);\n    parameters:\n    - id: s\n      type: System.String\n      description: Parameter description to be filled\n    - id: charIndex\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: charCount\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: bytes\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: byteIndex\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Text.UTF32Encoding.GetBytes*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF32Encoding.GetCharCount(System.Byte*,System.Int32)\n  id: GetCharCount(System.Byte*,System.Int32)\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  name: GetCharCount(Byte*,Int32)\n  nameWithType: UTF32Encoding.GetCharCount(Byte*,Int32)\n  fullName: System.Text.UTF32Encoding.GetCharCount(Byte*,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override int GetCharCount (byte* bytes, int count);\n    parameters:\n    - id: bytes\n      type: System.Byte*\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Text.UTF32Encoding.GetCharCount*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  id: GetCharCount(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  name: GetCharCount(Byte[],Int32,Int32)\n  nameWithType: UTF32Encoding.GetCharCount(Byte[],Int32,Int32)\n  fullName: System.Text.UTF32Encoding.GetCharCount(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override int GetCharCount (byte[] bytes, int index, int count);\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Text.UTF32Encoding.GetCharCount*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF32Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  id: GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  name: GetChars(Byte*,Int32,Char*,Int32)\n  nameWithType: UTF32Encoding.GetChars(Byte*,Int32,Char*,Int32)\n  fullName: System.Text.UTF32Encoding.GetChars(Byte*,Int32,Char*,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);\n    parameters:\n    - id: bytes\n      type: System.Byte*\n      description: Parameter description to be filled\n    - id: byteCount\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: chars\n      type: System.Char*\n      description: Parameter description to be filled\n    - id: charCount\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Text.UTF32Encoding.GetChars*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  name: GetChars(Byte[],Int32,Int32,Char[],Int32)\n  nameWithType: UTF32Encoding.GetChars(Byte[],Int32,Int32,Char[],Int32)\n  fullName: System.Text.UTF32Encoding.GetChars(Byte[],Int32,Int32,Char[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: byteIndex\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: byteCount\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: chars\n      type: System.Char[]\n      description: Parameter description to be filled\n    - id: charIndex\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Text.UTF32Encoding.GetChars*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF32Encoding.GetDecoder\n  id: GetDecoder\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  name: GetDecoder()\n  nameWithType: UTF32Encoding.GetDecoder()\n  fullName: System.Text.UTF32Encoding.GetDecoder()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override System.Text.Decoder GetDecoder ();\n    parameters: []\n    return:\n      type: System.Text.Decoder\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF32Encoding.GetEncoder\n  id: GetEncoder\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  name: GetEncoder()\n  nameWithType: UTF32Encoding.GetEncoder()\n  fullName: System.Text.UTF32Encoding.GetEncoder()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override System.Text.Encoder GetEncoder ();\n    parameters: []\n    return:\n      type: System.Text.Encoder\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF32Encoding.GetHashCode\n  id: GetHashCode\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: UTF32Encoding.GetHashCode()\n  fullName: System.Text.UTF32Encoding.GetHashCode()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\n  id: GetMaxByteCount(System.Int32)\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  name: GetMaxByteCount(Int32)\n  nameWithType: UTF32Encoding.GetMaxByteCount(Int32)\n  fullName: System.Text.UTF32Encoding.GetMaxByteCount(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override int GetMaxByteCount (int charCount);\n    parameters:\n    - id: charCount\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)\n  id: GetMaxCharCount(System.Int32)\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  name: GetMaxCharCount(Int32)\n  nameWithType: UTF32Encoding.GetMaxCharCount(Int32)\n  fullName: System.Text.UTF32Encoding.GetMaxCharCount(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override int GetMaxCharCount (int byteCount);\n    parameters:\n    - id: byteCount\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF32Encoding.GetPreamble\n  id: GetPreamble\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  name: GetPreamble()\n  nameWithType: UTF32Encoding.GetPreamble()\n  fullName: System.Text.UTF32Encoding.GetPreamble()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override byte[] GetPreamble ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  id: GetString(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  name: GetString(Byte[],Int32,Int32)\n  nameWithType: UTF32Encoding.GetString(Byte[],Int32,Int32)\n  fullName: System.Text.UTF32Encoding.GetString(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override string GetString (byte[] bytes, int index, int count);\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.String\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Text.Encoding\n  isExternal: false\n  name: System.Text.Encoding\n- uid: System.Text.UTF32Encoding.#ctor\n  parent: System.Text.UTF32Encoding\n  isExternal: false\n  name: UTF32Encoding()\n  nameWithType: UTF32Encoding.UTF32Encoding()\n  fullName: System.Text.UTF32Encoding.UTF32Encoding()\n- uid: System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean)\n  parent: System.Text.UTF32Encoding\n  isExternal: false\n  name: UTF32Encoding(Boolean,Boolean)\n  nameWithType: UTF32Encoding.UTF32Encoding(Boolean,Boolean)\n  fullName: System.Text.UTF32Encoding.UTF32Encoding(Boolean,Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean,System.Boolean)\n  parent: System.Text.UTF32Encoding\n  isExternal: false\n  name: UTF32Encoding(Boolean,Boolean,Boolean)\n  nameWithType: UTF32Encoding.UTF32Encoding(Boolean,Boolean,Boolean)\n  fullName: System.Text.UTF32Encoding.UTF32Encoding(Boolean,Boolean,Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Text.UTF32Encoding.Equals(System.Object)\n  parent: System.Text.UTF32Encoding\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: UTF32Encoding.Equals(Object)\n  fullName: System.Text.UTF32Encoding.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Text.UTF32Encoding.GetByteCount(System.String)\n  parent: System.Text.UTF32Encoding\n  isExternal: false\n  name: GetByteCount(String)\n  nameWithType: UTF32Encoding.GetByteCount(String)\n  fullName: System.Text.UTF32Encoding.GetByteCount(String)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Text.UTF32Encoding.GetByteCount(System.Char*,System.Int32)\n  parent: System.Text.UTF32Encoding\n  isExternal: false\n  name: GetByteCount(Char*,Int32)\n  nameWithType: UTF32Encoding.GetByteCount(Char*,Int32)\n  fullName: System.Text.UTF32Encoding.GetByteCount(Char*,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.UTF32Encoding\n  isExternal: false\n  name: GetByteCount(Char[],Int32,Int32)\n  nameWithType: UTF32Encoding.GetByteCount(Char[],Int32,Int32)\n  fullName: System.Text.UTF32Encoding.GetByteCount(Char[],Int32,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  nameWithType: Char\n  fullName: System.Char[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.UTF32Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  parent: System.Text.UTF32Encoding\n  isExternal: false\n  name: GetBytes(Char*,Int32,Byte*,Int32)\n  nameWithType: UTF32Encoding.GetBytes(Char*,Int32,Byte*,Int32)\n  fullName: System.Text.UTF32Encoding.GetBytes(Char*,Int32,Byte*,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.UTF32Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.UTF32Encoding\n  isExternal: false\n  name: GetBytes(Char[],Int32,Int32,Byte[],Int32)\n  nameWithType: UTF32Encoding.GetBytes(Char[],Int32,Int32,Byte[],Int32)\n  fullName: System.Text.UTF32Encoding.GetBytes(Char[],Int32,Int32,Byte[],Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  nameWithType: Char\n  fullName: System.Char[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.UTF32Encoding\n  isExternal: false\n  name: GetBytes(String,Int32,Int32,Byte[],Int32)\n  nameWithType: UTF32Encoding.GetBytes(String,Int32,Int32,Byte[],Int32)\n  fullName: System.Text.UTF32Encoding.GetBytes(String,Int32,Int32,Byte[],Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.UTF32Encoding.GetCharCount(System.Byte*,System.Int32)\n  parent: System.Text.UTF32Encoding\n  isExternal: false\n  name: GetCharCount(Byte*,Int32)\n  nameWithType: UTF32Encoding.GetCharCount(Byte*,Int32)\n  fullName: System.Text.UTF32Encoding.GetCharCount(Byte*,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.UTF32Encoding\n  isExternal: false\n  name: GetCharCount(Byte[],Int32,Int32)\n  nameWithType: UTF32Encoding.GetCharCount(Byte[],Int32,Int32)\n  fullName: System.Text.UTF32Encoding.GetCharCount(Byte[],Int32,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.UTF32Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  parent: System.Text.UTF32Encoding\n  isExternal: false\n  name: GetChars(Byte*,Int32,Char*,Int32)\n  nameWithType: UTF32Encoding.GetChars(Byte*,Int32,Char*,Int32)\n  fullName: System.Text.UTF32Encoding.GetChars(Byte*,Int32,Char*,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  parent: System.Text.UTF32Encoding\n  isExternal: false\n  name: GetChars(Byte[],Int32,Int32,Char[],Int32)\n  nameWithType: UTF32Encoding.GetChars(Byte[],Int32,Int32,Char[],Int32)\n  fullName: System.Text.UTF32Encoding.GetChars(Byte[],Int32,Int32,Char[],Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  nameWithType: Char\n  fullName: System.Char[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.UTF32Encoding.GetDecoder\n  parent: System.Text.UTF32Encoding\n  isExternal: false\n  name: GetDecoder()\n  nameWithType: UTF32Encoding.GetDecoder()\n  fullName: System.Text.UTF32Encoding.GetDecoder()\n- uid: System.Text.Decoder\n  parent: System.Text\n  isExternal: false\n  name: Decoder\n  nameWithType: Decoder\n  fullName: System.Text.Decoder\n- uid: System.Text.UTF32Encoding.GetEncoder\n  parent: System.Text.UTF32Encoding\n  isExternal: false\n  name: GetEncoder()\n  nameWithType: UTF32Encoding.GetEncoder()\n  fullName: System.Text.UTF32Encoding.GetEncoder()\n- uid: System.Text.Encoder\n  parent: System.Text\n  isExternal: false\n  name: Encoder\n  nameWithType: Encoder\n  fullName: System.Text.Encoder\n- uid: System.Text.UTF32Encoding.GetHashCode\n  parent: System.Text.UTF32Encoding\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: UTF32Encoding.GetHashCode()\n  fullName: System.Text.UTF32Encoding.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\n  parent: System.Text.UTF32Encoding\n  isExternal: false\n  name: GetMaxByteCount(Int32)\n  nameWithType: UTF32Encoding.GetMaxByteCount(Int32)\n  fullName: System.Text.UTF32Encoding.GetMaxByteCount(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)\n  parent: System.Text.UTF32Encoding\n  isExternal: false\n  name: GetMaxCharCount(Int32)\n  nameWithType: UTF32Encoding.GetMaxCharCount(Int32)\n  fullName: System.Text.UTF32Encoding.GetMaxCharCount(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.UTF32Encoding.GetPreamble\n  parent: System.Text.UTF32Encoding\n  isExternal: false\n  name: GetPreamble()\n  nameWithType: UTF32Encoding.GetPreamble()\n  fullName: System.Text.UTF32Encoding.GetPreamble()\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.UTF32Encoding\n  isExternal: false\n  name: GetString(Byte[],Int32,Int32)\n  nameWithType: UTF32Encoding.GetString(Byte[],Int32,Int32)\n  fullName: System.Text.UTF32Encoding.GetString(Byte[],Int32,Int32)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.UTF32Encoding.GetByteCount*\n  parent: System.Text.UTF32Encoding\n  isExternal: false\n  nameWithType: UTF32Encoding.\n- uid: System.Text.UTF32Encoding.GetBytes*\n  parent: System.Text.UTF32Encoding\n  isExternal: false\n  nameWithType: UTF32Encoding.\n- uid: System.Text.UTF32Encoding.GetCharCount*\n  parent: System.Text.UTF32Encoding\n  isExternal: false\n  nameWithType: UTF32Encoding.\n- uid: System.Text.UTF32Encoding.GetChars*\n  parent: System.Text.UTF32Encoding\n  isExternal: false\n  nameWithType: UTF32Encoding.\n"}