{"nodes":[{"pos":[2783,2798],"content":"IVector<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"IVector<TValue>"},{"pos":[3126,3160],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3548,3567],"content":"assign(IEnumerable)","needQuote":true,"needEscape":true,"nodes":[{"content":"assign(IEnumerable)","pos":[0,19]}]},{"pos":[3967,4001],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4443,4496],"content":"assign(IInputIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,IInputIterator<ph id=\"ph2\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"assign(IInputIterator<TValue>,IInputIterator<TValue>)"},{"pos":[5071,5105],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5203,5237],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5511,5531],"content":"assign(Int32,TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"assign(Int32,TValue)","pos":[0,20]}]},{"pos":[5901,5935],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5989,6023],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6283,6292],"content":"at(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"at(Int32)","pos":[0,9]}]},{"pos":[6621,6655],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6707,6741],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6922,6928],"content":"back()","needQuote":true,"needEscape":true,"nodes":[{"content":"back()","pos":[0,6]}]},{"pos":[7240,7274],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7465,7474],"content":"back_item","needQuote":true,"needEscape":true,"nodes":[{"content":"back_item","pos":[0,9]}]},{"pos":[7789,7823],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8140,8184],"content":"begin(ContainerRandomAccessIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"begin(ContainerRandomAccessIterator<TValue>)"},{"pos":[8753,8787],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8895,8929],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9118,9128],"content":"capacity()","needQuote":true,"needEscape":true,"nodes":[{"content":"capacity()","pos":[0,10]}]},{"pos":[9454,9488],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9671,9678],"content":"clear()","needQuote":true,"needEscape":true,"nodes":[{"content":"clear()","pos":[0,7]}]},{"pos":[10122,10129],"content":"empty()","needQuote":true,"needEscape":true,"nodes":[{"content":"empty()","pos":[0,7]}]},{"pos":[10449,10483],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10796,10838],"content":"end(ContainerRandomAccessIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"end(ContainerRandomAccessIterator<TValue>)"},{"pos":[11401,11435],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11543,11577],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12020,12094],"content":"erase(ContainerRandomAccessIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,ContainerRandomAccessIterator)","needQuote":true,"needEscape":true,"source":"erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator)"},{"pos":[12794,12828],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12940,12974],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13082,13116],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13739,13843],"content":"erase(ContainerRandomAccessIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,ContainerRandomAccessIterator,ContainerRandomAccessIterator)","needQuote":true,"needEscape":true,"source":"erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,ContainerRandomAccessIterator)"},{"pos":[14683,14717],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14834,14868],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14984,15018],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15126,15160],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15397,15404],"content":"front()","needQuote":true,"needEscape":true,"nodes":[{"content":"front()","pos":[0,7]}]},{"pos":[15719,15753],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15946,15956],"content":"front_item","needQuote":true,"needEscape":true,"nodes":[{"content":"front_item","pos":[0,10]}]},{"pos":[16274,16308],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16683,16732],"content":"insert(ContainerRandomAccessIterator,IEnumerable)","needQuote":true,"needEscape":true,"nodes":[{"content":"insert(ContainerRandomAccessIterator,IEnumerable)","pos":[0,49]}]},{"pos":[17305,17339],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17419,17453],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18021,18104],"content":"insert(ContainerRandomAccessIterator,IInputIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,IInputIterator<ph id=\"ph2\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"insert(ContainerRandomAccessIterator,IInputIterator<TValue>,IInputIterator<TValue>)"},{"pos":[18823,18857],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18956,18990],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19088,19122],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19522,19572],"content":"insert(ContainerRandomAccessIterator,Int32,TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"insert(ContainerRandomAccessIterator,Int32,TValue)","pos":[0,50]}]},{"pos":[20123,20157],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20219,20253],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20307,20341],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20847,20929],"content":"insert(ContainerRandomAccessIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,ContainerRandomAccessIterator,TValue)","needQuote":true,"needEscape":true,"source":"insert(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,TValue)"},{"pos":[21659,21693],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21805,21839],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21893,21927],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22035,22069],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22333,22344],"content":"Item(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"Item(Int32)","pos":[0,11]}]},{"pos":[22693,22727],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22778,22812],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[23001,23011],"content":"pop_back()","needQuote":true,"needEscape":true,"nodes":[{"content":"pop_back()","pos":[0,10]}]},{"pos":[23480,23497],"content":"push_back(TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"push_back(TValue)","pos":[0,17]}]},{"pos":[23844,23878],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[24193,24236],"content":"rbegin(ReverseRandomAccessIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"rbegin(ReverseRandomAccessIterator<TValue>)"},{"pos":[24800,24834],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[24942,24976],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[25287,25328],"content":"rend(ReverseRandomAccessIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"rend(ReverseRandomAccessIterator<TValue>)"},{"pos":[25886,25920],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[26028,26062],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[26277,26291],"content":"reserve(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"reserve(Int32)","pos":[0,14]}]},{"pos":[26643,26677],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[26890,26903],"content":"resize(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"resize(Int32)","pos":[0,13]}]},{"pos":[27250,27284],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[27558,27578],"content":"resize(Int32,TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"resize(Int32,TValue)","pos":[0,20]}]},{"pos":[27952,27986],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[28040,28074],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[28310,28316],"content":"size()","needQuote":true,"needEscape":true,"nodes":[{"content":"size()","pos":[0,6]}]},{"pos":[28630,28664],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[28917,28938],"content":"swap(IVector<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"swap(IVector<TValue>)"},{"pos":[29348,29382],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[29598,29617],"content":"assign(IEnumerable)","needQuote":true,"needEscape":true,"nodes":[{"content":"assign(IEnumerable)","pos":[0,19]}]},{"pos":[29838,29849],"content":"IEnumerable","needQuote":true,"needEscape":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[30144,30197],"content":"assign(IInputIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,IInputIterator<ph id=\"ph2\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"assign(IInputIterator<TValue>,IInputIterator<TValue>)"},{"pos":[30519,30541],"content":"IInputIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"IInputIterator<TValue>"},{"pos":[30777,30799],"content":"IInputIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"IInputIterator<TValue>"},{"pos":[31046,31066],"content":"assign(Int32,TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"assign(Int32,TValue)","pos":[0,20]}]},{"pos":[31259,31264],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[31366,31372],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[31547,31556],"content":"at(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"at(Int32)","pos":[0,9]}]},{"pos":[31727,31732],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[31900,31906],"content":"back()","needQuote":true,"needEscape":true,"nodes":[{"content":"back()","pos":[0,6]}]},{"pos":[32131,32140],"content":"back_item","needQuote":true,"needEscape":true,"nodes":[{"content":"back_item","pos":[0,9]}]},{"pos":[32300,32306],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[32537,32581],"content":"begin(ContainerRandomAccessIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"begin(ContainerRandomAccessIterator<TValue>)"},{"pos":[32900,32937],"content":"ContainerRandomAccessIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"ContainerRandomAccessIterator<TValue>"},{"pos":[33199,33209],"content":"capacity()","needQuote":true,"needEscape":true,"nodes":[{"content":"capacity()","pos":[0,10]}]},{"pos":[33382,33387],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[33556,33563],"content":"clear()","needQuote":true,"needEscape":true,"nodes":[{"content":"clear()","pos":[0,7]}]},{"pos":[33786,33793],"content":"empty()","needQuote":true,"needEscape":true,"nodes":[{"content":"empty()","pos":[0,7]}]},{"pos":[33962,33969],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[34207,34249],"content":"end(ContainerRandomAccessIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"end(ContainerRandomAccessIterator<TValue>)"},{"pos":[34564,34601],"content":"ContainerRandomAccessIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"ContainerRandomAccessIterator<TValue>"},{"pos":[34990,35064],"content":"erase(ContainerRandomAccessIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,ContainerRandomAccessIterator)","needQuote":true,"needEscape":true,"source":"erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator)"},{"pos":[35443,35480],"content":"ContainerRandomAccessIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"ContainerRandomAccessIterator<TValue>"},{"pos":[35758,35787],"content":"ContainerRandomAccessIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerRandomAccessIterator","pos":[0,29]}]},{"pos":[36223,36327],"content":"erase(ContainerRandomAccessIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,ContainerRandomAccessIterator,ContainerRandomAccessIterator)","needQuote":true,"needEscape":true,"source":"erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,ContainerRandomAccessIterator)"},{"pos":[36766,36803],"content":"ContainerRandomAccessIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"ContainerRandomAccessIterator<TValue>"},{"pos":[37081,37110],"content":"ContainerRandomAccessIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerRandomAccessIterator","pos":[0,29]}]},{"pos":[37372,37401],"content":"ContainerRandomAccessIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerRandomAccessIterator","pos":[0,29]}]},{"pos":[37644,37651],"content":"front()","needQuote":true,"needEscape":true,"nodes":[{"content":"front()","pos":[0,7]}]},{"pos":[37879,37889],"content":"front_item","needQuote":true,"needEscape":true,"nodes":[{"content":"front_item","pos":[0,10]}]},{"pos":[38051,38057],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[38317,38366],"content":"insert(ContainerRandomAccessIterator,IEnumerable)","needQuote":true,"needEscape":true,"nodes":[{"content":"insert(ContainerRandomAccessIterator,IEnumerable)","pos":[0,49]}]},{"pos":[38692,38721],"content":"ContainerRandomAccessIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerRandomAccessIterator","pos":[0,29]}]},{"pos":[38938,38949],"content":"IEnumerable","needQuote":true,"needEscape":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[39307,39390],"content":"insert(ContainerRandomAccessIterator,IInputIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,IInputIterator<ph id=\"ph2\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"insert(ContainerRandomAccessIterator,IInputIterator<TValue>,IInputIterator<TValue>)"},{"pos":[39784,39813],"content":"ContainerRandomAccessIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerRandomAccessIterator","pos":[0,29]}]},{"pos":[40063,40085],"content":"IInputIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"IInputIterator<TValue>"},{"pos":[40321,40343],"content":"IInputIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"IInputIterator<TValue>"},{"pos":[40653,40703],"content":"insert(ContainerRandomAccessIterator,Int32,TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"insert(ContainerRandomAccessIterator,Int32,TValue)","pos":[0,50]}]},{"pos":[41031,41060],"content":"ContainerRandomAccessIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerRandomAccessIterator","pos":[0,29]}]},{"pos":[41247,41252],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[41354,41360],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[41658,41740],"content":"insert(ContainerRandomAccessIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,ContainerRandomAccessIterator,TValue)","needQuote":true,"needEscape":true,"source":"insert(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,TValue)"},{"pos":[42135,42172],"content":"ContainerRandomAccessIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"ContainerRandomAccessIterator<TValue>"},{"pos":[42450,42479],"content":"ContainerRandomAccessIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerRandomAccessIterator","pos":[0,29]}]},{"pos":[42655,42661],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[42838,42849],"content":"Item(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"Item(Int32)","pos":[0,11]}]},{"pos":[43013,43019],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[43127,43132],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[43304,43314],"content":"pop_back()","needQuote":true,"needEscape":true,"nodes":[{"content":"pop_back()","pos":[0,10]}]},{"pos":[43551,43568],"content":"push_back(TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"push_back(TValue)","pos":[0,17]}]},{"pos":[43744,43750],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[43980,44023],"content":"rbegin(ReverseRandomAccessIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"rbegin(ReverseRandomAccessIterator<TValue>)"},{"pos":[44338,44373],"content":"ReverseRandomAccessIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"ReverseRandomAccessIterator<TValue>"},{"pos":[44692,44733],"content":"rend(ReverseRandomAccessIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"rend(ReverseRandomAccessIterator<TValue>)"},{"pos":[45044,45079],"content":"ReverseRandomAccessIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"ReverseRandomAccessIterator<TValue>"},{"pos":[45350,45364],"content":"reserve(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"reserve(Int32)","pos":[0,14]}]},{"pos":[45545,45550],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[45734,45747],"content":"resize(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"resize(Int32)","pos":[0,13]}]},{"pos":[45926,45931],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[46118,46138],"content":"resize(Int32,TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"resize(Int32,TValue)","pos":[0,20]}]},{"pos":[46331,46336],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[46438,46444],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[46607,46613],"content":"size()","needQuote":true,"needEscape":true,"nodes":[{"content":"size()","pos":[0,6]}]},{"pos":[46778,46783],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[46987,47008],"content":"swap(IVector<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"swap(IVector<TValue>)"},{"pos":[47243,47258],"content":"IVector<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"IVector<TValue>"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.VisualC.StlClr.IVector`1\n  id: IVector`1\n  children:\n  - Microsoft.VisualC.StlClr.IVector`1.assign(System.Collections.IEnumerable)\n  - Microsoft.VisualC.StlClr.IVector`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  - Microsoft.VisualC.StlClr.IVector`1.assign(System.Int32,`0)\n  - Microsoft.VisualC.StlClr.IVector`1.at(System.Int32)\n  - Microsoft.VisualC.StlClr.IVector`1.back\n  - Microsoft.VisualC.StlClr.IVector`1.back_item\n  - Microsoft.VisualC.StlClr.IVector`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@)\n  - Microsoft.VisualC.StlClr.IVector`1.capacity\n  - Microsoft.VisualC.StlClr.IVector`1.clear\n  - Microsoft.VisualC.StlClr.IVector`1.empty\n  - Microsoft.VisualC.StlClr.IVector`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@)\n  - Microsoft.VisualC.StlClr.IVector`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.IVector`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  - Microsoft.VisualC.StlClr.IVector`1.front\n  - Microsoft.VisualC.StlClr.IVector`1.front_item\n  - Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,System.Collections.IEnumerable)\n  - Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  - Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,System.Int32,`0)\n  - Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,`0)\n  - Microsoft.VisualC.StlClr.IVector`1.Item(System.Int32)\n  - Microsoft.VisualC.StlClr.IVector`1.pop_back\n  - Microsoft.VisualC.StlClr.IVector`1.push_back(`0)\n  - Microsoft.VisualC.StlClr.IVector`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1@)\n  - Microsoft.VisualC.StlClr.IVector`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1@)\n  - Microsoft.VisualC.StlClr.IVector`1.reserve(System.Int32)\n  - Microsoft.VisualC.StlClr.IVector`1.resize(System.Int32)\n  - Microsoft.VisualC.StlClr.IVector`1.resize(System.Int32,`0)\n  - Microsoft.VisualC.StlClr.IVector`1.size\n  - Microsoft.VisualC.StlClr.IVector`1.swap(Microsoft.VisualC.StlClr.IVector`1)\n  langs:\n  - csharp\n  name: IVector<TValue>\n  nameWithType: IVector<TValue>\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>\n  type: Interface\n  syntax:\n    content: 'public interface IVector<TValue> : ICloneable, Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer<TValue>, System.Collections.ICollection'\n    typeParameters:\n    - id: TValue\n      description: Parameter description to be filled\n  implements:\n  - Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer<TValue>\n  - System.Collections.ICollection\n  - System.ICloneable\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IVector`1.assign(System.Collections.IEnumerable)\n  id: assign(System.Collections.IEnumerable)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  langs:\n  - csharp\n  name: assign(IEnumerable)\n  nameWithType: IVector<TValue>.assign(IEnumerable)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.assign(IEnumerable)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void assign (System.Collections.IEnumerable _Right);\n    parameters:\n    - id: _Right\n      type: System.Collections.IEnumerable\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.IVector`1.assign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IVector`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  id: assign(Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  langs:\n  - csharp\n  name: assign(IInputIterator<TValue>,IInputIterator<TValue>)\n  nameWithType: IVector<TValue>.assign(IInputIterator<TValue>,IInputIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.assign(IInputIterator<TValue>,IInputIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void assign (Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _First, Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _Last);\n    parameters:\n    - id: _First\n      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n      description: Parameter description to be filled\n    - id: _Last\n      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.IVector`1.assign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IVector`1.assign(System.Int32,`0)\n  id: assign(System.Int32,`0)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  langs:\n  - csharp\n  name: assign(Int32,TValue)\n  nameWithType: IVector<TValue>.assign(Int32,TValue)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.assign(Int32,TValue)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void assign (int _Count, TValue _Val);\n    parameters:\n    - id: _Count\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: _Val\n      type: TValue\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.IVector`1.assign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IVector`1.at(System.Int32)\n  id: at(System.Int32)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  langs:\n  - csharp\n  name: at(Int32)\n  nameWithType: IVector<TValue>.at(Int32)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.at(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public TValue at (int _Pos);\n    parameters:\n    - id: _Pos\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: TValue@\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IVector`1.back\n  id: back\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  langs:\n  - csharp\n  name: back()\n  nameWithType: IVector<TValue>.back()\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.back()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public TValue back ();\n    parameters: []\n    return:\n      type: TValue@\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IVector`1.back_item\n  id: back_item\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  langs:\n  - csharp\n  name: back_item\n  nameWithType: IVector<TValue>.back_item\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.back_item\n  type: Property\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public TValue back_item { get; set; }\n    return:\n      type: TValue\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IVector`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@)\n  id: begin(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  langs:\n  - csharp\n  name: begin(ContainerRandomAccessIterator<TValue>)\n  nameWithType: IVector<TValue>.begin(ContainerRandomAccessIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.begin(ContainerRandomAccessIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) begin (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator<TValue> );\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n      description: Parameter description to be filled\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IVector`1.capacity\n  id: capacity\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  langs:\n  - csharp\n  name: capacity()\n  nameWithType: IVector<TValue>.capacity()\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.capacity()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public int capacity ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IVector`1.clear\n  id: clear\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  langs:\n  - csharp\n  name: clear()\n  nameWithType: IVector<TValue>.clear()\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.clear()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void clear ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IVector`1.empty\n  id: empty\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  langs:\n  - csharp\n  name: empty()\n  nameWithType: IVector<TValue>.empty()\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.empty()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public bool empty ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IVector`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@)\n  id: end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  langs:\n  - csharp\n  name: end(ContainerRandomAccessIterator<TValue>)\n  nameWithType: IVector<TValue>.end(ContainerRandomAccessIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.end(ContainerRandomAccessIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) end (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator<TValue> );\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n      description: Parameter description to be filled\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IVector`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  id: erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  langs:\n  - csharp\n  name: erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator)\n  nameWithType: IVector<TValue>.erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) erase (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator<TValue> , Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Where);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n      description: Parameter description to be filled\n    - id: _Where\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n      description: Parameter description to be filled\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.IVector`1.erase*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IVector`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  id: erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  langs:\n  - csharp\n  name: erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,ContainerRandomAccessIterator)\n  nameWithType: IVector<TValue>.erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,ContainerRandomAccessIterator)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,ContainerRandomAccessIterator)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) erase (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator<TValue> , Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _First_iter, Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Last_iter);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n      description: Parameter description to be filled\n    - id: _First_iter\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n      description: Parameter description to be filled\n    - id: _Last_iter\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n      description: Parameter description to be filled\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.IVector`1.erase*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IVector`1.front\n  id: front\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  langs:\n  - csharp\n  name: front()\n  nameWithType: IVector<TValue>.front()\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.front()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public TValue front ();\n    parameters: []\n    return:\n      type: TValue@\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IVector`1.front_item\n  id: front_item\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  langs:\n  - csharp\n  name: front_item\n  nameWithType: IVector<TValue>.front_item\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.front_item\n  type: Property\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public TValue front_item { get; set; }\n    return:\n      type: TValue\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,System.Collections.IEnumerable)\n  id: insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,System.Collections.IEnumerable)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  langs:\n  - csharp\n  name: insert(ContainerRandomAccessIterator,IEnumerable)\n  nameWithType: IVector<TValue>.insert(ContainerRandomAccessIterator,IEnumerable)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.insert(ContainerRandomAccessIterator,IEnumerable)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void insert (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Where_iter, System.Collections.IEnumerable _Right);\n    parameters:\n    - id: _Where_iter\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n      description: Parameter description to be filled\n    - id: _Right\n      type: System.Collections.IEnumerable\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.IVector`1.insert*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  id: insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  langs:\n  - csharp\n  name: insert(ContainerRandomAccessIterator,IInputIterator<TValue>,IInputIterator<TValue>)\n  nameWithType: IVector<TValue>.insert(ContainerRandomAccessIterator,IInputIterator<TValue>,IInputIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.insert(ContainerRandomAccessIterator,IInputIterator<TValue>,IInputIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void insert (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Where, Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _First, Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _Last);\n    parameters:\n    - id: _Where\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n      description: Parameter description to be filled\n    - id: _First\n      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n      description: Parameter description to be filled\n    - id: _Last\n      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.IVector`1.insert*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,System.Int32,`0)\n  id: insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,System.Int32,`0)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  langs:\n  - csharp\n  name: insert(ContainerRandomAccessIterator,Int32,TValue)\n  nameWithType: IVector<TValue>.insert(ContainerRandomAccessIterator,Int32,TValue)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.insert(ContainerRandomAccessIterator,Int32,TValue)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void insert (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Where, int _Count, TValue _Val);\n    parameters:\n    - id: _Where\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n      description: Parameter description to be filled\n    - id: _Count\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: _Val\n      type: TValue\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.IVector`1.insert*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,`0)\n  id: insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,`0)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  langs:\n  - csharp\n  name: insert(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,TValue)\n  nameWithType: IVector<TValue>.insert(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,TValue)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.insert(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,TValue)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) insert (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator<TValue> , Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Where, TValue _Val);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n      description: Parameter description to be filled\n    - id: _Where\n      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n      description: Parameter description to be filled\n    - id: _Val\n      type: TValue\n      description: Parameter description to be filled\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.IVector`1.insert*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IVector`1.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: IVector<TValue>.Item(Int32)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.Item(Int32)\n  type: Property\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public TValue this[int _Pos] { get; set; }\n    parameters:\n    - id: _Pos\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: TValue\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IVector`1.pop_back\n  id: pop_back\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  langs:\n  - csharp\n  name: pop_back()\n  nameWithType: IVector<TValue>.pop_back()\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.pop_back()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void pop_back ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IVector`1.push_back(`0)\n  id: push_back(`0)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  langs:\n  - csharp\n  name: push_back(TValue)\n  nameWithType: IVector<TValue>.push_back(TValue)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.push_back(TValue)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void push_back (TValue _Val);\n    parameters:\n    - id: _Val\n      type: TValue\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IVector`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1@)\n  id: rbegin(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  langs:\n  - csharp\n  name: rbegin(ReverseRandomAccessIterator<TValue>)\n  nameWithType: IVector<TValue>.rbegin(ReverseRandomAccessIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.rbegin(ReverseRandomAccessIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) rbegin (ref Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator<TValue> );\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1\n      description: Parameter description to be filled\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IVector`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1@)\n  id: rend(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  langs:\n  - csharp\n  name: rend(ReverseRandomAccessIterator<TValue>)\n  nameWithType: IVector<TValue>.rend(ReverseRandomAccessIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.rend(ReverseRandomAccessIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) rend (ref Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator<TValue> );\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1\n      description: Parameter description to be filled\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IVector`1.reserve(System.Int32)\n  id: reserve(System.Int32)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  langs:\n  - csharp\n  name: reserve(Int32)\n  nameWithType: IVector<TValue>.reserve(Int32)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.reserve(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void reserve (int _Capacity);\n    parameters:\n    - id: _Capacity\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IVector`1.resize(System.Int32)\n  id: resize(System.Int32)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  langs:\n  - csharp\n  name: resize(Int32)\n  nameWithType: IVector<TValue>.resize(Int32)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.resize(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void resize (int _Newsize);\n    parameters:\n    - id: _Newsize\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.IVector`1.resize*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IVector`1.resize(System.Int32,`0)\n  id: resize(System.Int32,`0)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  langs:\n  - csharp\n  name: resize(Int32,TValue)\n  nameWithType: IVector<TValue>.resize(Int32,TValue)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.resize(Int32,TValue)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void resize (int _Newsize, TValue _Val);\n    parameters:\n    - id: _Newsize\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: _Val\n      type: TValue\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.IVector`1.resize*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IVector`1.size\n  id: size\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  langs:\n  - csharp\n  name: size()\n  nameWithType: IVector<TValue>.size()\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.size()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public int size ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IVector`1.swap(Microsoft.VisualC.StlClr.IVector`1)\n  id: swap(Microsoft.VisualC.StlClr.IVector`1)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  langs:\n  - csharp\n  name: swap(IVector<TValue>)\n  nameWithType: IVector<TValue>.swap(IVector<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.swap(IVector<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void swap (Microsoft.VisualC.StlClr.IVector<TValue> A_0);\n    parameters:\n    - id: A_0\n      type: Microsoft.VisualC.StlClr.IVector`1\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: Microsoft.VisualC.StlClr.IVector`1.assign(System.Collections.IEnumerable)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  name: assign(IEnumerable)\n  nameWithType: IVector<TValue>.assign(IEnumerable)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.assign(IEnumerable)\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  nameWithType: IEnumerable\n  fullName: System.Collections.IEnumerable\n- uid: Microsoft.VisualC.StlClr.IVector`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  name: assign(IInputIterator<TValue>,IInputIterator<TValue>)\n  nameWithType: IVector<TValue>.assign(IInputIterator<TValue>,IInputIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.assign(IInputIterator<TValue>,IInputIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: IInputIterator<TValue>\n  nameWithType: IInputIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: IInputIterator<TValue>\n  nameWithType: IInputIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.IVector`1.assign(System.Int32,`0)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  name: assign(Int32,TValue)\n  nameWithType: IVector<TValue>.assign(Int32,TValue)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.assign(Int32,TValue)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: Microsoft.VisualC.StlClr.IVector`1.at(System.Int32)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  name: at(Int32)\n  nameWithType: IVector<TValue>.at(Int32)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.at(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: Microsoft.VisualC.StlClr.IVector`1.back\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  name: back()\n  nameWithType: IVector<TValue>.back()\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.back()\n- uid: Microsoft.VisualC.StlClr.IVector`1.back_item\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  name: back_item\n  nameWithType: IVector<TValue>.back_item\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.back_item\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: Microsoft.VisualC.StlClr.IVector`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  name: begin(ContainerRandomAccessIterator<TValue>)\n  nameWithType: IVector<TValue>.begin(ContainerRandomAccessIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.begin(ContainerRandomAccessIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ContainerRandomAccessIterator<TValue>\n  nameWithType: ContainerRandomAccessIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.IVector`1.capacity\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  name: capacity()\n  nameWithType: IVector<TValue>.capacity()\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.capacity()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: Microsoft.VisualC.StlClr.IVector`1.clear\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  name: clear()\n  nameWithType: IVector<TValue>.clear()\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.clear()\n- uid: Microsoft.VisualC.StlClr.IVector`1.empty\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  name: empty()\n  nameWithType: IVector<TValue>.empty()\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.empty()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.VisualC.StlClr.IVector`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  name: end(ContainerRandomAccessIterator<TValue>)\n  nameWithType: IVector<TValue>.end(ContainerRandomAccessIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.end(ContainerRandomAccessIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ContainerRandomAccessIterator<TValue>\n  nameWithType: ContainerRandomAccessIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.IVector`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  name: erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator)\n  nameWithType: IVector<TValue>.erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ContainerRandomAccessIterator<TValue>\n  nameWithType: ContainerRandomAccessIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerRandomAccessIterator\n  nameWithType: ContainerRandomAccessIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n- uid: Microsoft.VisualC.StlClr.IVector`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  name: erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,ContainerRandomAccessIterator)\n  nameWithType: IVector<TValue>.erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,ContainerRandomAccessIterator)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,ContainerRandomAccessIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ContainerRandomAccessIterator<TValue>\n  nameWithType: ContainerRandomAccessIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerRandomAccessIterator\n  nameWithType: ContainerRandomAccessIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerRandomAccessIterator\n  nameWithType: ContainerRandomAccessIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n- uid: Microsoft.VisualC.StlClr.IVector`1.front\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  name: front()\n  nameWithType: IVector<TValue>.front()\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.front()\n- uid: Microsoft.VisualC.StlClr.IVector`1.front_item\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  name: front_item\n  nameWithType: IVector<TValue>.front_item\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.front_item\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,System.Collections.IEnumerable)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  name: insert(ContainerRandomAccessIterator,IEnumerable)\n  nameWithType: IVector<TValue>.insert(ContainerRandomAccessIterator,IEnumerable)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.insert(ContainerRandomAccessIterator,IEnumerable)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerRandomAccessIterator\n  nameWithType: ContainerRandomAccessIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  nameWithType: IEnumerable\n  fullName: System.Collections.IEnumerable\n- uid: Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  name: insert(ContainerRandomAccessIterator,IInputIterator<TValue>,IInputIterator<TValue>)\n  nameWithType: IVector<TValue>.insert(ContainerRandomAccessIterator,IInputIterator<TValue>,IInputIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.insert(ContainerRandomAccessIterator,IInputIterator<TValue>,IInputIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerRandomAccessIterator\n  nameWithType: ContainerRandomAccessIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n- uid: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: IInputIterator<TValue>\n  nameWithType: IInputIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: IInputIterator<TValue>\n  nameWithType: IInputIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,System.Int32,`0)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  name: insert(ContainerRandomAccessIterator,Int32,TValue)\n  nameWithType: IVector<TValue>.insert(ContainerRandomAccessIterator,Int32,TValue)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.insert(ContainerRandomAccessIterator,Int32,TValue)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerRandomAccessIterator\n  nameWithType: ContainerRandomAccessIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,`0)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  name: insert(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,TValue)\n  nameWithType: IVector<TValue>.insert(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,TValue)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.insert(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,TValue)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ContainerRandomAccessIterator<TValue>\n  nameWithType: ContainerRandomAccessIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerRandomAccessIterator\n  nameWithType: ContainerRandomAccessIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: Microsoft.VisualC.StlClr.IVector`1.Item(System.Int32)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: IVector<TValue>.Item(Int32)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.Item(Int32)\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: Microsoft.VisualC.StlClr.IVector`1.pop_back\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  name: pop_back()\n  nameWithType: IVector<TValue>.pop_back()\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.pop_back()\n- uid: Microsoft.VisualC.StlClr.IVector`1.push_back(`0)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  name: push_back(TValue)\n  nameWithType: IVector<TValue>.push_back(TValue)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.push_back(TValue)\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: Microsoft.VisualC.StlClr.IVector`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  name: rbegin(ReverseRandomAccessIterator<TValue>)\n  nameWithType: IVector<TValue>.rbegin(ReverseRandomAccessIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.rbegin(ReverseRandomAccessIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ReverseRandomAccessIterator<TValue>\n  nameWithType: ReverseRandomAccessIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.IVector`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  name: rend(ReverseRandomAccessIterator<TValue>)\n  nameWithType: IVector<TValue>.rend(ReverseRandomAccessIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.rend(ReverseRandomAccessIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ReverseRandomAccessIterator<TValue>\n  nameWithType: ReverseRandomAccessIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.IVector`1.reserve(System.Int32)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  name: reserve(Int32)\n  nameWithType: IVector<TValue>.reserve(Int32)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.reserve(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: Microsoft.VisualC.StlClr.IVector`1.resize(System.Int32)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  name: resize(Int32)\n  nameWithType: IVector<TValue>.resize(Int32)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.resize(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: Microsoft.VisualC.StlClr.IVector`1.resize(System.Int32,`0)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  name: resize(Int32,TValue)\n  nameWithType: IVector<TValue>.resize(Int32,TValue)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.resize(Int32,TValue)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: Microsoft.VisualC.StlClr.IVector`1.size\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  name: size()\n  nameWithType: IVector<TValue>.size()\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.size()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: Microsoft.VisualC.StlClr.IVector`1.swap(Microsoft.VisualC.StlClr.IVector`1)\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  name: swap(IVector<TValue>)\n  nameWithType: IVector<TValue>.swap(IVector<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.swap(IVector<TValue>)\n- uid: Microsoft.VisualC.StlClr.IVector`1\n  parent: Microsoft.VisualC.StlClr\n  isExternal: false\n  name: IVector<TValue>\n  nameWithType: IVector<TValue>\n  fullName: Microsoft.VisualC.StlClr.IVector<TValue>\n- uid: Microsoft.VisualC.StlClr.IVector`1.assign*\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  nameWithType: IVector<TValue>.\n- uid: Microsoft.VisualC.StlClr.IVector`1.erase*\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  nameWithType: IVector<TValue>.\n- uid: Microsoft.VisualC.StlClr.IVector`1.insert*\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  nameWithType: IVector<TValue>.\n- uid: Microsoft.VisualC.StlClr.IVector`1.resize*\n  parent: Microsoft.VisualC.StlClr.IVector`1\n  isExternal: false\n  nameWithType: IVector<TValue>.\n"}