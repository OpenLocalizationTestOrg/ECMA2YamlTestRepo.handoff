{"nodes":[{"pos":[1004,1028],"content":"RijndaelManagedTransform","needQuote":true,"needEscape":true,"nodes":[{"content":"RijndaelManagedTransform","pos":[0,24]}]},{"pos":[1961,1975],"content":"BlockSizeValue","needQuote":true,"needEscape":true,"nodes":[{"content":"BlockSizeValue","pos":[0,14]}]},{"pos":[2313,2347],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2592,2609],"content":"CanReuseTransform","needQuote":true,"needEscape":true,"nodes":[{"content":"CanReuseTransform","pos":[0,17]}]},{"pos":[2959,2993],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3256,3282],"content":"CanTransformMultipleBlocks","needQuote":true,"needEscape":true,"nodes":[{"content":"CanTransformMultipleBlocks","pos":[0,26]}]},{"pos":[3659,3693],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3914,3921],"content":"Clear()","needQuote":true,"needEscape":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[4417,4426],"content":"Dispose()","needQuote":true,"needEscape":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[4942,4956],"content":"InputBlockSize","needQuote":true,"needEscape":true,"nodes":[{"content":"InputBlockSize","pos":[0,14]}]},{"pos":[5294,5328],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5569,5584],"content":"OutputBlockSize","needQuote":true,"needEscape":true,"nodes":[{"content":"OutputBlockSize","pos":[0,15]}]},{"pos":[5925,5959],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6180,6187],"content":"Reset()","needQuote":true,"needEscape":true,"nodes":[{"content":"Reset()","pos":[0,7]}]},{"pos":[6833,6880],"content":"TransformBlock(Byte[],Int32,Int32,Byte[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"TransformBlock(Byte[],Int32,Int32,Byte[],Int32)","pos":[0,47]}]},{"pos":[7394,7428],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7495,7529],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7595,7629],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7698,7732],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7800,7834],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7891,7925],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8256,8295],"content":"TransformFinalBlock(Byte[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"TransformFinalBlock(Byte[],Int32,Int32)","pos":[0,39]}]},{"pos":[8762,8796],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8863,8897],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8963,8997],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9055,9089],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9200,9213],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[9382,9396],"content":"BlockSizeValue","needQuote":true,"needEscape":true,"nodes":[{"content":"BlockSizeValue","pos":[0,14]}]},{"pos":[9599,9604],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[9823,9840],"content":"CanReuseTransform","needQuote":true,"needEscape":true,"nodes":[{"content":"CanReuseTransform","pos":[0,17]}]},{"pos":[10051,10058],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[10290,10316],"content":"CanTransformMultipleBlocks","needQuote":true,"needEscape":true,"nodes":[{"content":"CanTransformMultipleBlocks","pos":[0,26]}]},{"pos":[10545,10552],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[10763,10770],"content":"Clear()","needQuote":true,"needEscape":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[11055,11064],"content":"Dispose()","needQuote":true,"needEscape":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[11360,11374],"content":"InputBlockSize","needQuote":true,"needEscape":true,"nodes":[{"content":"InputBlockSize","pos":[0,14]}]},{"pos":[11577,11582],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[11799,11814],"content":"OutputBlockSize","needQuote":true,"needEscape":true,"nodes":[{"content":"OutputBlockSize","pos":[0,15]}]},{"pos":[12019,12024],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[12231,12238],"content":"Reset()","needQuote":true,"needEscape":true,"nodes":[{"content":"Reset()","pos":[0,7]}]},{"pos":[12598,12645],"content":"TransformBlock(Byte[],Int32,Int32,Byte[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"TransformBlock(Byte[],Int32,Int32,Byte[],Int32)","pos":[0,47]}]},{"pos":[12914,12919],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[13031,13035],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[13148,13153],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[13266,13271],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[13383,13387],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[13500,13505],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[13767,13806],"content":"TransformFinalBlock(Byte[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"TransformFinalBlock(Byte[],Int32,Int32)","pos":[0,39]}]},{"pos":[14058,14062],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[14174,14178],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[14291,14296],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[14409,14414],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.RijndaelManagedTransform\n  id: RijndaelManagedTransform\n  children:\n  - System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue\n  - System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform\n  - System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks\n  - System.Security.Cryptography.RijndaelManagedTransform.Clear\n  - System.Security.Cryptography.RijndaelManagedTransform.Dispose\n  - System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize\n  - System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize\n  - System.Security.Cryptography.RijndaelManagedTransform.Reset\n  - System.Security.Cryptography.RijndaelManagedTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  langs:\n  - csharp\n  name: RijndaelManagedTransform\n  nameWithType: RijndaelManagedTransform\n  fullName: System.Security.Cryptography.RijndaelManagedTransform\n  type: Class\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class RijndaelManagedTransform : System.Security.Cryptography.ICryptoTransform\n  inheritance:\n  - System.Object\n  implements:\n  - System.Security.Cryptography.ICryptoTransform\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue\n  id: BlockSizeValue\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  langs:\n  - csharp\n  name: BlockSizeValue\n  nameWithType: RijndaelManagedTransform.BlockSizeValue\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public int BlockSizeValue { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform\n  id: CanReuseTransform\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  langs:\n  - csharp\n  name: CanReuseTransform\n  nameWithType: RijndaelManagedTransform.CanReuseTransform\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public bool CanReuseTransform { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks\n  id: CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  langs:\n  - csharp\n  name: CanTransformMultipleBlocks\n  nameWithType: RijndaelManagedTransform.CanTransformMultipleBlocks\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public bool CanTransformMultipleBlocks { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.RijndaelManagedTransform.Clear\n  id: Clear\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: RijndaelManagedTransform.Clear()\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.Clear()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.RijndaelManagedTransform.Dispose\n  id: Dispose\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: RijndaelManagedTransform.Dispose()\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.Dispose()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize\n  id: InputBlockSize\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  langs:\n  - csharp\n  name: InputBlockSize\n  nameWithType: RijndaelManagedTransform.InputBlockSize\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public int InputBlockSize { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize\n  id: OutputBlockSize\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  langs:\n  - csharp\n  name: OutputBlockSize\n  nameWithType: RijndaelManagedTransform.OutputBlockSize\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public int OutputBlockSize { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.RijndaelManagedTransform.Reset\n  id: Reset\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  langs:\n  - csharp\n  name: Reset()\n  nameWithType: RijndaelManagedTransform.Reset()\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.Reset()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public void Reset ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.RijndaelManagedTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  langs:\n  - csharp\n  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  nameWithType: RijndaelManagedTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);\n    parameters:\n    - id: inputBuffer\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: inputOffset\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: inputCount\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: outputBuffer\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: outputOffset\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  id: TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  langs:\n  - csharp\n  name: TransformFinalBlock(Byte[],Int32,Int32)\n  nameWithType: RijndaelManagedTransform.TransformFinalBlock(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);\n    parameters:\n    - id: inputBuffer\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: inputOffset\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: inputCount\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  isExternal: false\n  name: BlockSizeValue\n  nameWithType: RijndaelManagedTransform.BlockSizeValue\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  isExternal: false\n  name: CanReuseTransform\n  nameWithType: RijndaelManagedTransform.CanReuseTransform\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  isExternal: false\n  name: CanTransformMultipleBlocks\n  nameWithType: RijndaelManagedTransform.CanTransformMultipleBlocks\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.RijndaelManagedTransform.Clear\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  isExternal: false\n  name: Clear()\n  nameWithType: RijndaelManagedTransform.Clear()\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.Clear()\n- uid: System.Security.Cryptography.RijndaelManagedTransform.Dispose\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  isExternal: false\n  name: Dispose()\n  nameWithType: RijndaelManagedTransform.Dispose()\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.Dispose()\n- uid: System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  isExternal: false\n  name: InputBlockSize\n  nameWithType: RijndaelManagedTransform.InputBlockSize\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  isExternal: false\n  name: OutputBlockSize\n  nameWithType: RijndaelManagedTransform.OutputBlockSize\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.RijndaelManagedTransform.Reset\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  isExternal: false\n  name: Reset()\n  nameWithType: RijndaelManagedTransform.Reset()\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.Reset()\n- uid: System.Security.Cryptography.RijndaelManagedTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  isExternal: false\n  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  nameWithType: RijndaelManagedTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.RijndaelManagedTransform\n  isExternal: false\n  name: TransformFinalBlock(Byte[],Int32,Int32)\n  nameWithType: RijndaelManagedTransform.TransformFinalBlock(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock(Byte[],Int32,Int32)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n"}