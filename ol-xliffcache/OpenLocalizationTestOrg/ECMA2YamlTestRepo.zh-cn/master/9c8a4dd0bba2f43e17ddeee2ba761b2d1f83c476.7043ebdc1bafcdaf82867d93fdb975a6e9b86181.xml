{"nodes":[{"pos":[955,962],"content":"Encoder","needQuote":true,"needEscape":true,"nodes":[{"content":"Encoder","pos":[0,7]}]},{"pos":[1650,1659],"content":"Encoder()","needQuote":true,"needEscape":true,"nodes":[{"content":"Encoder()","pos":[0,9]}]},{"pos":[2252,2312],"content":"Convert(Char<bpt id=\"p1\">*</bpt>,Int32,Byte<ept id=\"p1\">*</ept>,Int32,Boolean,Int32,Int32,Boolean)","needQuote":true,"needEscape":true,"source":"Convert(Char*,Int32,Byte*,Int32,Boolean,Int32,Int32,Boolean)"},{"pos":[2813,2847],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2912,2946],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3007,3041],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3106,3140],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3203,3237],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3302,3336],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3401,3435],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3502,3536],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4014,4088],"content":"Convert(Char[],Int32,Int32,Byte[],Int32,Int32,Boolean,Int32,Int32,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Convert(Char[],Int32,Int32,Byte[],Int32,Int32,Boolean,Int32,Int32,Boolean)","pos":[0,74]}]},{"pos":[4650,4684],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4749,4783],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4848,4882],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4944,4978],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5043,5077],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5142,5176],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5239,5273],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5338,5372],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5437,5471],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5538,5572],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5772,5780],"content":"Fallback","needQuote":true,"needEscape":true,"nodes":[{"content":"Fallback","pos":[0,8]}]},{"pos":[6076,6110],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6281,6295],"content":"FallbackBuffer","needQuote":true,"needEscape":true,"nodes":[{"content":"FallbackBuffer","pos":[0,14]}]},{"pos":[6616,6650],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6901,6934],"content":"GetByteCount(Char*,Int32,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetByteCount(Char*,Int32,Boolean)","pos":[0,33]}]},{"pos":[7295,7329],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7390,7424],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7487,7521],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7578,7612],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7937,7977],"content":"GetByteCount(Char[],Int32,Int32,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetByteCount(Char[],Int32,Int32,Boolean)","pos":[0,40]}]},{"pos":[8366,8400],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8461,8495],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8556,8590],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8653,8687],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8744,8778],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9119,9160],"content":"GetBytes(Char<bpt id=\"p1\">*</bpt>,Int32,Byte<ept id=\"p1\">*</ept>,Int32,Boolean)","needQuote":true,"needEscape":true,"source":"GetBytes(Char*,Int32,Byte*,Int32,Boolean)"},{"pos":[9565,9599],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9664,9698],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9759,9793],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9858,9892],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9955,9989],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10046,10080],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10447,10496],"content":"GetBytes(Char[],Int32,Int32,Byte[],Int32,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetBytes(Char[],Int32,Int32,Byte[],Int32,Boolean)","pos":[0,49]}]},{"pos":[10936,10970],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11035,11069],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11134,11168],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11230,11264],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11329,11363],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11426,11460],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11517,11551],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11746,11753],"content":"Reset()","needQuote":true,"needEscape":true,"nodes":[{"content":"Reset()","pos":[0,7]}]},{"pos":[12075,12088],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[12180,12189],"content":"Encoder()","needQuote":true,"needEscape":true,"nodes":[{"content":"Encoder()","pos":[0,9]}]},{"pos":[12471,12531],"content":"Convert(Char<bpt id=\"p1\">*</bpt>,Int32,Byte<ept id=\"p1\">*</ept>,Int32,Boolean,Int32,Int32,Boolean)","needQuote":true,"needEscape":true,"source":"Convert(Char*,Int32,Byte*,Int32,Boolean,Int32,Int32,Boolean)"},{"pos":[12775,12780],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[12893,12898],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[13013,13020],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[13137,13142],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[13255,13260],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[13375,13382],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[13667,13741],"content":"Convert(Char[],Int32,Int32,Byte[],Int32,Int32,Boolean,Int32,Int32,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Convert(Char[],Int32,Int32,Byte[],Int32,Int32,Boolean,Int32,Int32,Boolean)","pos":[0,74]}]},{"pos":[14012,14016],"content":"Char","needQuote":true,"needEscape":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[14129,14134],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[14247,14252],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[14364,14368],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[14481,14486],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[14599,14604],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[14719,14726],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[14843,14848],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[14961,14966],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[15081,15088],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[15234,15242],"content":"Fallback","needQuote":true,"needEscape":true,"nodes":[{"content":"Fallback","pos":[0,8]}]},{"pos":[15402,15417],"content":"EncoderFallback","needQuote":true,"needEscape":true,"nodes":[{"content":"EncoderFallback","pos":[0,15]}]},{"pos":[15590,15604],"content":"FallbackBuffer","needQuote":true,"needEscape":true,"nodes":[{"content":"FallbackBuffer","pos":[0,14]}]},{"pos":[15782,15803],"content":"EncoderFallbackBuffer","needQuote":true,"needEscape":true,"nodes":[{"content":"EncoderFallbackBuffer","pos":[0,21]}]},{"pos":[16028,16061],"content":"GetByteCount(Char*,Int32,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetByteCount(Char*,Int32,Boolean)","pos":[0,33]}]},{"pos":[16251,16256],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[16369,16374],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[16489,16496],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[16702,16742],"content":"GetByteCount(Char[],Int32,Int32,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetByteCount(Char[],Int32,Int32,Boolean)","pos":[0,40]}]},{"pos":[16946,16951],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[17063,17067],"content":"Char","needQuote":true,"needEscape":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[17180,17185],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[17298,17303],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[17418,17425],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[17639,17680],"content":"GetBytes(Char<bpt id=\"p1\">*</bpt>,Int32,Byte<ept id=\"p1\">*</ept>,Int32,Boolean)","needQuote":true,"needEscape":true,"source":"GetBytes(Char*,Int32,Byte*,Int32,Boolean)"},{"pos":[17886,17891],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[18004,18009],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[18122,18127],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[18242,18249],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[18478,18527],"content":"GetBytes(Char[],Int32,Int32,Byte[],Int32,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetBytes(Char[],Int32,Int32,Byte[],Int32,Boolean)","pos":[0,49]}]},{"pos":[18749,18754],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[18866,18870],"content":"Char","needQuote":true,"needEscape":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[18983,18988],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[19101,19106],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[19218,19222],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[19335,19340],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[19455,19462],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[19605,19612],"content":"Reset()","needQuote":true,"needEscape":true,"nodes":[{"content":"Reset()","pos":[0,7]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Text.Encoder\n  id: Encoder\n  children:\n  - System.Text.Encoder.#ctor\n  - System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  - System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  - System.Text.Encoder.Fallback\n  - System.Text.Encoder.FallbackBuffer\n  - System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)\n  - System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)\n  - System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)\n  - System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)\n  - System.Text.Encoder.Reset\n  langs:\n  - csharp\n  name: Encoder\n  nameWithType: Encoder\n  fullName: System.Text.Encoder\n  type: Class\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class Encoder\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.Encoder.#ctor\n  id: '#ctor'\n  parent: System.Text.Encoder\n  langs:\n  - csharp\n  name: Encoder()\n  nameWithType: Encoder.Encoder()\n  fullName: System.Text.Encoder.Encoder()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: protected Encoder ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  id: Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  parent: System.Text.Encoder\n  langs:\n  - csharp\n  name: Convert(Char*,Int32,Byte*,Int32,Boolean,Int32,Int32,Boolean)\n  nameWithType: Encoder.Convert(Char*,Int32,Byte*,Int32,Boolean,Int32,Int32,Boolean)\n  fullName: System.Text.Encoder.Convert(Char*,Int32,Byte*,Int32,Boolean,Int32,Int32,Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public virtual void Convert (char* chars, int charCount, byte* bytes, int byteCount, bool flush, out int charsUsed, out int bytesUsed, out bool completed);\n    parameters:\n    - id: chars\n      type: System.Char*\n      description: Parameter description to be filled\n    - id: charCount\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: bytes\n      type: System.Byte*\n      description: Parameter description to be filled\n    - id: byteCount\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: flush\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: charsUsed\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: bytesUsed\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: completed\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Text.Encoder.Convert*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  id: Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  parent: System.Text.Encoder\n  langs:\n  - csharp\n  name: Convert(Char[],Int32,Int32,Byte[],Int32,Int32,Boolean,Int32,Int32,Boolean)\n  nameWithType: Encoder.Convert(Char[],Int32,Int32,Byte[],Int32,Int32,Boolean,Int32,Int32,Boolean)\n  fullName: System.Text.Encoder.Convert(Char[],Int32,Int32,Byte[],Int32,Int32,Boolean,Int32,Int32,Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public virtual void Convert (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, int byteCount, bool flush, out int charsUsed, out int bytesUsed, out bool completed);\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: Parameter description to be filled\n    - id: charIndex\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: charCount\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: bytes\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: byteIndex\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: byteCount\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: flush\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: charsUsed\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: bytesUsed\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: completed\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Text.Encoder.Convert*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.Encoder.Fallback\n  id: Fallback\n  parent: System.Text.Encoder\n  langs:\n  - csharp\n  name: Fallback\n  nameWithType: Encoder.Fallback\n  fullName: System.Text.Encoder.Fallback\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public System.Text.EncoderFallback Fallback { get; set; }\n    return:\n      type: System.Text.EncoderFallback\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.Encoder.FallbackBuffer\n  id: FallbackBuffer\n  parent: System.Text.Encoder\n  langs:\n  - csharp\n  name: FallbackBuffer\n  nameWithType: Encoder.FallbackBuffer\n  fullName: System.Text.Encoder.FallbackBuffer\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public System.Text.EncoderFallbackBuffer FallbackBuffer { get; }\n    return:\n      type: System.Text.EncoderFallbackBuffer\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)\n  id: GetByteCount(System.Char*,System.Int32,System.Boolean)\n  parent: System.Text.Encoder\n  langs:\n  - csharp\n  name: GetByteCount(Char*,Int32,Boolean)\n  nameWithType: Encoder.GetByteCount(Char*,Int32,Boolean)\n  fullName: System.Text.Encoder.GetByteCount(Char*,Int32,Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public virtual int GetByteCount (char* chars, int count, bool flush);\n    parameters:\n    - id: chars\n      type: System.Char*\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: flush\n      type: System.Boolean\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Text.Encoder.GetByteCount*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)\n  id: GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)\n  parent: System.Text.Encoder\n  langs:\n  - csharp\n  name: GetByteCount(Char[],Int32,Int32,Boolean)\n  nameWithType: Encoder.GetByteCount(Char[],Int32,Int32,Boolean)\n  fullName: System.Text.Encoder.GetByteCount(Char[],Int32,Int32,Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public abstract int GetByteCount (char[] chars, int index, int count, bool flush);\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: Parameter description to be filled\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: flush\n      type: System.Boolean\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Text.Encoder.GetByteCount*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)\n  id: GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)\n  parent: System.Text.Encoder\n  langs:\n  - csharp\n  name: GetBytes(Char*,Int32,Byte*,Int32,Boolean)\n  nameWithType: Encoder.GetBytes(Char*,Int32,Byte*,Int32,Boolean)\n  fullName: System.Text.Encoder.GetBytes(Char*,Int32,Byte*,Int32,Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public virtual int GetBytes (char* chars, int charCount, byte* bytes, int byteCount, bool flush);\n    parameters:\n    - id: chars\n      type: System.Char*\n      description: Parameter description to be filled\n    - id: charCount\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: bytes\n      type: System.Byte*\n      description: Parameter description to be filled\n    - id: byteCount\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: flush\n      type: System.Boolean\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Text.Encoder.GetBytes*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)\n  id: GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)\n  parent: System.Text.Encoder\n  langs:\n  - csharp\n  name: GetBytes(Char[],Int32,Int32,Byte[],Int32,Boolean)\n  nameWithType: Encoder.GetBytes(Char[],Int32,Int32,Byte[],Int32,Boolean)\n  fullName: System.Text.Encoder.GetBytes(Char[],Int32,Int32,Byte[],Int32,Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public abstract int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush);\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: Parameter description to be filled\n    - id: charIndex\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: charCount\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: bytes\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: byteIndex\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: flush\n      type: System.Boolean\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Text.Encoder.GetBytes*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.Encoder.Reset\n  id: Reset\n  parent: System.Text.Encoder\n  langs:\n  - csharp\n  name: Reset()\n  nameWithType: Encoder.Reset()\n  fullName: System.Text.Encoder.Reset()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public virtual void Reset ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Text.Encoder.#ctor\n  parent: System.Text.Encoder\n  isExternal: false\n  name: Encoder()\n  nameWithType: Encoder.Encoder()\n  fullName: System.Text.Encoder.Encoder()\n- uid: System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  parent: System.Text.Encoder\n  isExternal: false\n  name: Convert(Char*,Int32,Byte*,Int32,Boolean,Int32,Int32,Boolean)\n  nameWithType: Encoder.Convert(Char*,Int32,Byte*,Int32,Boolean,Int32,Int32,Boolean)\n  fullName: System.Text.Encoder.Convert(Char*,Int32,Byte*,Int32,Boolean,Int32,Int32,Boolean)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  parent: System.Text.Encoder\n  isExternal: false\n  name: Convert(Char[],Int32,Int32,Byte[],Int32,Int32,Boolean,Int32,Int32,Boolean)\n  nameWithType: Encoder.Convert(Char[],Int32,Int32,Byte[],Int32,Int32,Boolean,Int32,Int32,Boolean)\n  fullName: System.Text.Encoder.Convert(Char[],Int32,Int32,Byte[],Int32,Int32,Boolean,Int32,Int32,Boolean)\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  nameWithType: Char\n  fullName: System.Char[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Text.Encoder.Fallback\n  parent: System.Text.Encoder\n  isExternal: false\n  name: Fallback\n  nameWithType: Encoder.Fallback\n  fullName: System.Text.Encoder.Fallback\n- uid: System.Text.EncoderFallback\n  parent: System.Text\n  isExternal: false\n  name: EncoderFallback\n  nameWithType: EncoderFallback\n  fullName: System.Text.EncoderFallback\n- uid: System.Text.Encoder.FallbackBuffer\n  parent: System.Text.Encoder\n  isExternal: false\n  name: FallbackBuffer\n  nameWithType: Encoder.FallbackBuffer\n  fullName: System.Text.Encoder.FallbackBuffer\n- uid: System.Text.EncoderFallbackBuffer\n  parent: System.Text\n  isExternal: false\n  name: EncoderFallbackBuffer\n  nameWithType: EncoderFallbackBuffer\n  fullName: System.Text.EncoderFallbackBuffer\n- uid: System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)\n  parent: System.Text.Encoder\n  isExternal: false\n  name: GetByteCount(Char*,Int32,Boolean)\n  nameWithType: Encoder.GetByteCount(Char*,Int32,Boolean)\n  fullName: System.Text.Encoder.GetByteCount(Char*,Int32,Boolean)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)\n  parent: System.Text.Encoder\n  isExternal: false\n  name: GetByteCount(Char[],Int32,Int32,Boolean)\n  nameWithType: Encoder.GetByteCount(Char[],Int32,Int32,Boolean)\n  fullName: System.Text.Encoder.GetByteCount(Char[],Int32,Int32,Boolean)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  nameWithType: Char\n  fullName: System.Char[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)\n  parent: System.Text.Encoder\n  isExternal: false\n  name: GetBytes(Char*,Int32,Byte*,Int32,Boolean)\n  nameWithType: Encoder.GetBytes(Char*,Int32,Byte*,Int32,Boolean)\n  fullName: System.Text.Encoder.GetBytes(Char*,Int32,Byte*,Int32,Boolean)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)\n  parent: System.Text.Encoder\n  isExternal: false\n  name: GetBytes(Char[],Int32,Int32,Byte[],Int32,Boolean)\n  nameWithType: Encoder.GetBytes(Char[],Int32,Int32,Byte[],Int32,Boolean)\n  fullName: System.Text.Encoder.GetBytes(Char[],Int32,Int32,Byte[],Int32,Boolean)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  nameWithType: Char\n  fullName: System.Char[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Text.Encoder.Reset\n  parent: System.Text.Encoder\n  isExternal: false\n  name: Reset()\n  nameWithType: Encoder.Reset()\n  fullName: System.Text.Encoder.Reset()\n- uid: System.Text.Encoder.Convert*\n  parent: System.Text.Encoder\n  isExternal: false\n  nameWithType: Encoder.\n- uid: System.Text.Encoder.GetByteCount*\n  parent: System.Text.Encoder\n  isExternal: false\n  nameWithType: Encoder.\n- uid: System.Text.Encoder.GetBytes*\n  parent: System.Text.Encoder\n  isExternal: false\n  nameWithType: Encoder.\n"}