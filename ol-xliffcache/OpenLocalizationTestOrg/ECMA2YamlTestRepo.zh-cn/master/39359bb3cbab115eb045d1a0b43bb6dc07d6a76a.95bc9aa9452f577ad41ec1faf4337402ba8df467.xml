{"nodes":[{"pos":[1128,1147],"content":"FromBase64Transform","needQuote":true,"needEscape":true,"nodes":[{"content":"FromBase64Transform","pos":[0,19]}]},{"pos":[2032,2053],"content":"FromBase64Transform()","needQuote":true,"needEscape":true,"nodes":[{"content":"FromBase64Transform()","pos":[0,21]}]},{"pos":[2677,2721],"content":"FromBase64Transform(FromBase64TransformMode)","needQuote":true,"needEscape":true,"nodes":[{"content":"FromBase64Transform(FromBase64TransformMode)","pos":[0,44]}]},{"pos":[3238,3272],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3507,3524],"content":"CanReuseTransform","needQuote":true,"needEscape":true,"nodes":[{"content":"CanReuseTransform","pos":[0,17]}]},{"pos":[3872,3906],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4159,4185],"content":"CanTransformMultipleBlocks","needQuote":true,"needEscape":true,"nodes":[{"content":"CanTransformMultipleBlocks","pos":[0,26]}]},{"pos":[4552,4586],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4797,4804],"content":"Clear()","needQuote":true,"needEscape":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[5280,5289],"content":"Dispose()","needQuote":true,"needEscape":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[5873,5889],"content":"Dispose(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[6259,6293],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6580,6590],"content":"Finalize()","needQuote":true,"needEscape":true,"nodes":[{"content":"Finalize()","pos":[0,10]}]},{"pos":[7089,7103],"content":"InputBlockSize","needQuote":true,"needEscape":true,"nodes":[{"content":"InputBlockSize","pos":[0,14]}]},{"pos":[7431,7465],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7696,7711],"content":"OutputBlockSize","needQuote":true,"needEscape":true,"nodes":[{"content":"OutputBlockSize","pos":[0,15]}]},{"pos":[8042,8076],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8441,8488],"content":"TransformBlock(Byte[],Int32,Int32,Byte[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"TransformBlock(Byte[],Int32,Int32,Byte[],Int32)","pos":[0,47]}]},{"pos":[8992,9026],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9093,9127],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9193,9227],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9296,9330],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9398,9432],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9489,9523],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9844,9883],"content":"TransformFinalBlock(Byte[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"TransformFinalBlock(Byte[],Int32,Int32)","pos":[0,39]}]},{"pos":[10340,10374],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10441,10475],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10541,10575],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10633,10667],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10778,10791],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[10941,10962],"content":"FromBase64Transform()","needQuote":true,"needEscape":true,"nodes":[{"content":"FromBase64Transform()","pos":[0,21]}]},{"pos":[11307,11351],"content":"FromBase64Transform(FromBase64TransformMode)","needQuote":true,"needEscape":true,"nodes":[{"content":"FromBase64Transform(FromBase64TransformMode)","pos":[0,44]}]},{"pos":[11666,11689],"content":"FromBase64TransformMode","needQuote":true,"needEscape":true,"nodes":[{"content":"FromBase64TransformMode","pos":[0,23]}]},{"pos":[11956,11973],"content":"CanReuseTransform","needQuote":true,"needEscape":true,"nodes":[{"content":"CanReuseTransform","pos":[0,17]}]},{"pos":[12174,12181],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[12403,12429],"content":"CanTransformMultipleBlocks","needQuote":true,"needEscape":true,"nodes":[{"content":"CanTransformMultipleBlocks","pos":[0,26]}]},{"pos":[12648,12655],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[12856,12863],"content":"Clear()","needQuote":true,"needEscape":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[13128,13137],"content":"Dispose()","needQuote":true,"needEscape":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[13422,13438],"content":"Dispose(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[13637,13644],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[13848,13858],"content":"Finalize()","needQuote":true,"needEscape":true,"nodes":[{"content":"Finalize()","pos":[0,10]}]},{"pos":[14136,14150],"content":"InputBlockSize","needQuote":true,"needEscape":true,"nodes":[{"content":"InputBlockSize","pos":[0,14]}]},{"pos":[14343,14348],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[14555,14570],"content":"OutputBlockSize","needQuote":true,"needEscape":true,"nodes":[{"content":"OutputBlockSize","pos":[0,15]}]},{"pos":[14765,14770],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[15044,15091],"content":"TransformBlock(Byte[],Int32,Int32,Byte[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"TransformBlock(Byte[],Int32,Int32,Byte[],Int32)","pos":[0,47]}]},{"pos":[15350,15355],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[15467,15471],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[15584,15589],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[15702,15707],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[15819,15823],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[15936,15941],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[16193,16232],"content":"TransformFinalBlock(Byte[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"TransformFinalBlock(Byte[],Int32,Int32)","pos":[0,39]}]},{"pos":[16474,16478],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[16590,16594],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[16707,16712],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[16825,16830],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.FromBase64Transform\n  id: FromBase64Transform\n  children:\n  - System.Security.Cryptography.FromBase64Transform.#ctor\n  - System.Security.Cryptography.FromBase64Transform.#ctor(System.Security.Cryptography.FromBase64TransformMode)\n  - System.Security.Cryptography.FromBase64Transform.CanReuseTransform\n  - System.Security.Cryptography.FromBase64Transform.CanTransformMultipleBlocks\n  - System.Security.Cryptography.FromBase64Transform.Clear\n  - System.Security.Cryptography.FromBase64Transform.Dispose\n  - System.Security.Cryptography.FromBase64Transform.Dispose(System.Boolean)\n  - System.Security.Cryptography.FromBase64Transform.Finalize\n  - System.Security.Cryptography.FromBase64Transform.InputBlockSize\n  - System.Security.Cryptography.FromBase64Transform.OutputBlockSize\n  - System.Security.Cryptography.FromBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Security.Cryptography.FromBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  langs:\n  - csharp\n  name: FromBase64Transform\n  nameWithType: FromBase64Transform\n  fullName: System.Security.Cryptography.FromBase64Transform\n  type: Class\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class FromBase64Transform : System.Security.Cryptography.ICryptoTransform\n  inheritance:\n  - System.Object\n  implements:\n  - System.Security.Cryptography.ICryptoTransform\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.FromBase64Transform.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.FromBase64Transform\n  langs:\n  - csharp\n  name: FromBase64Transform()\n  nameWithType: FromBase64Transform.FromBase64Transform()\n  fullName: System.Security.Cryptography.FromBase64Transform.FromBase64Transform()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public FromBase64Transform ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.FromBase64Transform.#ctor(System.Security.Cryptography.FromBase64TransformMode)\n  id: '#ctor(System.Security.Cryptography.FromBase64TransformMode)'\n  parent: System.Security.Cryptography.FromBase64Transform\n  langs:\n  - csharp\n  name: FromBase64Transform(FromBase64TransformMode)\n  nameWithType: FromBase64Transform.FromBase64Transform(FromBase64TransformMode)\n  fullName: System.Security.Cryptography.FromBase64Transform.FromBase64Transform(FromBase64TransformMode)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public FromBase64Transform (System.Security.Cryptography.FromBase64TransformMode whitespaces);\n    parameters:\n    - id: whitespaces\n      type: System.Security.Cryptography.FromBase64TransformMode\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.FromBase64Transform.CanReuseTransform\n  id: CanReuseTransform\n  parent: System.Security.Cryptography.FromBase64Transform\n  langs:\n  - csharp\n  name: CanReuseTransform\n  nameWithType: FromBase64Transform.CanReuseTransform\n  fullName: System.Security.Cryptography.FromBase64Transform.CanReuseTransform\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual bool CanReuseTransform { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.FromBase64Transform.CanTransformMultipleBlocks\n  id: CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.FromBase64Transform\n  langs:\n  - csharp\n  name: CanTransformMultipleBlocks\n  nameWithType: FromBase64Transform.CanTransformMultipleBlocks\n  fullName: System.Security.Cryptography.FromBase64Transform.CanTransformMultipleBlocks\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public bool CanTransformMultipleBlocks { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.FromBase64Transform.Clear\n  id: Clear\n  parent: System.Security.Cryptography.FromBase64Transform\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: FromBase64Transform.Clear()\n  fullName: System.Security.Cryptography.FromBase64Transform.Clear()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.FromBase64Transform.Dispose\n  id: Dispose\n  parent: System.Security.Cryptography.FromBase64Transform\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: FromBase64Transform.Dispose()\n  fullName: System.Security.Cryptography.FromBase64Transform.Dispose()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Security.Cryptography.FromBase64Transform.Dispose*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.FromBase64Transform.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.FromBase64Transform\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: FromBase64Transform.Dispose(Boolean)\n  fullName: System.Security.Cryptography.FromBase64Transform.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.FromBase64Transform.Dispose*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.FromBase64Transform.Finalize\n  id: Finalize\n  parent: System.Security.Cryptography.FromBase64Transform\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: FromBase64Transform.Finalize()\n  fullName: System.Security.Cryptography.FromBase64Transform.Finalize()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: ~FromBase64Transform ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.FromBase64Transform.InputBlockSize\n  id: InputBlockSize\n  parent: System.Security.Cryptography.FromBase64Transform\n  langs:\n  - csharp\n  name: InputBlockSize\n  nameWithType: FromBase64Transform.InputBlockSize\n  fullName: System.Security.Cryptography.FromBase64Transform.InputBlockSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public int InputBlockSize { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.FromBase64Transform.OutputBlockSize\n  id: OutputBlockSize\n  parent: System.Security.Cryptography.FromBase64Transform\n  langs:\n  - csharp\n  name: OutputBlockSize\n  nameWithType: FromBase64Transform.OutputBlockSize\n  fullName: System.Security.Cryptography.FromBase64Transform.OutputBlockSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public int OutputBlockSize { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.FromBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.FromBase64Transform\n  langs:\n  - csharp\n  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  nameWithType: FromBase64Transform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  fullName: System.Security.Cryptography.FromBase64Transform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);\n    parameters:\n    - id: inputBuffer\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: inputOffset\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: inputCount\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: outputBuffer\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: outputOffset\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.FromBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  id: TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.FromBase64Transform\n  langs:\n  - csharp\n  name: TransformFinalBlock(Byte[],Int32,Int32)\n  nameWithType: FromBase64Transform.TransformFinalBlock(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.FromBase64Transform.TransformFinalBlock(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);\n    parameters:\n    - id: inputBuffer\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: inputOffset\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: inputCount\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Security.Cryptography.FromBase64Transform.#ctor\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: FromBase64Transform()\n  nameWithType: FromBase64Transform.FromBase64Transform()\n  fullName: System.Security.Cryptography.FromBase64Transform.FromBase64Transform()\n- uid: System.Security.Cryptography.FromBase64Transform.#ctor(System.Security.Cryptography.FromBase64TransformMode)\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: FromBase64Transform(FromBase64TransformMode)\n  nameWithType: FromBase64Transform.FromBase64Transform(FromBase64TransformMode)\n  fullName: System.Security.Cryptography.FromBase64Transform.FromBase64Transform(FromBase64TransformMode)\n- uid: System.Security.Cryptography.FromBase64TransformMode\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: FromBase64TransformMode\n  nameWithType: FromBase64TransformMode\n  fullName: System.Security.Cryptography.FromBase64TransformMode\n- uid: System.Security.Cryptography.FromBase64Transform.CanReuseTransform\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: CanReuseTransform\n  nameWithType: FromBase64Transform.CanReuseTransform\n  fullName: System.Security.Cryptography.FromBase64Transform.CanReuseTransform\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.FromBase64Transform.CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: CanTransformMultipleBlocks\n  nameWithType: FromBase64Transform.CanTransformMultipleBlocks\n  fullName: System.Security.Cryptography.FromBase64Transform.CanTransformMultipleBlocks\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.FromBase64Transform.Clear\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: Clear()\n  nameWithType: FromBase64Transform.Clear()\n  fullName: System.Security.Cryptography.FromBase64Transform.Clear()\n- uid: System.Security.Cryptography.FromBase64Transform.Dispose\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: Dispose()\n  nameWithType: FromBase64Transform.Dispose()\n  fullName: System.Security.Cryptography.FromBase64Transform.Dispose()\n- uid: System.Security.Cryptography.FromBase64Transform.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: FromBase64Transform.Dispose(Boolean)\n  fullName: System.Security.Cryptography.FromBase64Transform.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.FromBase64Transform.Finalize\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: Finalize()\n  nameWithType: FromBase64Transform.Finalize()\n  fullName: System.Security.Cryptography.FromBase64Transform.Finalize()\n- uid: System.Security.Cryptography.FromBase64Transform.InputBlockSize\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: InputBlockSize\n  nameWithType: FromBase64Transform.InputBlockSize\n  fullName: System.Security.Cryptography.FromBase64Transform.InputBlockSize\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.FromBase64Transform.OutputBlockSize\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: OutputBlockSize\n  nameWithType: FromBase64Transform.OutputBlockSize\n  fullName: System.Security.Cryptography.FromBase64Transform.OutputBlockSize\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.FromBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  nameWithType: FromBase64Transform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  fullName: System.Security.Cryptography.FromBase64Transform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.FromBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  name: TransformFinalBlock(Byte[],Int32,Int32)\n  nameWithType: FromBase64Transform.TransformFinalBlock(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.FromBase64Transform.TransformFinalBlock(Byte[],Int32,Int32)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.FromBase64Transform.Dispose*\n  parent: System.Security.Cryptography.FromBase64Transform\n  isExternal: false\n  nameWithType: FromBase64Transform.\n"}