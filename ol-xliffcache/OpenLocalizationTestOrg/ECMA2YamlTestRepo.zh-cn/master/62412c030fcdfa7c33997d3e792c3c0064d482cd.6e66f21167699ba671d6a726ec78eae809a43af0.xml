{"nodes":[{"pos":[494,524],"content":"IProducerConsumerCollection<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"IProducerConsumerCollection<T>"},{"pos":[863,897],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[1265,1282],"content":"CopyTo(T[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"CopyTo(T[],Int32)","pos":[0,17]}]},{"pos":[1657,1691],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[1752,1786],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2023,2032],"content":"ToArray()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToArray()","pos":[0,9]}]},{"pos":[2370,2404],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2647,2656],"content":"TryAdd(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryAdd(T)","pos":[0,9]}]},{"pos":[2998,3032],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3091,3125],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3372,3382],"content":"TryTake(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryTake(T)","pos":[0,10]}]},{"pos":[3731,3765],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3824,3858],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4111,4128],"content":"CopyTo(T[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"CopyTo(T[],Int32)","pos":[0,17]}]},{"pos":[4334,4335],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[4435,4440],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[4661,4670],"content":"ToArray()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToArray()","pos":[0,9]}]},{"pos":[4860,4861],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[5072,5081],"content":"TryAdd(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryAdd(T)","pos":[0,9]}]},{"pos":[5289,5296],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[5397,5398],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[5609,5619],"content":"TryTake(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryTake(T)","pos":[0,10]}]},{"pos":[5829,5836],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[5937,5938],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Concurrent.IProducerConsumerCollection`1\n  id: IProducerConsumerCollection`1\n  children:\n  - System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)\n  - System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray\n  - System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)\n  - System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)\n  langs:\n  - csharp\n  name: IProducerConsumerCollection<T>\n  nameWithType: IProducerConsumerCollection<T>\n  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>\n  type: Interface\n  syntax:\n    content: 'public interface IProducerConsumerCollection<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.ICollection'\n    typeParameters:\n    - id: T\n      description: Parameter description to be filled\n  implements:\n  - System.Collections.Generic.IEnumerable<T>\n  - System.Collections.ICollection\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)\n  id: CopyTo(`0[],System.Int32)\n  parent: System.Collections.Concurrent.IProducerConsumerCollection`1\n  langs:\n  - csharp\n  name: CopyTo(T[],Int32)\n  nameWithType: IProducerConsumerCollection<T>.CopyTo(T[],Int32)\n  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.CopyTo(T[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public void CopyTo (T[] array, int index);\n    parameters:\n    - id: array\n      type: T[]\n      description: Parameter description to be filled\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray\n  id: ToArray\n  parent: System.Collections.Concurrent.IProducerConsumerCollection`1\n  langs:\n  - csharp\n  name: ToArray()\n  nameWithType: IProducerConsumerCollection<T>.ToArray()\n  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.ToArray()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public T[] ToArray ();\n    parameters: []\n    return:\n      type: T[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)\n  id: TryAdd(`0)\n  parent: System.Collections.Concurrent.IProducerConsumerCollection`1\n  langs:\n  - csharp\n  name: TryAdd(T)\n  nameWithType: IProducerConsumerCollection<T>.TryAdd(T)\n  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd(T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public bool TryAdd (T item);\n    parameters:\n    - id: item\n      type: T\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)\n  id: TryTake(`0@)\n  parent: System.Collections.Concurrent.IProducerConsumerCollection`1\n  langs:\n  - csharp\n  name: TryTake(T)\n  nameWithType: IProducerConsumerCollection<T>.TryTake(T)\n  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake(T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public bool TryTake (out T item);\n    parameters:\n    - id: item\n      type: T\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)\n  parent: System.Collections.Concurrent.IProducerConsumerCollection`1\n  isExternal: false\n  name: CopyTo(T[],Int32)\n  nameWithType: IProducerConsumerCollection<T>.CopyTo(T[],Int32)\n  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.CopyTo(T[],Int32)\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray\n  parent: System.Collections.Concurrent.IProducerConsumerCollection`1\n  isExternal: false\n  name: ToArray()\n  nameWithType: IProducerConsumerCollection<T>.ToArray()\n  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.ToArray()\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T[]\n- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)\n  parent: System.Collections.Concurrent.IProducerConsumerCollection`1\n  isExternal: false\n  name: TryAdd(T)\n  nameWithType: IProducerConsumerCollection<T>.TryAdd(T)\n  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd(T)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)\n  parent: System.Collections.Concurrent.IProducerConsumerCollection`1\n  isExternal: false\n  name: TryTake(T)\n  nameWithType: IProducerConsumerCollection<T>.TryTake(T)\n  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake(T)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n"}