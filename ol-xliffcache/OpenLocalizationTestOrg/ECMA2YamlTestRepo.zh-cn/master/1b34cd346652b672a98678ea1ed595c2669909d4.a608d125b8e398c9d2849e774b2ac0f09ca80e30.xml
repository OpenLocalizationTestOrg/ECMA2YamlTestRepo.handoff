{"nodes":[{"pos":[805,816],"content":"PixelFormat","needQuote":true,"needEscape":true,"nodes":[{"content":"PixelFormat","pos":[0,11]}]},{"pos":[1422,1434],"content":"BitsPerPixel","needQuote":true,"needEscape":true,"nodes":[{"content":"BitsPerPixel","pos":[0,12]}]},{"pos":[1732,1766],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[1977,1991],"content":"Equals(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[2319,2353],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2412,2446],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2748,2767],"content":"Equals(PixelFormat)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(PixelFormat)","pos":[0,19]}]},{"pos":[3157,3191],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3250,3284],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3652,3683],"content":"Equals(PixelFormat,PixelFormat)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(PixelFormat,PixelFormat)","pos":[0,31]}]},{"pos":[4130,4164],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4245,4279],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4338,4372],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4616,4629],"content":"GetHashCode()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[4949,4983],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5162,5167],"content":"Masks","needQuote":true,"needEscape":true,"nodes":[{"content":"Masks","pos":[0,5]}]},{"pos":[5583,5617],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5942,5978],"content":"op_Equality(PixelFormat,PixelFormat)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Equality(PixelFormat,PixelFormat)","pos":[0,36]}]},{"pos":[6442,6476],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6557,6591],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6650,6684],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7013,7051],"content":"op_Inequality(PixelFormat,PixelFormat)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Inequality(PixelFormat,PixelFormat)","pos":[0,38]}]},{"pos":[7521,7555],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7636,7670],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7729,7763],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7948,7958],"content":"ToString()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[8273,8307],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8421,8437],"content":"System.ValueType","needQuote":true,"needEscape":true,"nodes":[{"content":"System.ValueType","pos":[0,16]}]},{"pos":[8562,8574],"content":"BitsPerPixel","needQuote":true,"needEscape":true,"nodes":[{"content":"BitsPerPixel","pos":[0,12]}]},{"pos":[8739,8744],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[8925,8939],"content":"Equals(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[9110,9117],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[9235,9241],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9443,9462],"content":"Equals(PixelFormat)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(PixelFormat)","pos":[0,19]}]},{"pos":[9643,9650],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[9801,9812],"content":"PixelFormat","needQuote":true,"needEscape":true,"nodes":[{"content":"PixelFormat","pos":[0,11]}]},{"pos":[10071,10102],"content":"Equals(PixelFormat,PixelFormat)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(PixelFormat,PixelFormat)","pos":[0,31]}]},{"pos":[10307,10314],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[10465,10476],"content":"PixelFormat","needQuote":true,"needEscape":true,"nodes":[{"content":"PixelFormat","pos":[0,11]}]},{"pos":[10649,10660],"content":"PixelFormat","needQuote":true,"needEscape":true,"nodes":[{"content":"PixelFormat","pos":[0,11]}]},{"pos":[10857,10870],"content":"GetHashCode()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[11037,11042],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[11207,11212],"content":"Masks","needQuote":true,"needEscape":true,"nodes":[{"content":"Masks","pos":[0,5]}]},{"pos":[11448,11477],"content":"IList<ph id=\"ph1\">&lt;PixelFormatChannelMask&gt;</ph>","needQuote":true,"needEscape":true,"source":"IList<PixelFormatChannelMask>"},{"pos":[11804,11840],"content":"op_Equality(PixelFormat,PixelFormat)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Equality(PixelFormat,PixelFormat)","pos":[0,36]}]},{"pos":[12055,12062],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[12213,12224],"content":"PixelFormat","needQuote":true,"needEscape":true,"nodes":[{"content":"PixelFormat","pos":[0,11]}]},{"pos":[12397,12408],"content":"PixelFormat","needQuote":true,"needEscape":true,"nodes":[{"content":"PixelFormat","pos":[0,11]}]},{"pos":[12674,12712],"content":"op_Inequality(PixelFormat,PixelFormat)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Inequality(PixelFormat,PixelFormat)","pos":[0,38]}]},{"pos":[12931,12938],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[13089,13100],"content":"PixelFormat","needQuote":true,"needEscape":true,"nodes":[{"content":"PixelFormat","pos":[0,11]}]},{"pos":[13273,13284],"content":"PixelFormat","needQuote":true,"needEscape":true,"nodes":[{"content":"PixelFormat","pos":[0,11]}]},{"pos":[13478,13488],"content":"ToString()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[13650,13656],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Media.PixelFormat\n  id: PixelFormat\n  children:\n  - System.Windows.Media.PixelFormat.BitsPerPixel\n  - System.Windows.Media.PixelFormat.Equals(System.Object)\n  - System.Windows.Media.PixelFormat.Equals(System.Windows.Media.PixelFormat)\n  - System.Windows.Media.PixelFormat.Equals(System.Windows.Media.PixelFormat,System.Windows.Media.PixelFormat)\n  - System.Windows.Media.PixelFormat.GetHashCode\n  - System.Windows.Media.PixelFormat.Masks\n  - System.Windows.Media.PixelFormat.op_Equality(System.Windows.Media.PixelFormat,System.Windows.Media.PixelFormat)\n  - System.Windows.Media.PixelFormat.op_Inequality(System.Windows.Media.PixelFormat,System.Windows.Media.PixelFormat)\n  - System.Windows.Media.PixelFormat.ToString\n  langs:\n  - csharp\n  name: PixelFormat\n  nameWithType: PixelFormat\n  fullName: System.Windows.Media.PixelFormat\n  type: Struct\n  syntax:\n    content: >-\n      [System.ComponentModel.TypeConverter(typeof(System.Windows.Media.PixelFormatConverter))]\n\n      public struct PixelFormat : IEquatable<System.Windows.Media.PixelFormat>\n  inheritance:\n  - System.Object\n  - System.ValueType\n  implements:\n  - System.IEquatable<System.Windows.Media.PixelFormat>\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.PixelFormat.BitsPerPixel\n  id: BitsPerPixel\n  parent: System.Windows.Media.PixelFormat\n  langs:\n  - csharp\n  name: BitsPerPixel\n  nameWithType: PixelFormat.BitsPerPixel\n  fullName: System.Windows.Media.PixelFormat.BitsPerPixel\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: public int BitsPerPixel { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.PixelFormat.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Windows.Media.PixelFormat\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: PixelFormat.Equals(Object)\n  fullName: System.Windows.Media.PixelFormat.Equals(Object)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Windows.Media.PixelFormat.Equals*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.PixelFormat.Equals(System.Windows.Media.PixelFormat)\n  id: Equals(System.Windows.Media.PixelFormat)\n  parent: System.Windows.Media.PixelFormat\n  langs:\n  - csharp\n  name: Equals(PixelFormat)\n  nameWithType: PixelFormat.Equals(PixelFormat)\n  fullName: System.Windows.Media.PixelFormat.Equals(PixelFormat)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: public bool Equals (System.Windows.Media.PixelFormat pixelFormat);\n    parameters:\n    - id: pixelFormat\n      type: System.Windows.Media.PixelFormat\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Windows.Media.PixelFormat.Equals*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.PixelFormat.Equals(System.Windows.Media.PixelFormat,System.Windows.Media.PixelFormat)\n  id: Equals(System.Windows.Media.PixelFormat,System.Windows.Media.PixelFormat)\n  parent: System.Windows.Media.PixelFormat\n  langs:\n  - csharp\n  name: Equals(PixelFormat,PixelFormat)\n  nameWithType: PixelFormat.Equals(PixelFormat,PixelFormat)\n  fullName: System.Windows.Media.PixelFormat.Equals(PixelFormat,PixelFormat)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: public static bool Equals (System.Windows.Media.PixelFormat left, System.Windows.Media.PixelFormat right);\n    parameters:\n    - id: left\n      type: System.Windows.Media.PixelFormat\n      description: Parameter description to be filled\n    - id: right\n      type: System.Windows.Media.PixelFormat\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Windows.Media.PixelFormat.Equals*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.PixelFormat.GetHashCode\n  id: GetHashCode\n  parent: System.Windows.Media.PixelFormat\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: PixelFormat.GetHashCode()\n  fullName: System.Windows.Media.PixelFormat.GetHashCode()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.PixelFormat.Masks\n  id: Masks\n  parent: System.Windows.Media.PixelFormat\n  langs:\n  - csharp\n  name: Masks\n  nameWithType: PixelFormat.Masks\n  fullName: System.Windows.Media.PixelFormat.Masks\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: public System.Collections.Generic.IList<System.Windows.Media.PixelFormatChannelMask> Masks { get; }\n    return:\n      type: System.Collections.Generic.IList{System.Windows.Media.PixelFormatChannelMask}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.PixelFormat.op_Equality(System.Windows.Media.PixelFormat,System.Windows.Media.PixelFormat)\n  id: op_Equality(System.Windows.Media.PixelFormat,System.Windows.Media.PixelFormat)\n  parent: System.Windows.Media.PixelFormat\n  langs:\n  - csharp\n  name: op_Equality(PixelFormat,PixelFormat)\n  nameWithType: PixelFormat.op_Equality(PixelFormat,PixelFormat)\n  fullName: System.Windows.Media.PixelFormat.op_Equality(PixelFormat,PixelFormat)\n  type: Operator\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: public static bool op_Equality (System.Windows.Media.PixelFormat left, System.Windows.Media.PixelFormat right);\n    parameters:\n    - id: left\n      type: System.Windows.Media.PixelFormat\n      description: Parameter description to be filled\n    - id: right\n      type: System.Windows.Media.PixelFormat\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.PixelFormat.op_Inequality(System.Windows.Media.PixelFormat,System.Windows.Media.PixelFormat)\n  id: op_Inequality(System.Windows.Media.PixelFormat,System.Windows.Media.PixelFormat)\n  parent: System.Windows.Media.PixelFormat\n  langs:\n  - csharp\n  name: op_Inequality(PixelFormat,PixelFormat)\n  nameWithType: PixelFormat.op_Inequality(PixelFormat,PixelFormat)\n  fullName: System.Windows.Media.PixelFormat.op_Inequality(PixelFormat,PixelFormat)\n  type: Operator\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: public static bool op_Inequality (System.Windows.Media.PixelFormat left, System.Windows.Media.PixelFormat right);\n    parameters:\n    - id: left\n      type: System.Windows.Media.PixelFormat\n      description: Parameter description to be filled\n    - id: right\n      type: System.Windows.Media.PixelFormat\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.PixelFormat.ToString\n  id: ToString\n  parent: System.Windows.Media.PixelFormat\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: PixelFormat.ToString()\n  fullName: System.Windows.Media.PixelFormat.ToString()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.ValueType\n  isExternal: false\n  name: System.ValueType\n- uid: System.Windows.Media.PixelFormat.BitsPerPixel\n  parent: System.Windows.Media.PixelFormat\n  isExternal: false\n  name: BitsPerPixel\n  nameWithType: PixelFormat.BitsPerPixel\n  fullName: System.Windows.Media.PixelFormat.BitsPerPixel\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Media.PixelFormat.Equals(System.Object)\n  parent: System.Windows.Media.PixelFormat\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: PixelFormat.Equals(Object)\n  fullName: System.Windows.Media.PixelFormat.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Media.PixelFormat.Equals(System.Windows.Media.PixelFormat)\n  parent: System.Windows.Media.PixelFormat\n  isExternal: false\n  name: Equals(PixelFormat)\n  nameWithType: PixelFormat.Equals(PixelFormat)\n  fullName: System.Windows.Media.PixelFormat.Equals(PixelFormat)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Media.PixelFormat\n  parent: System.Windows.Media\n  isExternal: false\n  name: PixelFormat\n  nameWithType: PixelFormat\n  fullName: System.Windows.Media.PixelFormat\n- uid: System.Windows.Media.PixelFormat.Equals(System.Windows.Media.PixelFormat,System.Windows.Media.PixelFormat)\n  parent: System.Windows.Media.PixelFormat\n  isExternal: false\n  name: Equals(PixelFormat,PixelFormat)\n  nameWithType: PixelFormat.Equals(PixelFormat,PixelFormat)\n  fullName: System.Windows.Media.PixelFormat.Equals(PixelFormat,PixelFormat)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Media.PixelFormat\n  parent: System.Windows.Media\n  isExternal: false\n  name: PixelFormat\n  nameWithType: PixelFormat\n  fullName: System.Windows.Media.PixelFormat\n- uid: System.Windows.Media.PixelFormat\n  parent: System.Windows.Media\n  isExternal: false\n  name: PixelFormat\n  nameWithType: PixelFormat\n  fullName: System.Windows.Media.PixelFormat\n- uid: System.Windows.Media.PixelFormat.GetHashCode\n  parent: System.Windows.Media.PixelFormat\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: PixelFormat.GetHashCode()\n  fullName: System.Windows.Media.PixelFormat.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Media.PixelFormat.Masks\n  parent: System.Windows.Media.PixelFormat\n  isExternal: false\n  name: Masks\n  nameWithType: PixelFormat.Masks\n  fullName: System.Windows.Media.PixelFormat.Masks\n- uid: System.Collections.Generic.IList{System.Windows.Media.PixelFormatChannelMask}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IList<PixelFormatChannelMask>\n  nameWithType: IList<PixelFormatChannelMask>\n  fullName: System.Collections.Generic.IList<System.Windows.Media.PixelFormatChannelMask>\n- uid: System.Windows.Media.PixelFormat.op_Equality(System.Windows.Media.PixelFormat,System.Windows.Media.PixelFormat)\n  parent: System.Windows.Media.PixelFormat\n  isExternal: false\n  name: op_Equality(PixelFormat,PixelFormat)\n  nameWithType: PixelFormat.op_Equality(PixelFormat,PixelFormat)\n  fullName: System.Windows.Media.PixelFormat.op_Equality(PixelFormat,PixelFormat)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Media.PixelFormat\n  parent: System.Windows.Media\n  isExternal: false\n  name: PixelFormat\n  nameWithType: PixelFormat\n  fullName: System.Windows.Media.PixelFormat\n- uid: System.Windows.Media.PixelFormat\n  parent: System.Windows.Media\n  isExternal: false\n  name: PixelFormat\n  nameWithType: PixelFormat\n  fullName: System.Windows.Media.PixelFormat\n- uid: System.Windows.Media.PixelFormat.op_Inequality(System.Windows.Media.PixelFormat,System.Windows.Media.PixelFormat)\n  parent: System.Windows.Media.PixelFormat\n  isExternal: false\n  name: op_Inequality(PixelFormat,PixelFormat)\n  nameWithType: PixelFormat.op_Inequality(PixelFormat,PixelFormat)\n  fullName: System.Windows.Media.PixelFormat.op_Inequality(PixelFormat,PixelFormat)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Media.PixelFormat\n  parent: System.Windows.Media\n  isExternal: false\n  name: PixelFormat\n  nameWithType: PixelFormat\n  fullName: System.Windows.Media.PixelFormat\n- uid: System.Windows.Media.PixelFormat\n  parent: System.Windows.Media\n  isExternal: false\n  name: PixelFormat\n  nameWithType: PixelFormat\n  fullName: System.Windows.Media.PixelFormat\n- uid: System.Windows.Media.PixelFormat.ToString\n  parent: System.Windows.Media.PixelFormat\n  isExternal: false\n  name: ToString()\n  nameWithType: PixelFormat.ToString()\n  fullName: System.Windows.Media.PixelFormat.ToString()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Windows.Media.PixelFormat.Equals*\n  parent: System.Windows.Media.PixelFormat\n  isExternal: false\n  nameWithType: PixelFormat.\n"}