{"nodes":[{"pos":[673,689],"content":"ICryptoTransform","needQuote":true,"needEscape":true,"nodes":[{"content":"ICryptoTransform","pos":[0,16]}]},{"pos":[1201,1218],"content":"CanReuseTransform","needQuote":true,"needEscape":true,"nodes":[{"content":"CanReuseTransform","pos":[0,17]}]},{"pos":[1552,1586],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[1833,1859],"content":"CanTransformMultipleBlocks","needQuote":true,"needEscape":true,"nodes":[{"content":"CanTransformMultipleBlocks","pos":[0,26]}]},{"pos":[2220,2254],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2477,2491],"content":"InputBlockSize","needQuote":true,"needEscape":true,"nodes":[{"content":"InputBlockSize","pos":[0,14]}]},{"pos":[2813,2847],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3072,3087],"content":"OutputBlockSize","needQuote":true,"needEscape":true,"nodes":[{"content":"OutputBlockSize","pos":[0,15]}]},{"pos":[3412,3446],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3805,3852],"content":"TransformBlock(Byte[],Int32,Int32,Byte[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"TransformBlock(Byte[],Int32,Int32,Byte[],Int32)","pos":[0,47]}]},{"pos":[4350,4384],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4451,4485],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4551,4585],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4654,4688],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4756,4790],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4847,4881],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5196,5235],"content":"TransformFinalBlock(Byte[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"TransformFinalBlock(Byte[],Int32,Int32)","pos":[0,39]}]},{"pos":[5686,5720],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5787,5821],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5887,5921],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5979,6013],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6230,6247],"content":"CanReuseTransform","needQuote":true,"needEscape":true,"nodes":[{"content":"CanReuseTransform","pos":[0,17]}]},{"pos":[6442,6449],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[6665,6691],"content":"CanTransformMultipleBlocks","needQuote":true,"needEscape":true,"nodes":[{"content":"CanTransformMultipleBlocks","pos":[0,26]}]},{"pos":[6904,6911],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[7115,7129],"content":"InputBlockSize","needQuote":true,"needEscape":true,"nodes":[{"content":"InputBlockSize","pos":[0,14]}]},{"pos":[7316,7321],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[7522,7537],"content":"OutputBlockSize","needQuote":true,"needEscape":true,"nodes":[{"content":"OutputBlockSize","pos":[0,15]}]},{"pos":[7726,7731],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[7999,8046],"content":"TransformBlock(Byte[],Int32,Int32,Byte[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"TransformBlock(Byte[],Int32,Int32,Byte[],Int32)","pos":[0,47]}]},{"pos":[8299,8304],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[8416,8420],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[8533,8538],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[8651,8656],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[8768,8772],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[8885,8890],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[9136,9175],"content":"TransformFinalBlock(Byte[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"TransformFinalBlock(Byte[],Int32,Int32)","pos":[0,39]}]},{"pos":[9411,9415],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[9527,9531],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[9644,9649],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[9762,9767],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.ICryptoTransform\n  id: ICryptoTransform\n  children:\n  - System.Security.Cryptography.ICryptoTransform.CanReuseTransform\n  - System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks\n  - System.Security.Cryptography.ICryptoTransform.InputBlockSize\n  - System.Security.Cryptography.ICryptoTransform.OutputBlockSize\n  - System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  langs:\n  - csharp\n  name: ICryptoTransform\n  nameWithType: ICryptoTransform\n  fullName: System.Security.Cryptography.ICryptoTransform\n  type: Interface\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public interface ICryptoTransform : IDisposable\n  implements:\n  - System.IDisposable\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.ICryptoTransform.CanReuseTransform\n  id: CanReuseTransform\n  parent: System.Security.Cryptography.ICryptoTransform\n  langs:\n  - csharp\n  name: CanReuseTransform\n  nameWithType: ICryptoTransform.CanReuseTransform\n  fullName: System.Security.Cryptography.ICryptoTransform.CanReuseTransform\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public bool CanReuseTransform { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks\n  id: CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.ICryptoTransform\n  langs:\n  - csharp\n  name: CanTransformMultipleBlocks\n  nameWithType: ICryptoTransform.CanTransformMultipleBlocks\n  fullName: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public bool CanTransformMultipleBlocks { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.ICryptoTransform.InputBlockSize\n  id: InputBlockSize\n  parent: System.Security.Cryptography.ICryptoTransform\n  langs:\n  - csharp\n  name: InputBlockSize\n  nameWithType: ICryptoTransform.InputBlockSize\n  fullName: System.Security.Cryptography.ICryptoTransform.InputBlockSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public int InputBlockSize { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.ICryptoTransform.OutputBlockSize\n  id: OutputBlockSize\n  parent: System.Security.Cryptography.ICryptoTransform\n  langs:\n  - csharp\n  name: OutputBlockSize\n  nameWithType: ICryptoTransform.OutputBlockSize\n  fullName: System.Security.Cryptography.ICryptoTransform.OutputBlockSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public int OutputBlockSize { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.ICryptoTransform\n  langs:\n  - csharp\n  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  nameWithType: ICryptoTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  fullName: System.Security.Cryptography.ICryptoTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);\n    parameters:\n    - id: inputBuffer\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: inputOffset\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: inputCount\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: outputBuffer\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: outputOffset\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  id: TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.ICryptoTransform\n  langs:\n  - csharp\n  name: TransformFinalBlock(Byte[],Int32,Int32)\n  nameWithType: ICryptoTransform.TransformFinalBlock(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);\n    parameters:\n    - id: inputBuffer\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: inputOffset\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: inputCount\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Security.Cryptography.ICryptoTransform.CanReuseTransform\n  parent: System.Security.Cryptography.ICryptoTransform\n  isExternal: false\n  name: CanReuseTransform\n  nameWithType: ICryptoTransform.CanReuseTransform\n  fullName: System.Security.Cryptography.ICryptoTransform.CanReuseTransform\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.ICryptoTransform\n  isExternal: false\n  name: CanTransformMultipleBlocks\n  nameWithType: ICryptoTransform.CanTransformMultipleBlocks\n  fullName: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.ICryptoTransform.InputBlockSize\n  parent: System.Security.Cryptography.ICryptoTransform\n  isExternal: false\n  name: InputBlockSize\n  nameWithType: ICryptoTransform.InputBlockSize\n  fullName: System.Security.Cryptography.ICryptoTransform.InputBlockSize\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.ICryptoTransform.OutputBlockSize\n  parent: System.Security.Cryptography.ICryptoTransform\n  isExternal: false\n  name: OutputBlockSize\n  nameWithType: ICryptoTransform.OutputBlockSize\n  fullName: System.Security.Cryptography.ICryptoTransform.OutputBlockSize\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.ICryptoTransform\n  isExternal: false\n  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  nameWithType: ICryptoTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  fullName: System.Security.Cryptography.ICryptoTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.ICryptoTransform\n  isExternal: false\n  name: TransformFinalBlock(Byte[],Int32,Int32)\n  nameWithType: ICryptoTransform.TransformFinalBlock(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(Byte[],Int32,Int32)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n"}