{"nodes":[{"pos":[2538,2556],"content":"ITree<TKey,TValue>","needQuote":true,"needEscape":true,"nodes":[{"content":"ITree&lt;TKey,TValue&gt;","pos":[0,18],"source":"ITree<TKey,TValue>"}]},{"pos":[2986,3020],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3057,3091],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3546,3591],"content":"begin(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"begin(ContainerBidirectionalIterator<TValue>)"},{"pos":[4170,4204],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4312,4346],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4525,4532],"content":"clear()","needQuote":true,"needEscape":true,"nodes":[{"content":"clear()","pos":[0,7]}]},{"pos":[4986,4997],"content":"count(TKey)","needQuote":true,"needEscape":true,"nodes":[{"content":"count(TKey)","pos":[0,11]}]},{"pos":[5335,5369],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5426,5460],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5639,5646],"content":"empty()","needQuote":true,"needEscape":true,"nodes":[{"content":"empty()","pos":[0,7]}]},{"pos":[5972,6006],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6317,6360],"content":"end(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"end(ContainerBidirectionalIterator<TValue>)"},{"pos":[6933,6967],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7075,7109],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7658,7766],"content":"equal_range(GenericPair&lt;ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,ContainerBidirectionalIterator<ph id=\"ph2\">&lt;TValue&gt;</ph>&gt;,TKey)","needQuote":true,"needEscape":true,"source":"equal_range(GenericPair<ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator<TValue>>,TKey)"},{"pos":[8717,8751],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8806,8840],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8948,8982],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9169,9180],"content":"erase(TKey)","needQuote":true,"needEscape":true,"nodes":[{"content":"erase(TKey)","pos":[0,11]}]},{"pos":[9518,9552],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9609,9643],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10138,10214],"content":"erase(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,ContainerBidirectionalIterator)","needQuote":true,"needEscape":true,"source":"erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator)"},{"pos":[10927,10961],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11074,11108],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11216,11250],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11873,11980],"content":"erase(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)","needQuote":true,"needEscape":true,"source":"erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)"},{"pos":[12836,12870],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12988,13022],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13139,13173],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13281,13315],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13686,13735],"content":"find(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,TKey)","needQuote":true,"needEscape":true,"source":"find(ContainerBidirectionalIterator<TValue>,TKey)"},{"pos":[14335,14369],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14424,14458],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14566,14600],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14869,14896],"content":"insert(IEnumerable<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"insert(IEnumerable<TValue>)"},{"pos":[15350,15384],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15820,15873],"content":"insert(IInputIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,IInputIterator<ph id=\"ph2\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"insert(IInputIterator<TValue>,IInputIterator<TValue>)"},{"pos":[16454,16488],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16586,16620],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17106,17180],"content":"insert(GenericPair&lt;ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,Boolean&gt;,TValue)","needQuote":true,"needEscape":true,"source":"insert(GenericPair<ContainerBidirectionalIterator<TValue>,Boolean>,TValue)"},{"pos":[17933,17967],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18021,18055],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18163,18197],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18701,18785],"content":"insert(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,ContainerBidirectionalIterator,TValue)","needQuote":true,"needEscape":true,"source":"insert(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,TValue)"},{"pos":[19528,19562],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19675,19709],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19763,19797],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19905,19939],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20177,20187],"content":"key_comp()","needQuote":true,"needEscape":true,"nodes":[{"content":"key_comp()","pos":[0,10]}]},{"pos":[20624,20658],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20991,21047],"content":"lower_bound(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,TKey)","needQuote":true,"needEscape":true,"source":"lower_bound(ContainerBidirectionalIterator<TValue>,TKey)"},{"pos":[21668,21702],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21757,21791],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21899,21933],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22246,22290],"content":"rbegin(ReverseBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"rbegin(ReverseBidirectionalIterator<TValue>)"},{"pos":[22864,22898],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[23006,23040],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[23349,23391],"content":"rend(ReverseBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"rend(ReverseBidirectionalIterator<TValue>)"},{"pos":[23959,23993],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[24101,24135],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[24312,24318],"content":"size()","needQuote":true,"needEscape":true,"nodes":[{"content":"size()","pos":[0,6]}]},{"pos":[24638,24672],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[24917,24941],"content":"swap(ITree<TKey,TValue>)","needQuote":true,"needEscape":true,"nodes":[{"content":"swap(ITree&lt;TKey,TValue&gt;)","pos":[0,24],"source":"swap(ITree<TKey,TValue>)"}]},{"pos":[25370,25404],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[25737,25793],"content":"upper_bound(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,TKey)","needQuote":true,"needEscape":true,"source":"upper_bound(ContainerBidirectionalIterator<TValue>,TKey)"},{"pos":[26414,26448],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[26503,26537],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[26645,26679],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[26868,26880],"content":"value_comp()","needQuote":true,"needEscape":true,"nodes":[{"content":"value_comp()","pos":[0,12]}]},{"pos":[27331,27365],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[27612,27657],"content":"begin(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"begin(ContainerBidirectionalIterator<TValue>)"},{"pos":[27985,28023],"content":"ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"ContainerBidirectionalIterator<TValue>"},{"pos":[28280,28287],"content":"clear()","needQuote":true,"needEscape":true,"nodes":[{"content":"clear()","pos":[0,7]}]},{"pos":[28516,28527],"content":"count(TKey)","needQuote":true,"needEscape":true,"nodes":[{"content":"count(TKey)","pos":[0,11]}]},{"pos":[28708,28713],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28813,28817],"content":"TKey","needQuote":true,"needEscape":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[28973,28980],"content":"empty()","needQuote":true,"needEscape":true,"nodes":[{"content":"empty()","pos":[0,7]}]},{"pos":[29155,29162],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[29397,29440],"content":"end(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"end(ContainerBidirectionalIterator<TValue>)"},{"pos":[29764,29802],"content":"ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"ContainerBidirectionalIterator<TValue>"},{"pos":[30244,30352],"content":"equal_range(GenericPair&lt;ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,ContainerBidirectionalIterator<ph id=\"ph2\">&lt;TValue&gt;</ph>&gt;,TKey)","needQuote":true,"needEscape":true,"source":"equal_range(GenericPair<ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator<TValue>>,TKey)"},{"pos":[30914,31004],"content":"GenericPair&lt;ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,ContainerBidirectionalIterator<ph id=\"ph2\">&lt;TValue&gt;</ph><ph id=\"ph3\">&gt;</ph>","needQuote":true,"needEscape":true,"source":"GenericPair<ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator<TValue>>"},{"pos":[31358,31362],"content":"TKey","needQuote":true,"needEscape":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[31522,31533],"content":"erase(TKey)","needQuote":true,"needEscape":true,"nodes":[{"content":"erase(TKey)","pos":[0,11]}]},{"pos":[31714,31719],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[31819,31823],"content":"TKey","needQuote":true,"needEscape":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[32111,32187],"content":"erase(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,ContainerBidirectionalIterator)","needQuote":true,"needEscape":true,"source":"erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator)"},{"pos":[32577,32615],"content":"ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"ContainerBidirectionalIterator<TValue>"},{"pos":[32896,32926],"content":"ContainerBidirectionalIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerBidirectionalIterator","pos":[0,30]}]},{"pos":[33363,33470],"content":"erase(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)","needQuote":true,"needEscape":true,"source":"erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)"},{"pos":[33922,33960],"content":"ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"ContainerBidirectionalIterator<TValue>"},{"pos":[34241,34271],"content":"ContainerBidirectionalIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerBidirectionalIterator","pos":[0,30]}]},{"pos":[34536,34566],"content":"ContainerBidirectionalIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerBidirectionalIterator","pos":[0,30]}]},{"pos":[34877,34926],"content":"find(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,TKey)","needQuote":true,"needEscape":true,"source":"find(ContainerBidirectionalIterator<TValue>,TKey)"},{"pos":[35262,35300],"content":"ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"ContainerBidirectionalIterator<TValue>"},{"pos":[35492,35496],"content":"TKey","needQuote":true,"needEscape":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[35697,35724],"content":"insert(IEnumerable<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"insert(IEnumerable<TValue>)"},{"pos":[35991,36010],"content":"IEnumerable<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<TValue>"},{"pos":[36325,36378],"content":"insert(IInputIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,IInputIterator<ph id=\"ph2\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"insert(IInputIterator<TValue>,IInputIterator<TValue>)"},{"pos":[36706,36728],"content":"IInputIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"IInputIterator<TValue>"},{"pos":[36964,36986],"content":"IInputIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"IInputIterator<TValue>"},{"pos":[37338,37412],"content":"insert(GenericPair&lt;ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,Boolean&gt;,TValue)","needQuote":true,"needEscape":true,"source":"insert(GenericPair<ContainerBidirectionalIterator<TValue>,Boolean>,TValue)"},{"pos":[37849,37908],"content":"GenericPair&lt;ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,Boolean&gt;","needQuote":true,"needEscape":true,"source":"GenericPair<ContainerBidirectionalIterator<TValue>,Boolean>"},{"pos":[38176,38182],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[38478,38562],"content":"insert(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,ContainerBidirectionalIterator,TValue)","needQuote":true,"needEscape":true,"source":"insert(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,TValue)"},{"pos":[38968,39006],"content":"ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"ContainerBidirectionalIterator<TValue>"},{"pos":[39287,39317],"content":"ContainerBidirectionalIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerBidirectionalIterator","pos":[0,30]}]},{"pos":[39495,39501],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[39664,39674],"content":"key_comp()","needQuote":true,"needEscape":true,"nodes":[{"content":"key_comp()","pos":[0,10]}]},{"pos":[39924,39957],"content":"BinaryDelegate<TKey,TKey,Boolean>","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryDelegate&lt;TKey,TKey,Boolean&gt;","pos":[0,33],"source":"BinaryDelegate<TKey,TKey,Boolean>"}]},{"pos":[40280,40336],"content":"lower_bound(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,TKey)","needQuote":true,"needEscape":true,"source":"lower_bound(ContainerBidirectionalIterator<TValue>,TKey)"},{"pos":[40686,40724],"content":"ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"ContainerBidirectionalIterator<TValue>"},{"pos":[40916,40920],"content":"TKey","needQuote":true,"needEscape":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[41143,41187],"content":"rbegin(ReverseBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"rbegin(ReverseBidirectionalIterator<TValue>)"},{"pos":[41511,41547],"content":"ReverseBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"ReverseBidirectionalIterator<TValue>"},{"pos":[41865,41907],"content":"rend(ReverseBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"rend(ReverseBidirectionalIterator<TValue>)"},{"pos":[42227,42263],"content":"ReverseBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"ReverseBidirectionalIterator<TValue>"},{"pos":[42515,42521],"content":"size()","needQuote":true,"needEscape":true,"nodes":[{"content":"size()","pos":[0,6]}]},{"pos":[42692,42697],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[42895,42919],"content":"swap(ITree<TKey,TValue>)","needQuote":true,"needEscape":true,"nodes":[{"content":"swap(ITree&lt;TKey,TValue&gt;)","pos":[0,24],"source":"swap(ITree<TKey,TValue>)"}]},{"pos":[43164,43182],"content":"ITree<TKey,TValue>","needQuote":true,"needEscape":true,"nodes":[{"content":"ITree&lt;TKey,TValue&gt;","pos":[0,18],"source":"ITree<TKey,TValue>"}]},{"pos":[43468,43524],"content":"upper_bound(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,TKey)","needQuote":true,"needEscape":true,"source":"upper_bound(ContainerBidirectionalIterator<TValue>,TKey)"},{"pos":[43874,43912],"content":"ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"ContainerBidirectionalIterator<TValue>"},{"pos":[44104,44108],"content":"TKey","needQuote":true,"needEscape":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[44269,44281],"content":"value_comp()","needQuote":true,"needEscape":true,"nodes":[{"content":"value_comp()","pos":[0,12]}]},{"pos":[44539,44576],"content":"BinaryDelegate<TValue,TValue,Boolean>","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryDelegate&lt;TValue,TValue,Boolean&gt;","pos":[0,37],"source":"BinaryDelegate<TValue,TValue,Boolean>"}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.VisualC.StlClr.ITree`2\n  id: ITree`2\n  children:\n  - Microsoft.VisualC.StlClr.ITree`2.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  - Microsoft.VisualC.StlClr.ITree`2.clear\n  - Microsoft.VisualC.StlClr.ITree`2.count(`0)\n  - Microsoft.VisualC.StlClr.ITree`2.empty\n  - Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  - Microsoft.VisualC.StlClr.ITree`2.equal_range(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}}@,`0)\n  - Microsoft.VisualC.StlClr.ITree`2.erase(`0)\n  - Microsoft.VisualC.StlClr.ITree`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  - Microsoft.VisualC.StlClr.ITree`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  - Microsoft.VisualC.StlClr.ITree`2.find(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,`0)\n  - Microsoft.VisualC.StlClr.ITree`2.insert(System.Collections.Generic.IEnumerable{`1})\n  - Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  - Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},System.Boolean}@,`1)\n  - Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,`1)\n  - Microsoft.VisualC.StlClr.ITree`2.key_comp\n  - Microsoft.VisualC.StlClr.ITree`2.lower_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,`0)\n  - Microsoft.VisualC.StlClr.ITree`2.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1@)\n  - Microsoft.VisualC.StlClr.ITree`2.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1@)\n  - Microsoft.VisualC.StlClr.ITree`2.size\n  - Microsoft.VisualC.StlClr.ITree`2.swap(Microsoft.VisualC.StlClr.ITree`2)\n  - Microsoft.VisualC.StlClr.ITree`2.upper_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,`0)\n  - Microsoft.VisualC.StlClr.ITree`2.value_comp\n  langs:\n  - csharp\n  name: ITree<TKey,TValue>\n  nameWithType: ITree<TKey,TValue>\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>\n  type: Interface\n  syntax:\n    content: >-\n      [System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Design\", \"CA1005\")]\n\n      public interface ITree<TKey,TValue> : ICloneable, Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer<TValue>, System.Collections.ICollection\n    typeParameters:\n    - id: TKey\n      description: Parameter description to be filled\n    - id: TValue\n      description: Parameter description to be filled\n  implements:\n  - Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer<TValue>\n  - System.Collections.ICollection\n  - System.ICloneable\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.ITree`2.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  id: begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  langs:\n  - csharp\n  name: begin(ContainerBidirectionalIterator<TValue>)\n  nameWithType: ITree<TKey,TValue>.begin(ContainerBidirectionalIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.begin(ContainerBidirectionalIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) begin (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue> );\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n      description: Parameter description to be filled\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.ITree`2.clear\n  id: clear\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  langs:\n  - csharp\n  name: clear()\n  nameWithType: ITree<TKey,TValue>.clear()\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.clear()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void clear ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.ITree`2.count(`0)\n  id: count(`0)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  langs:\n  - csharp\n  name: count(TKey)\n  nameWithType: ITree<TKey,TValue>.count(TKey)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.count(TKey)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public int count (TKey _Keyval);\n    parameters:\n    - id: _Keyval\n      type: TKey\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.ITree`2.empty\n  id: empty\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  langs:\n  - csharp\n  name: empty()\n  nameWithType: ITree<TKey,TValue>.empty()\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.empty()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public bool empty ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  id: end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  langs:\n  - csharp\n  name: end(ContainerBidirectionalIterator<TValue>)\n  nameWithType: ITree<TKey,TValue>.end(ContainerBidirectionalIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.end(ContainerBidirectionalIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) end (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue> );\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n      description: Parameter description to be filled\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.ITree`2.equal_range(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}}@,`0)\n  id: equal_range(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}}@,`0)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  langs:\n  - csharp\n  name: equal_range(GenericPair<ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator<TValue>>,TKey)\n  nameWithType: ITree<TKey,TValue>.equal_range(GenericPair<ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator<TValue>>,TKey)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.equal_range(GenericPair<ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator<TValue>>,TKey)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) equal_range (ref Microsoft.VisualC.StlClr.GenericPair<Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>> , TKey _Keyval);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{TValue},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{TValue}}\n      description: Parameter description to be filled\n    - id: _Keyval\n      type: TKey\n      description: Parameter description to be filled\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.ITree`2.erase(`0)\n  id: erase(`0)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  langs:\n  - csharp\n  name: erase(TKey)\n  nameWithType: ITree<TKey,TValue>.erase(TKey)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.erase(TKey)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public int erase (TKey _Keyval);\n    parameters:\n    - id: _Keyval\n      type: TKey\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.ITree`2.erase*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.ITree`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  id: erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  langs:\n  - csharp\n  name: erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator)\n  nameWithType: ITree<TKey,TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) erase (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue> , Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Where);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n      description: Parameter description to be filled\n    - id: _Where\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: Parameter description to be filled\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.ITree`2.erase*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.ITree`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  id: erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  langs:\n  - csharp\n  name: erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)\n  nameWithType: ITree<TKey,TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) erase (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue> , Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _First_iter, Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Last_iter);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n      description: Parameter description to be filled\n    - id: _First_iter\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: Parameter description to be filled\n    - id: _Last_iter\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: Parameter description to be filled\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.ITree`2.erase*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.ITree`2.find(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,`0)\n  id: find(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,`0)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  langs:\n  - csharp\n  name: find(ContainerBidirectionalIterator<TValue>,TKey)\n  nameWithType: ITree<TKey,TValue>.find(ContainerBidirectionalIterator<TValue>,TKey)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.find(ContainerBidirectionalIterator<TValue>,TKey)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) find (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue> , TKey _Keyval);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n      description: Parameter description to be filled\n    - id: _Keyval\n      type: TKey\n      description: Parameter description to be filled\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.ITree`2.insert(System.Collections.Generic.IEnumerable{`1})\n  id: insert(System.Collections.Generic.IEnumerable{`1})\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  langs:\n  - csharp\n  name: insert(IEnumerable<TValue>)\n  nameWithType: ITree<TKey,TValue>.insert(IEnumerable<TValue>)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.insert(IEnumerable<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void insert (System.Collections.Generic.IEnumerable<TValue> _Right);\n    parameters:\n    - id: _Right\n      type: System.Collections.Generic.IEnumerable{TValue}\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.ITree`2.insert*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  id: insert(Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  langs:\n  - csharp\n  name: insert(IInputIterator<TValue>,IInputIterator<TValue>)\n  nameWithType: ITree<TKey,TValue>.insert(IInputIterator<TValue>,IInputIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.insert(IInputIterator<TValue>,IInputIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void insert (Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _First, Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _Last);\n    parameters:\n    - id: _First\n      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n      description: Parameter description to be filled\n    - id: _Last\n      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.ITree`2.insert*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},System.Boolean}@,`1)\n  id: insert(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},System.Boolean}@,`1)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  langs:\n  - csharp\n  name: insert(GenericPair<ContainerBidirectionalIterator<TValue>,Boolean>,TValue)\n  nameWithType: ITree<TKey,TValue>.insert(GenericPair<ContainerBidirectionalIterator<TValue>,Boolean>,TValue)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.insert(GenericPair<ContainerBidirectionalIterator<TValue>,Boolean>,TValue)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) insert (ref Microsoft.VisualC.StlClr.GenericPair<Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>,bool> , TValue _Val);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{TValue},System.Boolean}\n      description: Parameter description to be filled\n    - id: _Val\n      type: TValue\n      description: Parameter description to be filled\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.ITree`2.insert*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,`1)\n  id: insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,`1)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  langs:\n  - csharp\n  name: insert(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,TValue)\n  nameWithType: ITree<TKey,TValue>.insert(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,TValue)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.insert(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,TValue)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) insert (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue> , Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Where, TValue _Val);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n      description: Parameter description to be filled\n    - id: _Where\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: Parameter description to be filled\n    - id: _Val\n      type: TValue\n      description: Parameter description to be filled\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.ITree`2.insert*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.ITree`2.key_comp\n  id: key_comp\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  langs:\n  - csharp\n  name: key_comp()\n  nameWithType: ITree<TKey,TValue>.key_comp()\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.key_comp()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Microsoft.VisualC.StlClr.BinaryDelegate<TKey,TKey,bool> key_comp ();\n    parameters: []\n    return:\n      type: Microsoft.VisualC.StlClr.BinaryDelegate{TKey,TKey,System.Boolean}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.ITree`2.lower_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,`0)\n  id: lower_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,`0)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  langs:\n  - csharp\n  name: lower_bound(ContainerBidirectionalIterator<TValue>,TKey)\n  nameWithType: ITree<TKey,TValue>.lower_bound(ContainerBidirectionalIterator<TValue>,TKey)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.lower_bound(ContainerBidirectionalIterator<TValue>,TKey)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) lower_bound (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue> , TKey _Keyval);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n      description: Parameter description to be filled\n    - id: _Keyval\n      type: TKey\n      description: Parameter description to be filled\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.ITree`2.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1@)\n  id: rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1@)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  langs:\n  - csharp\n  name: rbegin(ReverseBidirectionalIterator<TValue>)\n  nameWithType: ITree<TKey,TValue>.rbegin(ReverseBidirectionalIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.rbegin(ReverseBidirectionalIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) rbegin (ref Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator<TValue> );\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n      description: Parameter description to be filled\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.ITree`2.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1@)\n  id: rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1@)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  langs:\n  - csharp\n  name: rend(ReverseBidirectionalIterator<TValue>)\n  nameWithType: ITree<TKey,TValue>.rend(ReverseBidirectionalIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.rend(ReverseBidirectionalIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) rend (ref Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator<TValue> );\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n      description: Parameter description to be filled\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.ITree`2.size\n  id: size\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  langs:\n  - csharp\n  name: size()\n  nameWithType: ITree<TKey,TValue>.size()\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.size()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public int size ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.ITree`2.swap(Microsoft.VisualC.StlClr.ITree`2)\n  id: swap(Microsoft.VisualC.StlClr.ITree`2)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  langs:\n  - csharp\n  name: swap(ITree<TKey,TValue>)\n  nameWithType: ITree<TKey,TValue>.swap(ITree<TKey,TValue>)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.swap(ITree<TKey,TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void swap (Microsoft.VisualC.StlClr.ITree<TKey,TValue> _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.ITree`2\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.ITree`2.upper_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,`0)\n  id: upper_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,`0)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  langs:\n  - csharp\n  name: upper_bound(ContainerBidirectionalIterator<TValue>,TKey)\n  nameWithType: ITree<TKey,TValue>.upper_bound(ContainerBidirectionalIterator<TValue>,TKey)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.upper_bound(ContainerBidirectionalIterator<TValue>,TKey)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) upper_bound (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue> , TKey _Keyval);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n      description: Parameter description to be filled\n    - id: _Keyval\n      type: TKey\n      description: Parameter description to be filled\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.ITree`2.value_comp\n  id: value_comp\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  langs:\n  - csharp\n  name: value_comp()\n  nameWithType: ITree<TKey,TValue>.value_comp()\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.value_comp()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Microsoft.VisualC.StlClr.BinaryDelegate<TValue,TValue,bool> value_comp ();\n    parameters: []\n    return:\n      type: Microsoft.VisualC.StlClr.BinaryDelegate{TValue,TValue,System.Boolean}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: Microsoft.VisualC.StlClr.ITree`2.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  isExternal: false\n  name: begin(ContainerBidirectionalIterator<TValue>)\n  nameWithType: ITree<TKey,TValue>.begin(ContainerBidirectionalIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.begin(ContainerBidirectionalIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ContainerBidirectionalIterator<TValue>\n  nameWithType: ContainerBidirectionalIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.ITree`2.clear\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  isExternal: false\n  name: clear()\n  nameWithType: ITree<TKey,TValue>.clear()\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.clear()\n- uid: Microsoft.VisualC.StlClr.ITree`2.count(`0)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  isExternal: false\n  name: count(TKey)\n  nameWithType: ITree<TKey,TValue>.count(TKey)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.count(TKey)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: TKey\n  parent: ''\n  isExternal: true\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: Microsoft.VisualC.StlClr.ITree`2.empty\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  isExternal: false\n  name: empty()\n  nameWithType: ITree<TKey,TValue>.empty()\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.empty()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.VisualC.StlClr.ITree`2.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  isExternal: false\n  name: end(ContainerBidirectionalIterator<TValue>)\n  nameWithType: ITree<TKey,TValue>.end(ContainerBidirectionalIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.end(ContainerBidirectionalIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ContainerBidirectionalIterator<TValue>\n  nameWithType: ContainerBidirectionalIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.ITree`2.equal_range(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1}}@,`0)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  isExternal: false\n  name: equal_range(GenericPair<ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator<TValue>>,TKey)\n  nameWithType: ITree<TKey,TValue>.equal_range(GenericPair<ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator<TValue>>,TKey)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.equal_range(GenericPair<ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator<TValue>>,TKey)\n- uid: Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{TValue},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{TValue}}\n  parent: Microsoft.VisualC.StlClr\n  isExternal: false\n  name: GenericPair<ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator<TValue>>\n  nameWithType: GenericPair<ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator<TValue>>\n  fullName: Microsoft.VisualC.StlClr.GenericPair<Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>>\n- uid: TKey\n  parent: ''\n  isExternal: true\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: Microsoft.VisualC.StlClr.ITree`2.erase(`0)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  isExternal: false\n  name: erase(TKey)\n  nameWithType: ITree<TKey,TValue>.erase(TKey)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.erase(TKey)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: TKey\n  parent: ''\n  isExternal: true\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: Microsoft.VisualC.StlClr.ITree`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  isExternal: false\n  name: erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator)\n  nameWithType: ITree<TKey,TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ContainerBidirectionalIterator<TValue>\n  nameWithType: ContainerBidirectionalIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerBidirectionalIterator\n  nameWithType: ContainerBidirectionalIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n- uid: Microsoft.VisualC.StlClr.ITree`2.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  isExternal: false\n  name: erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)\n  nameWithType: ITree<TKey,TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ContainerBidirectionalIterator<TValue>\n  nameWithType: ContainerBidirectionalIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerBidirectionalIterator\n  nameWithType: ContainerBidirectionalIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerBidirectionalIterator\n  nameWithType: ContainerBidirectionalIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n- uid: Microsoft.VisualC.StlClr.ITree`2.find(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,`0)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  isExternal: false\n  name: find(ContainerBidirectionalIterator<TValue>,TKey)\n  nameWithType: ITree<TKey,TValue>.find(ContainerBidirectionalIterator<TValue>,TKey)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.find(ContainerBidirectionalIterator<TValue>,TKey)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ContainerBidirectionalIterator<TValue>\n  nameWithType: ContainerBidirectionalIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>\n- uid: TKey\n  parent: ''\n  isExternal: true\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: Microsoft.VisualC.StlClr.ITree`2.insert(System.Collections.Generic.IEnumerable{`1})\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  isExternal: false\n  name: insert(IEnumerable<TValue>)\n  nameWithType: ITree<TKey,TValue>.insert(IEnumerable<TValue>)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.insert(IEnumerable<TValue>)\n- uid: System.Collections.Generic.IEnumerable{TValue}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TValue>\n  nameWithType: IEnumerable<TValue>\n  fullName: System.Collections.Generic.IEnumerable<TValue>\n- uid: Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  isExternal: false\n  name: insert(IInputIterator<TValue>,IInputIterator<TValue>)\n  nameWithType: ITree<TKey,TValue>.insert(IInputIterator<TValue>,IInputIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.insert(IInputIterator<TValue>,IInputIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: IInputIterator<TValue>\n  nameWithType: IInputIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: IInputIterator<TValue>\n  nameWithType: IInputIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`1},System.Boolean}@,`1)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  isExternal: false\n  name: insert(GenericPair<ContainerBidirectionalIterator<TValue>,Boolean>,TValue)\n  nameWithType: ITree<TKey,TValue>.insert(GenericPair<ContainerBidirectionalIterator<TValue>,Boolean>,TValue)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.insert(GenericPair<ContainerBidirectionalIterator<TValue>,Boolean>,TValue)\n- uid: Microsoft.VisualC.StlClr.GenericPair{Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{TValue},System.Boolean}\n  parent: Microsoft.VisualC.StlClr\n  isExternal: false\n  name: GenericPair<ContainerBidirectionalIterator<TValue>,Boolean>\n  nameWithType: GenericPair<ContainerBidirectionalIterator<TValue>,Boolean>\n  fullName: Microsoft.VisualC.StlClr.GenericPair<Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>,System.Boolean>\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: Microsoft.VisualC.StlClr.ITree`2.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,`1)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  isExternal: false\n  name: insert(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,TValue)\n  nameWithType: ITree<TKey,TValue>.insert(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,TValue)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.insert(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,TValue)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ContainerBidirectionalIterator<TValue>\n  nameWithType: ContainerBidirectionalIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerBidirectionalIterator\n  nameWithType: ContainerBidirectionalIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: Microsoft.VisualC.StlClr.ITree`2.key_comp\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  isExternal: false\n  name: key_comp()\n  nameWithType: ITree<TKey,TValue>.key_comp()\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.key_comp()\n- uid: Microsoft.VisualC.StlClr.BinaryDelegate{TKey,TKey,System.Boolean}\n  parent: Microsoft.VisualC.StlClr\n  isExternal: false\n  name: BinaryDelegate<TKey,TKey,Boolean>\n  nameWithType: BinaryDelegate<TKey,TKey,Boolean>\n  fullName: Microsoft.VisualC.StlClr.BinaryDelegate<TKey,TKey,System.Boolean>\n- uid: Microsoft.VisualC.StlClr.ITree`2.lower_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,`0)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  isExternal: false\n  name: lower_bound(ContainerBidirectionalIterator<TValue>,TKey)\n  nameWithType: ITree<TKey,TValue>.lower_bound(ContainerBidirectionalIterator<TValue>,TKey)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.lower_bound(ContainerBidirectionalIterator<TValue>,TKey)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ContainerBidirectionalIterator<TValue>\n  nameWithType: ContainerBidirectionalIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>\n- uid: TKey\n  parent: ''\n  isExternal: true\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: Microsoft.VisualC.StlClr.ITree`2.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1@)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  isExternal: false\n  name: rbegin(ReverseBidirectionalIterator<TValue>)\n  nameWithType: ITree<TKey,TValue>.rbegin(ReverseBidirectionalIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.rbegin(ReverseBidirectionalIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ReverseBidirectionalIterator<TValue>\n  nameWithType: ReverseBidirectionalIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.ITree`2.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1@)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  isExternal: false\n  name: rend(ReverseBidirectionalIterator<TValue>)\n  nameWithType: ITree<TKey,TValue>.rend(ReverseBidirectionalIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.rend(ReverseBidirectionalIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ReverseBidirectionalIterator<TValue>\n  nameWithType: ReverseBidirectionalIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.ITree`2.size\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  isExternal: false\n  name: size()\n  nameWithType: ITree<TKey,TValue>.size()\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.size()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: Microsoft.VisualC.StlClr.ITree`2.swap(Microsoft.VisualC.StlClr.ITree`2)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  isExternal: false\n  name: swap(ITree<TKey,TValue>)\n  nameWithType: ITree<TKey,TValue>.swap(ITree<TKey,TValue>)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.swap(ITree<TKey,TValue>)\n- uid: Microsoft.VisualC.StlClr.ITree`2\n  parent: Microsoft.VisualC.StlClr\n  isExternal: false\n  name: ITree<TKey,TValue>\n  nameWithType: ITree<TKey,TValue>\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>\n- uid: Microsoft.VisualC.StlClr.ITree`2.upper_bound(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,`0)\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  isExternal: false\n  name: upper_bound(ContainerBidirectionalIterator<TValue>,TKey)\n  nameWithType: ITree<TKey,TValue>.upper_bound(ContainerBidirectionalIterator<TValue>,TKey)\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.upper_bound(ContainerBidirectionalIterator<TValue>,TKey)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ContainerBidirectionalIterator<TValue>\n  nameWithType: ContainerBidirectionalIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>\n- uid: TKey\n  parent: ''\n  isExternal: true\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: Microsoft.VisualC.StlClr.ITree`2.value_comp\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  isExternal: false\n  name: value_comp()\n  nameWithType: ITree<TKey,TValue>.value_comp()\n  fullName: Microsoft.VisualC.StlClr.ITree<TKey,TValue>.value_comp()\n- uid: Microsoft.VisualC.StlClr.BinaryDelegate{TValue,TValue,System.Boolean}\n  parent: Microsoft.VisualC.StlClr\n  isExternal: false\n  name: BinaryDelegate<TValue,TValue,Boolean>\n  nameWithType: BinaryDelegate<TValue,TValue,Boolean>\n  fullName: Microsoft.VisualC.StlClr.BinaryDelegate<TValue,TValue,System.Boolean>\n- uid: Microsoft.VisualC.StlClr.ITree`2.erase*\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  isExternal: false\n  nameWithType: ITree<TKey,TValue>.\n- uid: Microsoft.VisualC.StlClr.ITree`2.insert*\n  parent: Microsoft.VisualC.StlClr.ITree`2\n  isExternal: false\n  nameWithType: ITree<TKey,TValue>.\n"}