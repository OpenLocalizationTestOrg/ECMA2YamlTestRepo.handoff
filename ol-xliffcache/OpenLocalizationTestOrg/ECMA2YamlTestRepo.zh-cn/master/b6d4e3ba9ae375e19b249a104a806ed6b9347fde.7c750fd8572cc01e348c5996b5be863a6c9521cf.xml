{"nodes":[{"pos":[421,441],"content":"Partitioner<ph id=\"ph1\">&lt;TSource&gt;</ph>","needQuote":true,"needEscape":true,"source":"Partitioner<TSource>"},{"pos":[679,713],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[1260,1273],"content":"Partitioner()","needQuote":true,"needEscape":true,"nodes":[{"content":"Partitioner()","pos":[0,13]}]},{"pos":[1790,1812],"content":"GetDynamicPartitions()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetDynamicPartitions()","pos":[0,22]}]},{"pos":[2265,2299],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2544,2564],"content":"GetPartitions(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetPartitions(Int32)","pos":[0,20]}]},{"pos":[3034,3068],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3194,3228],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3469,3494],"content":"SupportsDynamicPartitions","needQuote":true,"needEscape":true,"nodes":[{"content":"SupportsDynamicPartitions","pos":[0,25]}]},{"pos":[3870,3904],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4015,4028],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[4168,4181],"content":"Partitioner()","needQuote":true,"needEscape":true,"nodes":[{"content":"Partitioner()","pos":[0,13]}]},{"pos":[4464,4486],"content":"GetDynamicPartitions()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetDynamicPartitions()","pos":[0,22]}]},{"pos":[4753,4773],"content":"IEnumerable<ph id=\"ph1\">&lt;TSource&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<TSource>"},{"pos":[5032,5052],"content":"GetPartitions(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetPartitions(Int32)","pos":[0,20]}]},{"pos":[5349,5376],"content":"IList&lt;IEnumerator<ph id=\"ph1\">&lt;TSource&gt;</ph><ph id=\"ph2\">&gt;</ph>","needQuote":true,"needEscape":true,"source":"IList<IEnumerator<TSource>>"},{"pos":[5580,5585],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[5792,5817],"content":"SupportsDynamicPartitions","needQuote":true,"needEscape":true,"nodes":[{"content":"SupportsDynamicPartitions","pos":[0,25]}]},{"pos":[6037,6044],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Concurrent.Partitioner`1\n  id: Partitioner`1\n  children:\n  - System.Collections.Concurrent.Partitioner`1.#ctor\n  - System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions\n  - System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)\n  - System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\n  langs:\n  - csharp\n  name: Partitioner<TSource>\n  nameWithType: Partitioner<TSource>\n  fullName: System.Collections.Concurrent.Partitioner<TSource>\n  type: Class\n  syntax:\n    content: public abstract class Partitioner<TSource>\n    typeParameters:\n    - id: TSource\n      description: Parameter description to be filled\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.Partitioner`1.#ctor\n  id: '#ctor'\n  parent: System.Collections.Concurrent.Partitioner`1\n  langs:\n  - csharp\n  name: Partitioner()\n  nameWithType: Partitioner<TSource>.Partitioner()\n  fullName: System.Collections.Concurrent.Partitioner<TSource>.Partitioner()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: protected Partitioner ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions\n  id: GetDynamicPartitions\n  parent: System.Collections.Concurrent.Partitioner`1\n  langs:\n  - csharp\n  name: GetDynamicPartitions()\n  nameWithType: Partitioner<TSource>.GetDynamicPartitions()\n  fullName: System.Collections.Concurrent.Partitioner<TSource>.GetDynamicPartitions()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public virtual System.Collections.Generic.IEnumerable<TSource> GetDynamicPartitions ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)\n  id: GetPartitions(System.Int32)\n  parent: System.Collections.Concurrent.Partitioner`1\n  langs:\n  - csharp\n  name: GetPartitions(Int32)\n  nameWithType: Partitioner<TSource>.GetPartitions(Int32)\n  fullName: System.Collections.Concurrent.Partitioner<TSource>.GetPartitions(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public abstract System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<TSource>> GetPartitions (int partitionCount);\n    parameters:\n    - id: partitionCount\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{TSource}}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\n  id: SupportsDynamicPartitions\n  parent: System.Collections.Concurrent.Partitioner`1\n  langs:\n  - csharp\n  name: SupportsDynamicPartitions\n  nameWithType: Partitioner<TSource>.SupportsDynamicPartitions\n  fullName: System.Collections.Concurrent.Partitioner<TSource>.SupportsDynamicPartitions\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public virtual bool SupportsDynamicPartitions { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Collections.Concurrent.Partitioner`1.#ctor\n  parent: System.Collections.Concurrent.Partitioner`1\n  isExternal: false\n  name: Partitioner()\n  nameWithType: Partitioner<TSource>.Partitioner()\n  fullName: System.Collections.Concurrent.Partitioner<TSource>.Partitioner()\n- uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions\n  parent: System.Collections.Concurrent.Partitioner`1\n  isExternal: false\n  name: GetDynamicPartitions()\n  nameWithType: Partitioner<TSource>.GetDynamicPartitions()\n  fullName: System.Collections.Concurrent.Partitioner<TSource>.GetDynamicPartitions()\n- uid: System.Collections.Generic.IEnumerable{TSource}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TSource>\n  nameWithType: IEnumerable<TSource>\n  fullName: System.Collections.Generic.IEnumerable<TSource>\n- uid: System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)\n  parent: System.Collections.Concurrent.Partitioner`1\n  isExternal: false\n  name: GetPartitions(Int32)\n  nameWithType: Partitioner<TSource>.GetPartitions(Int32)\n  fullName: System.Collections.Concurrent.Partitioner<TSource>.GetPartitions(Int32)\n- uid: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{TSource}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IList<IEnumerator<TSource>>\n  nameWithType: IList<IEnumerator<TSource>>\n  fullName: System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<TSource>>\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\n  parent: System.Collections.Concurrent.Partitioner`1\n  isExternal: false\n  name: SupportsDynamicPartitions\n  nameWithType: Partitioner<TSource>.SupportsDynamicPartitions\n  fullName: System.Collections.Concurrent.Partitioner<TSource>.SupportsDynamicPartitions\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n"}