{"nodes":[{"pos":[1181,1191],"content":"GenericAce","needQuote":true,"needEscape":true,"nodes":[{"content":"GenericAce","pos":[0,10]}]},{"pos":[1816,1824],"content":"AceFlags","needQuote":true,"needEscape":true,"nodes":[{"content":"AceFlags","pos":[0,8]}]},{"pos":[2184,2218],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2417,2424],"content":"AceType","needQuote":true,"needEscape":true,"nodes":[{"content":"AceType","pos":[0,7]}]},{"pos":[2774,2808],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3013,3023],"content":"AuditFlags","needQuote":true,"needEscape":true,"nodes":[{"content":"AuditFlags","pos":[0,10]}]},{"pos":[3388,3422],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3631,3643],"content":"BinaryLength","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryLength","pos":[0,12]}]},{"pos":[3958,3992],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4185,4191],"content":"Copy()","needQuote":true,"needEscape":true,"nodes":[{"content":"Copy()","pos":[0,6]}]},{"pos":[4554,4588],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4869,4903],"content":"CreateFromBinaryForm(Byte[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"CreateFromBinaryForm(Byte[],Int32)","pos":[0,34]}]},{"pos":[5353,5387],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5449,5483],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5568,5602],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5829,5843],"content":"Equals(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[6182,6216],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6275,6309],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6576,6603],"content":"GetBinaryForm(Byte[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetBinaryForm(Byte[],Int32)","pos":[0,27]}]},{"pos":[6998,7032],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7094,7128],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7335,7348],"content":"GetHashCode()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[7683,7717],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7934,7950],"content":"InheritanceFlags","needQuote":true,"needEscape":true,"nodes":[{"content":"InheritanceFlags","pos":[0,16]}]},{"pos":[8345,8379],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8586,8597],"content":"IsInherited","needQuote":true,"needEscape":true,"nodes":[{"content":"IsInherited","pos":[0,11]}]},{"pos":[8903,8937],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9310,9344],"content":"op_Equality(GenericAce,GenericAce)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Equality(GenericAce,GenericAce)","pos":[0,34]}]},{"pos":[9836,9870],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9959,9993],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10052,10086],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10463,10499],"content":"op_Inequality(GenericAce,GenericAce)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Inequality(GenericAce,GenericAce)","pos":[0,36]}]},{"pos":[10997,11031],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11120,11154],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11213,11247],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11464,11480],"content":"PropagationFlags","needQuote":true,"needEscape":true,"nodes":[{"content":"PropagationFlags","pos":[0,16]}]},{"pos":[11875,11909],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12020,12033],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[12170,12178],"content":"AceFlags","needQuote":true,"needEscape":true,"nodes":[{"content":"AceFlags","pos":[0,8]}]},{"pos":[12391,12399],"content":"AceFlags","needQuote":true,"needEscape":true,"nodes":[{"content":"AceFlags","pos":[0,8]}]},{"pos":[12611,12618],"content":"AceType","needQuote":true,"needEscape":true,"nodes":[{"content":"AceType","pos":[0,7]}]},{"pos":[12828,12835],"content":"AceType","needQuote":true,"needEscape":true,"nodes":[{"content":"AceType","pos":[0,7]}]},{"pos":[13048,13058],"content":"AuditFlags","needQuote":true,"needEscape":true,"nodes":[{"content":"AuditFlags","pos":[0,10]}]},{"pos":[13277,13287],"content":"AuditFlags","needQuote":true,"needEscape":true,"nodes":[{"content":"AuditFlags","pos":[0,10]}]},{"pos":[13508,13520],"content":"BinaryLength","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryLength","pos":[0,12]}]},{"pos":[13692,13697],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[13877,13883],"content":"Copy()","needQuote":true,"needEscape":true,"nodes":[{"content":"Copy()","pos":[0,6]}]},{"pos":[14094,14104],"content":"GenericAce","needQuote":true,"needEscape":true,"nodes":[{"content":"GenericAce","pos":[0,10]}]},{"pos":[14361,14395],"content":"CreateFromBinaryForm(Byte[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"CreateFromBinaryForm(Byte[],Int32)","pos":[0,34]}]},{"pos":[14662,14672],"content":"GenericAce","needQuote":true,"needEscape":true,"nodes":[{"content":"GenericAce","pos":[0,10]}]},{"pos":[14817,14821],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[14934,14939],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[15136,15150],"content":"Equals(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[15328,15335],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[15453,15459],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15678,15705],"content":"GetBinaryForm(Byte[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetBinaryForm(Byte[],Int32)","pos":[0,27]}]},{"pos":[15906,15910],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[16023,16028],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[16215,16228],"content":"GetHashCode()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[16402,16407],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[16599,16615],"content":"InheritanceFlags","needQuote":true,"needEscape":true,"nodes":[{"content":"InheritanceFlags","pos":[0,16]}]},{"pos":[16852,16868],"content":"InheritanceFlags","needQuote":true,"needEscape":true,"nodes":[{"content":"InheritanceFlags","pos":[0,16]}]},{"pos":[17100,17111],"content":"IsInherited","needQuote":true,"needEscape":true,"nodes":[{"content":"IsInherited","pos":[0,11]}]},{"pos":[17283,17290],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[17564,17598],"content":"op_Equality(GenericAce,GenericAce)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Equality(GenericAce,GenericAce)","pos":[0,34]}]},{"pos":[17816,17823],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[17991,18001],"content":"GenericAce","needQuote":true,"needEscape":true,"nodes":[{"content":"GenericAce","pos":[0,10]}]},{"pos":[18198,18208],"content":"GenericAce","needQuote":true,"needEscape":true,"nodes":[{"content":"GenericAce","pos":[0,10]}]},{"pos":[18513,18549],"content":"op_Inequality(GenericAce,GenericAce)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Inequality(GenericAce,GenericAce)","pos":[0,36]}]},{"pos":[18771,18778],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[18946,18956],"content":"GenericAce","needQuote":true,"needEscape":true,"nodes":[{"content":"GenericAce","pos":[0,10]}]},{"pos":[19153,19163],"content":"GenericAce","needQuote":true,"needEscape":true,"nodes":[{"content":"GenericAce","pos":[0,10]}]},{"pos":[19388,19404],"content":"PropagationFlags","needQuote":true,"needEscape":true,"nodes":[{"content":"PropagationFlags","pos":[0,16]}]},{"pos":[19641,19657],"content":"PropagationFlags","needQuote":true,"needEscape":true,"nodes":[{"content":"PropagationFlags","pos":[0,16]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.AccessControl.GenericAce\n  id: GenericAce\n  children:\n  - System.Security.AccessControl.GenericAce.AceFlags\n  - System.Security.AccessControl.GenericAce.AceType\n  - System.Security.AccessControl.GenericAce.AuditFlags\n  - System.Security.AccessControl.GenericAce.BinaryLength\n  - System.Security.AccessControl.GenericAce.Copy\n  - System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n  - System.Security.AccessControl.GenericAce.Equals(System.Object)\n  - System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n  - System.Security.AccessControl.GenericAce.GetHashCode\n  - System.Security.AccessControl.GenericAce.InheritanceFlags\n  - System.Security.AccessControl.GenericAce.IsInherited\n  - System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)\n  - System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)\n  - System.Security.AccessControl.GenericAce.PropagationFlags\n  langs:\n  - csharp\n  name: GenericAce\n  nameWithType: GenericAce\n  fullName: System.Security.AccessControl.GenericAce\n  type: Class\n  syntax:\n    content: public abstract class GenericAce\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.AccessControl.GenericAce.AceFlags\n  id: AceFlags\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  name: AceFlags\n  nameWithType: GenericAce.AceFlags\n  fullName: System.Security.AccessControl.GenericAce.AceFlags\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  syntax:\n    content: public System.Security.AccessControl.AceFlags AceFlags { get; set; }\n    return:\n      type: System.Security.AccessControl.AceFlags\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.AccessControl.GenericAce.AceType\n  id: AceType\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  name: AceType\n  nameWithType: GenericAce.AceType\n  fullName: System.Security.AccessControl.GenericAce.AceType\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  syntax:\n    content: public System.Security.AccessControl.AceType AceType { get; }\n    return:\n      type: System.Security.AccessControl.AceType\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.AccessControl.GenericAce.AuditFlags\n  id: AuditFlags\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  name: AuditFlags\n  nameWithType: GenericAce.AuditFlags\n  fullName: System.Security.AccessControl.GenericAce.AuditFlags\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  syntax:\n    content: public System.Security.AccessControl.AuditFlags AuditFlags { get; }\n    return:\n      type: System.Security.AccessControl.AuditFlags\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.AccessControl.GenericAce.BinaryLength\n  id: BinaryLength\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  name: BinaryLength\n  nameWithType: GenericAce.BinaryLength\n  fullName: System.Security.AccessControl.GenericAce.BinaryLength\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  syntax:\n    content: public abstract int BinaryLength { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.AccessControl.GenericAce.Copy\n  id: Copy\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: GenericAce.Copy()\n  fullName: System.Security.AccessControl.GenericAce.Copy()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  syntax:\n    content: public System.Security.AccessControl.GenericAce Copy ();\n    parameters: []\n    return:\n      type: System.Security.AccessControl.GenericAce\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n  id: CreateFromBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  name: CreateFromBinaryForm(Byte[],Int32)\n  nameWithType: GenericAce.CreateFromBinaryForm(Byte[],Int32)\n  fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(Byte[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  syntax:\n    content: public static System.Security.AccessControl.GenericAce CreateFromBinaryForm (byte[] binaryForm, int offset);\n    parameters:\n    - id: binaryForm\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: offset\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Security.AccessControl.GenericAce\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.AccessControl.GenericAce.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: GenericAce.Equals(Object)\n  fullName: System.Security.AccessControl.GenericAce.Equals(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  syntax:\n    content: public override sealed bool Equals (object o);\n    parameters:\n    - id: o\n      type: System.Object\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n  id: GetBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  name: GetBinaryForm(Byte[],Int32)\n  nameWithType: GenericAce.GetBinaryForm(Byte[],Int32)\n  fullName: System.Security.AccessControl.GenericAce.GetBinaryForm(Byte[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  syntax:\n    content: public abstract void GetBinaryForm (byte[] binaryForm, int offset);\n    parameters:\n    - id: binaryForm\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: offset\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.AccessControl.GenericAce.GetHashCode\n  id: GetHashCode\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: GenericAce.GetHashCode()\n  fullName: System.Security.AccessControl.GenericAce.GetHashCode()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  syntax:\n    content: public override sealed int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.AccessControl.GenericAce.InheritanceFlags\n  id: InheritanceFlags\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  name: InheritanceFlags\n  nameWithType: GenericAce.InheritanceFlags\n  fullName: System.Security.AccessControl.GenericAce.InheritanceFlags\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  syntax:\n    content: public System.Security.AccessControl.InheritanceFlags InheritanceFlags { get; }\n    return:\n      type: System.Security.AccessControl.InheritanceFlags\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.AccessControl.GenericAce.IsInherited\n  id: IsInherited\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  name: IsInherited\n  nameWithType: GenericAce.IsInherited\n  fullName: System.Security.AccessControl.GenericAce.IsInherited\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  syntax:\n    content: public bool IsInherited { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)\n  id: op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  name: op_Equality(GenericAce,GenericAce)\n  nameWithType: GenericAce.op_Equality(GenericAce,GenericAce)\n  fullName: System.Security.AccessControl.GenericAce.op_Equality(GenericAce,GenericAce)\n  type: Operator\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  syntax:\n    content: public static bool op_Equality (System.Security.AccessControl.GenericAce left, System.Security.AccessControl.GenericAce right);\n    parameters:\n    - id: left\n      type: System.Security.AccessControl.GenericAce\n      description: Parameter description to be filled\n    - id: right\n      type: System.Security.AccessControl.GenericAce\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)\n  id: op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  name: op_Inequality(GenericAce,GenericAce)\n  nameWithType: GenericAce.op_Inequality(GenericAce,GenericAce)\n  fullName: System.Security.AccessControl.GenericAce.op_Inequality(GenericAce,GenericAce)\n  type: Operator\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  syntax:\n    content: public static bool op_Inequality (System.Security.AccessControl.GenericAce left, System.Security.AccessControl.GenericAce right);\n    parameters:\n    - id: left\n      type: System.Security.AccessControl.GenericAce\n      description: Parameter description to be filled\n    - id: right\n      type: System.Security.AccessControl.GenericAce\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.AccessControl.GenericAce.PropagationFlags\n  id: PropagationFlags\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  name: PropagationFlags\n  nameWithType: GenericAce.PropagationFlags\n  fullName: System.Security.AccessControl.GenericAce.PropagationFlags\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  syntax:\n    content: public System.Security.AccessControl.PropagationFlags PropagationFlags { get; }\n    return:\n      type: System.Security.AccessControl.PropagationFlags\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Security.AccessControl.GenericAce.AceFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: AceFlags\n  nameWithType: GenericAce.AceFlags\n  fullName: System.Security.AccessControl.GenericAce.AceFlags\n- uid: System.Security.AccessControl.AceFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AceFlags\n  nameWithType: AceFlags\n  fullName: System.Security.AccessControl.AceFlags\n- uid: System.Security.AccessControl.GenericAce.AceType\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: AceType\n  nameWithType: GenericAce.AceType\n  fullName: System.Security.AccessControl.GenericAce.AceType\n- uid: System.Security.AccessControl.AceType\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AceType\n  nameWithType: AceType\n  fullName: System.Security.AccessControl.AceType\n- uid: System.Security.AccessControl.GenericAce.AuditFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: AuditFlags\n  nameWithType: GenericAce.AuditFlags\n  fullName: System.Security.AccessControl.GenericAce.AuditFlags\n- uid: System.Security.AccessControl.AuditFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AuditFlags\n  nameWithType: AuditFlags\n  fullName: System.Security.AccessControl.AuditFlags\n- uid: System.Security.AccessControl.GenericAce.BinaryLength\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: BinaryLength\n  nameWithType: GenericAce.BinaryLength\n  fullName: System.Security.AccessControl.GenericAce.BinaryLength\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.AccessControl.GenericAce.Copy\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: Copy()\n  nameWithType: GenericAce.Copy()\n  fullName: System.Security.AccessControl.GenericAce.Copy()\n- uid: System.Security.AccessControl.GenericAce\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: GenericAce\n  nameWithType: GenericAce\n  fullName: System.Security.AccessControl.GenericAce\n- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: CreateFromBinaryForm(Byte[],Int32)\n  nameWithType: GenericAce.CreateFromBinaryForm(Byte[],Int32)\n  fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(Byte[],Int32)\n- uid: System.Security.AccessControl.GenericAce\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: GenericAce\n  nameWithType: GenericAce\n  fullName: System.Security.AccessControl.GenericAce\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.AccessControl.GenericAce.Equals(System.Object)\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: GenericAce.Equals(Object)\n  fullName: System.Security.AccessControl.GenericAce.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: GetBinaryForm(Byte[],Int32)\n  nameWithType: GenericAce.GetBinaryForm(Byte[],Int32)\n  fullName: System.Security.AccessControl.GenericAce.GetBinaryForm(Byte[],Int32)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.AccessControl.GenericAce.GetHashCode\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: GenericAce.GetHashCode()\n  fullName: System.Security.AccessControl.GenericAce.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.AccessControl.GenericAce.InheritanceFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: InheritanceFlags\n  nameWithType: GenericAce.InheritanceFlags\n  fullName: System.Security.AccessControl.GenericAce.InheritanceFlags\n- uid: System.Security.AccessControl.InheritanceFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: InheritanceFlags\n  nameWithType: InheritanceFlags\n  fullName: System.Security.AccessControl.InheritanceFlags\n- uid: System.Security.AccessControl.GenericAce.IsInherited\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: IsInherited\n  nameWithType: GenericAce.IsInherited\n  fullName: System.Security.AccessControl.GenericAce.IsInherited\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: op_Equality(GenericAce,GenericAce)\n  nameWithType: GenericAce.op_Equality(GenericAce,GenericAce)\n  fullName: System.Security.AccessControl.GenericAce.op_Equality(GenericAce,GenericAce)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.AccessControl.GenericAce\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: GenericAce\n  nameWithType: GenericAce\n  fullName: System.Security.AccessControl.GenericAce\n- uid: System.Security.AccessControl.GenericAce\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: GenericAce\n  nameWithType: GenericAce\n  fullName: System.Security.AccessControl.GenericAce\n- uid: System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: op_Inequality(GenericAce,GenericAce)\n  nameWithType: GenericAce.op_Inequality(GenericAce,GenericAce)\n  fullName: System.Security.AccessControl.GenericAce.op_Inequality(GenericAce,GenericAce)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.AccessControl.GenericAce\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: GenericAce\n  nameWithType: GenericAce\n  fullName: System.Security.AccessControl.GenericAce\n- uid: System.Security.AccessControl.GenericAce\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: GenericAce\n  nameWithType: GenericAce\n  fullName: System.Security.AccessControl.GenericAce\n- uid: System.Security.AccessControl.GenericAce.PropagationFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: PropagationFlags\n  nameWithType: GenericAce.PropagationFlags\n  fullName: System.Security.AccessControl.GenericAce.PropagationFlags\n- uid: System.Security.AccessControl.PropagationFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: PropagationFlags\n  nameWithType: PropagationFlags\n  fullName: System.Security.AccessControl.PropagationFlags\n"}