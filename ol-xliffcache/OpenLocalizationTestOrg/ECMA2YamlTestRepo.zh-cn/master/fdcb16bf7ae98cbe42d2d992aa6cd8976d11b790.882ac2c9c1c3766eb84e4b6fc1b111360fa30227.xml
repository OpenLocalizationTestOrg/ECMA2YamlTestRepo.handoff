{"nodes":[{"pos":[1547,1592],"content":"ReadOnlyDictionary<TKey,TValue>+KeyCollection","needQuote":true,"needEscape":true,"nodes":[{"content":"ReadOnlyDictionary&lt;TKey,TValue&gt;+KeyCollection","pos":[0,45],"source":"ReadOnlyDictionary<TKey,TValue>+KeyCollection"}]},{"pos":[2265,2299],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2336,2370],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3186,3206],"content":"CopyTo(TKey[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"CopyTo(TKey[],Int32)","pos":[0,20]}]},{"pos":[3630,3664],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3730,3764],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4009,4014],"content":"Count","needQuote":true,"needEscape":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[4371,4405],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4666,4681],"content":"GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[5151,5185],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5538,5582],"content":"System.Collections.Generic.ICollection(TKey)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection(TKey)","pos":[0,44]}]},{"pos":[6040,6074],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6423,6463],"content":"System.Collections.Generic.ICollection()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection()","pos":[0,40]}]},{"pos":[7220,7264],"content":"System.Collections.Generic.ICollection(TKey)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection(TKey)","pos":[0,44]}]},{"pos":[7727,7761],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7820,7854],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8213,8251],"content":"System.Collections.Generic.ICollection","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection","pos":[0,38]}]},{"pos":[8720,8754],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9113,9157],"content":"System.Collections.Generic.ICollection(TKey)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection(TKey)","pos":[0,44]}]},{"pos":[9618,9652],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9711,9745],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10122,10172],"content":"System.Collections.ICollection.CopyTo(Array,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.CopyTo(Array,Int32)","pos":[0,50]}]},{"pos":[10661,10695],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10756,10790],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11129,11174],"content":"System.Collections.ICollection.IsSynchronized","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.IsSynchronized","pos":[0,45]}]},{"pos":[11647,11681],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12008,12047],"content":"System.Collections.ICollection.SyncRoot","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.SyncRoot","pos":[0,39]}]},{"pos":[12503,12537],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12874,12920],"content":"System.Collections.IEnumerable.GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IEnumerable.GetEnumerator()","pos":[0,46]}]},{"pos":[13429,13463],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13574,13587],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[13791,13811],"content":"CopyTo(TKey[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"CopyTo(TKey[],Int32)","pos":[0,20]}]},{"pos":[14057,14061],"content":"TKey","needQuote":true,"needEscape":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[14167,14172],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[14403,14408],"content":"Count","needQuote":true,"needEscape":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[14637,14642],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[14881,14896],"content":"GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[15197,15214],"content":"IEnumerator<ph id=\"ph1\">&lt;TKey&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerator<TKey>"},{"pos":[15536,15580],"content":"System.Collections.Generic.ICollection(TKey)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection(TKey)","pos":[0,44]}]},{"pos":[15874,15878],"content":"TKey","needQuote":true,"needEscape":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[16145,16185],"content":"System.Collections.Generic.ICollection()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection()","pos":[0,40]}]},{"pos":[16654,16698],"content":"System.Collections.Generic.ICollection(TKey)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection(TKey)","pos":[0,44]}]},{"pos":[17007,17014],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[17118,17122],"content":"TKey","needQuote":true,"needEscape":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[17394,17432],"content":"System.Collections.Generic.ICollection","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection","pos":[0,38]}]},{"pos":[17729,17736],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[18021,18065],"content":"System.Collections.Generic.ICollection(TKey)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection(TKey)","pos":[0,44]}]},{"pos":[18374,18381],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[18485,18489],"content":"TKey","needQuote":true,"needEscape":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[18770,18820],"content":"System.Collections.ICollection.CopyTo(Array,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.CopyTo(Array,Int32)","pos":[0,50]}]},{"pos":[19139,19144],"content":"Array","needQuote":true,"needEscape":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[19257,19262],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[19533,19578],"content":"System.Collections.ICollection.IsSynchronized","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.IsSynchronized","pos":[0,45]}]},{"pos":[19889,19896],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[20165,20204],"content":"System.Collections.ICollection.SyncRoot","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.SyncRoot","pos":[0,39]}]},{"pos":[20502,20508],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20780,20826],"content":"System.Collections.IEnumerable.GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IEnumerable.GetEnumerator()","pos":[0,46]}]},{"pos":[21167,21178],"content":"IEnumerator","needQuote":true,"needEscape":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection\n  id: ReadOnlyDictionary`2+KeyCollection\n  children:\n  - System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.CopyTo(`0[],System.Int32)\n  - System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.Count\n  - System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.GetEnumerator\n  - System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)\n  - System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear\n  - System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)\n  - System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly\n  - System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)\n  - System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.System#Collections#ICollection#IsSynchronized\n  - System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.System#Collections#ICollection#SyncRoot\n  - System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.System#Collections#IEnumerable#GetEnumerator\n  langs:\n  - csharp\n  name: ReadOnlyDictionary<TKey,TValue>+KeyCollection\n  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection\n  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection\n  type: Class\n  syntax:\n    content: >-\n      [System.Diagnostics.DebuggerDisplay(\"Count = {Count}\")]\n\n      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_CollectionDebugView`1))]\n\n      public sealed class ReadOnlyDictionary<TKey,TValue>.KeyCollection : System.Collections.Generic.ICollection<TKey>, System.Collections.Generic.IEnumerable<TKey>, System.Collections.Generic.IReadOnlyCollection<TKey>, System.Collections.ICollection\n    typeParameters:\n    - id: TKey\n      description: Parameter description to be filled\n    - id: TValue\n      description: Parameter description to be filled\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.ICollection<TKey>\n  - System.Collections.Generic.IEnumerable<TKey>\n  - System.Collections.Generic.IReadOnlyCollection<TKey>\n  - System.Collections.ICollection\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.CopyTo(`0[],System.Int32)\n  id: CopyTo(`0[],System.Int32)\n  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection\n  langs:\n  - csharp\n  name: CopyTo(TKey[],Int32)\n  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.CopyTo(TKey[],Int32)\n  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.CopyTo(TKey[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.ObjectModel\n  syntax:\n    content: public void CopyTo (TKey[] array, int arrayIndex);\n    parameters:\n    - id: array\n      type: TKey[]\n      description: Parameter description to be filled\n    - id: arrayIndex\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.Count\n  id: Count\n  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection\n  langs:\n  - csharp\n  name: Count\n  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.Count\n  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.Count\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.ObjectModel\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.GetEnumerator()\n  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.ObjectModel\n  syntax:\n    content: public System.Collections.Generic.IEnumerator<TKey> GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{TKey}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)\n  id: System#Collections#Generic#ICollection{TKey}#Add(`0)\n  isEii: true\n  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection(TKey)\n  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.ObjectModel\n  syntax:\n    content: void ICollection<TKey>.Add (TKey item);\n    parameters:\n    - id: item\n      type: TKey\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear\n  id: System#Collections#Generic#ICollection{TKey}#Clear\n  isEii: true\n  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection()\n  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection()\n  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.ObjectModel\n  syntax:\n    content: void ICollection<TKey>.Clear ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)\n  id: System#Collections#Generic#ICollection{TKey}#Contains(`0)\n  isEii: true\n  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection(TKey)\n  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.ObjectModel\n  syntax:\n    content: bool ICollection<TKey>.Contains (TKey item);\n    parameters:\n    - id: item\n      type: TKey\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly\n  id: System#Collections#Generic#ICollection{TKey}#IsReadOnly\n  isEii: true\n  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection\n  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection\n  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.ObjectModel\n  syntax:\n    content: bool System.Collections.Generic.ICollection<TKey>.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)\n  id: System#Collections#Generic#ICollection{TKey}#Remove(`0)\n  isEii: true\n  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection(TKey)\n  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.ObjectModel\n  syntax:\n    content: bool ICollection<TKey>.Remove (TKey item);\n    parameters:\n    - id: item\n      type: TKey\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.ObjectModel\n  syntax:\n    content: void ICollection.CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: Parameter description to be filled\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.IsSynchronized\n  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.ObjectModel\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.SyncRoot\n  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.ObjectModel\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.ObjectModel\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.CopyTo(`0[],System.Int32)\n  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection\n  isExternal: false\n  name: CopyTo(TKey[],Int32)\n  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.CopyTo(TKey[],Int32)\n  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.CopyTo(TKey[],Int32)\n- uid: TKey\n  parent: ''\n  isExternal: true\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.Count\n  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection\n  isExternal: false\n  name: Count\n  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.Count\n  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.Count\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.GetEnumerator\n  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.GetEnumerator()\n  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.GetEnumerator()\n- uid: System.Collections.Generic.IEnumerator{TKey}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerator<TKey>\n  nameWithType: IEnumerator<TKey>\n  fullName: System.Collections.Generic.IEnumerator<TKey>\n- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)\n  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection(TKey)\n  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n- uid: TKey\n  parent: ''\n  isExternal: true\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear\n  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection()\n  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection()\n  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection()\n- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)\n  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection(TKey)\n  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: TKey\n  parent: ''\n  isExternal: true\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly\n  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection\n  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection\n  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)\n  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection(TKey)\n  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: TKey\n  parent: ''\n  isExternal: true\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.System#Collections#ICollection#IsSynchronized\n  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.IsSynchronized\n  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.IsSynchronized\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.System#Collections#ICollection#SyncRoot\n  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.SyncRoot\n  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.SyncRoot\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n"}