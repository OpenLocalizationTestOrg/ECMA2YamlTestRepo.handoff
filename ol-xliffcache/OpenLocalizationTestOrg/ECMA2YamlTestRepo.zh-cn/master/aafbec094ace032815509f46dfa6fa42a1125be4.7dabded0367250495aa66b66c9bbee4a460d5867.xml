{"nodes":[{"pos":[5231,5264],"content":"ConcurrentDictionary<TKey,TValue>","needQuote":true,"needEscape":true,"nodes":[{"content":"ConcurrentDictionary&lt;TKey,TValue&gt;","pos":[0,33],"source":"ConcurrentDictionary<TKey,TValue>"}]},{"pos":[6209,6243],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6280,6314],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7330,7352],"content":"ConcurrentDictionary()","needQuote":true,"needEscape":true,"nodes":[{"content":"ConcurrentDictionary()","pos":[0,22]}]},{"pos":[8085,8145],"content":"ConcurrentDictionary(IEnumerable<KeyValuePair<TKey,TValue>>)","needQuote":true,"needEscape":true,"nodes":[{"content":"ConcurrentDictionary(IEnumerable&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;)","pos":[0,60],"source":"ConcurrentDictionary(IEnumerable<KeyValuePair<TKey,TValue>>)"}]},{"pos":[8803,8837],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9158,9203],"content":"ConcurrentDictionary(IEqualityComparer<ph id=\"ph1\">&lt;TKey&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ConcurrentDictionary(IEqualityComparer<TKey>)"},{"pos":[9743,9777],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10272,10356],"content":"ConcurrentDictionary(IEnumerable&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;,IEqualityComparer<ph id=\"ph1\">&lt;TKey&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ConcurrentDictionary(IEnumerable<KeyValuePair<TKey,TValue>>,IEqualityComparer<TKey>)"},{"pos":[11123,11157],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11259,11293],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11568,11601],"content":"ConcurrentDictionary(Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"ConcurrentDictionary(Int32,Int32)","pos":[0,33]}]},{"pos":[12062,12096],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12160,12194],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12715,12805],"content":"ConcurrentDictionary(Int32,IEnumerable&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;,IEqualityComparer<ph id=\"ph1\">&lt;TKey&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ConcurrentDictionary(Int32,IEnumerable<KeyValuePair<TKey,TValue>>,IEqualityComparer<TKey>)"},{"pos":[13532,13566],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13712,13746],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13848,13882],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14255,14312],"content":"ConcurrentDictionary(Int32,Int32,IEqualityComparer<ph id=\"ph1\">&lt;TKey&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ConcurrentDictionary(Int32,Int32,IEqualityComparer<TKey>)"},{"pos":[14882,14916],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14980,15014],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15116,15150],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15471,15531],"content":"AddOrUpdate(TKey,Func<TKey,TValue>,Func<TKey,TValue,TValue>)","needQuote":true,"needEscape":true,"nodes":[{"content":"AddOrUpdate(TKey,Func&lt;TKey,TValue&gt;,Func&lt;TKey,TValue,TValue&gt;)","pos":[0,60],"source":"AddOrUpdate(TKey,Func<TKey,TValue>,Func<TKey,TValue,TValue>)"}]},{"pos":[16072,16106],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16189,16223],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16316,16350],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16401,16435],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16802,16851],"content":"AddOrUpdate(TKey,TValue,Func<TKey,TValue,TValue>)","needQuote":true,"needEscape":true,"nodes":[{"content":"AddOrUpdate(TKey,TValue,Func&lt;TKey,TValue,TValue&gt;)","pos":[0,49],"source":"AddOrUpdate(TKey,TValue,Func<TKey,TValue,TValue>)"}]},{"pos":[17352,17386],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17444,17478],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17571,17605],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17656,17690],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17987,17994],"content":"Clear()","needQuote":true,"needEscape":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[18524,18541],"content":"ContainsKey(TKey)","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainsKey(TKey)","pos":[0,17]}]},{"pos":[18914,18948],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19007,19041],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19260,19265],"content":"Count","needQuote":true,"needEscape":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[19596,19630],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19865,19880],"content":"GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[20420,20454],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20725,20757],"content":"GetOrAdd(TKey,Func<TKey,TValue>)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetOrAdd(TKey,Func&lt;TKey,TValue&gt;)","pos":[0,32],"source":"GetOrAdd(TKey,Func<TKey,TValue>)"}]},{"pos":[21191,21225],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21305,21339],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21390,21424],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21738,21759],"content":"GetOrAdd(TKey,TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetOrAdd(TKey,TValue)","pos":[0,21]}]},{"pos":[22153,22187],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22242,22276],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22327,22361],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22659,22666],"content":"IsEmpty","needQuote":true,"needEscape":true,"nodes":[{"content":"IsEmpty","pos":[0,7]}]},{"pos":[23006,23040],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[23265,23275],"content":"Item(TKey)","needQuote":true,"needEscape":true,"nodes":[{"content":"Item(TKey)","pos":[0,10]}]},{"pos":[23643,23677],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[23728,23762],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[23979,23983],"content":"Keys","needQuote":true,"needEscape":true,"nodes":[{"content":"Keys","pos":[0,4]}]},{"pos":[24384,24418],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[24919,24984],"content":"System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection(KeyValuePair&lt;TKey,TValue&gt;)","pos":[0,65],"source":"System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>)"}]},{"pos":[25580,25614],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[26125,26190],"content":"System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection(KeyValuePair&lt;TKey,TValue&gt;)","pos":[0,65],"source":"System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>)"}]},{"pos":[26791,26825],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[26884,26918],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[27465,27536],"content":"System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection(KeyValuePair&lt;TKey,TValue&gt;,Int32)","pos":[0,71],"source":"System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>,Int32)"}]},{"pos":[28157,28191],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[28252,28286],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[28715,28753],"content":"System.Collections.Generic.ICollection","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection","pos":[0,38]}]},{"pos":[29244,29278],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[29785,29850],"content":"System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection(KeyValuePair&lt;TKey,TValue&gt;)","pos":[0,65],"source":"System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>)"}]},{"pos":[30449,30483],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[30542,30576],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[30923,30974],"content":"System.Collections.Generic.IDictionary(TKey,TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.IDictionary(TKey,TValue)","pos":[0,51]}]},{"pos":[31439,31473],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[31528,31562],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[31909,31953],"content":"System.Collections.Generic.IDictionary(TKey)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.IDictionary(TKey)","pos":[0,44]}]},{"pos":[32393,32427],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[32486,32520],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[32871,32917],"content":"System.Collections.Generic.IReadOnlyDictionary","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.IReadOnlyDictionary","pos":[0,46]}]},{"pos":[33455,33489],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[33844,33890],"content":"System.Collections.Generic.IReadOnlyDictionary","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.IReadOnlyDictionary","pos":[0,46]}]},{"pos":[34434,34468],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[34819,34869],"content":"System.Collections.ICollection.CopyTo(Array,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.CopyTo(Array,Int32)","pos":[0,50]}]},{"pos":[35332,35366],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[35427,35461],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[35774,35819],"content":"System.Collections.ICollection.IsSynchronized","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.IsSynchronized","pos":[0,45]}]},{"pos":[36266,36300],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[36601,36640],"content":"System.Collections.ICollection.SyncRoot","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.SyncRoot","pos":[0,39]}]},{"pos":[37070,37104],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[37453,37502],"content":"System.Collections.IDictionary.Add(Object,Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IDictionary.Add(Object,Object)","pos":[0,49]}]},{"pos":[37961,37995],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[38057,38091],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[38422,38469],"content":"System.Collections.IDictionary.Contains(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IDictionary.Contains(Object)","pos":[0,47]}]},{"pos":[38915,38949],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[39008,39042],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[39353,39399],"content":"System.Collections.IDictionary.GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IDictionary.GetEnumerator()","pos":[0,46]}]},{"pos":[39902,39936],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[40243,40285],"content":"System.Collections.IDictionary.IsFixedSize","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IDictionary.IsFixedSize","pos":[0,42]}]},{"pos":[40723,40757],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[41062,41103],"content":"System.Collections.IDictionary.IsReadOnly","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IDictionary.IsReadOnly","pos":[0,41]}]},{"pos":[41538,41572],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[41895,41938],"content":"System.Collections.IDictionary.Item(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IDictionary.Item(Object)","pos":[0,43]}]},{"pos":[42407,42441],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[42499,42533],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[42826,42861],"content":"System.Collections.IDictionary.Keys","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IDictionary.Keys","pos":[0,35]}]},{"pos":[43320,43354],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[43681,43726],"content":"System.Collections.IDictionary.Remove(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IDictionary.Remove(Object)","pos":[0,45]}]},{"pos":[44166,44200],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[44497,44534],"content":"System.Collections.IDictionary.Values","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IDictionary.Values","pos":[0,37]}]},{"pos":[44999,45033],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[45344,45390],"content":"System.Collections.IEnumerable.GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IEnumerable.GetEnumerator()","pos":[0,46]}]},{"pos":[45873,45907],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[46130,46139],"content":"ToArray()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToArray()","pos":[0,9]}]},{"pos":[46583,46617],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[46852,46871],"content":"TryAdd(TKey,TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryAdd(TKey,TValue)","pos":[0,19]}]},{"pos":[47257,47291],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[47346,47380],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[47439,47473],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[47720,47744],"content":"TryGetValue(TKey,TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryGetValue(TKey,TValue)","pos":[0,24]}]},{"pos":[48149,48183],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[48238,48272],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[48331,48365],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[48608,48630],"content":"TryRemove(TKey,TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryRemove(TKey,TValue)","pos":[0,22]}]},{"pos":[49029,49063],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[49118,49152],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[49211,49245],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[49492,49521],"content":"TryUpdate(TKey,TValue,TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryUpdate(TKey,TValue,TValue)","pos":[0,29]}]},{"pos":[49957,49991],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[50049,50083],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[50148,50182],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[50241,50275],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[50496,50502],"content":"Values","needQuote":true,"needEscape":true,"nodes":[{"content":"Values","pos":[0,6]}]},{"pos":[50913,50947],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[51058,51071],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[51229,51251],"content":"ConcurrentDictionary()","needQuote":true,"needEscape":true,"nodes":[{"content":"ConcurrentDictionary()","pos":[0,22]}]},{"pos":[51669,51729],"content":"ConcurrentDictionary(IEnumerable<KeyValuePair<TKey,TValue>>)","needQuote":true,"needEscape":true,"nodes":[{"content":"ConcurrentDictionary(IEnumerable&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;)","pos":[0,60],"source":"ConcurrentDictionary(IEnumerable<KeyValuePair<TKey,TValue>>)"}]},{"pos":[52143,52181],"content":"IEnumerable<KeyValuePair<TKey,TValue>>","needQuote":true,"needEscape":true,"nodes":[{"content":"IEnumerable&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;","pos":[0,38],"source":"IEnumerable<KeyValuePair<TKey,TValue>>"}]},{"pos":[52549,52594],"content":"ConcurrentDictionary(IEqualityComparer<ph id=\"ph1\">&lt;TKey&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ConcurrentDictionary(IEqualityComparer<TKey>)"},{"pos":[52936,52959],"content":"IEqualityComparer<ph id=\"ph1\">&lt;TKey&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEqualityComparer<TKey>"},{"pos":[53357,53441],"content":"ConcurrentDictionary(IEnumerable&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;,IEqualityComparer<ph id=\"ph1\">&lt;TKey&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ConcurrentDictionary(IEnumerable<KeyValuePair<TKey,TValue>>,IEqualityComparer<TKey>)"},{"pos":[53903,53941],"content":"IEnumerable<KeyValuePair<TKey,TValue>>","needQuote":true,"needEscape":true,"nodes":[{"content":"IEnumerable&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;","pos":[0,38],"source":"IEnumerable<KeyValuePair<TKey,TValue>>"}]},{"pos":[54225,54248],"content":"IEqualityComparer<ph id=\"ph1\">&lt;TKey&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEqualityComparer<TKey>"},{"pos":[54536,54569],"content":"ConcurrentDictionary(Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"ConcurrentDictionary(Int32,Int32)","pos":[0,33]}]},{"pos":[54829,54834],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[54947,54952],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[55307,55397],"content":"ConcurrentDictionary(Int32,IEnumerable&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;,IEqualityComparer<ph id=\"ph1\">&lt;TKey&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ConcurrentDictionary(Int32,IEnumerable<KeyValuePair<TKey,TValue>>,IEqualityComparer<TKey>)"},{"pos":[55771,55776],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[55989,56027],"content":"IEnumerable<KeyValuePair<TKey,TValue>>","needQuote":true,"needEscape":true,"nodes":[{"content":"IEnumerable&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;","pos":[0,38],"source":"IEnumerable<KeyValuePair<TKey,TValue>>"}]},{"pos":[56311,56334],"content":"IEqualityComparer<ph id=\"ph1\">&lt;TKey&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEqualityComparer<TKey>"},{"pos":[56671,56728],"content":"ConcurrentDictionary(Int32,Int32,IEqualityComparer<ph id=\"ph1\">&lt;TKey&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ConcurrentDictionary(Int32,Int32,IEqualityComparer<TKey>)"},{"pos":[57036,57041],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[57154,57159],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[57330,57353],"content":"IEqualityComparer<ph id=\"ph1\">&lt;TKey&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEqualityComparer<TKey>"},{"pos":[57665,57725],"content":"AddOrUpdate(TKey,Func<TKey,TValue>,Func<TKey,TValue,TValue>)","needQuote":true,"needEscape":true,"nodes":[{"content":"AddOrUpdate(TKey,Func&lt;TKey,TValue&gt;,Func&lt;TKey,TValue,TValue&gt;)","pos":[0,60],"source":"AddOrUpdate(TKey,Func<TKey,TValue>,Func<TKey,TValue,TValue>)"}]},{"pos":[58028,58034],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[58129,58133],"content":"TKey","needQuote":true,"needEscape":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[58248,58265],"content":"Func<TKey,TValue>","needQuote":true,"needEscape":true,"nodes":[{"content":"Func&lt;TKey,TValue&gt;","pos":[0,17],"source":"Func<TKey,TValue>"}]},{"pos":[58420,58444],"content":"Func<TKey,TValue,TValue>","needQuote":true,"needEscape":true,"nodes":[{"content":"Func&lt;TKey,TValue,TValue&gt;","pos":[0,24],"source":"Func<TKey,TValue,TValue>"}]},{"pos":[58722,58771],"content":"AddOrUpdate(TKey,TValue,Func<TKey,TValue,TValue>)","needQuote":true,"needEscape":true,"nodes":[{"content":"AddOrUpdate(TKey,TValue,Func&lt;TKey,TValue,TValue&gt;)","pos":[0,49],"source":"AddOrUpdate(TKey,TValue,Func<TKey,TValue,TValue>)"}]},{"pos":[59052,59058],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[59153,59157],"content":"TKey","needQuote":true,"needEscape":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[59250,59256],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[59382,59406],"content":"Func<TKey,TValue,TValue>","needQuote":true,"needEscape":true,"nodes":[{"content":"Func&lt;TKey,TValue,TValue&gt;","pos":[0,24],"source":"Func<TKey,TValue,TValue>"}]},{"pos":[59649,59656],"content":"Clear()","needQuote":true,"needEscape":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[59966,59983],"content":"ContainsKey(TKey)","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainsKey(TKey)","pos":[0,17]}]},{"pos":[60213,60220],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[60324,60328],"content":"TKey","needQuote":true,"needEscape":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[60524,60529],"content":"Count","needQuote":true,"needEscape":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[60733,60738],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[60951,60966],"content":"GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[61290,61328],"content":"IEnumerator<KeyValuePair<TKey,TValue>>","needQuote":true,"needEscape":true,"nodes":[{"content":"IEnumerator&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;","pos":[0,38],"source":"IEnumerator<KeyValuePair<TKey,TValue>>"}]},{"pos":[61672,61704],"content":"GetOrAdd(TKey,Func<TKey,TValue>)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetOrAdd(TKey,Func&lt;TKey,TValue&gt;)","pos":[0,32],"source":"GetOrAdd(TKey,Func<TKey,TValue>)"}]},{"pos":[61951,61957],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[62052,62056],"content":"TKey","needQuote":true,"needEscape":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[62171,62188],"content":"Func<TKey,TValue>","needQuote":true,"needEscape":true,"nodes":[{"content":"Func&lt;TKey,TValue&gt;","pos":[0,17],"source":"Func<TKey,TValue>"}]},{"pos":[62427,62448],"content":"GetOrAdd(TKey,TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetOrAdd(TKey,TValue)","pos":[0,21]}]},{"pos":[62673,62679],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[62774,62778],"content":"TKey","needQuote":true,"needEscape":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[62871,62877],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[63079,63086],"content":"IsEmpty","needQuote":true,"needEscape":true,"nodes":[{"content":"IsEmpty","pos":[0,7]}]},{"pos":[63296,63303],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[63515,63525],"content":"Item(TKey)","needQuote":true,"needEscape":true,"nodes":[{"content":"Item(TKey)","pos":[0,10]}]},{"pos":[63728,63734],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[63829,63833],"content":"TKey","needQuote":true,"needEscape":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[64028,64032],"content":"Keys","needQuote":true,"needEscape":true,"nodes":[{"content":"Keys","pos":[0,4]}]},{"pos":[64286,64303],"content":"ICollection<ph id=\"ph1\">&lt;TKey&gt;</ph>","needQuote":true,"needEscape":true,"source":"ICollection<TKey>"},{"pos":[64686,64751],"content":"System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection(KeyValuePair&lt;TKey,TValue&gt;)","pos":[0,65],"source":"System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>)"}]},{"pos":[65124,65149],"content":"KeyValuePair<TKey,TValue>","needQuote":true,"needEscape":true,"nodes":[{"content":"KeyValuePair&lt;TKey,TValue&gt;","pos":[0,25],"source":"KeyValuePair<TKey,TValue>"}]},{"pos":[65553,65618],"content":"System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection(KeyValuePair&lt;TKey,TValue&gt;)","pos":[0,65],"source":"System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>)"}]},{"pos":[65944,65951],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[66117,66142],"content":"KeyValuePair<TKey,TValue>","needQuote":true,"needEscape":true,"nodes":[{"content":"KeyValuePair&lt;TKey,TValue&gt;","pos":[0,25],"source":"KeyValuePair<TKey,TValue>"}]},{"pos":[66564,66635],"content":"System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection(KeyValuePair&lt;TKey,TValue&gt;,Int32)","pos":[0,71],"source":"System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>,Int32)"}]},{"pos":[67031,67056],"content":"KeyValuePair<TKey,TValue>","needQuote":true,"needEscape":true,"nodes":[{"content":"KeyValuePair&lt;TKey,TValue&gt;","pos":[0,25],"source":"KeyValuePair<TKey,TValue>"}]},{"pos":[67231,67236],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[67539,67577],"content":"System.Collections.Generic.ICollection","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection","pos":[0,38]}]},{"pos":[67849,67856],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[68202,68267],"content":"System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection(KeyValuePair&lt;TKey,TValue&gt;)","pos":[0,65],"source":"System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>)"}]},{"pos":[68593,68600],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[68766,68791],"content":"KeyValuePair<TKey,TValue>","needQuote":true,"needEscape":true,"nodes":[{"content":"KeyValuePair&lt;TKey,TValue&gt;","pos":[0,25],"source":"KeyValuePair<TKey,TValue>"}]},{"pos":[69113,69164],"content":"System.Collections.Generic.IDictionary(TKey,TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.IDictionary(TKey,TValue)","pos":[0,51]}]},{"pos":[69447,69451],"content":"TKey","needQuote":true,"needEscape":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[69544,69550],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[69807,69851],"content":"System.Collections.Generic.IDictionary(TKey)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.IDictionary(TKey)","pos":[0,44]}]},{"pos":[70135,70142],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[70246,70250],"content":"TKey","needQuote":true,"needEscape":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[70505,70551],"content":"System.Collections.Generic.IReadOnlyDictionary","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.IReadOnlyDictionary","pos":[0,46]}]},{"pos":[70889,70906],"content":"IEnumerable<ph id=\"ph1\">&lt;TKey&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<TKey>"},{"pos":[71216,71262],"content":"System.Collections.Generic.IReadOnlyDictionary","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.IReadOnlyDictionary","pos":[0,46]}]},{"pos":[71602,71621],"content":"IEnumerable<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<TValue>"},{"pos":[71933,71983],"content":"System.Collections.ICollection.CopyTo(Array,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.CopyTo(Array,Int32)","pos":[0,50]}]},{"pos":[72277,72282],"content":"Array","needQuote":true,"needEscape":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[72395,72400],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[72645,72690],"content":"System.Collections.ICollection.IsSynchronized","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.IsSynchronized","pos":[0,45]}]},{"pos":[72976,72983],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[73226,73265],"content":"System.Collections.ICollection.SyncRoot","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.SyncRoot","pos":[0,39]}]},{"pos":[73538,73544],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[73809,73858],"content":"System.Collections.IDictionary.Add(Object,Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IDictionary.Add(Object,Object)","pos":[0,49]}]},{"pos":[74151,74157],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[74273,74279],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[74535,74582],"content":"System.Collections.IDictionary.Contains(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IDictionary.Contains(Object)","pos":[0,47]}]},{"pos":[74872,74879],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[74997,75003],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[75249,75295],"content":"System.Collections.IDictionary.GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IDictionary.GetEnumerator()","pos":[0,46]}]},{"pos":[75621,75642],"content":"IDictionaryEnumerator","needQuote":true,"needEscape":true,"nodes":[{"content":"IDictionaryEnumerator","pos":[0,21]}]},{"pos":[75928,75970],"content":"System.Collections.IDictionary.IsFixedSize","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IDictionary.IsFixedSize","pos":[0,42]}]},{"pos":[76250,76257],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[76502,76543],"content":"System.Collections.IDictionary.IsReadOnly","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IDictionary.IsReadOnly","pos":[0,41]}]},{"pos":[76821,76828],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[77082,77125],"content":"System.Collections.IDictionary.Item(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IDictionary.Item(Object)","pos":[0,43]}]},{"pos":[77406,77412],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[77528,77534],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[77771,77806],"content":"System.Collections.IDictionary.Keys","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IDictionary.Keys","pos":[0,35]}]},{"pos":[78100,78111],"content":"ICollection","needQuote":true,"needEscape":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[78387,78432],"content":"System.Collections.IDictionary.Remove(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IDictionary.Remove(Object)","pos":[0,45]}]},{"pos":[78717,78723],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[78962,78999],"content":"System.Collections.IDictionary.Values","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IDictionary.Values","pos":[0,37]}]},{"pos":[79297,79308],"content":"ICollection","needQuote":true,"needEscape":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[79576,79622],"content":"System.Collections.IEnumerable.GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IEnumerable.GetEnumerator()","pos":[0,46]}]},{"pos":[79938,79949],"content":"IEnumerator","needQuote":true,"needEscape":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[80180,80189],"content":"ToArray()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToArray()","pos":[0,9]}]},{"pos":[80461,80486],"content":"KeyValuePair<TKey,TValue>","needQuote":true,"needEscape":true,"nodes":[{"content":"KeyValuePair&lt;TKey,TValue&gt;","pos":[0,25],"source":"KeyValuePair<TKey,TValue>"}]},{"pos":[80761,80780],"content":"TryAdd(TKey,TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryAdd(TKey,TValue)","pos":[0,19]}]},{"pos":[81014,81021],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[81125,81129],"content":"TKey","needQuote":true,"needEscape":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[81222,81228],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[81442,81466],"content":"TryGetValue(TKey,TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryGetValue(TKey,TValue)","pos":[0,24]}]},{"pos":[81710,81717],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[81821,81825],"content":"TKey","needQuote":true,"needEscape":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[81918,81924],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[82136,82158],"content":"TryRemove(TKey,TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryRemove(TKey,TValue)","pos":[0,22]}]},{"pos":[82398,82405],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[82509,82513],"content":"TKey","needQuote":true,"needEscape":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[82606,82612],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[82826,82855],"content":"TryUpdate(TKey,TValue,TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryUpdate(TKey,TValue,TValue)","pos":[0,29]}]},{"pos":[83109,83116],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[83220,83224],"content":"TKey","needQuote":true,"needEscape":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[83317,83323],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[83420,83426],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[83627,83633],"content":"Values","needQuote":true,"needEscape":true,"nodes":[{"content":"Values","pos":[0,6]}]},{"pos":[83893,83912],"content":"ICollection<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"ICollection<TValue>"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2\n  id: ConcurrentDictionary`2\n  children:\n  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor\n  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})\n  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})\n  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})\n  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})\n  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})\n  - System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})\n  - System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})\n  - System.Collections.Concurrent.ConcurrentDictionary`2.Clear\n  - System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.Count\n  - System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator\n  - System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})\n  - System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty\n  - System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.Keys\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair`2)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair`2)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair`2)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Keys\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Values\n  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator\n  - System.Collections.Concurrent.ConcurrentDictionary`2.ToArray\n  - System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)\n  - System.Collections.Concurrent.ConcurrentDictionary`2.Values\n  langs:\n  - csharp\n  name: ConcurrentDictionary<TKey,TValue>\n  nameWithType: ConcurrentDictionary<TKey,TValue>\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>\n  type: Class\n  syntax:\n    content: >-\n      [System.Diagnostics.DebuggerDisplay(\"Count = {Count}\")]\n\n      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_DictionaryDebugView`2))]\n\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public class ConcurrentDictionary<TKey,TValue> : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IDictionary<TKey,TValue>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>, System.Collections.IDictionary\n    typeParameters:\n    - id: TKey\n      description: Parameter description to be filled\n    - id: TValue\n      description: Parameter description to be filled\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>\n  - System.Collections.Generic.IDictionary<TKey,TValue>\n  - System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>\n  - System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>\n  - System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>\n  - System.Collections.IDictionary\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor\n  id: '#ctor'\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: ConcurrentDictionary()\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary()\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public ConcurrentDictionary ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})\n  id: '#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})'\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: ConcurrentDictionary(IEnumerable<KeyValuePair<TKey,TValue>>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary(IEnumerable<KeyValuePair<TKey,TValue>>)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary(IEnumerable<KeyValuePair<TKey,TValue>>)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public ConcurrentDictionary (System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>> collection);\n    parameters:\n    - id: collection\n      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{TKey,TValue}}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})\n  id: '#ctor(System.Collections.Generic.IEqualityComparer{`0})'\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: ConcurrentDictionary(IEqualityComparer<TKey>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary(IEqualityComparer<TKey>)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary(IEqualityComparer<TKey>)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public ConcurrentDictionary (System.Collections.Generic.IEqualityComparer<TKey> comparer);\n    parameters:\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TKey}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})\n  id: '#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})'\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: ConcurrentDictionary(IEnumerable<KeyValuePair<TKey,TValue>>,IEqualityComparer<TKey>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary(IEnumerable<KeyValuePair<TKey,TValue>>,IEqualityComparer<TKey>)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary(IEnumerable<KeyValuePair<TKey,TValue>>,IEqualityComparer<TKey>)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public ConcurrentDictionary (System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>> collection, System.Collections.Generic.IEqualityComparer<TKey> comparer);\n    parameters:\n    - id: collection\n      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{TKey,TValue}}\n      description: Parameter description to be filled\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TKey}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32)\n  id: '#ctor(System.Int32,System.Int32)'\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: ConcurrentDictionary(Int32,Int32)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary(Int32,Int32)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary(Int32,Int32)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public ConcurrentDictionary (int concurrencyLevel, int capacity);\n    parameters:\n    - id: concurrencyLevel\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: capacity\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})\n  id: '#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})'\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: ConcurrentDictionary(Int32,IEnumerable<KeyValuePair<TKey,TValue>>,IEqualityComparer<TKey>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary(Int32,IEnumerable<KeyValuePair<TKey,TValue>>,IEqualityComparer<TKey>)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary(Int32,IEnumerable<KeyValuePair<TKey,TValue>>,IEqualityComparer<TKey>)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public ConcurrentDictionary (int concurrencyLevel, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>> collection, System.Collections.Generic.IEqualityComparer<TKey> comparer);\n    parameters:\n    - id: concurrencyLevel\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: collection\n      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{TKey,TValue}}\n      description: Parameter description to be filled\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TKey}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})\n  id: '#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})'\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: ConcurrentDictionary(Int32,Int32,IEqualityComparer<TKey>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary(Int32,Int32,IEqualityComparer<TKey>)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary(Int32,Int32,IEqualityComparer<TKey>)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public ConcurrentDictionary (int concurrencyLevel, int capacity, System.Collections.Generic.IEqualityComparer<TKey> comparer);\n    parameters:\n    - id: concurrencyLevel\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: capacity\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TKey}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})\n  id: AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: AddOrUpdate(TKey,Func<TKey,TValue>,Func<TKey,TValue,TValue>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.AddOrUpdate(TKey,Func<TKey,TValue>,Func<TKey,TValue,TValue>)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.AddOrUpdate(TKey,Func<TKey,TValue>,Func<TKey,TValue,TValue>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public TValue AddOrUpdate (TKey key, Func<TKey,TValue> addValueFactory, Func<TKey,TValue,TValue> updateValueFactory);\n    parameters:\n    - id: key\n      type: TKey\n      description: Parameter description to be filled\n    - id: addValueFactory\n      type: System.Func{TKey,TValue}\n      description: Parameter description to be filled\n    - id: updateValueFactory\n      type: System.Func{TKey,TValue,TValue}\n      description: Parameter description to be filled\n    return:\n      type: TValue\n      description: Parameter description to be filled\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})\n  id: AddOrUpdate(`0,`1,System.Func{`0,`1,`1})\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: AddOrUpdate(TKey,TValue,Func<TKey,TValue,TValue>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.AddOrUpdate(TKey,TValue,Func<TKey,TValue,TValue>)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.AddOrUpdate(TKey,TValue,Func<TKey,TValue,TValue>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public TValue AddOrUpdate (TKey key, TValue addValue, Func<TKey,TValue,TValue> updateValueFactory);\n    parameters:\n    - id: key\n      type: TKey\n      description: Parameter description to be filled\n    - id: addValue\n      type: TValue\n      description: Parameter description to be filled\n    - id: updateValueFactory\n      type: System.Func{TKey,TValue,TValue}\n      description: Parameter description to be filled\n    return:\n      type: TValue\n      description: Parameter description to be filled\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Clear\n  id: Clear\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: ConcurrentDictionary<TKey,TValue>.Clear()\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.Clear()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)\n  id: ContainsKey(`0)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: ContainsKey(TKey)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ContainsKey(TKey)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ContainsKey(TKey)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public bool ContainsKey (TKey key);\n    parameters:\n    - id: key\n      type: TKey\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Count\n  id: Count\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: Count\n  nameWithType: ConcurrentDictionary<TKey,TValue>.Count\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.Count\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: ConcurrentDictionary<TKey,TValue>.GetEnumerator()\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>> GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{TKey,TValue}}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})\n  id: GetOrAdd(`0,System.Func{`0,`1})\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: GetOrAdd(TKey,Func<TKey,TValue>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.GetOrAdd(TKey,Func<TKey,TValue>)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.GetOrAdd(TKey,Func<TKey,TValue>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public TValue GetOrAdd (TKey key, Func<TKey,TValue> valueFactory);\n    parameters:\n    - id: key\n      type: TKey\n      description: Parameter description to be filled\n    - id: valueFactory\n      type: System.Func{TKey,TValue}\n      description: Parameter description to be filled\n    return:\n      type: TValue\n      description: Parameter description to be filled\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)\n  id: GetOrAdd(`0,`1)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: GetOrAdd(TKey,TValue)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.GetOrAdd(TKey,TValue)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.GetOrAdd(TKey,TValue)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public TValue GetOrAdd (TKey key, TValue value);\n    parameters:\n    - id: key\n      type: TKey\n      description: Parameter description to be filled\n    - id: value\n      type: TValue\n      description: Parameter description to be filled\n    return:\n      type: TValue\n      description: Parameter description to be filled\n  overload: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty\n  id: IsEmpty\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: IsEmpty\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IsEmpty\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IsEmpty\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public bool IsEmpty { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)\n  id: Item(`0)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: Item(TKey)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.Item(TKey)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.Item(TKey)\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public TValue this[TKey key] { get; set; }\n    parameters:\n    - id: key\n      type: TKey\n      description: Parameter description to be filled\n    return:\n      type: TValue\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Keys\n  id: Keys\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: Keys\n  nameWithType: ConcurrentDictionary<TKey,TValue>.Keys\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.Keys\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public System.Collections.Generic.ICollection<TKey> Keys { get; }\n    return:\n      type: System.Collections.Generic.ICollection{TKey}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair`2)\n  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair`2)\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: void ICollection<KeyValuePair<TKey,TValue>>.Add (System.Collections.Generic.KeyValuePair<TKey,TValue> keyValuePair);\n    parameters:\n    - id: keyValuePair\n      type: System.Collections.Generic.KeyValuePair`2\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair`2)\n  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair`2)\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: bool ICollection<KeyValuePair<TKey,TValue>>.Contains (System.Collections.Generic.KeyValuePair<TKey,TValue> keyValuePair);\n    parameters:\n    - id: keyValuePair\n      type: System.Collections.Generic.KeyValuePair`2\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)\n  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>,Int32)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>,Int32)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: void ICollection<KeyValuePair<TKey,TValue>>.CopyTo (System.Collections.Generic.KeyValuePair<TKey,TValue>[] array, int index);\n    parameters:\n    - id: array\n      type: System.Collections.Generic.KeyValuePair{TKey,TValue}\n      description: Parameter description to be filled\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly\n  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair`2)\n  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair`2)\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: bool ICollection<KeyValuePair<TKey,TValue>>.Remove (System.Collections.Generic.KeyValuePair<TKey,TValue> keyValuePair);\n    parameters:\n    - id: keyValuePair\n      type: System.Collections.Generic.KeyValuePair`2\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)\n  id: System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: System.Collections.Generic.IDictionary(TKey,TValue)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.IDictionary(TKey,TValue)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.IDictionary(TKey,TValue)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: void IDictionary<TKey,TValue>.Add (TKey key, TValue value);\n    parameters:\n    - id: key\n      type: TKey\n      description: Parameter description to be filled\n    - id: value\n      type: TValue\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)\n  id: System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: System.Collections.Generic.IDictionary(TKey)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.IDictionary(TKey)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.IDictionary(TKey)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: bool IDictionary<TKey,TValue>.Remove (TKey key);\n    parameters:\n    - id: key\n      type: TKey\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys\n  id: System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: System.Collections.Generic.IReadOnlyDictionary\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.IReadOnlyDictionary\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.IReadOnlyDictionary\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: System.Collections.Generic.IEnumerable<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{TKey}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values\n  id: System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: System.Collections.Generic.IReadOnlyDictionary\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.IReadOnlyDictionary\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.IReadOnlyDictionary\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: System.Collections.Generic.IEnumerable<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{TValue}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.ICollection.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: void ICollection.CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: Parameter description to be filled\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.ICollection.IsSynchronized\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.ICollection.SyncRoot\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)\n  id: System#Collections#IDictionary#Add(System.Object,System.Object)\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: System.Collections.IDictionary.Add(Object,Object)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Add(Object,Object)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Add(Object,Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: void IDictionary.Add (object key, object value);\n    parameters:\n    - id: key\n      type: System.Object\n      description: Parameter description to be filled\n    - id: value\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)\n  id: System#Collections#IDictionary#Contains(System.Object)\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: System.Collections.IDictionary.Contains(Object)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Contains(Object)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Contains(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: bool IDictionary.Contains (object key);\n    parameters:\n    - id: key\n      type: System.Object\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator\n  id: System#Collections#IDictionary#GetEnumerator\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: System.Collections.IDictionary.GetEnumerator()\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.GetEnumerator()\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: System.Collections.IDictionaryEnumerator IDictionary.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IDictionaryEnumerator\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize\n  id: System#Collections#IDictionary#IsFixedSize\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: System.Collections.IDictionary.IsFixedSize\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.IsFixedSize\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.IsFixedSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: bool System.Collections.IDictionary.IsFixedSize { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly\n  id: System#Collections#IDictionary#IsReadOnly\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: System.Collections.IDictionary.IsReadOnly\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.IsReadOnly\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.IsReadOnly\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: bool System.Collections.IDictionary.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)\n  id: System#Collections#IDictionary#Item(System.Object)\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: System.Collections.IDictionary.Item(Object)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Item(Object)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Item(Object)\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: object System.Collections.IDictionary.Item[object key] { get; set; }\n    parameters:\n    - id: key\n      type: System.Object\n      description: Parameter description to be filled\n    return:\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Keys\n  id: System#Collections#IDictionary#Keys\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: System.Collections.IDictionary.Keys\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Keys\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Keys\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: System.Collections.ICollection System.Collections.IDictionary.Keys { get; }\n    return:\n      type: System.Collections.ICollection\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)\n  id: System#Collections#IDictionary#Remove(System.Object)\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: System.Collections.IDictionary.Remove(Object)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Remove(Object)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Remove(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: void IDictionary.Remove (object key);\n    parameters:\n    - id: key\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Values\n  id: System#Collections#IDictionary#Values\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: System.Collections.IDictionary.Values\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Values\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Values\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: System.Collections.ICollection System.Collections.IDictionary.Values { get; }\n    return:\n      type: System.Collections.ICollection\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ToArray\n  id: ToArray\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: ToArray()\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ToArray()\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ToArray()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public System.Collections.Generic.KeyValuePair<TKey,TValue>[] ToArray ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.KeyValuePair{TKey,TValue}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)\n  id: TryAdd(`0,`1)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: TryAdd(TKey,TValue)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.TryAdd(TKey,TValue)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.TryAdd(TKey,TValue)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public bool TryAdd (TKey key, TValue value);\n    parameters:\n    - id: key\n      type: TKey\n      description: Parameter description to be filled\n    - id: value\n      type: TValue\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)\n  id: TryGetValue(`0,`1@)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: TryGetValue(TKey,TValue)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.TryGetValue(TKey,TValue)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.TryGetValue(TKey,TValue)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public bool TryGetValue (TKey key, out TValue value);\n    parameters:\n    - id: key\n      type: TKey\n      description: Parameter description to be filled\n    - id: value\n      type: TValue\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)\n  id: TryRemove(`0,`1@)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: TryRemove(TKey,TValue)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.TryRemove(TKey,TValue)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.TryRemove(TKey,TValue)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public bool TryRemove (TKey key, out TValue value);\n    parameters:\n    - id: key\n      type: TKey\n      description: Parameter description to be filled\n    - id: value\n      type: TValue\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)\n  id: TryUpdate(`0,`1,`1)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: TryUpdate(TKey,TValue,TValue)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.TryUpdate(TKey,TValue,TValue)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.TryUpdate(TKey,TValue,TValue)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public bool TryUpdate (TKey key, TValue newValue, TValue comparisonValue);\n    parameters:\n    - id: key\n      type: TKey\n      description: Parameter description to be filled\n    - id: newValue\n      type: TValue\n      description: Parameter description to be filled\n    - id: comparisonValue\n      type: TValue\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Values\n  id: Values\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  langs:\n  - csharp\n  name: Values\n  nameWithType: ConcurrentDictionary<TKey,TValue>.Values\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.Values\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public System.Collections.Generic.ICollection<TValue> Values { get; }\n    return:\n      type: System.Collections.Generic.ICollection{TValue}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: ConcurrentDictionary()\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary()\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary()\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: ConcurrentDictionary(IEnumerable<KeyValuePair<TKey,TValue>>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary(IEnumerable<KeyValuePair<TKey,TValue>>)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary(IEnumerable<KeyValuePair<TKey,TValue>>)\n- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{TKey,TValue}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<KeyValuePair<TKey,TValue>>\n  nameWithType: IEnumerable<KeyValuePair<TKey,TValue>>\n  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: ConcurrentDictionary(IEqualityComparer<TKey>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary(IEqualityComparer<TKey>)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary(IEqualityComparer<TKey>)\n- uid: System.Collections.Generic.IEqualityComparer{TKey}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEqualityComparer<TKey>\n  nameWithType: IEqualityComparer<TKey>\n  fullName: System.Collections.Generic.IEqualityComparer<TKey>\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: ConcurrentDictionary(IEnumerable<KeyValuePair<TKey,TValue>>,IEqualityComparer<TKey>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary(IEnumerable<KeyValuePair<TKey,TValue>>,IEqualityComparer<TKey>)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary(IEnumerable<KeyValuePair<TKey,TValue>>,IEqualityComparer<TKey>)\n- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{TKey,TValue}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<KeyValuePair<TKey,TValue>>\n  nameWithType: IEnumerable<KeyValuePair<TKey,TValue>>\n  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>\n- uid: System.Collections.Generic.IEqualityComparer{TKey}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEqualityComparer<TKey>\n  nameWithType: IEqualityComparer<TKey>\n  fullName: System.Collections.Generic.IEqualityComparer<TKey>\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: ConcurrentDictionary(Int32,Int32)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary(Int32,Int32)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary(Int32,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: ConcurrentDictionary(Int32,IEnumerable<KeyValuePair<TKey,TValue>>,IEqualityComparer<TKey>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary(Int32,IEnumerable<KeyValuePair<TKey,TValue>>,IEqualityComparer<TKey>)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary(Int32,IEnumerable<KeyValuePair<TKey,TValue>>,IEqualityComparer<TKey>)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{TKey,TValue}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<KeyValuePair<TKey,TValue>>\n  nameWithType: IEnumerable<KeyValuePair<TKey,TValue>>\n  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>\n- uid: System.Collections.Generic.IEqualityComparer{TKey}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEqualityComparer<TKey>\n  nameWithType: IEqualityComparer<TKey>\n  fullName: System.Collections.Generic.IEqualityComparer<TKey>\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: ConcurrentDictionary(Int32,Int32,IEqualityComparer<TKey>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary(Int32,Int32,IEqualityComparer<TKey>)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary(Int32,Int32,IEqualityComparer<TKey>)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.IEqualityComparer{TKey}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEqualityComparer<TKey>\n  nameWithType: IEqualityComparer<TKey>\n  fullName: System.Collections.Generic.IEqualityComparer<TKey>\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: AddOrUpdate(TKey,Func<TKey,TValue>,Func<TKey,TValue,TValue>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.AddOrUpdate(TKey,Func<TKey,TValue>,Func<TKey,TValue,TValue>)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.AddOrUpdate(TKey,Func<TKey,TValue>,Func<TKey,TValue,TValue>)\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: TKey\n  parent: ''\n  isExternal: true\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: System.Func{TKey,TValue}\n  parent: System\n  isExternal: true\n  name: Func<TKey,TValue>\n  nameWithType: Func<TKey,TValue>\n  fullName: System.Func<TKey,TValue>\n- uid: System.Func{TKey,TValue,TValue}\n  parent: System\n  isExternal: true\n  name: Func<TKey,TValue,TValue>\n  nameWithType: Func<TKey,TValue,TValue>\n  fullName: System.Func<TKey,TValue,TValue>\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: AddOrUpdate(TKey,TValue,Func<TKey,TValue,TValue>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.AddOrUpdate(TKey,TValue,Func<TKey,TValue,TValue>)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.AddOrUpdate(TKey,TValue,Func<TKey,TValue,TValue>)\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: TKey\n  parent: ''\n  isExternal: true\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: System.Func{TKey,TValue,TValue}\n  parent: System\n  isExternal: true\n  name: Func<TKey,TValue,TValue>\n  nameWithType: Func<TKey,TValue,TValue>\n  fullName: System.Func<TKey,TValue,TValue>\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Clear\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: Clear()\n  nameWithType: ConcurrentDictionary<TKey,TValue>.Clear()\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.Clear()\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: ContainsKey(TKey)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ContainsKey(TKey)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ContainsKey(TKey)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: TKey\n  parent: ''\n  isExternal: true\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Count\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: Count\n  nameWithType: ConcurrentDictionary<TKey,TValue>.Count\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.Count\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: ConcurrentDictionary<TKey,TValue>.GetEnumerator()\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.GetEnumerator()\n- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{TKey,TValue}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerator<KeyValuePair<TKey,TValue>>\n  nameWithType: IEnumerator<KeyValuePair<TKey,TValue>>\n  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: GetOrAdd(TKey,Func<TKey,TValue>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.GetOrAdd(TKey,Func<TKey,TValue>)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.GetOrAdd(TKey,Func<TKey,TValue>)\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: TKey\n  parent: ''\n  isExternal: true\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: System.Func{TKey,TValue}\n  parent: System\n  isExternal: true\n  name: Func<TKey,TValue>\n  nameWithType: Func<TKey,TValue>\n  fullName: System.Func<TKey,TValue>\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: GetOrAdd(TKey,TValue)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.GetOrAdd(TKey,TValue)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.GetOrAdd(TKey,TValue)\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: TKey\n  parent: ''\n  isExternal: true\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: IsEmpty\n  nameWithType: ConcurrentDictionary<TKey,TValue>.IsEmpty\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IsEmpty\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: Item(TKey)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.Item(TKey)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.Item(TKey)\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: TKey\n  parent: ''\n  isExternal: true\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Keys\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: Keys\n  nameWithType: ConcurrentDictionary<TKey,TValue>.Keys\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.Keys\n- uid: System.Collections.Generic.ICollection{TKey}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: ICollection<TKey>\n  nameWithType: ICollection<TKey>\n  fullName: System.Collections.Generic.ICollection<TKey>\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair`2)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>)\n- uid: System.Collections.Generic.KeyValuePair`2\n  parent: System.Collections.Generic\n  isExternal: false\n  name: KeyValuePair<TKey,TValue>\n  nameWithType: KeyValuePair<TKey,TValue>\n  fullName: System.Collections.Generic.KeyValuePair<TKey,TValue>\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair`2)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Generic.KeyValuePair`2\n  parent: System.Collections.Generic\n  isExternal: false\n  name: KeyValuePair<TKey,TValue>\n  nameWithType: KeyValuePair<TKey,TValue>\n  fullName: System.Collections.Generic.KeyValuePair<TKey,TValue>\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>,Int32)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>,Int32)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>,Int32)\n- uid: System.Collections.Generic.KeyValuePair{TKey,TValue}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: KeyValuePair<TKey,TValue>\n  nameWithType: KeyValuePair<TKey,TValue>\n  fullName: System.Collections.Generic.KeyValuePair<TKey,TValue>[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.Generic.ICollection\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair`2)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection(KeyValuePair<TKey,TValue>)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Generic.KeyValuePair`2\n  parent: System.Collections.Generic\n  isExternal: false\n  name: KeyValuePair<TKey,TValue>\n  nameWithType: KeyValuePair<TKey,TValue>\n  fullName: System.Collections.Generic.KeyValuePair<TKey,TValue>\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.Generic.IDictionary(TKey,TValue)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.IDictionary(TKey,TValue)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.IDictionary(TKey,TValue)\n- uid: TKey\n  parent: ''\n  isExternal: true\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.Generic.IDictionary(TKey)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.IDictionary(TKey)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.IDictionary(TKey)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: TKey\n  parent: ''\n  isExternal: true\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.Generic.IReadOnlyDictionary\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.IReadOnlyDictionary\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.IReadOnlyDictionary\n- uid: System.Collections.Generic.IEnumerable{TKey}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TKey>\n  nameWithType: IEnumerable<TKey>\n  fullName: System.Collections.Generic.IEnumerable<TKey>\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.Generic.IReadOnlyDictionary\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.IReadOnlyDictionary\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.IReadOnlyDictionary\n- uid: System.Collections.Generic.IEnumerable{TValue}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TValue>\n  nameWithType: IEnumerable<TValue>\n  fullName: System.Collections.Generic.IEnumerable<TValue>\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.ICollection.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.ICollection.IsSynchronized\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.ICollection.IsSynchronized\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.ICollection.SyncRoot\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.ICollection.SyncRoot\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.IDictionary.Add(Object,Object)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Add(Object,Object)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Add(Object,Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.IDictionary.Contains(Object)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Contains(Object)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Contains(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.IDictionary.GetEnumerator()\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.GetEnumerator()\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.GetEnumerator()\n- uid: System.Collections.IDictionaryEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IDictionaryEnumerator\n  nameWithType: IDictionaryEnumerator\n  fullName: System.Collections.IDictionaryEnumerator\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.IDictionary.IsFixedSize\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.IsFixedSize\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.IsFixedSize\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.IDictionary.IsReadOnly\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.IsReadOnly\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.IsReadOnly\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.IDictionary.Item(Object)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Item(Object)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Item(Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Keys\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.IDictionary.Keys\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Keys\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Keys\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.IDictionary.Remove(Object)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Remove(Object)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Remove(Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Values\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.IDictionary.Values\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Values\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Values\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ToArray\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: ToArray()\n  nameWithType: ConcurrentDictionary<TKey,TValue>.ToArray()\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ToArray()\n- uid: System.Collections.Generic.KeyValuePair{TKey,TValue}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: KeyValuePair<TKey,TValue>\n  nameWithType: KeyValuePair<TKey,TValue>\n  fullName: System.Collections.Generic.KeyValuePair<TKey,TValue>[]\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: TryAdd(TKey,TValue)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.TryAdd(TKey,TValue)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.TryAdd(TKey,TValue)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: TKey\n  parent: ''\n  isExternal: true\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: TryGetValue(TKey,TValue)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.TryGetValue(TKey,TValue)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.TryGetValue(TKey,TValue)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: TKey\n  parent: ''\n  isExternal: true\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: TryRemove(TKey,TValue)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.TryRemove(TKey,TValue)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.TryRemove(TKey,TValue)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: TKey\n  parent: ''\n  isExternal: true\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: TryUpdate(TKey,TValue,TValue)\n  nameWithType: ConcurrentDictionary<TKey,TValue>.TryUpdate(TKey,TValue,TValue)\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.TryUpdate(TKey,TValue,TValue)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: TKey\n  parent: ''\n  isExternal: true\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Values\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  name: Values\n  nameWithType: ConcurrentDictionary<TKey,TValue>.Values\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.Values\n- uid: System.Collections.Generic.ICollection{TValue}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: ICollection<TValue>\n  nameWithType: ICollection<TValue>\n  fullName: System.Collections.Generic.ICollection<TValue>\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  nameWithType: ConcurrentDictionary<TKey,TValue>.\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd*\n  parent: System.Collections.Concurrent.ConcurrentDictionary`2\n  isExternal: false\n  nameWithType: ConcurrentDictionary<TKey,TValue>.\n"}