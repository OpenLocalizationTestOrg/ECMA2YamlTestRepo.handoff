{"nodes":[{"pos":[1921,1929],"content":"Contract","needQuote":true,"needEscape":true,"nodes":[{"content":"Contract","pos":[0,8]}]},{"pos":[2637,2652],"content":"Assert(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Assert(Boolean)","pos":[0,15]}]},{"pos":[2993,3027],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3336,3358],"content":"Assert(Boolean,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Assert(Boolean,String)","pos":[0,22]}]},{"pos":[3733,3767],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3835,3869],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4150,4165],"content":"Assume(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Assume(Boolean)","pos":[0,15]}]},{"pos":[4506,4540],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4849,4871],"content":"Assume(Boolean,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Assume(Boolean,String)","pos":[0,22]}]},{"pos":[5246,5280],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5348,5382],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5647,5661],"content":"ContractFailed","needQuote":true,"needEscape":true,"nodes":[{"content":"ContractFailed","pos":[0,14]}]},{"pos":[6093,6127],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6338,6356],"content":"EndContractBlock()","needQuote":true,"needEscape":true,"nodes":[{"content":"EndContractBlock()","pos":[0,18]}]},{"pos":[6860,6876],"content":"Ensures(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Ensures(Boolean)","pos":[0,16]}]},{"pos":[7220,7254],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7566,7589],"content":"Ensures(Boolean,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Ensures(Boolean,String)","pos":[0,23]}]},{"pos":[7967,8001],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8069,8103],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8407,8430],"content":"EnsuresOnThrow(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"EnsuresOnThrow(Boolean)","pos":[0,23]}]},{"pos":[8838,8872],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9223,9253],"content":"EnsuresOnThrow(Boolean,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"EnsuresOnThrow(Boolean,String)","pos":[0,30]}]},{"pos":[9695,9729],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9797,9831],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10216,10252],"content":"Exists(Int32,Int32,Predicate<ph id=\"ph1\">&lt;Int32&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Exists(Int32,Int32,Predicate<Int32>)"},{"pos":[10683,10717],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10784,10818],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10901,10935],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10994,11028],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11347,11382],"content":"Exists(IEnumerable<ph id=\"ph1\">&lt;T&gt;</ph>,Predicate<ph id=\"ph2\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Exists(IEnumerable<T>,Predicate<T>)"},{"pos":[11855,11889],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11960,11994],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12053,12087],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12394,12430],"content":"ForAll(Int32,Int32,Predicate<ph id=\"ph1\">&lt;Int32&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ForAll(Int32,Int32,Predicate<Int32>)"},{"pos":[12861,12895],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12962,12996],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13079,13113],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13172,13206],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13525,13560],"content":"ForAll(IEnumerable<ph id=\"ph1\">&lt;T&gt;</ph>,Predicate<ph id=\"ph2\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ForAll(IEnumerable<T>,Predicate<T>)"},{"pos":[14033,14067],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14138,14172],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14231,14265],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14494,14512],"content":"Invariant(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Invariant(Boolean)","pos":[0,18]}]},{"pos":[14862,14896],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15214,15239],"content":"Invariant(Boolean,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Invariant(Boolean,String)","pos":[0,25]}]},{"pos":[15623,15657],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15725,15759],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16031,16042],"content":"OldValue(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"OldValue(T)","pos":[0,11]}]},{"pos":[16353,16387],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16433,16467],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16694,16711],"content":"Requires(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Requires(Boolean)","pos":[0,17]}]},{"pos":[17058,17092],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17407,17431],"content":"Requires(Boolean,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Requires(Boolean,String)","pos":[0,24]}]},{"pos":[17812,17846],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17914,17948],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18241,18258],"content":"Requires(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Requires(Boolean)","pos":[0,17]}]},{"pos":[18648,18682],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19015,19039],"content":"Requires(Boolean,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Requires(Boolean,String)","pos":[0,24]}]},{"pos":[19463,19497],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19565,19599],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19868,19876],"content":"Result()","needQuote":true,"needEscape":true,"nodes":[{"content":"Result()","pos":[0,8]}]},{"pos":[20171,20205],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20428,20444],"content":"ValueAtReturn(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"ValueAtReturn(T)","pos":[0,16]}]},{"pos":[20774,20808],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20854,20888],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20999,21012],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[21157,21172],"content":"Assert(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Assert(Boolean)","pos":[0,15]}]},{"pos":[21347,21354],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[21564,21586],"content":"Assert(Boolean,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Assert(Boolean,String)","pos":[0,22]}]},{"pos":[21775,21782],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[21900,21906],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[22100,22115],"content":"Assume(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Assume(Boolean)","pos":[0,15]}]},{"pos":[22290,22297],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[22507,22529],"content":"Assume(Boolean,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Assume(Boolean,String)","pos":[0,22]}]},{"pos":[22718,22725],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[22843,22849],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[23035,23049],"content":"ContractFailed","needQuote":true,"needEscape":true,"nodes":[{"content":"ContractFailed","pos":[0,14]}]},{"pos":[23281,23318],"content":"EventHandler<ph id=\"ph1\">&lt;ContractFailedEventArgs&gt;</ph>","needQuote":true,"needEscape":true,"source":"EventHandler<ContractFailedEventArgs>"},{"pos":[23597,23615],"content":"EndContractBlock()","needQuote":true,"needEscape":true,"nodes":[{"content":"EndContractBlock()","pos":[0,18]}]},{"pos":[23874,23890],"content":"Ensures(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Ensures(Boolean)","pos":[0,16]}]},{"pos":[24067,24074],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[24285,24308],"content":"Ensures(Boolean,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Ensures(Boolean,String)","pos":[0,23]}]},{"pos":[24499,24506],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[24624,24630],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[24835,24858],"content":"EnsuresOnThrow(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"EnsuresOnThrow(Boolean)","pos":[0,23]}]},{"pos":[25049,25056],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[25277,25307],"content":"EnsuresOnThrow(Boolean,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"EnsuresOnThrow(Boolean,String)","pos":[0,30]}]},{"pos":[25512,25519],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[25637,25643],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[25879,25915],"content":"Exists(Int32,Int32,Predicate<ph id=\"ph1\">&lt;Int32&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Exists(Int32,Int32,Predicate<Int32>)"},{"pos":[26132,26139],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[26256,26261],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[26374,26379],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[26510,26526],"content":"Predicate<ph id=\"ph1\">&lt;Int32&gt;</ph>","needQuote":true,"needEscape":true,"source":"Predicate<Int32>"},{"pos":[26795,26830],"content":"Exists(IEnumerable<ph id=\"ph1\">&lt;T&gt;</ph>,Predicate<ph id=\"ph2\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Exists(IEnumerable<T>,Predicate<T>)"},{"pos":[27045,27052],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[27217,27231],"content":"IEnumerable<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<T>"},{"pos":[27388,27400],"content":"Predicate<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"Predicate<T>"},{"pos":[27648,27684],"content":"ForAll(Int32,Int32,Predicate<ph id=\"ph1\">&lt;Int32&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ForAll(Int32,Int32,Predicate<Int32>)"},{"pos":[27901,27908],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[28025,28030],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28143,28148],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28279,28295],"content":"Predicate<ph id=\"ph1\">&lt;Int32&gt;</ph>","needQuote":true,"needEscape":true,"source":"Predicate<Int32>"},{"pos":[28564,28599],"content":"ForAll(IEnumerable<ph id=\"ph1\">&lt;T&gt;</ph>,Predicate<ph id=\"ph2\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ForAll(IEnumerable<T>,Predicate<T>)"},{"pos":[28814,28821],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[28986,29000],"content":"IEnumerable<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<T>"},{"pos":[29157,29169],"content":"Predicate<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"Predicate<T>"},{"pos":[29378,29396],"content":"Invariant(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Invariant(Boolean)","pos":[0,18]}]},{"pos":[29577,29584],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[29797,29822],"content":"Invariant(Boolean,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Invariant(Boolean,String)","pos":[0,25]}]},{"pos":[30017,30024],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[30142,30148],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[30336,30347],"content":"OldValue(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"OldValue(T)","pos":[0,11]}]},{"pos":[30496,30497],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[30579,30580],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[30759,30776],"content":"Requires(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Requires(Boolean)","pos":[0,17]}]},{"pos":[30955,30962],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[31174,31198],"content":"Requires(Boolean,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Requires(Boolean,String)","pos":[0,24]}]},{"pos":[31391,31398],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[31516,31522],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[31721,31738],"content":"Requires(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Requires(Boolean)","pos":[0,17]}]},{"pos":[31917,31924],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[32139,32163],"content":"Requires(Boolean,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Requires(Boolean,String)","pos":[0,24]}]},{"pos":[32356,32363],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[32481,32487],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[32668,32676],"content":"Result()","needQuote":true,"needEscape":true,"nodes":[{"content":"Result()","pos":[0,8]}]},{"pos":[32819,32820],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[32997,33013],"content":"ValueAtReturn(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"ValueAtReturn(T)","pos":[0,16]}]},{"pos":[33172,33173],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[33255,33256],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.Contracts.Contract\n  id: Contract\n  children:\n  - System.Diagnostics.Contracts.Contract.Assert(System.Boolean)\n  - System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)\n  - System.Diagnostics.Contracts.Contract.Assume(System.Boolean)\n  - System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)\n  - System.Diagnostics.Contracts.Contract.ContractFailed\n  - System.Diagnostics.Contracts.Contract.EndContractBlock\n  - System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)\n  - System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)\n  - System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)\n  - System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)\n  - System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})\n  - System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable`1,System.Predicate`1)\n  - System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})\n  - System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable`1,System.Predicate`1)\n  - System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)\n  - System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)\n  - System.Diagnostics.Contracts.Contract.OldValue``1(``0)\n  - System.Diagnostics.Contracts.Contract.Requires(System.Boolean)\n  - System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)\n  - System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)\n  - System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)\n  - System.Diagnostics.Contracts.Contract.Result``1\n  - System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)\n  langs:\n  - csharp\n  name: Contract\n  nameWithType: Contract\n  fullName: System.Diagnostics.Contracts.Contract\n  type: Class\n  syntax:\n    content: public static class Contract\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Diagnostics.Contracts.Contract.Assert(System.Boolean)\n  id: Assert(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: Assert(Boolean)\n  nameWithType: Contract.Assert(Boolean)\n  fullName: System.Diagnostics.Contracts.Contract.Assert(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.Contracts\n  syntax:\n    content: public static void Assert (bool condition);\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Diagnostics.Contracts.Contract.Assert*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)\n  id: Assert(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: Assert(Boolean,String)\n  nameWithType: Contract.Assert(Boolean,String)\n  fullName: System.Diagnostics.Contracts.Contract.Assert(Boolean,String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.Contracts\n  syntax:\n    content: public static void Assert (bool condition, string userMessage);\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: userMessage\n      type: System.String\n      description: Parameter description to be filled\n  overload: System.Diagnostics.Contracts.Contract.Assert*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Diagnostics.Contracts.Contract.Assume(System.Boolean)\n  id: Assume(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: Assume(Boolean)\n  nameWithType: Contract.Assume(Boolean)\n  fullName: System.Diagnostics.Contracts.Contract.Assume(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.Contracts\n  syntax:\n    content: public static void Assume (bool condition);\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Diagnostics.Contracts.Contract.Assume*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)\n  id: Assume(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: Assume(Boolean,String)\n  nameWithType: Contract.Assume(Boolean,String)\n  fullName: System.Diagnostics.Contracts.Contract.Assume(Boolean,String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.Contracts\n  syntax:\n    content: public static void Assume (bool condition, string userMessage);\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: userMessage\n      type: System.String\n      description: Parameter description to be filled\n  overload: System.Diagnostics.Contracts.Contract.Assume*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Diagnostics.Contracts.Contract.ContractFailed\n  id: ContractFailed\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: ContractFailed\n  nameWithType: Contract.ContractFailed\n  fullName: System.Diagnostics.Contracts.Contract.ContractFailed\n  type: Event\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.Contracts\n  syntax:\n    content: public static event EventHandler<System.Diagnostics.Contracts.ContractFailedEventArgs> ContractFailed;\n    return:\n      type: System.EventHandler{System.Diagnostics.Contracts.ContractFailedEventArgs}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Diagnostics.Contracts.Contract.EndContractBlock\n  id: EndContractBlock\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: EndContractBlock()\n  nameWithType: Contract.EndContractBlock()\n  fullName: System.Diagnostics.Contracts.Contract.EndContractBlock()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.Contracts\n  syntax:\n    content: public static void EndContractBlock ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)\n  id: Ensures(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: Ensures(Boolean)\n  nameWithType: Contract.Ensures(Boolean)\n  fullName: System.Diagnostics.Contracts.Contract.Ensures(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.Contracts\n  syntax:\n    content: public static void Ensures (bool condition);\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Diagnostics.Contracts.Contract.Ensures*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)\n  id: Ensures(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: Ensures(Boolean,String)\n  nameWithType: Contract.Ensures(Boolean,String)\n  fullName: System.Diagnostics.Contracts.Contract.Ensures(Boolean,String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.Contracts\n  syntax:\n    content: public static void Ensures (bool condition, string userMessage);\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: userMessage\n      type: System.String\n      description: Parameter description to be filled\n  overload: System.Diagnostics.Contracts.Contract.Ensures*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)\n  id: EnsuresOnThrow``1(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: EnsuresOnThrow(Boolean)\n  nameWithType: Contract.EnsuresOnThrow(Boolean)\n  fullName: System.Diagnostics.Contracts.Contract.EnsuresOnThrow(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.Contracts\n  syntax:\n    content: 'public static void EnsuresOnThrow<TException> (bool condition) where TException : Exception;'\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Diagnostics.Contracts.Contract.EnsuresOnThrow<TException>*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)\n  id: EnsuresOnThrow``1(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: EnsuresOnThrow(Boolean,String)\n  nameWithType: Contract.EnsuresOnThrow(Boolean,String)\n  fullName: System.Diagnostics.Contracts.Contract.EnsuresOnThrow(Boolean,String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.Contracts\n  syntax:\n    content: 'public static void EnsuresOnThrow<TException> (bool condition, string userMessage) where TException : Exception;'\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: userMessage\n      type: System.String\n      description: Parameter description to be filled\n  overload: System.Diagnostics.Contracts.Contract.EnsuresOnThrow<TException>*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})\n  id: Exists(System.Int32,System.Int32,System.Predicate{System.Int32})\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: Exists(Int32,Int32,Predicate<Int32>)\n  nameWithType: Contract.Exists(Int32,Int32,Predicate<Int32>)\n  fullName: System.Diagnostics.Contracts.Contract.Exists(Int32,Int32,Predicate<Int32>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.Contracts\n  syntax:\n    content: public static bool Exists (int fromInclusive, int toExclusive, Predicate<int> predicate);\n    parameters:\n    - id: fromInclusive\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: toExclusive\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: predicate\n      type: System.Predicate{System.Int32}\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable`1,System.Predicate`1)\n  id: Exists``1(System.Collections.Generic.IEnumerable`1,System.Predicate`1)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: Exists(IEnumerable<T>,Predicate<T>)\n  nameWithType: Contract.Exists(IEnumerable<T>,Predicate<T>)\n  fullName: System.Diagnostics.Contracts.Contract.Exists(IEnumerable<T>,Predicate<T>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.Contracts\n  syntax:\n    content: public static bool Exists<T> (System.Collections.Generic.IEnumerable<T> collection, Predicate<T> predicate);\n    parameters:\n    - id: collection\n      type: System.Collections.Generic.IEnumerable`1\n      description: Parameter description to be filled\n    - id: predicate\n      type: System.Predicate`1\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})\n  id: ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: ForAll(Int32,Int32,Predicate<Int32>)\n  nameWithType: Contract.ForAll(Int32,Int32,Predicate<Int32>)\n  fullName: System.Diagnostics.Contracts.Contract.ForAll(Int32,Int32,Predicate<Int32>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.Contracts\n  syntax:\n    content: public static bool ForAll (int fromInclusive, int toExclusive, Predicate<int> predicate);\n    parameters:\n    - id: fromInclusive\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: toExclusive\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: predicate\n      type: System.Predicate{System.Int32}\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable`1,System.Predicate`1)\n  id: ForAll``1(System.Collections.Generic.IEnumerable`1,System.Predicate`1)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: ForAll(IEnumerable<T>,Predicate<T>)\n  nameWithType: Contract.ForAll(IEnumerable<T>,Predicate<T>)\n  fullName: System.Diagnostics.Contracts.Contract.ForAll(IEnumerable<T>,Predicate<T>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.Contracts\n  syntax:\n    content: public static bool ForAll<T> (System.Collections.Generic.IEnumerable<T> collection, Predicate<T> predicate);\n    parameters:\n    - id: collection\n      type: System.Collections.Generic.IEnumerable`1\n      description: Parameter description to be filled\n    - id: predicate\n      type: System.Predicate`1\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)\n  id: Invariant(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: Invariant(Boolean)\n  nameWithType: Contract.Invariant(Boolean)\n  fullName: System.Diagnostics.Contracts.Contract.Invariant(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.Contracts\n  syntax:\n    content: public static void Invariant (bool condition);\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Diagnostics.Contracts.Contract.Invariant*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)\n  id: Invariant(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: Invariant(Boolean,String)\n  nameWithType: Contract.Invariant(Boolean,String)\n  fullName: System.Diagnostics.Contracts.Contract.Invariant(Boolean,String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.Contracts\n  syntax:\n    content: public static void Invariant (bool condition, string userMessage);\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: userMessage\n      type: System.String\n      description: Parameter description to be filled\n  overload: System.Diagnostics.Contracts.Contract.Invariant*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Diagnostics.Contracts.Contract.OldValue``1(``0)\n  id: OldValue``1(``0)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: OldValue(T)\n  nameWithType: Contract.OldValue(T)\n  fullName: System.Diagnostics.Contracts.Contract.OldValue(T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.Contracts\n  syntax:\n    content: public static T OldValue<T> (T value);\n    parameters:\n    - id: value\n      type: T\n      description: Parameter description to be filled\n    return:\n      type: T\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Diagnostics.Contracts.Contract.Requires(System.Boolean)\n  id: Requires(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: Requires(Boolean)\n  nameWithType: Contract.Requires(Boolean)\n  fullName: System.Diagnostics.Contracts.Contract.Requires(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.Contracts\n  syntax:\n    content: public static void Requires (bool condition);\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Diagnostics.Contracts.Contract.Requires*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)\n  id: Requires(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: Requires(Boolean,String)\n  nameWithType: Contract.Requires(Boolean,String)\n  fullName: System.Diagnostics.Contracts.Contract.Requires(Boolean,String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.Contracts\n  syntax:\n    content: public static void Requires (bool condition, string userMessage);\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: userMessage\n      type: System.String\n      description: Parameter description to be filled\n  overload: System.Diagnostics.Contracts.Contract.Requires*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)\n  id: Requires``1(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: Requires(Boolean)\n  nameWithType: Contract.Requires(Boolean)\n  fullName: System.Diagnostics.Contracts.Contract.Requires(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.Contracts\n  syntax:\n    content: 'public static void Requires<TException> (bool condition) where TException : Exception;'\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Diagnostics.Contracts.Contract.Requires<TException>*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)\n  id: Requires``1(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: Requires(Boolean,String)\n  nameWithType: Contract.Requires(Boolean,String)\n  fullName: System.Diagnostics.Contracts.Contract.Requires(Boolean,String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.Contracts\n  syntax:\n    content: 'public static void Requires<TException> (bool condition, string userMessage) where TException : Exception;'\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: userMessage\n      type: System.String\n      description: Parameter description to be filled\n  overload: System.Diagnostics.Contracts.Contract.Requires<TException>*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Diagnostics.Contracts.Contract.Result``1\n  id: Result``1\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: Result()\n  nameWithType: Contract.Result()\n  fullName: System.Diagnostics.Contracts.Contract.Result()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.Contracts\n  syntax:\n    content: public static T Result<T> ();\n    parameters: []\n    return:\n      type: T\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)\n  id: ValueAtReturn``1(``0@)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: ValueAtReturn(T)\n  nameWithType: Contract.ValueAtReturn(T)\n  fullName: System.Diagnostics.Contracts.Contract.ValueAtReturn(T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.Contracts\n  syntax:\n    content: public static T ValueAtReturn<T> (out T value);\n    parameters:\n    - id: value\n      type: T\n      description: Parameter description to be filled\n    return:\n      type: T\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Diagnostics.Contracts.Contract.Assert(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Assert(Boolean)\n  nameWithType: Contract.Assert(Boolean)\n  fullName: System.Diagnostics.Contracts.Contract.Assert(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Assert(Boolean,String)\n  nameWithType: Contract.Assert(Boolean,String)\n  fullName: System.Diagnostics.Contracts.Contract.Assert(Boolean,String)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Diagnostics.Contracts.Contract.Assume(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Assume(Boolean)\n  nameWithType: Contract.Assume(Boolean)\n  fullName: System.Diagnostics.Contracts.Contract.Assume(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Assume(Boolean,String)\n  nameWithType: Contract.Assume(Boolean,String)\n  fullName: System.Diagnostics.Contracts.Contract.Assume(Boolean,String)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Diagnostics.Contracts.Contract.ContractFailed\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: ContractFailed\n  nameWithType: Contract.ContractFailed\n  fullName: System.Diagnostics.Contracts.Contract.ContractFailed\n- uid: System.EventHandler{System.Diagnostics.Contracts.ContractFailedEventArgs}\n  parent: System\n  isExternal: false\n  name: EventHandler<ContractFailedEventArgs>\n  nameWithType: EventHandler<ContractFailedEventArgs>\n  fullName: System.EventHandler<System.Diagnostics.Contracts.ContractFailedEventArgs>\n- uid: System.Diagnostics.Contracts.Contract.EndContractBlock\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: EndContractBlock()\n  nameWithType: Contract.EndContractBlock()\n  fullName: System.Diagnostics.Contracts.Contract.EndContractBlock()\n- uid: System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Ensures(Boolean)\n  nameWithType: Contract.Ensures(Boolean)\n  fullName: System.Diagnostics.Contracts.Contract.Ensures(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Ensures(Boolean,String)\n  nameWithType: Contract.Ensures(Boolean,String)\n  fullName: System.Diagnostics.Contracts.Contract.Ensures(Boolean,String)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: EnsuresOnThrow(Boolean)\n  nameWithType: Contract.EnsuresOnThrow(Boolean)\n  fullName: System.Diagnostics.Contracts.Contract.EnsuresOnThrow(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: EnsuresOnThrow(Boolean,String)\n  nameWithType: Contract.EnsuresOnThrow(Boolean,String)\n  fullName: System.Diagnostics.Contracts.Contract.EnsuresOnThrow(Boolean,String)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Exists(Int32,Int32,Predicate<Int32>)\n  nameWithType: Contract.Exists(Int32,Int32,Predicate<Int32>)\n  fullName: System.Diagnostics.Contracts.Contract.Exists(Int32,Int32,Predicate<Int32>)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Predicate{System.Int32}\n  parent: System\n  isExternal: false\n  name: Predicate<Int32>\n  nameWithType: Predicate<Int32>\n  fullName: System.Predicate<System.Int32>\n- uid: System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable`1,System.Predicate`1)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Exists(IEnumerable<T>,Predicate<T>)\n  nameWithType: Contract.Exists(IEnumerable<T>,Predicate<T>)\n  fullName: System.Diagnostics.Contracts.Contract.Exists(IEnumerable<T>,Predicate<T>)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Generic.IEnumerable`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Predicate`1\n  parent: System\n  isExternal: false\n  name: Predicate<T>\n  nameWithType: Predicate<T>\n  fullName: System.Predicate<T>\n- uid: System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: ForAll(Int32,Int32,Predicate<Int32>)\n  nameWithType: Contract.ForAll(Int32,Int32,Predicate<Int32>)\n  fullName: System.Diagnostics.Contracts.Contract.ForAll(Int32,Int32,Predicate<Int32>)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Predicate{System.Int32}\n  parent: System\n  isExternal: false\n  name: Predicate<Int32>\n  nameWithType: Predicate<Int32>\n  fullName: System.Predicate<System.Int32>\n- uid: System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable`1,System.Predicate`1)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: ForAll(IEnumerable<T>,Predicate<T>)\n  nameWithType: Contract.ForAll(IEnumerable<T>,Predicate<T>)\n  fullName: System.Diagnostics.Contracts.Contract.ForAll(IEnumerable<T>,Predicate<T>)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Generic.IEnumerable`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Predicate`1\n  parent: System\n  isExternal: false\n  name: Predicate<T>\n  nameWithType: Predicate<T>\n  fullName: System.Predicate<T>\n- uid: System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Invariant(Boolean)\n  nameWithType: Contract.Invariant(Boolean)\n  fullName: System.Diagnostics.Contracts.Contract.Invariant(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Invariant(Boolean,String)\n  nameWithType: Contract.Invariant(Boolean,String)\n  fullName: System.Diagnostics.Contracts.Contract.Invariant(Boolean,String)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Diagnostics.Contracts.Contract.OldValue``1(``0)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: OldValue(T)\n  nameWithType: Contract.OldValue(T)\n  fullName: System.Diagnostics.Contracts.Contract.OldValue(T)\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Diagnostics.Contracts.Contract.Requires(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Requires(Boolean)\n  nameWithType: Contract.Requires(Boolean)\n  fullName: System.Diagnostics.Contracts.Contract.Requires(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Requires(Boolean,String)\n  nameWithType: Contract.Requires(Boolean,String)\n  fullName: System.Diagnostics.Contracts.Contract.Requires(Boolean,String)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Requires(Boolean)\n  nameWithType: Contract.Requires(Boolean)\n  fullName: System.Diagnostics.Contracts.Contract.Requires(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Requires(Boolean,String)\n  nameWithType: Contract.Requires(Boolean,String)\n  fullName: System.Diagnostics.Contracts.Contract.Requires(Boolean,String)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Diagnostics.Contracts.Contract.Result``1\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Result()\n  nameWithType: Contract.Result()\n  fullName: System.Diagnostics.Contracts.Contract.Result()\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: ValueAtReturn(T)\n  nameWithType: Contract.ValueAtReturn(T)\n  fullName: System.Diagnostics.Contracts.Contract.ValueAtReturn(T)\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Diagnostics.Contracts.Contract.Assert*\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  nameWithType: Contract.\n- uid: System.Diagnostics.Contracts.Contract.Assume*\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  nameWithType: Contract.\n- uid: System.Diagnostics.Contracts.Contract.Ensures*\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  nameWithType: Contract.\n- uid: System.Diagnostics.Contracts.Contract.EnsuresOnThrow<TException>*\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  nameWithType: Contract.\n- uid: System.Diagnostics.Contracts.Contract.Invariant*\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  nameWithType: Contract.\n- uid: System.Diagnostics.Contracts.Contract.Requires*\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  nameWithType: Contract.\n- uid: System.Diagnostics.Contracts.Contract.Requires<TException>*\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  nameWithType: Contract.\n"}