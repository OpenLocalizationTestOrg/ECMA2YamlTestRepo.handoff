{"nodes":[{"pos":[988,1008],"content":"ReflectionPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"ReflectionPermission","pos":[0,20]}]},{"pos":[2561,2598],"content":"ReflectionPermission(PermissionState)","needQuote":true,"needEscape":true,"nodes":[{"content":"ReflectionPermission(PermissionState)","pos":[0,37]}]},{"pos":[3072,3106],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3427,3473],"content":"ReflectionPermission(ReflectionPermissionFlag)","needQuote":true,"needEscape":true,"nodes":[{"content":"ReflectionPermission(ReflectionPermissionFlag)","pos":[0,46]}]},{"pos":[3981,4015],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4224,4230],"content":"Copy()","needQuote":true,"needEscape":true,"nodes":[{"content":"Copy()","pos":[0,6]}]},{"pos":[4592,4626],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4837,4842],"content":"Flags","needQuote":true,"needEscape":true,"nodes":[{"content":"Flags","pos":[0,5]}]},{"pos":[5237,5271],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5552,5576],"content":"FromXml(SecurityElement)","needQuote":true,"needEscape":true,"nodes":[{"content":"FromXml(SecurityElement)","pos":[0,24]}]},{"pos":[5992,6026],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6303,6325],"content":"Intersect(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"Intersect(IPermission)","pos":[0,22]}]},{"pos":[6760,6794],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6866,6900],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7179,7202],"content":"IsSubsetOf(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"IsSubsetOf(IPermission)","pos":[0,23]}]},{"pos":[7617,7651],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7710,7744],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7973,7989],"content":"IsUnrestricted()","needQuote":true,"needEscape":true,"nodes":[{"content":"IsUnrestricted()","pos":[0,16]}]},{"pos":[8336,8370],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8581,8588],"content":"ToXml()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToXml()","pos":[0,7]}]},{"pos":[8961,8995],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9264,9282],"content":"Union(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"Union(IPermission)","pos":[0,18]}]},{"pos":[9703,9737],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9809,9843],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9977,10013],"content":"System.Security.CodeAccessPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Security.CodeAccessPermission","pos":[0,36]}]},{"pos":[10208,10245],"content":"ReflectionPermission(PermissionState)","needQuote":true,"needEscape":true,"nodes":[{"content":"ReflectionPermission(PermissionState)","pos":[0,37]}]},{"pos":[10537,10552],"content":"PermissionState","needQuote":true,"needEscape":true,"nodes":[{"content":"PermissionState","pos":[0,15]}]},{"pos":[10844,10890],"content":"ReflectionPermission(ReflectionPermissionFlag)","needQuote":true,"needEscape":true,"nodes":[{"content":"ReflectionPermission(ReflectionPermissionFlag)","pos":[0,46]}]},{"pos":[11209,11233],"content":"ReflectionPermissionFlag","needQuote":true,"needEscape":true,"nodes":[{"content":"ReflectionPermissionFlag","pos":[0,24]}]},{"pos":[11488,11494],"content":"Copy()","needQuote":true,"needEscape":true,"nodes":[{"content":"Copy()","pos":[0,6]}]},{"pos":[11696,11707],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[11925,11930],"content":"Flags","needQuote":true,"needEscape":true,"nodes":[{"content":"Flags","pos":[0,5]}]},{"pos":[12167,12191],"content":"ReflectionPermissionFlag","needQuote":true,"needEscape":true,"nodes":[{"content":"ReflectionPermissionFlag","pos":[0,24]}]},{"pos":[12482,12506],"content":"FromXml(SecurityElement)","needQuote":true,"needEscape":true,"nodes":[{"content":"FromXml(SecurityElement)","pos":[0,24]}]},{"pos":[12748,12763],"content":"SecurityElement","needQuote":true,"needEscape":true,"nodes":[{"content":"SecurityElement","pos":[0,15]}]},{"pos":[13022,13044],"content":"Intersect(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"Intersect(IPermission)","pos":[0,22]}]},{"pos":[13278,13289],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[13447,13458],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[13710,13733],"content":"IsSubsetOf(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"IsSubsetOf(IPermission)","pos":[0,23]}]},{"pos":[13947,13954],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[14095,14106],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[14333,14349],"content":"IsUnrestricted()","needQuote":true,"needEscape":true,"nodes":[{"content":"IsUnrestricted()","pos":[0,16]}]},{"pos":[14549,14556],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[14757,14764],"content":"ToXml()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToXml()","pos":[0,7]}]},{"pos":[14972,14987],"content":"SecurityElement","needQuote":true,"needEscape":true,"nodes":[{"content":"SecurityElement","pos":[0,15]}]},{"pos":[15242,15260],"content":"Union(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"Union(IPermission)","pos":[0,18]}]},{"pos":[15486,15497],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[15655,15666],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Permissions.ReflectionPermission\n  id: ReflectionPermission\n  children:\n  - System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.PermissionState)\n  - System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.ReflectionPermissionFlag)\n  - System.Security.Permissions.ReflectionPermission.Copy\n  - System.Security.Permissions.ReflectionPermission.Flags\n  - System.Security.Permissions.ReflectionPermission.FromXml(System.Security.SecurityElement)\n  - System.Security.Permissions.ReflectionPermission.Intersect(System.Security.IPermission)\n  - System.Security.Permissions.ReflectionPermission.IsSubsetOf(System.Security.IPermission)\n  - System.Security.Permissions.ReflectionPermission.IsUnrestricted\n  - System.Security.Permissions.ReflectionPermission.ToXml\n  - System.Security.Permissions.ReflectionPermission.Union(System.Security.IPermission)\n  langs:\n  - csharp\n  name: ReflectionPermission\n  nameWithType: ReflectionPermission\n  fullName: System.Security.Permissions.ReflectionPermission\n  type: Class\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class ReflectionPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission\n  inheritance:\n  - System.Object\n  - System.Security.CodeAccessPermission\n  implements:\n  - System.Security.Permissions.IUnrestrictedPermission\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Security.CodeAccessPermission.Assert\n  - System.Security.CodeAccessPermission.Demand\n  - System.Security.CodeAccessPermission.Deny\n  - System.Security.CodeAccessPermission.Equals(System.Object)\n  - System.Security.CodeAccessPermission.GetHashCode\n  - System.Security.CodeAccessPermission.PermitOnly\n  - System.Security.CodeAccessPermission.RevertAll\n  - System.Security.CodeAccessPermission.RevertAssert\n  - System.Security.CodeAccessPermission.RevertDeny\n  - System.Security.CodeAccessPermission.RevertPermitOnly\n  - System.Security.CodeAccessPermission.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.PermissionState)\n  id: '#ctor(System.Security.Permissions.PermissionState)'\n  parent: System.Security.Permissions.ReflectionPermission\n  langs:\n  - csharp\n  name: ReflectionPermission(PermissionState)\n  nameWithType: ReflectionPermission.ReflectionPermission(PermissionState)\n  fullName: System.Security.Permissions.ReflectionPermission.ReflectionPermission(PermissionState)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public ReflectionPermission (System.Security.Permissions.PermissionState state);\n    parameters:\n    - id: state\n      type: System.Security.Permissions.PermissionState\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.ReflectionPermissionFlag)\n  id: '#ctor(System.Security.Permissions.ReflectionPermissionFlag)'\n  parent: System.Security.Permissions.ReflectionPermission\n  langs:\n  - csharp\n  name: ReflectionPermission(ReflectionPermissionFlag)\n  nameWithType: ReflectionPermission.ReflectionPermission(ReflectionPermissionFlag)\n  fullName: System.Security.Permissions.ReflectionPermission.ReflectionPermission(ReflectionPermissionFlag)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public ReflectionPermission (System.Security.Permissions.ReflectionPermissionFlag flag);\n    parameters:\n    - id: flag\n      type: System.Security.Permissions.ReflectionPermissionFlag\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.ReflectionPermission.Copy\n  id: Copy\n  parent: System.Security.Permissions.ReflectionPermission\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: ReflectionPermission.Copy()\n  fullName: System.Security.Permissions.ReflectionPermission.Copy()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public override System.Security.IPermission Copy ();\n    parameters: []\n    return:\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.ReflectionPermission.Flags\n  id: Flags\n  parent: System.Security.Permissions.ReflectionPermission\n  langs:\n  - csharp\n  name: Flags\n  nameWithType: ReflectionPermission.Flags\n  fullName: System.Security.Permissions.ReflectionPermission.Flags\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public System.Security.Permissions.ReflectionPermissionFlag Flags { get; set; }\n    return:\n      type: System.Security.Permissions.ReflectionPermissionFlag\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.ReflectionPermission.FromXml(System.Security.SecurityElement)\n  id: FromXml(System.Security.SecurityElement)\n  parent: System.Security.Permissions.ReflectionPermission\n  langs:\n  - csharp\n  name: FromXml(SecurityElement)\n  nameWithType: ReflectionPermission.FromXml(SecurityElement)\n  fullName: System.Security.Permissions.ReflectionPermission.FromXml(SecurityElement)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public override void FromXml (System.Security.SecurityElement esd);\n    parameters:\n    - id: esd\n      type: System.Security.SecurityElement\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.ReflectionPermission.Intersect(System.Security.IPermission)\n  id: Intersect(System.Security.IPermission)\n  parent: System.Security.Permissions.ReflectionPermission\n  langs:\n  - csharp\n  name: Intersect(IPermission)\n  nameWithType: ReflectionPermission.Intersect(IPermission)\n  fullName: System.Security.Permissions.ReflectionPermission.Intersect(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n    return:\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.ReflectionPermission.IsSubsetOf(System.Security.IPermission)\n  id: IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.Permissions.ReflectionPermission\n  langs:\n  - csharp\n  name: IsSubsetOf(IPermission)\n  nameWithType: ReflectionPermission.IsSubsetOf(IPermission)\n  fullName: System.Security.Permissions.ReflectionPermission.IsSubsetOf(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public override bool IsSubsetOf (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.ReflectionPermission.IsUnrestricted\n  id: IsUnrestricted\n  parent: System.Security.Permissions.ReflectionPermission\n  langs:\n  - csharp\n  name: IsUnrestricted()\n  nameWithType: ReflectionPermission.IsUnrestricted()\n  fullName: System.Security.Permissions.ReflectionPermission.IsUnrestricted()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public bool IsUnrestricted ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.ReflectionPermission.ToXml\n  id: ToXml\n  parent: System.Security.Permissions.ReflectionPermission\n  langs:\n  - csharp\n  name: ToXml()\n  nameWithType: ReflectionPermission.ToXml()\n  fullName: System.Security.Permissions.ReflectionPermission.ToXml()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public override System.Security.SecurityElement ToXml ();\n    parameters: []\n    return:\n      type: System.Security.SecurityElement\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.ReflectionPermission.Union(System.Security.IPermission)\n  id: Union(System.Security.IPermission)\n  parent: System.Security.Permissions.ReflectionPermission\n  langs:\n  - csharp\n  name: Union(IPermission)\n  nameWithType: ReflectionPermission.Union(IPermission)\n  fullName: System.Security.Permissions.ReflectionPermission.Union(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public override System.Security.IPermission Union (System.Security.IPermission other);\n    parameters:\n    - id: other\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n    return:\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Security.CodeAccessPermission\n  isExternal: false\n  name: System.Security.CodeAccessPermission\n- uid: System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.PermissionState)\n  parent: System.Security.Permissions.ReflectionPermission\n  isExternal: false\n  name: ReflectionPermission(PermissionState)\n  nameWithType: ReflectionPermission.ReflectionPermission(PermissionState)\n  fullName: System.Security.Permissions.ReflectionPermission.ReflectionPermission(PermissionState)\n- uid: System.Security.Permissions.PermissionState\n  parent: System.Security.Permissions\n  isExternal: false\n  name: PermissionState\n  nameWithType: PermissionState\n  fullName: System.Security.Permissions.PermissionState\n- uid: System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.ReflectionPermissionFlag)\n  parent: System.Security.Permissions.ReflectionPermission\n  isExternal: false\n  name: ReflectionPermission(ReflectionPermissionFlag)\n  nameWithType: ReflectionPermission.ReflectionPermission(ReflectionPermissionFlag)\n  fullName: System.Security.Permissions.ReflectionPermission.ReflectionPermission(ReflectionPermissionFlag)\n- uid: System.Security.Permissions.ReflectionPermissionFlag\n  parent: System.Security.Permissions\n  isExternal: false\n  name: ReflectionPermissionFlag\n  nameWithType: ReflectionPermissionFlag\n  fullName: System.Security.Permissions.ReflectionPermissionFlag\n- uid: System.Security.Permissions.ReflectionPermission.Copy\n  parent: System.Security.Permissions.ReflectionPermission\n  isExternal: false\n  name: Copy()\n  nameWithType: ReflectionPermission.Copy()\n  fullName: System.Security.Permissions.ReflectionPermission.Copy()\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.Permissions.ReflectionPermission.Flags\n  parent: System.Security.Permissions.ReflectionPermission\n  isExternal: false\n  name: Flags\n  nameWithType: ReflectionPermission.Flags\n  fullName: System.Security.Permissions.ReflectionPermission.Flags\n- uid: System.Security.Permissions.ReflectionPermissionFlag\n  parent: System.Security.Permissions\n  isExternal: false\n  name: ReflectionPermissionFlag\n  nameWithType: ReflectionPermissionFlag\n  fullName: System.Security.Permissions.ReflectionPermissionFlag\n- uid: System.Security.Permissions.ReflectionPermission.FromXml(System.Security.SecurityElement)\n  parent: System.Security.Permissions.ReflectionPermission\n  isExternal: false\n  name: FromXml(SecurityElement)\n  nameWithType: ReflectionPermission.FromXml(SecurityElement)\n  fullName: System.Security.Permissions.ReflectionPermission.FromXml(SecurityElement)\n- uid: System.Security.SecurityElement\n  parent: System.Security\n  isExternal: false\n  name: SecurityElement\n  nameWithType: SecurityElement\n  fullName: System.Security.SecurityElement\n- uid: System.Security.Permissions.ReflectionPermission.Intersect(System.Security.IPermission)\n  parent: System.Security.Permissions.ReflectionPermission\n  isExternal: false\n  name: Intersect(IPermission)\n  nameWithType: ReflectionPermission.Intersect(IPermission)\n  fullName: System.Security.Permissions.ReflectionPermission.Intersect(IPermission)\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.Permissions.ReflectionPermission.IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.Permissions.ReflectionPermission\n  isExternal: false\n  name: IsSubsetOf(IPermission)\n  nameWithType: ReflectionPermission.IsSubsetOf(IPermission)\n  fullName: System.Security.Permissions.ReflectionPermission.IsSubsetOf(IPermission)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.Permissions.ReflectionPermission.IsUnrestricted\n  parent: System.Security.Permissions.ReflectionPermission\n  isExternal: false\n  name: IsUnrestricted()\n  nameWithType: ReflectionPermission.IsUnrestricted()\n  fullName: System.Security.Permissions.ReflectionPermission.IsUnrestricted()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Permissions.ReflectionPermission.ToXml\n  parent: System.Security.Permissions.ReflectionPermission\n  isExternal: false\n  name: ToXml()\n  nameWithType: ReflectionPermission.ToXml()\n  fullName: System.Security.Permissions.ReflectionPermission.ToXml()\n- uid: System.Security.SecurityElement\n  parent: System.Security\n  isExternal: false\n  name: SecurityElement\n  nameWithType: SecurityElement\n  fullName: System.Security.SecurityElement\n- uid: System.Security.Permissions.ReflectionPermission.Union(System.Security.IPermission)\n  parent: System.Security.Permissions.ReflectionPermission\n  isExternal: false\n  name: Union(IPermission)\n  nameWithType: ReflectionPermission.Union(IPermission)\n  fullName: System.Security.Permissions.ReflectionPermission.Union(IPermission)\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n"}