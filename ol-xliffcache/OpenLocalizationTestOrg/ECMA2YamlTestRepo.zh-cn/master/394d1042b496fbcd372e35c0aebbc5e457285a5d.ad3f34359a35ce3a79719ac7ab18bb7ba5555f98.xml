{"nodes":[{"pos":[2744,2750],"content":"CngKey","needQuote":true,"needEscape":true,"nodes":[{"content":"CngKey","pos":[0,6]}]},{"pos":[3458,3467],"content":"Algorithm","needQuote":true,"needEscape":true,"nodes":[{"content":"Algorithm","pos":[0,9]}]},{"pos":[3824,3858],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4061,4075],"content":"AlgorithmGroup","needQuote":true,"needEscape":true,"nodes":[{"content":"AlgorithmGroup","pos":[0,14]}]},{"pos":[4457,4491],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4764,4784],"content":"Create(CngAlgorithm)","needQuote":true,"needEscape":true,"nodes":[{"content":"Create(CngAlgorithm)","pos":[0,20]}]},{"pos":[5229,5263],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5343,5377],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5734,5761],"content":"Create(CngAlgorithm,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Create(CngAlgorithm,String)","pos":[0,27]}]},{"pos":[6236,6270],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6334,6368],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6448,6482],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6947,6999],"content":"Create(CngAlgorithm,String,CngKeyCreationParameters)","needQuote":true,"needEscape":true,"nodes":[{"content":"Create(CngAlgorithm,String,CngKeyCreationParameters)","pos":[0,52]}]},{"pos":[7598,7632],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7696,7730],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7845,7879],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7959,7993],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8236,8244],"content":"Delete()","needQuote":true,"needEscape":true,"nodes":[{"content":"Delete()","pos":[0,8]}]},{"pos":[8674,8683],"content":"Dispose()","needQuote":true,"needEscape":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[9144,9158],"content":"Exists(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Exists(String)","pos":[0,14]}]},{"pos":[9493,9527],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9586,9620],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9975,10001],"content":"Exists(String,CngProvider)","needQuote":true,"needEscape":true,"nodes":[{"content":"Exists(String,CngProvider)","pos":[0,26]}]},{"pos":[10411,10445],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10537,10571],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10630,10664],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11113,11157],"content":"Exists(String,CngProvider,CngKeyOpenOptions)","needQuote":true,"needEscape":true,"nodes":[{"content":"Exists(String,CngProvider,CngKeyOpenOptions)","pos":[0,44]}]},{"pos":[11659,11693],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11785,11819],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11916,11950],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12009,12043],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12380,12404],"content":"Export(CngKeyBlobFormat)","needQuote":true,"needEscape":true,"nodes":[{"content":"Export(CngKeyBlobFormat)","pos":[0,24]}]},{"pos":[12823,12857],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12915,12949],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13148,13160],"content":"ExportPolicy","needQuote":true,"needEscape":true,"nodes":[{"content":"ExportPolicy","pos":[0,12]}]},{"pos":[13536,13570],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13893,13931],"content":"GetProperty(String,CngPropertyOptions)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetProperty(String,CngPropertyOptions)","pos":[0,38]}]},{"pos":[14399,14433],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14531,14565],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14650,14684],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14871,14877],"content":"Handle","needQuote":true,"needEscape":true,"nodes":[{"content":"Handle","pos":[0,6]}]},{"pos":[15237,15271],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15594,15632],"content":"HasProperty(String,CngPropertyOptions)","needQuote":true,"needEscape":true,"nodes":[{"content":"HasProperty(String,CngPropertyOptions)","pos":[0,38]}]},{"pos":[16064,16098],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16196,16230],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16289,16323],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16632,16663],"content":"Import(Byte[],CngKeyBlobFormat)","needQuote":true,"needEscape":true,"nodes":[{"content":"Import(Byte[],CngKeyBlobFormat)","pos":[0,31]}]},{"pos":[17117,17151],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17246,17280],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17360,17394],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17841,17884],"content":"Import(Byte[],CngKeyBlobFormat,CngProvider)","needQuote":true,"needEscape":true,"nodes":[{"content":"Import(Byte[],CngKeyBlobFormat,CngProvider)","pos":[0,43]}]},{"pos":[18413,18447],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18542,18576],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18668,18702],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18782,18816],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19069,19080],"content":"IsEphemeral","needQuote":true,"needEscape":true,"nodes":[{"content":"IsEphemeral","pos":[0,11]}]},{"pos":[19379,19413],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19612,19624],"content":"IsMachineKey","needQuote":true,"needEscape":true,"nodes":[{"content":"IsMachineKey","pos":[0,12]}]},{"pos":[19926,19960],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20149,20156],"content":"KeyName","needQuote":true,"needEscape":true,"nodes":[{"content":"KeyName","pos":[0,7]}]},{"pos":[20444,20478],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20667,20674],"content":"KeySize","needQuote":true,"needEscape":true,"nodes":[{"content":"KeySize","pos":[0,7]}]},{"pos":[20958,20992],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21183,21191],"content":"KeyUsage","needQuote":true,"needEscape":true,"nodes":[{"content":"KeyUsage","pos":[0,8]}]},{"pos":[21545,21579],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21792,21804],"content":"Open(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Open(String)","pos":[0,12]}]},{"pos":[22164,22198],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22278,22312],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22753,22802],"content":"Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)","needQuote":true,"needEscape":true,"nodes":[{"content":"Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)","pos":[0,49]}]},{"pos":[23390,23424],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[23540,23574],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[23654,23688],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[24037,24061],"content":"Open(String,CngProvider)","needQuote":true,"needEscape":true,"nodes":[{"content":"Open(String,CngProvider)","pos":[0,24]}]},{"pos":[24496,24530],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[24622,24656],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[24736,24770],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[25213,25255],"content":"Open(String,CngProvider,CngKeyOpenOptions)","needQuote":true,"needEscape":true,"nodes":[{"content":"Open(String,CngProvider,CngKeyOpenOptions)","pos":[0,42]}]},{"pos":[25786,25820],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[25912,25946],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[26047,26081],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[26161,26195],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[26460,26478],"content":"ParentWindowHandle","needQuote":true,"needEscape":true,"nodes":[{"content":"ParentWindowHandle","pos":[0,18]}]},{"pos":[26804,26838],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[27029,27037],"content":"Provider","needQuote":true,"needEscape":true,"nodes":[{"content":"Provider","pos":[0,8]}]},{"pos":[27389,27423],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[27626,27640],"content":"ProviderHandle","needQuote":true,"needEscape":true,"nodes":[{"content":"ProviderHandle","pos":[0,14]}]},{"pos":[28034,28068],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[28349,28373],"content":"SetProperty(CngProperty)","needQuote":true,"needEscape":true,"nodes":[{"content":"SetProperty(CngProperty)","pos":[0,24]}]},{"pos":[28789,28823],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[29014,29022],"content":"UIPolicy","needQuote":true,"needEscape":true,"nodes":[{"content":"UIPolicy","pos":[0,8]}]},{"pos":[29374,29408],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[29603,29613],"content":"UniqueName","needQuote":true,"needEscape":true,"nodes":[{"content":"UniqueName","pos":[0,10]}]},{"pos":[29910,29944],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[30055,30068],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[30196,30205],"content":"Algorithm","needQuote":true,"needEscape":true,"nodes":[{"content":"Algorithm","pos":[0,9]}]},{"pos":[30413,30425],"content":"CngAlgorithm","needQuote":true,"needEscape":true,"nodes":[{"content":"CngAlgorithm","pos":[0,12]}]},{"pos":[30641,30655],"content":"AlgorithmGroup","needQuote":true,"needEscape":true,"nodes":[{"content":"AlgorithmGroup","pos":[0,14]}]},{"pos":[30878,30895],"content":"CngAlgorithmGroup","needQuote":true,"needEscape":true,"nodes":[{"content":"CngAlgorithmGroup","pos":[0,17]}]},{"pos":[31156,31176],"content":"Create(CngAlgorithm)","needQuote":true,"needEscape":true,"nodes":[{"content":"Create(CngAlgorithm)","pos":[0,20]}]},{"pos":[31400,31406],"content":"CngKey","needQuote":true,"needEscape":true,"nodes":[{"content":"CngKey","pos":[0,6]}]},{"pos":[31594,31606],"content":"CngAlgorithm","needQuote":true,"needEscape":true,"nodes":[{"content":"CngAlgorithm","pos":[0,12]}]},{"pos":[31871,31898],"content":"Create(CngAlgorithm,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Create(CngAlgorithm,String)","pos":[0,27]}]},{"pos":[32136,32142],"content":"CngKey","needQuote":true,"needEscape":true,"nodes":[{"content":"CngKey","pos":[0,6]}]},{"pos":[32330,32342],"content":"CngAlgorithm","needQuote":true,"needEscape":true,"nodes":[{"content":"CngAlgorithm","pos":[0,12]}]},{"pos":[32492,32498],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[32783,32835],"content":"Create(CngAlgorithm,String,CngKeyCreationParameters)","needQuote":true,"needEscape":true,"nodes":[{"content":"Create(CngAlgorithm,String,CngKeyCreationParameters)","pos":[0,52]}]},{"pos":[33123,33129],"content":"CngKey","needQuote":true,"needEscape":true,"nodes":[{"content":"CngKey","pos":[0,6]}]},{"pos":[33317,33329],"content":"CngAlgorithm","needQuote":true,"needEscape":true,"nodes":[{"content":"CngAlgorithm","pos":[0,12]}]},{"pos":[33479,33485],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[33663,33687],"content":"CngKeyCreationParameters","needQuote":true,"needEscape":true,"nodes":[{"content":"CngKeyCreationParameters","pos":[0,24]}]},{"pos":[33919,33927],"content":"Delete()","needQuote":true,"needEscape":true,"nodes":[{"content":"Delete()","pos":[0,8]}]},{"pos":[34142,34151],"content":"Dispose()","needQuote":true,"needEscape":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[34382,34396],"content":"Exists(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Exists(String)","pos":[0,14]}]},{"pos":[34565,34572],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[34690,34696],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[34926,34952],"content":"Exists(String,CngProvider)","needQuote":true,"needEscape":true,"nodes":[{"content":"Exists(String,CngProvider)","pos":[0,26]}]},{"pos":[35145,35152],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[35270,35276],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[35441,35452],"content":"CngProvider","needQuote":true,"needEscape":true,"nodes":[{"content":"CngProvider","pos":[0,11]}]},{"pos":[35761,35805],"content":"Exists(String,CngProvider,CngKeyOpenOptions)","needQuote":true,"needEscape":true,"nodes":[{"content":"Exists(String,CngProvider,CngKeyOpenOptions)","pos":[0,44]}]},{"pos":[36034,36041],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[36159,36165],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[36330,36341],"content":"CngProvider","needQuote":true,"needEscape":true,"nodes":[{"content":"CngProvider","pos":[0,11]}]},{"pos":[36544,36561],"content":"CngKeyOpenOptions","needQuote":true,"needEscape":true,"nodes":[{"content":"CngKeyOpenOptions","pos":[0,17]}]},{"pos":[36826,36850],"content":"Export(CngKeyBlobFormat)","needQuote":true,"needEscape":true,"nodes":[{"content":"Export(CngKeyBlobFormat)","pos":[0,24]}]},{"pos":[37036,37040],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[37208,37224],"content":"CngKeyBlobFormat","needQuote":true,"needEscape":true,"nodes":[{"content":"CngKeyBlobFormat","pos":[0,16]}]},{"pos":[37446,37458],"content":"ExportPolicy","needQuote":true,"needEscape":true,"nodes":[{"content":"ExportPolicy","pos":[0,12]}]},{"pos":[37677,37694],"content":"CngExportPolicies","needQuote":true,"needEscape":true,"nodes":[{"content":"CngExportPolicies","pos":[0,17]}]},{"pos":[37980,38018],"content":"GetProperty(String,CngPropertyOptions)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetProperty(String,CngPropertyOptions)","pos":[0,38]}]},{"pos":[38283,38294],"content":"CngProperty","needQuote":true,"needEscape":true,"nodes":[{"content":"CngProperty","pos":[0,11]}]},{"pos":[38442,38448],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[38620,38638],"content":"CngPropertyOptions","needQuote":true,"needEscape":true,"nodes":[{"content":"CngPropertyOptions","pos":[0,18]}]},{"pos":[38858,38864],"content":"Handle","needQuote":true,"needEscape":true,"nodes":[{"content":"Handle","pos":[0,6]}]},{"pos":[39071,39090],"content":"SafeNCryptKeyHandle","needQuote":true,"needEscape":true,"nodes":[{"content":"SafeNCryptKeyHandle","pos":[0,19]}]},{"pos":[39379,39417],"content":"HasProperty(String,CngPropertyOptions)","needQuote":true,"needEscape":true,"nodes":[{"content":"HasProperty(String,CngPropertyOptions)","pos":[0,38]}]},{"pos":[39634,39641],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[39759,39765],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[39937,39955],"content":"CngPropertyOptions","needQuote":true,"needEscape":true,"nodes":[{"content":"CngPropertyOptions","pos":[0,18]}]},{"pos":[40236,40267],"content":"Import(Byte[],CngKeyBlobFormat)","needQuote":true,"needEscape":true,"nodes":[{"content":"Import(Byte[],CngKeyBlobFormat)","pos":[0,31]}]},{"pos":[40513,40519],"content":"CngKey","needQuote":true,"needEscape":true,"nodes":[{"content":"CngKey","pos":[0,6]}]},{"pos":[40655,40659],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[40827,40843],"content":"CngKeyBlobFormat","needQuote":true,"needEscape":true,"nodes":[{"content":"CngKeyBlobFormat","pos":[0,16]}]},{"pos":[41161,41204],"content":"Import(Byte[],CngKeyBlobFormat,CngProvider)","needQuote":true,"needEscape":true,"nodes":[{"content":"Import(Byte[],CngKeyBlobFormat,CngProvider)","pos":[0,43]}]},{"pos":[41474,41480],"content":"CngKey","needQuote":true,"needEscape":true,"nodes":[{"content":"CngKey","pos":[0,6]}]},{"pos":[41616,41620],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[41788,41804],"content":"CngKeyBlobFormat","needQuote":true,"needEscape":true,"nodes":[{"content":"CngKeyBlobFormat","pos":[0,16]}]},{"pos":[42011,42022],"content":"CngProvider","needQuote":true,"needEscape":true,"nodes":[{"content":"CngProvider","pos":[0,11]}]},{"pos":[42233,42244],"content":"IsEphemeral","needQuote":true,"needEscape":true,"nodes":[{"content":"IsEphemeral","pos":[0,11]}]},{"pos":[42407,42414],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[42596,42608],"content":"IsMachineKey","needQuote":true,"needEscape":true,"nodes":[{"content":"IsMachineKey","pos":[0,12]}]},{"pos":[42773,42780],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[42957,42964],"content":"KeyName","needQuote":true,"needEscape":true,"nodes":[{"content":"KeyName","pos":[0,7]}]},{"pos":[43118,43124],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[43299,43306],"content":"KeySize","needQuote":true,"needEscape":true,"nodes":[{"content":"KeySize","pos":[0,7]}]},{"pos":[43459,43464],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[43638,43646],"content":"KeyUsage","needQuote":true,"needEscape":true,"nodes":[{"content":"KeyUsage","pos":[0,8]}]},{"pos":[43852,43864],"content":"CngKeyUsages","needQuote":true,"needEscape":true,"nodes":[{"content":"CngKeyUsages","pos":[0,12]}]},{"pos":[44085,44097],"content":"Open(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Open(String)","pos":[0,12]}]},{"pos":[44305,44311],"content":"CngKey","needQuote":true,"needEscape":true,"nodes":[{"content":"CngKey","pos":[0,6]}]},{"pos":[44449,44455],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[44729,44778],"content":"Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)","needQuote":true,"needEscape":true,"nodes":[{"content":"Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)","pos":[0,49]}]},{"pos":[45060,45066],"content":"CngKey","needQuote":true,"needEscape":true,"nodes":[{"content":"CngKey","pos":[0,6]}]},{"pos":[45259,45278],"content":"SafeNCryptKeyHandle","needQuote":true,"needEscape":true,"nodes":[{"content":"SafeNCryptKeyHandle","pos":[0,19]}]},{"pos":[45502,45525],"content":"CngKeyHandleOpenOptions","needQuote":true,"needEscape":true,"nodes":[{"content":"CngKeyHandleOpenOptions","pos":[0,23]}]},{"pos":[45809,45833],"content":"Open(String,CngProvider)","needQuote":true,"needEscape":true,"nodes":[{"content":"Open(String,CngProvider)","pos":[0,24]}]},{"pos":[46065,46071],"content":"CngKey","needQuote":true,"needEscape":true,"nodes":[{"content":"CngKey","pos":[0,6]}]},{"pos":[46209,46215],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[46380,46391],"content":"CngProvider","needQuote":true,"needEscape":true,"nodes":[{"content":"CngProvider","pos":[0,11]}]},{"pos":[46698,46740],"content":"Open(String,CngProvider,CngKeyOpenOptions)","needQuote":true,"needEscape":true,"nodes":[{"content":"Open(String,CngProvider,CngKeyOpenOptions)","pos":[0,42]}]},{"pos":[47008,47014],"content":"CngKey","needQuote":true,"needEscape":true,"nodes":[{"content":"CngKey","pos":[0,6]}]},{"pos":[47152,47158],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[47323,47334],"content":"CngProvider","needQuote":true,"needEscape":true,"nodes":[{"content":"CngProvider","pos":[0,11]}]},{"pos":[47537,47554],"content":"CngKeyOpenOptions","needQuote":true,"needEscape":true,"nodes":[{"content":"CngKeyOpenOptions","pos":[0,17]}]},{"pos":[47784,47802],"content":"ParentWindowHandle","needQuote":true,"needEscape":true,"nodes":[{"content":"ParentWindowHandle","pos":[0,18]}]},{"pos":[47978,47984],"content":"IntPtr","needQuote":true,"needEscape":true,"nodes":[{"content":"IntPtr","pos":[0,6]}]},{"pos":[48160,48168],"content":"Provider","needQuote":true,"needEscape":true,"nodes":[{"content":"Provider","pos":[0,8]}]},{"pos":[48373,48384],"content":"CngProvider","needQuote":true,"needEscape":true,"nodes":[{"content":"CngProvider","pos":[0,11]}]},{"pos":[48598,48612],"content":"ProviderHandle","needQuote":true,"needEscape":true,"nodes":[{"content":"ProviderHandle","pos":[0,14]}]},{"pos":[48840,48864],"content":"SafeNCryptProviderHandle","needQuote":true,"needEscape":true,"nodes":[{"content":"SafeNCryptProviderHandle","pos":[0,24]}]},{"pos":[49142,49166],"content":"SetProperty(CngProperty)","needQuote":true,"needEscape":true,"nodes":[{"content":"SetProperty(CngProperty)","pos":[0,24]}]},{"pos":[49403,49414],"content":"CngProperty","needQuote":true,"needEscape":true,"nodes":[{"content":"CngProperty","pos":[0,11]}]},{"pos":[49622,49630],"content":"UIPolicy","needQuote":true,"needEscape":true,"nodes":[{"content":"UIPolicy","pos":[0,8]}]},{"pos":[49835,49846],"content":"CngUIPolicy","needQuote":true,"needEscape":true,"nodes":[{"content":"CngUIPolicy","pos":[0,11]}]},{"pos":[50056,50066],"content":"UniqueName","needQuote":true,"needEscape":true,"nodes":[{"content":"UniqueName","pos":[0,10]}]},{"pos":[50226,50232],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.CngKey\n  id: CngKey\n  children:\n  - System.Security.Cryptography.CngKey.Algorithm\n  - System.Security.Cryptography.CngKey.AlgorithmGroup\n  - System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm)\n  - System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String)\n  - System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)\n  - System.Security.Cryptography.CngKey.Delete\n  - System.Security.Cryptography.CngKey.Dispose\n  - System.Security.Cryptography.CngKey.Exists(System.String)\n  - System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider)\n  - System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  - System.Security.Cryptography.CngKey.Export(System.Security.Cryptography.CngKeyBlobFormat)\n  - System.Security.Cryptography.CngKey.ExportPolicy\n  - System.Security.Cryptography.CngKey.GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)\n  - System.Security.Cryptography.CngKey.Handle\n  - System.Security.Cryptography.CngKey.HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)\n  - System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)\n  - System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)\n  - System.Security.Cryptography.CngKey.IsEphemeral\n  - System.Security.Cryptography.CngKey.IsMachineKey\n  - System.Security.Cryptography.CngKey.KeyName\n  - System.Security.Cryptography.CngKey.KeySize\n  - System.Security.Cryptography.CngKey.KeyUsage\n  - System.Security.Cryptography.CngKey.Open(System.String)\n  - System.Security.Cryptography.CngKey.Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)\n  - System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)\n  - System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  - System.Security.Cryptography.CngKey.ParentWindowHandle\n  - System.Security.Cryptography.CngKey.Provider\n  - System.Security.Cryptography.CngKey.ProviderHandle\n  - System.Security.Cryptography.CngKey.SetProperty(System.Security.Cryptography.CngProperty)\n  - System.Security.Cryptography.CngKey.UIPolicy\n  - System.Security.Cryptography.CngKey.UniqueName\n  langs:\n  - csharp\n  name: CngKey\n  nameWithType: CngKey\n  fullName: System.Security.Cryptography.CngKey\n  type: Class\n  syntax:\n    content: 'public sealed class CngKey : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.Algorithm\n  id: Algorithm\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Algorithm\n  nameWithType: CngKey.Algorithm\n  fullName: System.Security.Cryptography.CngKey.Algorithm\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public System.Security.Cryptography.CngAlgorithm Algorithm { get; }\n    return:\n      type: System.Security.Cryptography.CngAlgorithm\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.AlgorithmGroup\n  id: AlgorithmGroup\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: AlgorithmGroup\n  nameWithType: CngKey.AlgorithmGroup\n  fullName: System.Security.Cryptography.CngKey.AlgorithmGroup\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public System.Security.Cryptography.CngAlgorithmGroup AlgorithmGroup { get; }\n    return:\n      type: System.Security.Cryptography.CngAlgorithmGroup\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm)\n  id: Create(System.Security.Cryptography.CngAlgorithm)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Create(CngAlgorithm)\n  nameWithType: CngKey.Create(CngAlgorithm)\n  fullName: System.Security.Cryptography.CngKey.Create(CngAlgorithm)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static System.Security.Cryptography.CngKey Create (System.Security.Cryptography.CngAlgorithm algorithm);\n    parameters:\n    - id: algorithm\n      type: System.Security.Cryptography.CngAlgorithm\n      description: Parameter description to be filled\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.CngKey.Create*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String)\n  id: Create(System.Security.Cryptography.CngAlgorithm,System.String)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Create(CngAlgorithm,String)\n  nameWithType: CngKey.Create(CngAlgorithm,String)\n  fullName: System.Security.Cryptography.CngKey.Create(CngAlgorithm,String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static System.Security.Cryptography.CngKey Create (System.Security.Cryptography.CngAlgorithm algorithm, string keyName);\n    parameters:\n    - id: algorithm\n      type: System.Security.Cryptography.CngAlgorithm\n      description: Parameter description to be filled\n    - id: keyName\n      type: System.String\n      description: Parameter description to be filled\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.CngKey.Create*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)\n  id: Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Create(CngAlgorithm,String,CngKeyCreationParameters)\n  nameWithType: CngKey.Create(CngAlgorithm,String,CngKeyCreationParameters)\n  fullName: System.Security.Cryptography.CngKey.Create(CngAlgorithm,String,CngKeyCreationParameters)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static System.Security.Cryptography.CngKey Create (System.Security.Cryptography.CngAlgorithm algorithm, string keyName, System.Security.Cryptography.CngKeyCreationParameters creationParameters);\n    parameters:\n    - id: algorithm\n      type: System.Security.Cryptography.CngAlgorithm\n      description: Parameter description to be filled\n    - id: keyName\n      type: System.String\n      description: Parameter description to be filled\n    - id: creationParameters\n      type: System.Security.Cryptography.CngKeyCreationParameters\n      description: Parameter description to be filled\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.CngKey.Create*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.Delete\n  id: Delete\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Delete()\n  nameWithType: CngKey.Delete()\n  fullName: System.Security.Cryptography.CngKey.Delete()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public void Delete ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.Dispose\n  id: Dispose\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: CngKey.Dispose()\n  fullName: System.Security.Cryptography.CngKey.Dispose()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.Exists(System.String)\n  id: Exists(System.String)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Exists(String)\n  nameWithType: CngKey.Exists(String)\n  fullName: System.Security.Cryptography.CngKey.Exists(String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static bool Exists (string keyName);\n    parameters:\n    - id: keyName\n      type: System.String\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.CngKey.Exists*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider)\n  id: Exists(System.String,System.Security.Cryptography.CngProvider)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Exists(String,CngProvider)\n  nameWithType: CngKey.Exists(String,CngProvider)\n  fullName: System.Security.Cryptography.CngKey.Exists(String,CngProvider)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static bool Exists (string keyName, System.Security.Cryptography.CngProvider provider);\n    parameters:\n    - id: keyName\n      type: System.String\n      description: Parameter description to be filled\n    - id: provider\n      type: System.Security.Cryptography.CngProvider\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.CngKey.Exists*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  id: Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Exists(String,CngProvider,CngKeyOpenOptions)\n  nameWithType: CngKey.Exists(String,CngProvider,CngKeyOpenOptions)\n  fullName: System.Security.Cryptography.CngKey.Exists(String,CngProvider,CngKeyOpenOptions)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static bool Exists (string keyName, System.Security.Cryptography.CngProvider provider, System.Security.Cryptography.CngKeyOpenOptions options);\n    parameters:\n    - id: keyName\n      type: System.String\n      description: Parameter description to be filled\n    - id: provider\n      type: System.Security.Cryptography.CngProvider\n      description: Parameter description to be filled\n    - id: options\n      type: System.Security.Cryptography.CngKeyOpenOptions\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.CngKey.Exists*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.Export(System.Security.Cryptography.CngKeyBlobFormat)\n  id: Export(System.Security.Cryptography.CngKeyBlobFormat)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Export(CngKeyBlobFormat)\n  nameWithType: CngKey.Export(CngKeyBlobFormat)\n  fullName: System.Security.Cryptography.CngKey.Export(CngKeyBlobFormat)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public byte[] Export (System.Security.Cryptography.CngKeyBlobFormat format);\n    parameters:\n    - id: format\n      type: System.Security.Cryptography.CngKeyBlobFormat\n      description: Parameter description to be filled\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.ExportPolicy\n  id: ExportPolicy\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: ExportPolicy\n  nameWithType: CngKey.ExportPolicy\n  fullName: System.Security.Cryptography.CngKey.ExportPolicy\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public System.Security.Cryptography.CngExportPolicies ExportPolicy { get; }\n    return:\n      type: System.Security.Cryptography.CngExportPolicies\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)\n  id: GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: GetProperty(String,CngPropertyOptions)\n  nameWithType: CngKey.GetProperty(String,CngPropertyOptions)\n  fullName: System.Security.Cryptography.CngKey.GetProperty(String,CngPropertyOptions)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public System.Security.Cryptography.CngProperty GetProperty (string name, System.Security.Cryptography.CngPropertyOptions options);\n    parameters:\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n    - id: options\n      type: System.Security.Cryptography.CngPropertyOptions\n      description: Parameter description to be filled\n    return:\n      type: System.Security.Cryptography.CngProperty\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.Handle\n  id: Handle\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Handle\n  nameWithType: CngKey.Handle\n  fullName: System.Security.Cryptography.CngKey.Handle\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle Handle { get; }\n    return:\n      type: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)\n  id: HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: HasProperty(String,CngPropertyOptions)\n  nameWithType: CngKey.HasProperty(String,CngPropertyOptions)\n  fullName: System.Security.Cryptography.CngKey.HasProperty(String,CngPropertyOptions)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public bool HasProperty (string name, System.Security.Cryptography.CngPropertyOptions options);\n    parameters:\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n    - id: options\n      type: System.Security.Cryptography.CngPropertyOptions\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)\n  id: Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Import(Byte[],CngKeyBlobFormat)\n  nameWithType: CngKey.Import(Byte[],CngKeyBlobFormat)\n  fullName: System.Security.Cryptography.CngKey.Import(Byte[],CngKeyBlobFormat)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static System.Security.Cryptography.CngKey Import (byte[] keyBlob, System.Security.Cryptography.CngKeyBlobFormat format);\n    parameters:\n    - id: keyBlob\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: format\n      type: System.Security.Cryptography.CngKeyBlobFormat\n      description: Parameter description to be filled\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.CngKey.Import*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)\n  id: Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Import(Byte[],CngKeyBlobFormat,CngProvider)\n  nameWithType: CngKey.Import(Byte[],CngKeyBlobFormat,CngProvider)\n  fullName: System.Security.Cryptography.CngKey.Import(Byte[],CngKeyBlobFormat,CngProvider)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static System.Security.Cryptography.CngKey Import (byte[] keyBlob, System.Security.Cryptography.CngKeyBlobFormat format, System.Security.Cryptography.CngProvider provider);\n    parameters:\n    - id: keyBlob\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: format\n      type: System.Security.Cryptography.CngKeyBlobFormat\n      description: Parameter description to be filled\n    - id: provider\n      type: System.Security.Cryptography.CngProvider\n      description: Parameter description to be filled\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.CngKey.Import*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.IsEphemeral\n  id: IsEphemeral\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: IsEphemeral\n  nameWithType: CngKey.IsEphemeral\n  fullName: System.Security.Cryptography.CngKey.IsEphemeral\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public bool IsEphemeral { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.IsMachineKey\n  id: IsMachineKey\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: IsMachineKey\n  nameWithType: CngKey.IsMachineKey\n  fullName: System.Security.Cryptography.CngKey.IsMachineKey\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public bool IsMachineKey { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.KeyName\n  id: KeyName\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: KeyName\n  nameWithType: CngKey.KeyName\n  fullName: System.Security.Cryptography.CngKey.KeyName\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public string KeyName { get; }\n    return:\n      type: System.String\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.KeySize\n  id: KeySize\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: KeySize\n  nameWithType: CngKey.KeySize\n  fullName: System.Security.Cryptography.CngKey.KeySize\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public int KeySize { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.KeyUsage\n  id: KeyUsage\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: KeyUsage\n  nameWithType: CngKey.KeyUsage\n  fullName: System.Security.Cryptography.CngKey.KeyUsage\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public System.Security.Cryptography.CngKeyUsages KeyUsage { get; }\n    return:\n      type: System.Security.Cryptography.CngKeyUsages\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.Open(System.String)\n  id: Open(System.String)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Open(String)\n  nameWithType: CngKey.Open(String)\n  fullName: System.Security.Cryptography.CngKey.Open(String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static System.Security.Cryptography.CngKey Open (string keyName);\n    parameters:\n    - id: keyName\n      type: System.String\n      description: Parameter description to be filled\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.CngKey.Open*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)\n  id: Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)\n  nameWithType: CngKey.Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)\n  fullName: System.Security.Cryptography.CngKey.Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static System.Security.Cryptography.CngKey Open (Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle keyHandle, System.Security.Cryptography.CngKeyHandleOpenOptions keyHandleOpenOptions);\n    parameters:\n    - id: keyHandle\n      type: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle\n      description: Parameter description to be filled\n    - id: keyHandleOpenOptions\n      type: System.Security.Cryptography.CngKeyHandleOpenOptions\n      description: Parameter description to be filled\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.CngKey.Open*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)\n  id: Open(System.String,System.Security.Cryptography.CngProvider)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Open(String,CngProvider)\n  nameWithType: CngKey.Open(String,CngProvider)\n  fullName: System.Security.Cryptography.CngKey.Open(String,CngProvider)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static System.Security.Cryptography.CngKey Open (string keyName, System.Security.Cryptography.CngProvider provider);\n    parameters:\n    - id: keyName\n      type: System.String\n      description: Parameter description to be filled\n    - id: provider\n      type: System.Security.Cryptography.CngProvider\n      description: Parameter description to be filled\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.CngKey.Open*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  id: Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Open(String,CngProvider,CngKeyOpenOptions)\n  nameWithType: CngKey.Open(String,CngProvider,CngKeyOpenOptions)\n  fullName: System.Security.Cryptography.CngKey.Open(String,CngProvider,CngKeyOpenOptions)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static System.Security.Cryptography.CngKey Open (string keyName, System.Security.Cryptography.CngProvider provider, System.Security.Cryptography.CngKeyOpenOptions openOptions);\n    parameters:\n    - id: keyName\n      type: System.String\n      description: Parameter description to be filled\n    - id: provider\n      type: System.Security.Cryptography.CngProvider\n      description: Parameter description to be filled\n    - id: openOptions\n      type: System.Security.Cryptography.CngKeyOpenOptions\n      description: Parameter description to be filled\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.CngKey.Open*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.ParentWindowHandle\n  id: ParentWindowHandle\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: ParentWindowHandle\n  nameWithType: CngKey.ParentWindowHandle\n  fullName: System.Security.Cryptography.CngKey.ParentWindowHandle\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public IntPtr ParentWindowHandle { get; set; }\n    return:\n      type: System.IntPtr\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.Provider\n  id: Provider\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: Provider\n  nameWithType: CngKey.Provider\n  fullName: System.Security.Cryptography.CngKey.Provider\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public System.Security.Cryptography.CngProvider Provider { get; }\n    return:\n      type: System.Security.Cryptography.CngProvider\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.ProviderHandle\n  id: ProviderHandle\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: ProviderHandle\n  nameWithType: CngKey.ProviderHandle\n  fullName: System.Security.Cryptography.CngKey.ProviderHandle\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle ProviderHandle { get; }\n    return:\n      type: Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.SetProperty(System.Security.Cryptography.CngProperty)\n  id: SetProperty(System.Security.Cryptography.CngProperty)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: SetProperty(CngProperty)\n  nameWithType: CngKey.SetProperty(CngProperty)\n  fullName: System.Security.Cryptography.CngKey.SetProperty(CngProperty)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public void SetProperty (System.Security.Cryptography.CngProperty property);\n    parameters:\n    - id: property\n      type: System.Security.Cryptography.CngProperty\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.UIPolicy\n  id: UIPolicy\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: UIPolicy\n  nameWithType: CngKey.UIPolicy\n  fullName: System.Security.Cryptography.CngKey.UIPolicy\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public System.Security.Cryptography.CngUIPolicy UIPolicy { get; }\n    return:\n      type: System.Security.Cryptography.CngUIPolicy\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CngKey.UniqueName\n  id: UniqueName\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  name: UniqueName\n  nameWithType: CngKey.UniqueName\n  fullName: System.Security.Cryptography.CngKey.UniqueName\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public string UniqueName { get; }\n    return:\n      type: System.String\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Security.Cryptography.CngKey.Algorithm\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Algorithm\n  nameWithType: CngKey.Algorithm\n  fullName: System.Security.Cryptography.CngKey.Algorithm\n- uid: System.Security.Cryptography.CngAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngAlgorithm\n  nameWithType: CngAlgorithm\n  fullName: System.Security.Cryptography.CngAlgorithm\n- uid: System.Security.Cryptography.CngKey.AlgorithmGroup\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: AlgorithmGroup\n  nameWithType: CngKey.AlgorithmGroup\n  fullName: System.Security.Cryptography.CngKey.AlgorithmGroup\n- uid: System.Security.Cryptography.CngAlgorithmGroup\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngAlgorithmGroup\n  nameWithType: CngAlgorithmGroup\n  fullName: System.Security.Cryptography.CngAlgorithmGroup\n- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Create(CngAlgorithm)\n  nameWithType: CngKey.Create(CngAlgorithm)\n  fullName: System.Security.Cryptography.CngKey.Create(CngAlgorithm)\n- uid: System.Security.Cryptography.CngKey\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKey\n  nameWithType: CngKey\n  fullName: System.Security.Cryptography.CngKey\n- uid: System.Security.Cryptography.CngAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngAlgorithm\n  nameWithType: CngAlgorithm\n  fullName: System.Security.Cryptography.CngAlgorithm\n- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Create(CngAlgorithm,String)\n  nameWithType: CngKey.Create(CngAlgorithm,String)\n  fullName: System.Security.Cryptography.CngKey.Create(CngAlgorithm,String)\n- uid: System.Security.Cryptography.CngKey\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKey\n  nameWithType: CngKey\n  fullName: System.Security.Cryptography.CngKey\n- uid: System.Security.Cryptography.CngAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngAlgorithm\n  nameWithType: CngAlgorithm\n  fullName: System.Security.Cryptography.CngAlgorithm\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Create(CngAlgorithm,String,CngKeyCreationParameters)\n  nameWithType: CngKey.Create(CngAlgorithm,String,CngKeyCreationParameters)\n  fullName: System.Security.Cryptography.CngKey.Create(CngAlgorithm,String,CngKeyCreationParameters)\n- uid: System.Security.Cryptography.CngKey\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKey\n  nameWithType: CngKey\n  fullName: System.Security.Cryptography.CngKey\n- uid: System.Security.Cryptography.CngAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngAlgorithm\n  nameWithType: CngAlgorithm\n  fullName: System.Security.Cryptography.CngAlgorithm\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.CngKeyCreationParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKeyCreationParameters\n  nameWithType: CngKeyCreationParameters\n  fullName: System.Security.Cryptography.CngKeyCreationParameters\n- uid: System.Security.Cryptography.CngKey.Delete\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Delete()\n  nameWithType: CngKey.Delete()\n  fullName: System.Security.Cryptography.CngKey.Delete()\n- uid: System.Security.Cryptography.CngKey.Dispose\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Dispose()\n  nameWithType: CngKey.Dispose()\n  fullName: System.Security.Cryptography.CngKey.Dispose()\n- uid: System.Security.Cryptography.CngKey.Exists(System.String)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Exists(String)\n  nameWithType: CngKey.Exists(String)\n  fullName: System.Security.Cryptography.CngKey.Exists(String)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Exists(String,CngProvider)\n  nameWithType: CngKey.Exists(String,CngProvider)\n  fullName: System.Security.Cryptography.CngKey.Exists(String,CngProvider)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.CngProvider\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngProvider\n  nameWithType: CngProvider\n  fullName: System.Security.Cryptography.CngProvider\n- uid: System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Exists(String,CngProvider,CngKeyOpenOptions)\n  nameWithType: CngKey.Exists(String,CngProvider,CngKeyOpenOptions)\n  fullName: System.Security.Cryptography.CngKey.Exists(String,CngProvider,CngKeyOpenOptions)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.CngProvider\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngProvider\n  nameWithType: CngProvider\n  fullName: System.Security.Cryptography.CngProvider\n- uid: System.Security.Cryptography.CngKeyOpenOptions\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKeyOpenOptions\n  nameWithType: CngKeyOpenOptions\n  fullName: System.Security.Cryptography.CngKeyOpenOptions\n- uid: System.Security.Cryptography.CngKey.Export(System.Security.Cryptography.CngKeyBlobFormat)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Export(CngKeyBlobFormat)\n  nameWithType: CngKey.Export(CngKeyBlobFormat)\n  fullName: System.Security.Cryptography.CngKey.Export(CngKeyBlobFormat)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.CngKeyBlobFormat\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKeyBlobFormat\n  nameWithType: CngKeyBlobFormat\n  fullName: System.Security.Cryptography.CngKeyBlobFormat\n- uid: System.Security.Cryptography.CngKey.ExportPolicy\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: ExportPolicy\n  nameWithType: CngKey.ExportPolicy\n  fullName: System.Security.Cryptography.CngKey.ExportPolicy\n- uid: System.Security.Cryptography.CngExportPolicies\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngExportPolicies\n  nameWithType: CngExportPolicies\n  fullName: System.Security.Cryptography.CngExportPolicies\n- uid: System.Security.Cryptography.CngKey.GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: GetProperty(String,CngPropertyOptions)\n  nameWithType: CngKey.GetProperty(String,CngPropertyOptions)\n  fullName: System.Security.Cryptography.CngKey.GetProperty(String,CngPropertyOptions)\n- uid: System.Security.Cryptography.CngProperty\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngProperty\n  nameWithType: CngProperty\n  fullName: System.Security.Cryptography.CngProperty\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.CngPropertyOptions\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngPropertyOptions\n  nameWithType: CngPropertyOptions\n  fullName: System.Security.Cryptography.CngPropertyOptions\n- uid: System.Security.Cryptography.CngKey.Handle\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Handle\n  nameWithType: CngKey.Handle\n  fullName: System.Security.Cryptography.CngKey.Handle\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle\n  parent: Microsoft.Win32.SafeHandles\n  isExternal: false\n  name: SafeNCryptKeyHandle\n  nameWithType: SafeNCryptKeyHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle\n- uid: System.Security.Cryptography.CngKey.HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: HasProperty(String,CngPropertyOptions)\n  nameWithType: CngKey.HasProperty(String,CngPropertyOptions)\n  fullName: System.Security.Cryptography.CngKey.HasProperty(String,CngPropertyOptions)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.CngPropertyOptions\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngPropertyOptions\n  nameWithType: CngPropertyOptions\n  fullName: System.Security.Cryptography.CngPropertyOptions\n- uid: System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Import(Byte[],CngKeyBlobFormat)\n  nameWithType: CngKey.Import(Byte[],CngKeyBlobFormat)\n  fullName: System.Security.Cryptography.CngKey.Import(Byte[],CngKeyBlobFormat)\n- uid: System.Security.Cryptography.CngKey\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKey\n  nameWithType: CngKey\n  fullName: System.Security.Cryptography.CngKey\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.CngKeyBlobFormat\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKeyBlobFormat\n  nameWithType: CngKeyBlobFormat\n  fullName: System.Security.Cryptography.CngKeyBlobFormat\n- uid: System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Import(Byte[],CngKeyBlobFormat,CngProvider)\n  nameWithType: CngKey.Import(Byte[],CngKeyBlobFormat,CngProvider)\n  fullName: System.Security.Cryptography.CngKey.Import(Byte[],CngKeyBlobFormat,CngProvider)\n- uid: System.Security.Cryptography.CngKey\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKey\n  nameWithType: CngKey\n  fullName: System.Security.Cryptography.CngKey\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.CngKeyBlobFormat\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKeyBlobFormat\n  nameWithType: CngKeyBlobFormat\n  fullName: System.Security.Cryptography.CngKeyBlobFormat\n- uid: System.Security.Cryptography.CngProvider\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngProvider\n  nameWithType: CngProvider\n  fullName: System.Security.Cryptography.CngProvider\n- uid: System.Security.Cryptography.CngKey.IsEphemeral\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: IsEphemeral\n  nameWithType: CngKey.IsEphemeral\n  fullName: System.Security.Cryptography.CngKey.IsEphemeral\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.CngKey.IsMachineKey\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: IsMachineKey\n  nameWithType: CngKey.IsMachineKey\n  fullName: System.Security.Cryptography.CngKey.IsMachineKey\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.CngKey.KeyName\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: KeyName\n  nameWithType: CngKey.KeyName\n  fullName: System.Security.Cryptography.CngKey.KeyName\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.CngKey.KeySize\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: KeySize\n  nameWithType: CngKey.KeySize\n  fullName: System.Security.Cryptography.CngKey.KeySize\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.CngKey.KeyUsage\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: KeyUsage\n  nameWithType: CngKey.KeyUsage\n  fullName: System.Security.Cryptography.CngKey.KeyUsage\n- uid: System.Security.Cryptography.CngKeyUsages\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKeyUsages\n  nameWithType: CngKeyUsages\n  fullName: System.Security.Cryptography.CngKeyUsages\n- uid: System.Security.Cryptography.CngKey.Open(System.String)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Open(String)\n  nameWithType: CngKey.Open(String)\n  fullName: System.Security.Cryptography.CngKey.Open(String)\n- uid: System.Security.Cryptography.CngKey\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKey\n  nameWithType: CngKey\n  fullName: System.Security.Cryptography.CngKey\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.CngKey.Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)\n  nameWithType: CngKey.Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)\n  fullName: System.Security.Cryptography.CngKey.Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)\n- uid: System.Security.Cryptography.CngKey\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKey\n  nameWithType: CngKey\n  fullName: System.Security.Cryptography.CngKey\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle\n  parent: Microsoft.Win32.SafeHandles\n  isExternal: false\n  name: SafeNCryptKeyHandle\n  nameWithType: SafeNCryptKeyHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle\n- uid: System.Security.Cryptography.CngKeyHandleOpenOptions\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKeyHandleOpenOptions\n  nameWithType: CngKeyHandleOpenOptions\n  fullName: System.Security.Cryptography.CngKeyHandleOpenOptions\n- uid: System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Open(String,CngProvider)\n  nameWithType: CngKey.Open(String,CngProvider)\n  fullName: System.Security.Cryptography.CngKey.Open(String,CngProvider)\n- uid: System.Security.Cryptography.CngKey\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKey\n  nameWithType: CngKey\n  fullName: System.Security.Cryptography.CngKey\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.CngProvider\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngProvider\n  nameWithType: CngProvider\n  fullName: System.Security.Cryptography.CngProvider\n- uid: System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Open(String,CngProvider,CngKeyOpenOptions)\n  nameWithType: CngKey.Open(String,CngProvider,CngKeyOpenOptions)\n  fullName: System.Security.Cryptography.CngKey.Open(String,CngProvider,CngKeyOpenOptions)\n- uid: System.Security.Cryptography.CngKey\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKey\n  nameWithType: CngKey\n  fullName: System.Security.Cryptography.CngKey\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.CngProvider\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngProvider\n  nameWithType: CngProvider\n  fullName: System.Security.Cryptography.CngProvider\n- uid: System.Security.Cryptography.CngKeyOpenOptions\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKeyOpenOptions\n  nameWithType: CngKeyOpenOptions\n  fullName: System.Security.Cryptography.CngKeyOpenOptions\n- uid: System.Security.Cryptography.CngKey.ParentWindowHandle\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: ParentWindowHandle\n  nameWithType: CngKey.ParentWindowHandle\n  fullName: System.Security.Cryptography.CngKey.ParentWindowHandle\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Security.Cryptography.CngKey.Provider\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: Provider\n  nameWithType: CngKey.Provider\n  fullName: System.Security.Cryptography.CngKey.Provider\n- uid: System.Security.Cryptography.CngProvider\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngProvider\n  nameWithType: CngProvider\n  fullName: System.Security.Cryptography.CngProvider\n- uid: System.Security.Cryptography.CngKey.ProviderHandle\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: ProviderHandle\n  nameWithType: CngKey.ProviderHandle\n  fullName: System.Security.Cryptography.CngKey.ProviderHandle\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle\n  parent: Microsoft.Win32.SafeHandles\n  isExternal: false\n  name: SafeNCryptProviderHandle\n  nameWithType: SafeNCryptProviderHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle\n- uid: System.Security.Cryptography.CngKey.SetProperty(System.Security.Cryptography.CngProperty)\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: SetProperty(CngProperty)\n  nameWithType: CngKey.SetProperty(CngProperty)\n  fullName: System.Security.Cryptography.CngKey.SetProperty(CngProperty)\n- uid: System.Security.Cryptography.CngProperty\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngProperty\n  nameWithType: CngProperty\n  fullName: System.Security.Cryptography.CngProperty\n- uid: System.Security.Cryptography.CngKey.UIPolicy\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: UIPolicy\n  nameWithType: CngKey.UIPolicy\n  fullName: System.Security.Cryptography.CngKey.UIPolicy\n- uid: System.Security.Cryptography.CngUIPolicy\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngUIPolicy\n  nameWithType: CngUIPolicy\n  fullName: System.Security.Cryptography.CngUIPolicy\n- uid: System.Security.Cryptography.CngKey.UniqueName\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  name: UniqueName\n  nameWithType: CngKey.UniqueName\n  fullName: System.Security.Cryptography.CngKey.UniqueName\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.CngKey.Create*\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  nameWithType: CngKey.\n- uid: System.Security.Cryptography.CngKey.Exists*\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  nameWithType: CngKey.\n- uid: System.Security.Cryptography.CngKey.Import*\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  nameWithType: CngKey.\n- uid: System.Security.Cryptography.CngKey.Open*\n  parent: System.Security.Cryptography.CngKey\n  isExternal: false\n  nameWithType: CngKey.\n"}