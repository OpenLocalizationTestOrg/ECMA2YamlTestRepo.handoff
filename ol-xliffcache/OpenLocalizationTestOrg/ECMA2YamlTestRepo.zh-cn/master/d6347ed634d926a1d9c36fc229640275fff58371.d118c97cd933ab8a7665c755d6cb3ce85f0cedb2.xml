{"nodes":[{"pos":[1658,1676],"content":"RegistryPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"RegistryPermission","pos":[0,18]}]},{"pos":[3219,3254],"content":"RegistryPermission(PermissionState)","needQuote":true,"needEscape":true,"nodes":[{"content":"RegistryPermission(PermissionState)","pos":[0,35]}]},{"pos":[3718,3752],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4097,4148],"content":"RegistryPermission(RegistryPermissionAccess,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"RegistryPermission(RegistryPermissionAccess,String)","pos":[0,51]}]},{"pos":[4681,4715],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4780,4814],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5261,5333],"content":"RegistryPermission(RegistryPermissionAccess,AccessControlActions,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"RegistryPermission(RegistryPermissionAccess,AccessControlActions,String)","pos":[0,72]}]},{"pos":[5968,6002],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6103,6137],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6202,6236],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6591,6635],"content":"AddPathList(RegistryPermissionAccess,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"AddPathList(RegistryPermissionAccess,String)","pos":[0,44]}]},{"pos":[7147,7181],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7246,7280],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7809,7874],"content":"AddPathList(RegistryPermissionAccess,AccessControlActions,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"AddPathList(RegistryPermissionAccess,AccessControlActions,String)","pos":[0,65]}]},{"pos":[8488,8522],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8623,8657],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8722,8756],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9033,9039],"content":"Copy()","needQuote":true,"needEscape":true,"nodes":[{"content":"Copy()","pos":[0,6]}]},{"pos":[9397,9431],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9708,9732],"content":"FromXml(SecurityElement)","needQuote":true,"needEscape":true,"nodes":[{"content":"FromXml(SecurityElement)","pos":[0,24]}]},{"pos":[10144,10178],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10505,10542],"content":"GetPathList(RegistryPermissionAccess)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetPathList(RegistryPermissionAccess)","pos":[0,37]}]},{"pos":[11025,11059],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11117,11151],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11424,11446],"content":"Intersect(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"Intersect(IPermission)","pos":[0,22]}]},{"pos":[11877,11911],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11983,12017],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12292,12315],"content":"IsSubsetOf(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"IsSubsetOf(IPermission)","pos":[0,23]}]},{"pos":[12726,12760],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12819,12853],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13078,13094],"content":"IsUnrestricted()","needQuote":true,"needEscape":true,"nodes":[{"content":"IsUnrestricted()","pos":[0,16]}]},{"pos":[13437,13471],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13826,13870],"content":"SetPathList(RegistryPermissionAccess,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"SetPathList(RegistryPermissionAccess,String)","pos":[0,44]}]},{"pos":[14382,14416],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14481,14515],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14722,14729],"content":"ToXml()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToXml()","pos":[0,7]}]},{"pos":[15098,15132],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15397,15415],"content":"Union(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"Union(IPermission)","pos":[0,18]}]},{"pos":[15832,15866],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15938,15972],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16106,16142],"content":"System.Security.CodeAccessPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Security.CodeAccessPermission","pos":[0,36]}]},{"pos":[16333,16368],"content":"RegistryPermission(PermissionState)","needQuote":true,"needEscape":true,"nodes":[{"content":"RegistryPermission(PermissionState)","pos":[0,35]}]},{"pos":[16652,16667],"content":"PermissionState","needQuote":true,"needEscape":true,"nodes":[{"content":"PermissionState","pos":[0,15]}]},{"pos":[16969,17020],"content":"RegistryPermission(RegistryPermissionAccess,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"RegistryPermission(RegistryPermissionAccess,String)","pos":[0,51]}]},{"pos":[17345,17369],"content":"RegistryPermissionAccess","needQuote":true,"needEscape":true,"nodes":[{"content":"RegistryPermissionAccess","pos":[0,24]}]},{"pos":[17542,17548],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[17862,17934],"content":"RegistryPermission(RegistryPermissionAccess,AccessControlActions,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"RegistryPermission(RegistryPermissionAccess,AccessControlActions,String)","pos":[0,72]}]},{"pos":[18301,18325],"content":"RegistryPermissionAccess","needQuote":true,"needEscape":true,"nodes":[{"content":"RegistryPermissionAccess","pos":[0,24]}]},{"pos":[18558,18578],"content":"AccessControlActions","needQuote":true,"needEscape":true,"nodes":[{"content":"AccessControlActions","pos":[0,20]}]},{"pos":[18745,18751],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[19020,19064],"content":"AddPathList(RegistryPermissionAccess,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"AddPathList(RegistryPermissionAccess,String)","pos":[0,44]}]},{"pos":[19375,19399],"content":"RegistryPermissionAccess","needQuote":true,"needEscape":true,"nodes":[{"content":"RegistryPermissionAccess","pos":[0,24]}]},{"pos":[19572,19578],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[19898,19963],"content":"AddPathList(RegistryPermissionAccess,AccessControlActions,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"AddPathList(RegistryPermissionAccess,AccessControlActions,String)","pos":[0,65]}]},{"pos":[20316,20340],"content":"RegistryPermissionAccess","needQuote":true,"needEscape":true,"nodes":[{"content":"RegistryPermissionAccess","pos":[0,24]}]},{"pos":[20573,20593],"content":"AccessControlActions","needQuote":true,"needEscape":true,"nodes":[{"content":"AccessControlActions","pos":[0,20]}]},{"pos":[20760,20766],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[20960,20966],"content":"Copy()","needQuote":true,"needEscape":true,"nodes":[{"content":"Copy()","pos":[0,6]}]},{"pos":[21164,21175],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[21424,21448],"content":"FromXml(SecurityElement)","needQuote":true,"needEscape":true,"nodes":[{"content":"FromXml(SecurityElement)","pos":[0,24]}]},{"pos":[21686,21701],"content":"SecurityElement","needQuote":true,"needEscape":true,"nodes":[{"content":"SecurityElement","pos":[0,15]}]},{"pos":[21983,22020],"content":"GetPathList(RegistryPermissionAccess)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetPathList(RegistryPermissionAccess)","pos":[0,37]}]},{"pos":[22257,22263],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[22439,22463],"content":"RegistryPermissionAccess","needQuote":true,"needEscape":true,"nodes":[{"content":"RegistryPermissionAccess","pos":[0,24]}]},{"pos":[22748,22770],"content":"Intersect(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"Intersect(IPermission)","pos":[0,22]}]},{"pos":[23000,23011],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[23169,23180],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[23428,23451],"content":"IsSubsetOf(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"IsSubsetOf(IPermission)","pos":[0,23]}]},{"pos":[23661,23668],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[23809,23820],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[24043,24059],"content":"IsUnrestricted()","needQuote":true,"needEscape":true,"nodes":[{"content":"IsUnrestricted()","pos":[0,16]}]},{"pos":[24255,24262],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[24533,24577],"content":"SetPathList(RegistryPermissionAccess,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"SetPathList(RegistryPermissionAccess,String)","pos":[0,44]}]},{"pos":[24888,24912],"content":"RegistryPermissionAccess","needQuote":true,"needEscape":true,"nodes":[{"content":"RegistryPermissionAccess","pos":[0,24]}]},{"pos":[25085,25091],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[25286,25293],"content":"ToXml()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToXml()","pos":[0,7]}]},{"pos":[25497,25512],"content":"SecurityElement","needQuote":true,"needEscape":true,"nodes":[{"content":"SecurityElement","pos":[0,15]}]},{"pos":[25763,25781],"content":"Union(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"Union(IPermission)","pos":[0,18]}]},{"pos":[26003,26014],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[26172,26183],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Permissions.RegistryPermission\n  id: RegistryPermission\n  children:\n  - System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.PermissionState)\n  - System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.RegistryPermissionAccess,System.String)\n  - System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.RegistryPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)\n  - System.Security.Permissions.RegistryPermission.AddPathList(System.Security.Permissions.RegistryPermissionAccess,System.String)\n  - System.Security.Permissions.RegistryPermission.AddPathList(System.Security.Permissions.RegistryPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)\n  - System.Security.Permissions.RegistryPermission.Copy\n  - System.Security.Permissions.RegistryPermission.FromXml(System.Security.SecurityElement)\n  - System.Security.Permissions.RegistryPermission.GetPathList(System.Security.Permissions.RegistryPermissionAccess)\n  - System.Security.Permissions.RegistryPermission.Intersect(System.Security.IPermission)\n  - System.Security.Permissions.RegistryPermission.IsSubsetOf(System.Security.IPermission)\n  - System.Security.Permissions.RegistryPermission.IsUnrestricted\n  - System.Security.Permissions.RegistryPermission.SetPathList(System.Security.Permissions.RegistryPermissionAccess,System.String)\n  - System.Security.Permissions.RegistryPermission.ToXml\n  - System.Security.Permissions.RegistryPermission.Union(System.Security.IPermission)\n  langs:\n  - csharp\n  name: RegistryPermission\n  nameWithType: RegistryPermission\n  fullName: System.Security.Permissions.RegistryPermission\n  type: Class\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class RegistryPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission\n  inheritance:\n  - System.Object\n  - System.Security.CodeAccessPermission\n  implements:\n  - System.Security.Permissions.IUnrestrictedPermission\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Security.CodeAccessPermission.Assert\n  - System.Security.CodeAccessPermission.Demand\n  - System.Security.CodeAccessPermission.Deny\n  - System.Security.CodeAccessPermission.Equals(System.Object)\n  - System.Security.CodeAccessPermission.GetHashCode\n  - System.Security.CodeAccessPermission.PermitOnly\n  - System.Security.CodeAccessPermission.RevertAll\n  - System.Security.CodeAccessPermission.RevertAssert\n  - System.Security.CodeAccessPermission.RevertDeny\n  - System.Security.CodeAccessPermission.RevertPermitOnly\n  - System.Security.CodeAccessPermission.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.PermissionState)\n  id: '#ctor(System.Security.Permissions.PermissionState)'\n  parent: System.Security.Permissions.RegistryPermission\n  langs:\n  - csharp\n  name: RegistryPermission(PermissionState)\n  nameWithType: RegistryPermission.RegistryPermission(PermissionState)\n  fullName: System.Security.Permissions.RegistryPermission.RegistryPermission(PermissionState)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public RegistryPermission (System.Security.Permissions.PermissionState state);\n    parameters:\n    - id: state\n      type: System.Security.Permissions.PermissionState\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.RegistryPermissionAccess,System.String)\n  id: '#ctor(System.Security.Permissions.RegistryPermissionAccess,System.String)'\n  parent: System.Security.Permissions.RegistryPermission\n  langs:\n  - csharp\n  name: RegistryPermission(RegistryPermissionAccess,String)\n  nameWithType: RegistryPermission.RegistryPermission(RegistryPermissionAccess,String)\n  fullName: System.Security.Permissions.RegistryPermission.RegistryPermission(RegistryPermissionAccess,String)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public RegistryPermission (System.Security.Permissions.RegistryPermissionAccess access, string pathList);\n    parameters:\n    - id: access\n      type: System.Security.Permissions.RegistryPermissionAccess\n      description: Parameter description to be filled\n    - id: pathList\n      type: System.String\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.RegistryPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)\n  id: '#ctor(System.Security.Permissions.RegistryPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)'\n  parent: System.Security.Permissions.RegistryPermission\n  langs:\n  - csharp\n  name: RegistryPermission(RegistryPermissionAccess,AccessControlActions,String)\n  nameWithType: RegistryPermission.RegistryPermission(RegistryPermissionAccess,AccessControlActions,String)\n  fullName: System.Security.Permissions.RegistryPermission.RegistryPermission(RegistryPermissionAccess,AccessControlActions,String)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public RegistryPermission (System.Security.Permissions.RegistryPermissionAccess access, System.Security.AccessControl.AccessControlActions control, string pathList);\n    parameters:\n    - id: access\n      type: System.Security.Permissions.RegistryPermissionAccess\n      description: Parameter description to be filled\n    - id: control\n      type: System.Security.AccessControl.AccessControlActions\n      description: Parameter description to be filled\n    - id: pathList\n      type: System.String\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.RegistryPermission.AddPathList(System.Security.Permissions.RegistryPermissionAccess,System.String)\n  id: AddPathList(System.Security.Permissions.RegistryPermissionAccess,System.String)\n  parent: System.Security.Permissions.RegistryPermission\n  langs:\n  - csharp\n  name: AddPathList(RegistryPermissionAccess,String)\n  nameWithType: RegistryPermission.AddPathList(RegistryPermissionAccess,String)\n  fullName: System.Security.Permissions.RegistryPermission.AddPathList(RegistryPermissionAccess,String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public void AddPathList (System.Security.Permissions.RegistryPermissionAccess access, string pathList);\n    parameters:\n    - id: access\n      type: System.Security.Permissions.RegistryPermissionAccess\n      description: Parameter description to be filled\n    - id: pathList\n      type: System.String\n      description: Parameter description to be filled\n  overload: System.Security.Permissions.RegistryPermission.AddPathList*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.RegistryPermission.AddPathList(System.Security.Permissions.RegistryPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)\n  id: AddPathList(System.Security.Permissions.RegistryPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)\n  parent: System.Security.Permissions.RegistryPermission\n  langs:\n  - csharp\n  name: AddPathList(RegistryPermissionAccess,AccessControlActions,String)\n  nameWithType: RegistryPermission.AddPathList(RegistryPermissionAccess,AccessControlActions,String)\n  fullName: System.Security.Permissions.RegistryPermission.AddPathList(RegistryPermissionAccess,AccessControlActions,String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public void AddPathList (System.Security.Permissions.RegistryPermissionAccess access, System.Security.AccessControl.AccessControlActions control, string pathList);\n    parameters:\n    - id: access\n      type: System.Security.Permissions.RegistryPermissionAccess\n      description: Parameter description to be filled\n    - id: control\n      type: System.Security.AccessControl.AccessControlActions\n      description: Parameter description to be filled\n    - id: pathList\n      type: System.String\n      description: Parameter description to be filled\n  overload: System.Security.Permissions.RegistryPermission.AddPathList*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.RegistryPermission.Copy\n  id: Copy\n  parent: System.Security.Permissions.RegistryPermission\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: RegistryPermission.Copy()\n  fullName: System.Security.Permissions.RegistryPermission.Copy()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public override System.Security.IPermission Copy ();\n    parameters: []\n    return:\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.RegistryPermission.FromXml(System.Security.SecurityElement)\n  id: FromXml(System.Security.SecurityElement)\n  parent: System.Security.Permissions.RegistryPermission\n  langs:\n  - csharp\n  name: FromXml(SecurityElement)\n  nameWithType: RegistryPermission.FromXml(SecurityElement)\n  fullName: System.Security.Permissions.RegistryPermission.FromXml(SecurityElement)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public override void FromXml (System.Security.SecurityElement esd);\n    parameters:\n    - id: esd\n      type: System.Security.SecurityElement\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.RegistryPermission.GetPathList(System.Security.Permissions.RegistryPermissionAccess)\n  id: GetPathList(System.Security.Permissions.RegistryPermissionAccess)\n  parent: System.Security.Permissions.RegistryPermission\n  langs:\n  - csharp\n  name: GetPathList(RegistryPermissionAccess)\n  nameWithType: RegistryPermission.GetPathList(RegistryPermissionAccess)\n  fullName: System.Security.Permissions.RegistryPermission.GetPathList(RegistryPermissionAccess)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public string GetPathList (System.Security.Permissions.RegistryPermissionAccess access);\n    parameters:\n    - id: access\n      type: System.Security.Permissions.RegistryPermissionAccess\n      description: Parameter description to be filled\n    return:\n      type: System.String\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.RegistryPermission.Intersect(System.Security.IPermission)\n  id: Intersect(System.Security.IPermission)\n  parent: System.Security.Permissions.RegistryPermission\n  langs:\n  - csharp\n  name: Intersect(IPermission)\n  nameWithType: RegistryPermission.Intersect(IPermission)\n  fullName: System.Security.Permissions.RegistryPermission.Intersect(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n    return:\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.RegistryPermission.IsSubsetOf(System.Security.IPermission)\n  id: IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.Permissions.RegistryPermission\n  langs:\n  - csharp\n  name: IsSubsetOf(IPermission)\n  nameWithType: RegistryPermission.IsSubsetOf(IPermission)\n  fullName: System.Security.Permissions.RegistryPermission.IsSubsetOf(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public override bool IsSubsetOf (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.RegistryPermission.IsUnrestricted\n  id: IsUnrestricted\n  parent: System.Security.Permissions.RegistryPermission\n  langs:\n  - csharp\n  name: IsUnrestricted()\n  nameWithType: RegistryPermission.IsUnrestricted()\n  fullName: System.Security.Permissions.RegistryPermission.IsUnrestricted()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public bool IsUnrestricted ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.RegistryPermission.SetPathList(System.Security.Permissions.RegistryPermissionAccess,System.String)\n  id: SetPathList(System.Security.Permissions.RegistryPermissionAccess,System.String)\n  parent: System.Security.Permissions.RegistryPermission\n  langs:\n  - csharp\n  name: SetPathList(RegistryPermissionAccess,String)\n  nameWithType: RegistryPermission.SetPathList(RegistryPermissionAccess,String)\n  fullName: System.Security.Permissions.RegistryPermission.SetPathList(RegistryPermissionAccess,String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public void SetPathList (System.Security.Permissions.RegistryPermissionAccess access, string pathList);\n    parameters:\n    - id: access\n      type: System.Security.Permissions.RegistryPermissionAccess\n      description: Parameter description to be filled\n    - id: pathList\n      type: System.String\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.RegistryPermission.ToXml\n  id: ToXml\n  parent: System.Security.Permissions.RegistryPermission\n  langs:\n  - csharp\n  name: ToXml()\n  nameWithType: RegistryPermission.ToXml()\n  fullName: System.Security.Permissions.RegistryPermission.ToXml()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public override System.Security.SecurityElement ToXml ();\n    parameters: []\n    return:\n      type: System.Security.SecurityElement\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.RegistryPermission.Union(System.Security.IPermission)\n  id: Union(System.Security.IPermission)\n  parent: System.Security.Permissions.RegistryPermission\n  langs:\n  - csharp\n  name: Union(IPermission)\n  nameWithType: RegistryPermission.Union(IPermission)\n  fullName: System.Security.Permissions.RegistryPermission.Union(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public override System.Security.IPermission Union (System.Security.IPermission other);\n    parameters:\n    - id: other\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n    return:\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Security.CodeAccessPermission\n  isExternal: false\n  name: System.Security.CodeAccessPermission\n- uid: System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.PermissionState)\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: RegistryPermission(PermissionState)\n  nameWithType: RegistryPermission.RegistryPermission(PermissionState)\n  fullName: System.Security.Permissions.RegistryPermission.RegistryPermission(PermissionState)\n- uid: System.Security.Permissions.PermissionState\n  parent: System.Security.Permissions\n  isExternal: false\n  name: PermissionState\n  nameWithType: PermissionState\n  fullName: System.Security.Permissions.PermissionState\n- uid: System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.RegistryPermissionAccess,System.String)\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: RegistryPermission(RegistryPermissionAccess,String)\n  nameWithType: RegistryPermission.RegistryPermission(RegistryPermissionAccess,String)\n  fullName: System.Security.Permissions.RegistryPermission.RegistryPermission(RegistryPermissionAccess,String)\n- uid: System.Security.Permissions.RegistryPermissionAccess\n  parent: System.Security.Permissions\n  isExternal: false\n  name: RegistryPermissionAccess\n  nameWithType: RegistryPermissionAccess\n  fullName: System.Security.Permissions.RegistryPermissionAccess\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.RegistryPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: RegistryPermission(RegistryPermissionAccess,AccessControlActions,String)\n  nameWithType: RegistryPermission.RegistryPermission(RegistryPermissionAccess,AccessControlActions,String)\n  fullName: System.Security.Permissions.RegistryPermission.RegistryPermission(RegistryPermissionAccess,AccessControlActions,String)\n- uid: System.Security.Permissions.RegistryPermissionAccess\n  parent: System.Security.Permissions\n  isExternal: false\n  name: RegistryPermissionAccess\n  nameWithType: RegistryPermissionAccess\n  fullName: System.Security.Permissions.RegistryPermissionAccess\n- uid: System.Security.AccessControl.AccessControlActions\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AccessControlActions\n  nameWithType: AccessControlActions\n  fullName: System.Security.AccessControl.AccessControlActions\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Permissions.RegistryPermission.AddPathList(System.Security.Permissions.RegistryPermissionAccess,System.String)\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: AddPathList(RegistryPermissionAccess,String)\n  nameWithType: RegistryPermission.AddPathList(RegistryPermissionAccess,String)\n  fullName: System.Security.Permissions.RegistryPermission.AddPathList(RegistryPermissionAccess,String)\n- uid: System.Security.Permissions.RegistryPermissionAccess\n  parent: System.Security.Permissions\n  isExternal: false\n  name: RegistryPermissionAccess\n  nameWithType: RegistryPermissionAccess\n  fullName: System.Security.Permissions.RegistryPermissionAccess\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Permissions.RegistryPermission.AddPathList(System.Security.Permissions.RegistryPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: AddPathList(RegistryPermissionAccess,AccessControlActions,String)\n  nameWithType: RegistryPermission.AddPathList(RegistryPermissionAccess,AccessControlActions,String)\n  fullName: System.Security.Permissions.RegistryPermission.AddPathList(RegistryPermissionAccess,AccessControlActions,String)\n- uid: System.Security.Permissions.RegistryPermissionAccess\n  parent: System.Security.Permissions\n  isExternal: false\n  name: RegistryPermissionAccess\n  nameWithType: RegistryPermissionAccess\n  fullName: System.Security.Permissions.RegistryPermissionAccess\n- uid: System.Security.AccessControl.AccessControlActions\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AccessControlActions\n  nameWithType: AccessControlActions\n  fullName: System.Security.AccessControl.AccessControlActions\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Permissions.RegistryPermission.Copy\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: Copy()\n  nameWithType: RegistryPermission.Copy()\n  fullName: System.Security.Permissions.RegistryPermission.Copy()\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.Permissions.RegistryPermission.FromXml(System.Security.SecurityElement)\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: FromXml(SecurityElement)\n  nameWithType: RegistryPermission.FromXml(SecurityElement)\n  fullName: System.Security.Permissions.RegistryPermission.FromXml(SecurityElement)\n- uid: System.Security.SecurityElement\n  parent: System.Security\n  isExternal: false\n  name: SecurityElement\n  nameWithType: SecurityElement\n  fullName: System.Security.SecurityElement\n- uid: System.Security.Permissions.RegistryPermission.GetPathList(System.Security.Permissions.RegistryPermissionAccess)\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: GetPathList(RegistryPermissionAccess)\n  nameWithType: RegistryPermission.GetPathList(RegistryPermissionAccess)\n  fullName: System.Security.Permissions.RegistryPermission.GetPathList(RegistryPermissionAccess)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Permissions.RegistryPermissionAccess\n  parent: System.Security.Permissions\n  isExternal: false\n  name: RegistryPermissionAccess\n  nameWithType: RegistryPermissionAccess\n  fullName: System.Security.Permissions.RegistryPermissionAccess\n- uid: System.Security.Permissions.RegistryPermission.Intersect(System.Security.IPermission)\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: Intersect(IPermission)\n  nameWithType: RegistryPermission.Intersect(IPermission)\n  fullName: System.Security.Permissions.RegistryPermission.Intersect(IPermission)\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.Permissions.RegistryPermission.IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: IsSubsetOf(IPermission)\n  nameWithType: RegistryPermission.IsSubsetOf(IPermission)\n  fullName: System.Security.Permissions.RegistryPermission.IsSubsetOf(IPermission)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.Permissions.RegistryPermission.IsUnrestricted\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: IsUnrestricted()\n  nameWithType: RegistryPermission.IsUnrestricted()\n  fullName: System.Security.Permissions.RegistryPermission.IsUnrestricted()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Permissions.RegistryPermission.SetPathList(System.Security.Permissions.RegistryPermissionAccess,System.String)\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: SetPathList(RegistryPermissionAccess,String)\n  nameWithType: RegistryPermission.SetPathList(RegistryPermissionAccess,String)\n  fullName: System.Security.Permissions.RegistryPermission.SetPathList(RegistryPermissionAccess,String)\n- uid: System.Security.Permissions.RegistryPermissionAccess\n  parent: System.Security.Permissions\n  isExternal: false\n  name: RegistryPermissionAccess\n  nameWithType: RegistryPermissionAccess\n  fullName: System.Security.Permissions.RegistryPermissionAccess\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Permissions.RegistryPermission.ToXml\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: ToXml()\n  nameWithType: RegistryPermission.ToXml()\n  fullName: System.Security.Permissions.RegistryPermission.ToXml()\n- uid: System.Security.SecurityElement\n  parent: System.Security\n  isExternal: false\n  name: SecurityElement\n  nameWithType: SecurityElement\n  fullName: System.Security.SecurityElement\n- uid: System.Security.Permissions.RegistryPermission.Union(System.Security.IPermission)\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  name: Union(IPermission)\n  nameWithType: RegistryPermission.Union(IPermission)\n  fullName: System.Security.Permissions.RegistryPermission.Union(IPermission)\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.Permissions.RegistryPermission.AddPathList*\n  parent: System.Security.Permissions.RegistryPermission\n  isExternal: false\n  nameWithType: RegistryPermission.\n"}