{"nodes":[{"pos":[2241,2263],"content":"InputGestureCollection","needQuote":true,"needEscape":true,"nodes":[{"content":"InputGestureCollection","pos":[0,22]}]},{"pos":[3040,3064],"content":"InputGestureCollection()","needQuote":true,"needEscape":true,"nodes":[{"content":"InputGestureCollection()","pos":[0,24]}]},{"pos":[3629,3658],"content":"InputGestureCollection(IList)","needQuote":true,"needEscape":true,"nodes":[{"content":"InputGestureCollection(IList)","pos":[0,29]}]},{"pos":[4094,4128],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4395,4412],"content":"Add(InputGesture)","needQuote":true,"needEscape":true,"nodes":[{"content":"Add(InputGesture)","pos":[0,17]}]},{"pos":[4820,4854],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4911,4945],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5216,5237],"content":"AddRange(ICollection)","needQuote":true,"needEscape":true,"nodes":[{"content":"AddRange(ICollection)","pos":[0,21]}]},{"pos":[5649,5683],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5884,5891],"content":"Clear()","needQuote":true,"needEscape":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[6427,6449],"content":"Contains(InputGesture)","needQuote":true,"needEscape":true,"nodes":[{"content":"Contains(InputGesture)","pos":[0,22]}]},{"pos":[6855,6889],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6948,6982],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7285,7313],"content":"CopyTo(InputGesture[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"CopyTo(InputGesture[],Int32)","pos":[0,28]}]},{"pos":[7764,7798],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7859,7893],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8094,8099],"content":"Count","needQuote":true,"needEscape":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[8398,8432],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8649,8664],"content":"GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[9048,9082],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9357,9378],"content":"IndexOf(InputGesture)","needQuote":true,"needEscape":true,"nodes":[{"content":"IndexOf(InputGesture)","pos":[0,21]}]},{"pos":[9784,9818],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9875,9909],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10208,10234],"content":"Insert(Int32,InputGesture)","needQuote":true,"needEscape":true,"nodes":[{"content":"Insert(Int32,InputGesture)","pos":[0,26]}]},{"pos":[10647,10681],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10770,10804],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11017,11028],"content":"IsFixedSize","needQuote":true,"needEscape":true,"nodes":[{"content":"IsFixedSize","pos":[0,11]}]},{"pos":[11348,11382],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11593,11603],"content":"IsReadOnly","needQuote":true,"needEscape":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[11920,11954],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12173,12187],"content":"IsSynchronized","needQuote":true,"needEscape":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[12516,12550],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12777,12788],"content":"Item(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"Item(Int32)","pos":[0,11]}]},{"pos":[13164,13198],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13276,13310],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13583,13603],"content":"Remove(InputGesture)","needQuote":true,"needEscape":true,"nodes":[{"content":"Remove(InputGesture)","pos":[0,20]}]},{"pos":[14021,14055],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14290,14305],"content":"RemoveAt(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"pos":[14650,14684],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14883,14889],"content":"Seal()","needQuote":true,"needEscape":true,"nodes":[{"content":"Seal()","pos":[0,6]}]},{"pos":[15352,15360],"content":"SyncRoot","needQuote":true,"needEscape":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[15672,15706],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16039,16089],"content":"System.Collections.ICollection.CopyTo(Array,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.CopyTo(Array,Int32)","pos":[0,50]}]},{"pos":[16520,16554],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16615,16649],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16940,16976],"content":"System.Collections.IList.Add(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.Add(Object)","pos":[0,36]}]},{"pos":[17374,17408],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17465,17499],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17800,17841],"content":"System.Collections.IList.Contains(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.Contains(Object)","pos":[0,41]}]},{"pos":[18237,18271],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18330,18364],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18663,18703],"content":"System.Collections.IList.IndexOf(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.IndexOf(Object)","pos":[0,40]}]},{"pos":[19099,19133],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19190,19224],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19547,19592],"content":"System.Collections.IList.Insert(Int32,Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.Insert(Int32,Object)","pos":[0,45]}]},{"pos":[20008,20042],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20104,20138],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20429,20465],"content":"System.Collections.IList.Item(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.Item(Int32)","pos":[0,36]}]},{"pos":[20882,20916],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20974,21008],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21305,21344],"content":"System.Collections.IList.Remove(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.Remove(Object)","pos":[0,39]}]},{"pos":[21752,21786],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21897,21910],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[22050,22074],"content":"InputGestureCollection()","needQuote":true,"needEscape":true,"nodes":[{"content":"InputGestureCollection()","pos":[0,24]}]},{"pos":[22385,22414],"content":"InputGestureCollection(IList)","needQuote":true,"needEscape":true,"nodes":[{"content":"InputGestureCollection(IList)","pos":[0,29]}]},{"pos":[22659,22664],"content":"IList","needQuote":true,"needEscape":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[22896,22913],"content":"Add(InputGesture)","needQuote":true,"needEscape":true,"nodes":[{"content":"Add(InputGesture)","pos":[0,17]}]},{"pos":[23110,23115],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[23263,23275],"content":"InputGesture","needQuote":true,"needEscape":true,"nodes":[{"content":"InputGesture","pos":[0,12]}]},{"pos":[23525,23546],"content":"AddRange(ICollection)","needQuote":true,"needEscape":true,"nodes":[{"content":"AddRange(ICollection)","pos":[0,21]}]},{"pos":[23781,23792],"content":"ICollection","needQuote":true,"needEscape":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[24003,24010],"content":"Clear()","needQuote":true,"needEscape":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[24299,24321],"content":"Contains(InputGesture)","needQuote":true,"needEscape":true,"nodes":[{"content":"Contains(InputGesture)","pos":[0,22]}]},{"pos":[24530,24537],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[24689,24701],"content":"InputGesture","needQuote":true,"needEscape":true,"nodes":[{"content":"InputGesture","pos":[0,12]}]},{"pos":[24967,24995],"content":"CopyTo(InputGesture[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"CopyTo(InputGesture[],Int32)","pos":[0,28]}]},{"pos":[25249,25261],"content":"InputGesture","needQuote":true,"needEscape":true,"nodes":[{"content":"InputGesture","pos":[0,12]}]},{"pos":[25404,25409],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[25596,25601],"content":"Count","needQuote":true,"needEscape":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[25774,25779],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[25974,25989],"content":"GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[26212,26223],"content":"IEnumerator","needQuote":true,"needEscape":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[26471,26492],"content":"IndexOf(InputGesture)","needQuote":true,"needEscape":true,"nodes":[{"content":"IndexOf(InputGesture)","pos":[0,21]}]},{"pos":[26697,26702],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[26850,26862],"content":"InputGesture","needQuote":true,"needEscape":true,"nodes":[{"content":"InputGesture","pos":[0,12]}]},{"pos":[27126,27152],"content":"Insert(Int32,InputGesture)","needQuote":true,"needEscape":true,"nodes":[{"content":"Insert(Int32,InputGesture)","pos":[0,26]}]},{"pos":[27367,27372],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[27520,27532],"content":"InputGesture","needQuote":true,"needEscape":true,"nodes":[{"content":"InputGesture","pos":[0,12]}]},{"pos":[27753,27764],"content":"IsFixedSize","needQuote":true,"needEscape":true,"nodes":[{"content":"IsFixedSize","pos":[0,11]}]},{"pos":[27951,27958],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[28154,28164],"content":"IsReadOnly","needQuote":true,"needEscape":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[28349,28356],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[28556,28570],"content":"IsSynchronized","needQuote":true,"needEscape":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[28763,28770],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[28974,28985],"content":"Item(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"Item(Int32)","pos":[0,11]}]},{"pos":[29205,29217],"content":"InputGesture","needQuote":true,"needEscape":true,"nodes":[{"content":"InputGesture","pos":[0,12]}]},{"pos":[29358,29363],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[29586,29606],"content":"Remove(InputGesture)","needQuote":true,"needEscape":true,"nodes":[{"content":"Remove(InputGesture)","pos":[0,20]}]},{"pos":[29844,29856],"content":"InputGesture","needQuote":true,"needEscape":true,"nodes":[{"content":"InputGesture","pos":[0,12]}]},{"pos":[30088,30103],"content":"RemoveAt(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"pos":[30296,30301],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[30487,30493],"content":"Seal()","needQuote":true,"needEscape":true,"nodes":[{"content":"Seal()","pos":[0,6]}]},{"pos":[30745,30753],"content":"SyncRoot","needQuote":true,"needEscape":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[30933,30939],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31187,31237],"content":"System.Collections.ICollection.CopyTo(Array,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.CopyTo(Array,Int32)","pos":[0,50]}]},{"pos":[31500,31505],"content":"Array","needQuote":true,"needEscape":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[31618,31623],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[31848,31884],"content":"System.Collections.IList.Add(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.Add(Object)","pos":[0,36]}]},{"pos":[32119,32124],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[32238,32244],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[32476,32517],"content":"System.Collections.IList.Contains(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.Contains(Object)","pos":[0,41]}]},{"pos":[32764,32771],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[32889,32895],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33126,33166],"content":"System.Collections.IList.IndexOf(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.IndexOf(Object)","pos":[0,40]}]},{"pos":[33409,33414],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[33528,33534],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33777,33822],"content":"System.Collections.IList.Insert(Int32,Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.Insert(Int32,Object)","pos":[0,45]}]},{"pos":[34075,34080],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[34194,34200],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34427,34463],"content":"System.Collections.IList.Item(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.Item(Int32)","pos":[0,36]}]},{"pos":[34699,34705],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34820,34825],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[35053,35092],"content":"System.Collections.IList.Remove(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.Remove(Object)","pos":[0,39]}]},{"pos":[35334,35340],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.InputGestureCollection\n  id: InputGestureCollection\n  children:\n  - System.Windows.Input.InputGestureCollection.#ctor\n  - System.Windows.Input.InputGestureCollection.#ctor(System.Collections.IList)\n  - System.Windows.Input.InputGestureCollection.Add(System.Windows.Input.InputGesture)\n  - System.Windows.Input.InputGestureCollection.AddRange(System.Collections.ICollection)\n  - System.Windows.Input.InputGestureCollection.Clear\n  - System.Windows.Input.InputGestureCollection.Contains(System.Windows.Input.InputGesture)\n  - System.Windows.Input.InputGestureCollection.CopyTo(System.Windows.Input.InputGesture[],System.Int32)\n  - System.Windows.Input.InputGestureCollection.Count\n  - System.Windows.Input.InputGestureCollection.GetEnumerator\n  - System.Windows.Input.InputGestureCollection.IndexOf(System.Windows.Input.InputGesture)\n  - System.Windows.Input.InputGestureCollection.Insert(System.Int32,System.Windows.Input.InputGesture)\n  - System.Windows.Input.InputGestureCollection.IsFixedSize\n  - System.Windows.Input.InputGestureCollection.IsReadOnly\n  - System.Windows.Input.InputGestureCollection.IsSynchronized\n  - System.Windows.Input.InputGestureCollection.Item(System.Int32)\n  - System.Windows.Input.InputGestureCollection.Remove(System.Windows.Input.InputGesture)\n  - System.Windows.Input.InputGestureCollection.RemoveAt(System.Int32)\n  - System.Windows.Input.InputGestureCollection.Seal\n  - System.Windows.Input.InputGestureCollection.SyncRoot\n  - System.Windows.Input.InputGestureCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Windows.Input.InputGestureCollection.System#Collections#IList#Add(System.Object)\n  - System.Windows.Input.InputGestureCollection.System#Collections#IList#Contains(System.Object)\n  - System.Windows.Input.InputGestureCollection.System#Collections#IList#IndexOf(System.Object)\n  - System.Windows.Input.InputGestureCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  - System.Windows.Input.InputGestureCollection.System#Collections#IList#Item(System.Int32)\n  - System.Windows.Input.InputGestureCollection.System#Collections#IList#Remove(System.Object)\n  langs:\n  - csharp\n  name: InputGestureCollection\n  nameWithType: InputGestureCollection\n  fullName: System.Windows.Input.InputGestureCollection\n  type: Class\n  syntax:\n    content: 'public sealed class InputGestureCollection : System.Collections.IList'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IList\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Input.InputGestureCollection.#ctor\n  id: '#ctor'\n  parent: System.Windows.Input.InputGestureCollection\n  langs:\n  - csharp\n  name: InputGestureCollection()\n  nameWithType: InputGestureCollection.InputGestureCollection()\n  fullName: System.Windows.Input.InputGestureCollection.InputGestureCollection()\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  syntax:\n    content: public InputGestureCollection ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Input.InputGestureCollection.#ctor(System.Collections.IList)\n  id: '#ctor(System.Collections.IList)'\n  parent: System.Windows.Input.InputGestureCollection\n  langs:\n  - csharp\n  name: InputGestureCollection(IList)\n  nameWithType: InputGestureCollection.InputGestureCollection(IList)\n  fullName: System.Windows.Input.InputGestureCollection.InputGestureCollection(IList)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  syntax:\n    content: public InputGestureCollection (System.Collections.IList inputGestures);\n    parameters:\n    - id: inputGestures\n      type: System.Collections.IList\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Input.InputGestureCollection.Add(System.Windows.Input.InputGesture)\n  id: Add(System.Windows.Input.InputGesture)\n  parent: System.Windows.Input.InputGestureCollection\n  langs:\n  - csharp\n  name: Add(InputGesture)\n  nameWithType: InputGestureCollection.Add(InputGesture)\n  fullName: System.Windows.Input.InputGestureCollection.Add(InputGesture)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  syntax:\n    content: public int Add (System.Windows.Input.InputGesture inputGesture);\n    parameters:\n    - id: inputGesture\n      type: System.Windows.Input.InputGesture\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Input.InputGestureCollection.AddRange(System.Collections.ICollection)\n  id: AddRange(System.Collections.ICollection)\n  parent: System.Windows.Input.InputGestureCollection\n  langs:\n  - csharp\n  name: AddRange(ICollection)\n  nameWithType: InputGestureCollection.AddRange(ICollection)\n  fullName: System.Windows.Input.InputGestureCollection.AddRange(ICollection)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  syntax:\n    content: public void AddRange (System.Collections.ICollection collection);\n    parameters:\n    - id: collection\n      type: System.Collections.ICollection\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Input.InputGestureCollection.Clear\n  id: Clear\n  parent: System.Windows.Input.InputGestureCollection\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: InputGestureCollection.Clear()\n  fullName: System.Windows.Input.InputGestureCollection.Clear()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Input.InputGestureCollection.Contains(System.Windows.Input.InputGesture)\n  id: Contains(System.Windows.Input.InputGesture)\n  parent: System.Windows.Input.InputGestureCollection\n  langs:\n  - csharp\n  name: Contains(InputGesture)\n  nameWithType: InputGestureCollection.Contains(InputGesture)\n  fullName: System.Windows.Input.InputGestureCollection.Contains(InputGesture)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  syntax:\n    content: public bool Contains (System.Windows.Input.InputGesture key);\n    parameters:\n    - id: key\n      type: System.Windows.Input.InputGesture\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Input.InputGestureCollection.CopyTo(System.Windows.Input.InputGesture[],System.Int32)\n  id: CopyTo(System.Windows.Input.InputGesture[],System.Int32)\n  parent: System.Windows.Input.InputGestureCollection\n  langs:\n  - csharp\n  name: CopyTo(InputGesture[],Int32)\n  nameWithType: InputGestureCollection.CopyTo(InputGesture[],Int32)\n  fullName: System.Windows.Input.InputGestureCollection.CopyTo(InputGesture[],Int32)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  syntax:\n    content: public void CopyTo (System.Windows.Input.InputGesture[] inputGestures, int index);\n    parameters:\n    - id: inputGestures\n      type: System.Windows.Input.InputGesture[]\n      description: Parameter description to be filled\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Input.InputGestureCollection.Count\n  id: Count\n  parent: System.Windows.Input.InputGestureCollection\n  langs:\n  - csharp\n  name: Count\n  nameWithType: InputGestureCollection.Count\n  fullName: System.Windows.Input.InputGestureCollection.Count\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Input.InputGestureCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.Windows.Input.InputGestureCollection\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: InputGestureCollection.GetEnumerator()\n  fullName: System.Windows.Input.InputGestureCollection.GetEnumerator()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  syntax:\n    content: public System.Collections.IEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Input.InputGestureCollection.IndexOf(System.Windows.Input.InputGesture)\n  id: IndexOf(System.Windows.Input.InputGesture)\n  parent: System.Windows.Input.InputGestureCollection\n  langs:\n  - csharp\n  name: IndexOf(InputGesture)\n  nameWithType: InputGestureCollection.IndexOf(InputGesture)\n  fullName: System.Windows.Input.InputGestureCollection.IndexOf(InputGesture)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  syntax:\n    content: public int IndexOf (System.Windows.Input.InputGesture value);\n    parameters:\n    - id: value\n      type: System.Windows.Input.InputGesture\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Input.InputGestureCollection.Insert(System.Int32,System.Windows.Input.InputGesture)\n  id: Insert(System.Int32,System.Windows.Input.InputGesture)\n  parent: System.Windows.Input.InputGestureCollection\n  langs:\n  - csharp\n  name: Insert(Int32,InputGesture)\n  nameWithType: InputGestureCollection.Insert(Int32,InputGesture)\n  fullName: System.Windows.Input.InputGestureCollection.Insert(Int32,InputGesture)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  syntax:\n    content: public void Insert (int index, System.Windows.Input.InputGesture inputGesture);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: inputGesture\n      type: System.Windows.Input.InputGesture\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Input.InputGestureCollection.IsFixedSize\n  id: IsFixedSize\n  parent: System.Windows.Input.InputGestureCollection\n  langs:\n  - csharp\n  name: IsFixedSize\n  nameWithType: InputGestureCollection.IsFixedSize\n  fullName: System.Windows.Input.InputGestureCollection.IsFixedSize\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  syntax:\n    content: public bool IsFixedSize { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Input.InputGestureCollection.IsReadOnly\n  id: IsReadOnly\n  parent: System.Windows.Input.InputGestureCollection\n  langs:\n  - csharp\n  name: IsReadOnly\n  nameWithType: InputGestureCollection.IsReadOnly\n  fullName: System.Windows.Input.InputGestureCollection.IsReadOnly\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  syntax:\n    content: public bool IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Input.InputGestureCollection.IsSynchronized\n  id: IsSynchronized\n  parent: System.Windows.Input.InputGestureCollection\n  langs:\n  - csharp\n  name: IsSynchronized\n  nameWithType: InputGestureCollection.IsSynchronized\n  fullName: System.Windows.Input.InputGestureCollection.IsSynchronized\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  syntax:\n    content: public bool IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Input.InputGestureCollection.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Windows.Input.InputGestureCollection\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: InputGestureCollection.Item(Int32)\n  fullName: System.Windows.Input.InputGestureCollection.Item(Int32)\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  syntax:\n    content: public System.Windows.Input.InputGesture this[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Windows.Input.InputGesture\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Input.InputGestureCollection.Remove(System.Windows.Input.InputGesture)\n  id: Remove(System.Windows.Input.InputGesture)\n  parent: System.Windows.Input.InputGestureCollection\n  langs:\n  - csharp\n  name: Remove(InputGesture)\n  nameWithType: InputGestureCollection.Remove(InputGesture)\n  fullName: System.Windows.Input.InputGestureCollection.Remove(InputGesture)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  syntax:\n    content: public void Remove (System.Windows.Input.InputGesture inputGesture);\n    parameters:\n    - id: inputGesture\n      type: System.Windows.Input.InputGesture\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Input.InputGestureCollection.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Windows.Input.InputGestureCollection\n  langs:\n  - csharp\n  name: RemoveAt(Int32)\n  nameWithType: InputGestureCollection.RemoveAt(Int32)\n  fullName: System.Windows.Input.InputGestureCollection.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  syntax:\n    content: public void RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Input.InputGestureCollection.Seal\n  id: Seal\n  parent: System.Windows.Input.InputGestureCollection\n  langs:\n  - csharp\n  name: Seal()\n  nameWithType: InputGestureCollection.Seal()\n  fullName: System.Windows.Input.InputGestureCollection.Seal()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  syntax:\n    content: public void Seal ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Input.InputGestureCollection.SyncRoot\n  id: SyncRoot\n  parent: System.Windows.Input.InputGestureCollection\n  langs:\n  - csharp\n  name: SyncRoot\n  nameWithType: InputGestureCollection.SyncRoot\n  fullName: System.Windows.Input.InputGestureCollection.SyncRoot\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  syntax:\n    content: public object SyncRoot { get; }\n    return:\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Input.InputGestureCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Windows.Input.InputGestureCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: InputGestureCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Windows.Input.InputGestureCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  syntax:\n    content: void ICollection.CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: Parameter description to be filled\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Input.InputGestureCollection.System#Collections#IList#Add(System.Object)\n  id: System#Collections#IList#Add(System.Object)\n  isEii: true\n  parent: System.Windows.Input.InputGestureCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Add(Object)\n  nameWithType: InputGestureCollection.System.Collections.IList.Add(Object)\n  fullName: System.Windows.Input.InputGestureCollection.System.Collections.IList.Add(Object)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  syntax:\n    content: int IList.Add (object inputGesture);\n    parameters:\n    - id: inputGesture\n      type: System.Object\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Input.InputGestureCollection.System#Collections#IList#Contains(System.Object)\n  id: System#Collections#IList#Contains(System.Object)\n  isEii: true\n  parent: System.Windows.Input.InputGestureCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Contains(Object)\n  nameWithType: InputGestureCollection.System.Collections.IList.Contains(Object)\n  fullName: System.Windows.Input.InputGestureCollection.System.Collections.IList.Contains(Object)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  syntax:\n    content: bool IList.Contains (object key);\n    parameters:\n    - id: key\n      type: System.Object\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Input.InputGestureCollection.System#Collections#IList#IndexOf(System.Object)\n  id: System#Collections#IList#IndexOf(System.Object)\n  isEii: true\n  parent: System.Windows.Input.InputGestureCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.IndexOf(Object)\n  nameWithType: InputGestureCollection.System.Collections.IList.IndexOf(Object)\n  fullName: System.Windows.Input.InputGestureCollection.System.Collections.IList.IndexOf(Object)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  syntax:\n    content: int IList.IndexOf (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Input.InputGestureCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  id: System#Collections#IList#Insert(System.Int32,System.Object)\n  isEii: true\n  parent: System.Windows.Input.InputGestureCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Insert(Int32,Object)\n  nameWithType: InputGestureCollection.System.Collections.IList.Insert(Int32,Object)\n  fullName: System.Windows.Input.InputGestureCollection.System.Collections.IList.Insert(Int32,Object)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  syntax:\n    content: void IList.Insert (int index, object value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: value\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Input.InputGestureCollection.System#Collections#IList#Item(System.Int32)\n  id: System#Collections#IList#Item(System.Int32)\n  isEii: true\n  parent: System.Windows.Input.InputGestureCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Item(Int32)\n  nameWithType: InputGestureCollection.System.Collections.IList.Item(Int32)\n  fullName: System.Windows.Input.InputGestureCollection.System.Collections.IList.Item(Int32)\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  syntax:\n    content: object System.Collections.IList.Item[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Input.InputGestureCollection.System#Collections#IList#Remove(System.Object)\n  id: System#Collections#IList#Remove(System.Object)\n  isEii: true\n  parent: System.Windows.Input.InputGestureCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Remove(Object)\n  nameWithType: InputGestureCollection.System.Collections.IList.Remove(Object)\n  fullName: System.Windows.Input.InputGestureCollection.System.Collections.IList.Remove(Object)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  syntax:\n    content: void IList.Remove (object inputGesture);\n    parameters:\n    - id: inputGesture\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Windows.Input.InputGestureCollection.#ctor\n  parent: System.Windows.Input.InputGestureCollection\n  isExternal: false\n  name: InputGestureCollection()\n  nameWithType: InputGestureCollection.InputGestureCollection()\n  fullName: System.Windows.Input.InputGestureCollection.InputGestureCollection()\n- uid: System.Windows.Input.InputGestureCollection.#ctor(System.Collections.IList)\n  parent: System.Windows.Input.InputGestureCollection\n  isExternal: false\n  name: InputGestureCollection(IList)\n  nameWithType: InputGestureCollection.InputGestureCollection(IList)\n  fullName: System.Windows.Input.InputGestureCollection.InputGestureCollection(IList)\n- uid: System.Collections.IList\n  parent: System.Collections\n  isExternal: false\n  name: IList\n  nameWithType: IList\n  fullName: System.Collections.IList\n- uid: System.Windows.Input.InputGestureCollection.Add(System.Windows.Input.InputGesture)\n  parent: System.Windows.Input.InputGestureCollection\n  isExternal: false\n  name: Add(InputGesture)\n  nameWithType: InputGestureCollection.Add(InputGesture)\n  fullName: System.Windows.Input.InputGestureCollection.Add(InputGesture)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Input.InputGesture\n  parent: System.Windows.Input\n  isExternal: false\n  name: InputGesture\n  nameWithType: InputGesture\n  fullName: System.Windows.Input.InputGesture\n- uid: System.Windows.Input.InputGestureCollection.AddRange(System.Collections.ICollection)\n  parent: System.Windows.Input.InputGestureCollection\n  isExternal: false\n  name: AddRange(ICollection)\n  nameWithType: InputGestureCollection.AddRange(ICollection)\n  fullName: System.Windows.Input.InputGestureCollection.AddRange(ICollection)\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n- uid: System.Windows.Input.InputGestureCollection.Clear\n  parent: System.Windows.Input.InputGestureCollection\n  isExternal: false\n  name: Clear()\n  nameWithType: InputGestureCollection.Clear()\n  fullName: System.Windows.Input.InputGestureCollection.Clear()\n- uid: System.Windows.Input.InputGestureCollection.Contains(System.Windows.Input.InputGesture)\n  parent: System.Windows.Input.InputGestureCollection\n  isExternal: false\n  name: Contains(InputGesture)\n  nameWithType: InputGestureCollection.Contains(InputGesture)\n  fullName: System.Windows.Input.InputGestureCollection.Contains(InputGesture)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Input.InputGesture\n  parent: System.Windows.Input\n  isExternal: false\n  name: InputGesture\n  nameWithType: InputGesture\n  fullName: System.Windows.Input.InputGesture\n- uid: System.Windows.Input.InputGestureCollection.CopyTo(System.Windows.Input.InputGesture[],System.Int32)\n  parent: System.Windows.Input.InputGestureCollection\n  isExternal: false\n  name: CopyTo(InputGesture[],Int32)\n  nameWithType: InputGestureCollection.CopyTo(InputGesture[],Int32)\n  fullName: System.Windows.Input.InputGestureCollection.CopyTo(InputGesture[],Int32)\n- uid: System.Windows.Input.InputGesture\n  parent: System.Windows.Input\n  isExternal: false\n  name: InputGesture\n  nameWithType: InputGesture\n  fullName: System.Windows.Input.InputGesture[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Input.InputGestureCollection.Count\n  parent: System.Windows.Input.InputGestureCollection\n  isExternal: false\n  name: Count\n  nameWithType: InputGestureCollection.Count\n  fullName: System.Windows.Input.InputGestureCollection.Count\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Input.InputGestureCollection.GetEnumerator\n  parent: System.Windows.Input.InputGestureCollection\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: InputGestureCollection.GetEnumerator()\n  fullName: System.Windows.Input.InputGestureCollection.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Windows.Input.InputGestureCollection.IndexOf(System.Windows.Input.InputGesture)\n  parent: System.Windows.Input.InputGestureCollection\n  isExternal: false\n  name: IndexOf(InputGesture)\n  nameWithType: InputGestureCollection.IndexOf(InputGesture)\n  fullName: System.Windows.Input.InputGestureCollection.IndexOf(InputGesture)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Input.InputGesture\n  parent: System.Windows.Input\n  isExternal: false\n  name: InputGesture\n  nameWithType: InputGesture\n  fullName: System.Windows.Input.InputGesture\n- uid: System.Windows.Input.InputGestureCollection.Insert(System.Int32,System.Windows.Input.InputGesture)\n  parent: System.Windows.Input.InputGestureCollection\n  isExternal: false\n  name: Insert(Int32,InputGesture)\n  nameWithType: InputGestureCollection.Insert(Int32,InputGesture)\n  fullName: System.Windows.Input.InputGestureCollection.Insert(Int32,InputGesture)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Input.InputGesture\n  parent: System.Windows.Input\n  isExternal: false\n  name: InputGesture\n  nameWithType: InputGesture\n  fullName: System.Windows.Input.InputGesture\n- uid: System.Windows.Input.InputGestureCollection.IsFixedSize\n  parent: System.Windows.Input.InputGestureCollection\n  isExternal: false\n  name: IsFixedSize\n  nameWithType: InputGestureCollection.IsFixedSize\n  fullName: System.Windows.Input.InputGestureCollection.IsFixedSize\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Input.InputGestureCollection.IsReadOnly\n  parent: System.Windows.Input.InputGestureCollection\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: InputGestureCollection.IsReadOnly\n  fullName: System.Windows.Input.InputGestureCollection.IsReadOnly\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Input.InputGestureCollection.IsSynchronized\n  parent: System.Windows.Input.InputGestureCollection\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: InputGestureCollection.IsSynchronized\n  fullName: System.Windows.Input.InputGestureCollection.IsSynchronized\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Input.InputGestureCollection.Item(System.Int32)\n  parent: System.Windows.Input.InputGestureCollection\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: InputGestureCollection.Item(Int32)\n  fullName: System.Windows.Input.InputGestureCollection.Item(Int32)\n- uid: System.Windows.Input.InputGesture\n  parent: System.Windows.Input\n  isExternal: false\n  name: InputGesture\n  nameWithType: InputGesture\n  fullName: System.Windows.Input.InputGesture\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Input.InputGestureCollection.Remove(System.Windows.Input.InputGesture)\n  parent: System.Windows.Input.InputGestureCollection\n  isExternal: false\n  name: Remove(InputGesture)\n  nameWithType: InputGestureCollection.Remove(InputGesture)\n  fullName: System.Windows.Input.InputGestureCollection.Remove(InputGesture)\n- uid: System.Windows.Input.InputGesture\n  parent: System.Windows.Input\n  isExternal: false\n  name: InputGesture\n  nameWithType: InputGesture\n  fullName: System.Windows.Input.InputGesture\n- uid: System.Windows.Input.InputGestureCollection.RemoveAt(System.Int32)\n  parent: System.Windows.Input.InputGestureCollection\n  isExternal: false\n  name: RemoveAt(Int32)\n  nameWithType: InputGestureCollection.RemoveAt(Int32)\n  fullName: System.Windows.Input.InputGestureCollection.RemoveAt(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Input.InputGestureCollection.Seal\n  parent: System.Windows.Input.InputGestureCollection\n  isExternal: false\n  name: Seal()\n  nameWithType: InputGestureCollection.Seal()\n  fullName: System.Windows.Input.InputGestureCollection.Seal()\n- uid: System.Windows.Input.InputGestureCollection.SyncRoot\n  parent: System.Windows.Input.InputGestureCollection\n  isExternal: false\n  name: SyncRoot\n  nameWithType: InputGestureCollection.SyncRoot\n  fullName: System.Windows.Input.InputGestureCollection.SyncRoot\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Input.InputGestureCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Windows.Input.InputGestureCollection\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: InputGestureCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Windows.Input.InputGestureCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Input.InputGestureCollection.System#Collections#IList#Add(System.Object)\n  parent: System.Windows.Input.InputGestureCollection\n  isExternal: false\n  name: System.Collections.IList.Add(Object)\n  nameWithType: InputGestureCollection.System.Collections.IList.Add(Object)\n  fullName: System.Windows.Input.InputGestureCollection.System.Collections.IList.Add(Object)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Input.InputGestureCollection.System#Collections#IList#Contains(System.Object)\n  parent: System.Windows.Input.InputGestureCollection\n  isExternal: false\n  name: System.Collections.IList.Contains(Object)\n  nameWithType: InputGestureCollection.System.Collections.IList.Contains(Object)\n  fullName: System.Windows.Input.InputGestureCollection.System.Collections.IList.Contains(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Input.InputGestureCollection.System#Collections#IList#IndexOf(System.Object)\n  parent: System.Windows.Input.InputGestureCollection\n  isExternal: false\n  name: System.Collections.IList.IndexOf(Object)\n  nameWithType: InputGestureCollection.System.Collections.IList.IndexOf(Object)\n  fullName: System.Windows.Input.InputGestureCollection.System.Collections.IList.IndexOf(Object)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Input.InputGestureCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  parent: System.Windows.Input.InputGestureCollection\n  isExternal: false\n  name: System.Collections.IList.Insert(Int32,Object)\n  nameWithType: InputGestureCollection.System.Collections.IList.Insert(Int32,Object)\n  fullName: System.Windows.Input.InputGestureCollection.System.Collections.IList.Insert(Int32,Object)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Input.InputGestureCollection.System#Collections#IList#Item(System.Int32)\n  parent: System.Windows.Input.InputGestureCollection\n  isExternal: false\n  name: System.Collections.IList.Item(Int32)\n  nameWithType: InputGestureCollection.System.Collections.IList.Item(Int32)\n  fullName: System.Windows.Input.InputGestureCollection.System.Collections.IList.Item(Int32)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Input.InputGestureCollection.System#Collections#IList#Remove(System.Object)\n  parent: System.Windows.Input.InputGestureCollection\n  isExternal: false\n  name: System.Collections.IList.Remove(Object)\n  nameWithType: InputGestureCollection.System.Collections.IList.Remove(Object)\n  fullName: System.Windows.Input.InputGestureCollection.System.Collections.IList.Remove(Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n"}