{"nodes":[{"pos":[2320,2333],"content":"PermissionSet","needQuote":true,"needEscape":true,"nodes":[{"content":"PermissionSet","pos":[0,13]}]},{"pos":[3359,3389],"content":"PermissionSet(PermissionState)","needQuote":true,"needEscape":true,"nodes":[{"content":"PermissionSet(PermissionState)","pos":[0,30]}]},{"pos":[3804,3838],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4075,4103],"content":"PermissionSet(PermissionSet)","needQuote":true,"needEscape":true,"nodes":[{"content":"PermissionSet(PermissionSet)","pos":[0,28]}]},{"pos":[4490,4524],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4771,4797],"content":"AddPermission(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"AddPermission(IPermission)","pos":[0,26]}]},{"pos":[5193,5227],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5299,5333],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5588,5618],"content":"AddPermissionImpl(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"AddPermissionImpl(IPermission)","pos":[0,30]}]},{"pos":[6037,6071],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6143,6177],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6352,6360],"content":"Assert()","needQuote":true,"needEscape":true,"nodes":[{"content":"Assert()","pos":[0,8]}]},{"pos":[6813,6847],"content":"ContainsNonCodeAccessPermissions()","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainsNonCodeAccessPermissions()","pos":[0,34]}]},{"pos":[7210,7244],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7533,7575],"content":"ConvertPermissionSet(String,Byte[],String)","needQuote":true,"needEscape":true,"nodes":[{"content":"ConvertPermissionSet(String,Byte[],String)","pos":[0,42]}]},{"pos":[8002,8036],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8099,8133],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8199,8233],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8291,8325],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8496,8502],"content":"Copy()","needQuote":true,"needEscape":true,"nodes":[{"content":"Copy()","pos":[0,6]}]},{"pos":[8829,8863],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9092,9111],"content":"CopyTo(Array,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"CopyTo(Array,Int32)","pos":[0,19]}]},{"pos":[9447,9481],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9542,9576],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9749,9754],"content":"Count","needQuote":true,"needEscape":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[10025,10059],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10234,10242],"content":"Demand()","needQuote":true,"needEscape":true,"nodes":[{"content":"Demand()","pos":[0,8]}]},{"pos":[10639,10645],"content":"Deny()","needQuote":true,"needEscape":true,"nodes":[{"content":"Deny()","pos":[0,6]}]},{"pos":[11070,11084],"content":"Equals(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[11398,11432],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11491,11525],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11768,11792],"content":"FromXml(SecurityElement)","needQuote":true,"needEscape":true,"nodes":[{"content":"FromXml(SecurityElement)","pos":[0,24]}]},{"pos":[12167,12201],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12390,12405],"content":"GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[12753,12787],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12984,13003],"content":"GetEnumeratorImpl()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetEnumeratorImpl()","pos":[0,19]}]},{"pos":[13374,13408],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13593,13606],"content":"GetHashCode()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[13912,13946],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14161,14180],"content":"GetPermission(Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetPermission(Type)","pos":[0,19]}]},{"pos":[14533,14567],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14639,14673],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14896,14919],"content":"GetPermissionImpl(Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetPermissionImpl(Type)","pos":[0,23]}]},{"pos":[15295,15329],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15401,15435],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15678,15702],"content":"Intersect(PermissionSet)","needQuote":true,"needEscape":true,"nodes":[{"content":"Intersect(PermissionSet)","pos":[0,24]}]},{"pos":[16098,16132],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16206,16240],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16417,16426],"content":"IsEmpty()","needQuote":true,"needEscape":true,"nodes":[{"content":"IsEmpty()","pos":[0,9]}]},{"pos":[16714,16748],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16931,16941],"content":"IsReadOnly","needQuote":true,"needEscape":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[17230,17264],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17509,17534],"content":"IsSubsetOf(PermissionSet)","needQuote":true,"needEscape":true,"nodes":[{"content":"IsSubsetOf(PermissionSet)","pos":[0,25]}]},{"pos":[17910,17944],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18003,18037],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18228,18242],"content":"IsSynchronized","needQuote":true,"needEscape":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[18543,18577],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18768,18784],"content":"IsUnrestricted()","needQuote":true,"needEscape":true,"nodes":[{"content":"IsUnrestricted()","pos":[0,16]}]},{"pos":[19093,19127],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19310,19322],"content":"PermitOnly()","needQuote":true,"needEscape":true,"nodes":[{"content":"PermitOnly()","pos":[0,12]}]},{"pos":[19781,19803],"content":"RemovePermission(Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"RemovePermission(Type)","pos":[0,22]}]},{"pos":[20165,20199],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20271,20305],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20534,20560],"content":"RemovePermissionImpl(Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"RemovePermissionImpl(Type)","pos":[0,26]}]},{"pos":[20945,20979],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21051,21085],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21272,21286],"content":"RevertAssert()","needQuote":true,"needEscape":true,"nodes":[{"content":"RevertAssert()","pos":[0,14]}]},{"pos":[21784,21810],"content":"SetPermission(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"SetPermission(IPermission)","pos":[0,26]}]},{"pos":[22206,22240],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22312,22346],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22601,22631],"content":"SetPermissionImpl(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"SetPermissionImpl(IPermission)","pos":[0,30]}]},{"pos":[23050,23084],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[23156,23190],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[23369,23377],"content":"SyncRoot","needQuote":true,"needEscape":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[23661,23695],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[24044,24123],"content":"System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)","pos":[0,79]}]},{"pos":[24593,24627],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[24806,24816],"content":"ToString()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[25117,25151],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[25324,25331],"content":"ToXml()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToXml()","pos":[0,7]}]},{"pos":[25665,25699],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[25934,25954],"content":"Union(PermissionSet)","needQuote":true,"needEscape":true,"nodes":[{"content":"Union(PermissionSet)","pos":[0,20]}]},{"pos":[26338,26372],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[26446,26480],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[26591,26604],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[26761,26791],"content":"PermissionSet(PermissionState)","needQuote":true,"needEscape":true,"nodes":[{"content":"PermissionSet(PermissionState)","pos":[0,30]}]},{"pos":[27043,27058],"content":"PermissionState","needQuote":true,"needEscape":true,"nodes":[{"content":"PermissionState","pos":[0,15]}]},{"pos":[27289,27317],"content":"PermissionSet(PermissionSet)","needQuote":true,"needEscape":true,"nodes":[{"content":"PermissionSet(PermissionSet)","pos":[0,28]}]},{"pos":[27539,27552],"content":"PermissionSet","needQuote":true,"needEscape":true,"nodes":[{"content":"PermissionSet","pos":[0,13]}]},{"pos":[27773,27799],"content":"AddPermission(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"AddPermission(IPermission)","pos":[0,26]}]},{"pos":[28015,28026],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[28184,28195],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[28416,28446],"content":"AddPermissionImpl(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"AddPermissionImpl(IPermission)","pos":[0,30]}]},{"pos":[28670,28681],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[28839,28850],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[29031,29039],"content":"Assert()","needQuote":true,"needEscape":true,"nodes":[{"content":"Assert()","pos":[0,8]}]},{"pos":[29268,29302],"content":"ContainsNonCodeAccessPermissions()","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainsNonCodeAccessPermissions()","pos":[0,34]}]},{"pos":[29512,29519],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[29740,29782],"content":"ConvertPermissionSet(String,Byte[],String)","needQuote":true,"needEscape":true,"nodes":[{"content":"ConvertPermissionSet(String,Byte[],String)","pos":[0,42]}]},{"pos":[30005,30009],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[30123,30129],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[30243,30247],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[30361,30367],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[30527,30533],"content":"Copy()","needQuote":true,"needEscape":true,"nodes":[{"content":"Copy()","pos":[0,6]}]},{"pos":[30711,30724],"content":"PermissionSet","needQuote":true,"needEscape":true,"nodes":[{"content":"PermissionSet","pos":[0,13]}]},{"pos":[30936,30955],"content":"CopyTo(Array,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"CopyTo(Array,Int32)","pos":[0,19]}]},{"pos":[31133,31138],"content":"Array","needQuote":true,"needEscape":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[31251,31256],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[31415,31420],"content":"Count","needQuote":true,"needEscape":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[31570,31575],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[31735,31743],"content":"Demand()","needQuote":true,"needEscape":true,"nodes":[{"content":"Demand()","pos":[0,8]}]},{"pos":[31944,31950],"content":"Deny()","needQuote":true,"needEscape":true,"nodes":[{"content":"Deny()","pos":[0,6]}]},{"pos":[32164,32178],"content":"Equals(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[32348,32355],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[32473,32479],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[32675,32699],"content":"FromXml(SecurityElement)","needQuote":true,"needEscape":true,"nodes":[{"content":"FromXml(SecurityElement)","pos":[0,24]}]},{"pos":[32915,32930],"content":"SecurityElement","needQuote":true,"needEscape":true,"nodes":[{"content":"SecurityElement","pos":[0,15]}]},{"pos":[33126,33141],"content":"GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[33341,33352],"content":"IEnumerator","needQuote":true,"needEscape":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[33547,33566],"content":"GetEnumeratorImpl()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetEnumeratorImpl()","pos":[0,19]}]},{"pos":[33774,33785],"content":"IEnumerator","needQuote":true,"needEscape":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[33974,33987],"content":"GetHashCode()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[34153,34158],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[34338,34357],"content":"GetPermission(Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetPermission(Type)","pos":[0,19]}]},{"pos":[34559,34570],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[34703,34707],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[34889,34912],"content":"GetPermissionImpl(Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetPermissionImpl(Type)","pos":[0,23]}]},{"pos":[35122,35133],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[35266,35270],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[35462,35486],"content":"Intersect(PermissionSet)","needQuote":true,"needEscape":true,"nodes":[{"content":"Intersect(PermissionSet)","pos":[0,24]}]},{"pos":[35700,35713],"content":"PermissionSet","needQuote":true,"needEscape":true,"nodes":[{"content":"PermissionSet","pos":[0,13]}]},{"pos":[35877,35890],"content":"PermissionSet","needQuote":true,"needEscape":true,"nodes":[{"content":"PermissionSet","pos":[0,13]}]},{"pos":[36076,36085],"content":"IsEmpty()","needQuote":true,"needEscape":true,"nodes":[{"content":"IsEmpty()","pos":[0,9]}]},{"pos":[36245,36252],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[36420,36430],"content":"IsReadOnly","needQuote":true,"needEscape":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[36592,36599],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[36798,36823],"content":"IsSubsetOf(PermissionSet)","needQuote":true,"needEscape":true,"nodes":[{"content":"IsSubsetOf(PermissionSet)","pos":[0,25]}]},{"pos":[37015,37022],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[37165,37178],"content":"PermissionSet","needQuote":true,"needEscape":true,"nodes":[{"content":"PermissionSet","pos":[0,13]}]},{"pos":[37371,37385],"content":"IsSynchronized","needQuote":true,"needEscape":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[37555,37562],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[37734,37750],"content":"IsUnrestricted()","needQuote":true,"needEscape":true,"nodes":[{"content":"IsUnrestricted()","pos":[0,16]}]},{"pos":[37924,37931],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[38099,38111],"content":"PermitOnly()","needQuote":true,"needEscape":true,"nodes":[{"content":"PermitOnly()","pos":[0,12]}]},{"pos":[38345,38367],"content":"RemovePermission(Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"RemovePermission(Type)","pos":[0,22]}]},{"pos":[38575,38586],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[38719,38723],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[38908,38934],"content":"RemovePermissionImpl(Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"RemovePermissionImpl(Type)","pos":[0,26]}]},{"pos":[39150,39161],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[39294,39298],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[39462,39476],"content":"RevertAssert()","needQuote":true,"needEscape":true,"nodes":[{"content":"RevertAssert()","pos":[0,14]}]},{"pos":[39727,39753],"content":"SetPermission(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"SetPermission(IPermission)","pos":[0,26]}]},{"pos":[39969,39980],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[40138,40149],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[40370,40400],"content":"SetPermissionImpl(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"SetPermissionImpl(IPermission)","pos":[0,30]}]},{"pos":[40624,40635],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[40793,40804],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[40987,40995],"content":"SyncRoot","needQuote":true,"needEscape":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[41152,41158],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[41400,41479],"content":"System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)","pos":[0,79]}]},{"pos":[41778,41784],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[41948,41958],"content":"ToString()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[42119,42125],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[42286,42293],"content":"ToXml()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToXml()","pos":[0,7]}]},{"pos":[42475,42490],"content":"SecurityElement","needQuote":true,"needEscape":true,"nodes":[{"content":"SecurityElement","pos":[0,15]}]},{"pos":[42709,42729],"content":"Union(PermissionSet)","needQuote":true,"needEscape":true,"nodes":[{"content":"Union(PermissionSet)","pos":[0,20]}]},{"pos":[42935,42948],"content":"PermissionSet","needQuote":true,"needEscape":true,"nodes":[{"content":"PermissionSet","pos":[0,13]}]},{"pos":[43112,43125],"content":"PermissionSet","needQuote":true,"needEscape":true,"nodes":[{"content":"PermissionSet","pos":[0,13]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.PermissionSet\n  id: PermissionSet\n  children:\n  - System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)\n  - System.Security.PermissionSet.#ctor(System.Security.PermissionSet)\n  - System.Security.PermissionSet.AddPermission(System.Security.IPermission)\n  - System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)\n  - System.Security.PermissionSet.Assert\n  - System.Security.PermissionSet.ContainsNonCodeAccessPermissions\n  - System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)\n  - System.Security.PermissionSet.Copy\n  - System.Security.PermissionSet.CopyTo(System.Array,System.Int32)\n  - System.Security.PermissionSet.Count\n  - System.Security.PermissionSet.Demand\n  - System.Security.PermissionSet.Deny\n  - System.Security.PermissionSet.Equals(System.Object)\n  - System.Security.PermissionSet.FromXml(System.Security.SecurityElement)\n  - System.Security.PermissionSet.GetEnumerator\n  - System.Security.PermissionSet.GetEnumeratorImpl\n  - System.Security.PermissionSet.GetHashCode\n  - System.Security.PermissionSet.GetPermission(System.Type)\n  - System.Security.PermissionSet.GetPermissionImpl(System.Type)\n  - System.Security.PermissionSet.Intersect(System.Security.PermissionSet)\n  - System.Security.PermissionSet.IsEmpty\n  - System.Security.PermissionSet.IsReadOnly\n  - System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)\n  - System.Security.PermissionSet.IsSynchronized\n  - System.Security.PermissionSet.IsUnrestricted\n  - System.Security.PermissionSet.PermitOnly\n  - System.Security.PermissionSet.RemovePermission(System.Type)\n  - System.Security.PermissionSet.RemovePermissionImpl(System.Type)\n  - System.Security.PermissionSet.RevertAssert\n  - System.Security.PermissionSet.SetPermission(System.Security.IPermission)\n  - System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)\n  - System.Security.PermissionSet.SyncRoot\n  - System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)\n  - System.Security.PermissionSet.ToString\n  - System.Security.PermissionSet.ToXml\n  - System.Security.PermissionSet.Union(System.Security.PermissionSet)\n  langs:\n  - csharp\n  name: PermissionSet\n  nameWithType: PermissionSet\n  fullName: System.Security.PermissionSet\n  type: Class\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class PermissionSet : System.Collections.ICollection, System.Runtime.Serialization.IDeserializationCallback, System.Security.ISecurityEncodable, System.Security.IStackWalk\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.ICollection\n  - System.Runtime.Serialization.IDeserializationCallback\n  - System.Security.ISecurityEncodable\n  - System.Security.IStackWalk\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)\n  id: '#ctor(System.Security.Permissions.PermissionState)'\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: PermissionSet(PermissionState)\n  nameWithType: PermissionSet.PermissionSet(PermissionState)\n  fullName: System.Security.PermissionSet.PermissionSet(PermissionState)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public PermissionSet (System.Security.Permissions.PermissionState state);\n    parameters:\n    - id: state\n      type: System.Security.Permissions.PermissionState\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.#ctor(System.Security.PermissionSet)\n  id: '#ctor(System.Security.PermissionSet)'\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: PermissionSet(PermissionSet)\n  nameWithType: PermissionSet.PermissionSet(PermissionSet)\n  fullName: System.Security.PermissionSet.PermissionSet(PermissionSet)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public PermissionSet (System.Security.PermissionSet permSet);\n    parameters:\n    - id: permSet\n      type: System.Security.PermissionSet\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.AddPermission(System.Security.IPermission)\n  id: AddPermission(System.Security.IPermission)\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: AddPermission(IPermission)\n  nameWithType: PermissionSet.AddPermission(IPermission)\n  fullName: System.Security.PermissionSet.AddPermission(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public System.Security.IPermission AddPermission (System.Security.IPermission perm);\n    parameters:\n    - id: perm\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n    return:\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)\n  id: AddPermissionImpl(System.Security.IPermission)\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: AddPermissionImpl(IPermission)\n  nameWithType: PermissionSet.AddPermissionImpl(IPermission)\n  fullName: System.Security.PermissionSet.AddPermissionImpl(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: protected virtual System.Security.IPermission AddPermissionImpl (System.Security.IPermission perm);\n    parameters:\n    - id: perm\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n    return:\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.Assert\n  id: Assert\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: Assert()\n  nameWithType: PermissionSet.Assert()\n  fullName: System.Security.PermissionSet.Assert()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public void Assert ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.ContainsNonCodeAccessPermissions\n  id: ContainsNonCodeAccessPermissions\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: ContainsNonCodeAccessPermissions()\n  nameWithType: PermissionSet.ContainsNonCodeAccessPermissions()\n  fullName: System.Security.PermissionSet.ContainsNonCodeAccessPermissions()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public bool ContainsNonCodeAccessPermissions ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)\n  id: ConvertPermissionSet(System.String,System.Byte[],System.String)\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: ConvertPermissionSet(String,Byte[],String)\n  nameWithType: PermissionSet.ConvertPermissionSet(String,Byte[],String)\n  fullName: System.Security.PermissionSet.ConvertPermissionSet(String,Byte[],String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public static byte[] ConvertPermissionSet (string inFormat, byte[] inData, string outFormat);\n    parameters:\n    - id: inFormat\n      type: System.String\n      description: Parameter description to be filled\n    - id: inData\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: outFormat\n      type: System.String\n      description: Parameter description to be filled\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.Copy\n  id: Copy\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: PermissionSet.Copy()\n  fullName: System.Security.PermissionSet.Copy()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public virtual System.Security.PermissionSet Copy ();\n    parameters: []\n    return:\n      type: System.Security.PermissionSet\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: CopyTo(Array,Int32)\n  nameWithType: PermissionSet.CopyTo(Array,Int32)\n  fullName: System.Security.PermissionSet.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public virtual void CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: Parameter description to be filled\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.Count\n  id: Count\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: Count\n  nameWithType: PermissionSet.Count\n  fullName: System.Security.PermissionSet.Count\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public virtual int Count { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.Demand\n  id: Demand\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: Demand()\n  nameWithType: PermissionSet.Demand()\n  fullName: System.Security.PermissionSet.Demand()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public void Demand ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.Deny\n  id: Deny\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: Deny()\n  nameWithType: PermissionSet.Deny()\n  fullName: System.Security.PermissionSet.Deny()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public void Deny ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: PermissionSet.Equals(Object)\n  fullName: System.Security.PermissionSet.Equals(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.FromXml(System.Security.SecurityElement)\n  id: FromXml(System.Security.SecurityElement)\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: FromXml(SecurityElement)\n  nameWithType: PermissionSet.FromXml(SecurityElement)\n  fullName: System.Security.PermissionSet.FromXml(SecurityElement)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public virtual void FromXml (System.Security.SecurityElement et);\n    parameters:\n    - id: et\n      type: System.Security.SecurityElement\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.GetEnumerator\n  id: GetEnumerator\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: PermissionSet.GetEnumerator()\n  fullName: System.Security.PermissionSet.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public System.Collections.IEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.GetEnumeratorImpl\n  id: GetEnumeratorImpl\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: GetEnumeratorImpl()\n  nameWithType: PermissionSet.GetEnumeratorImpl()\n  fullName: System.Security.PermissionSet.GetEnumeratorImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: protected virtual System.Collections.IEnumerator GetEnumeratorImpl ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.GetHashCode\n  id: GetHashCode\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: PermissionSet.GetHashCode()\n  fullName: System.Security.PermissionSet.GetHashCode()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.GetPermission(System.Type)\n  id: GetPermission(System.Type)\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: GetPermission(Type)\n  nameWithType: PermissionSet.GetPermission(Type)\n  fullName: System.Security.PermissionSet.GetPermission(Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public System.Security.IPermission GetPermission (Type permClass);\n    parameters:\n    - id: permClass\n      type: System.Type\n      description: Parameter description to be filled\n    return:\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.GetPermissionImpl(System.Type)\n  id: GetPermissionImpl(System.Type)\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: GetPermissionImpl(Type)\n  nameWithType: PermissionSet.GetPermissionImpl(Type)\n  fullName: System.Security.PermissionSet.GetPermissionImpl(Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: protected virtual System.Security.IPermission GetPermissionImpl (Type permClass);\n    parameters:\n    - id: permClass\n      type: System.Type\n      description: Parameter description to be filled\n    return:\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.Intersect(System.Security.PermissionSet)\n  id: Intersect(System.Security.PermissionSet)\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: Intersect(PermissionSet)\n  nameWithType: PermissionSet.Intersect(PermissionSet)\n  fullName: System.Security.PermissionSet.Intersect(PermissionSet)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public System.Security.PermissionSet Intersect (System.Security.PermissionSet other);\n    parameters:\n    - id: other\n      type: System.Security.PermissionSet\n      description: Parameter description to be filled\n    return:\n      type: System.Security.PermissionSet\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.IsEmpty\n  id: IsEmpty\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: IsEmpty()\n  nameWithType: PermissionSet.IsEmpty()\n  fullName: System.Security.PermissionSet.IsEmpty()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public bool IsEmpty ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.IsReadOnly\n  id: IsReadOnly\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: IsReadOnly\n  nameWithType: PermissionSet.IsReadOnly\n  fullName: System.Security.PermissionSet.IsReadOnly\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public virtual bool IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)\n  id: IsSubsetOf(System.Security.PermissionSet)\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: IsSubsetOf(PermissionSet)\n  nameWithType: PermissionSet.IsSubsetOf(PermissionSet)\n  fullName: System.Security.PermissionSet.IsSubsetOf(PermissionSet)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public bool IsSubsetOf (System.Security.PermissionSet target);\n    parameters:\n    - id: target\n      type: System.Security.PermissionSet\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.IsSynchronized\n  id: IsSynchronized\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: IsSynchronized\n  nameWithType: PermissionSet.IsSynchronized\n  fullName: System.Security.PermissionSet.IsSynchronized\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public virtual bool IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.IsUnrestricted\n  id: IsUnrestricted\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: IsUnrestricted()\n  nameWithType: PermissionSet.IsUnrestricted()\n  fullName: System.Security.PermissionSet.IsUnrestricted()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public bool IsUnrestricted ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.PermitOnly\n  id: PermitOnly\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: PermitOnly()\n  nameWithType: PermissionSet.PermitOnly()\n  fullName: System.Security.PermissionSet.PermitOnly()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public void PermitOnly ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.RemovePermission(System.Type)\n  id: RemovePermission(System.Type)\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: RemovePermission(Type)\n  nameWithType: PermissionSet.RemovePermission(Type)\n  fullName: System.Security.PermissionSet.RemovePermission(Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public System.Security.IPermission RemovePermission (Type permClass);\n    parameters:\n    - id: permClass\n      type: System.Type\n      description: Parameter description to be filled\n    return:\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.RemovePermissionImpl(System.Type)\n  id: RemovePermissionImpl(System.Type)\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: RemovePermissionImpl(Type)\n  nameWithType: PermissionSet.RemovePermissionImpl(Type)\n  fullName: System.Security.PermissionSet.RemovePermissionImpl(Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: protected virtual System.Security.IPermission RemovePermissionImpl (Type permClass);\n    parameters:\n    - id: permClass\n      type: System.Type\n      description: Parameter description to be filled\n    return:\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.RevertAssert\n  id: RevertAssert\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: RevertAssert()\n  nameWithType: PermissionSet.RevertAssert()\n  fullName: System.Security.PermissionSet.RevertAssert()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public static void RevertAssert ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.SetPermission(System.Security.IPermission)\n  id: SetPermission(System.Security.IPermission)\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: SetPermission(IPermission)\n  nameWithType: PermissionSet.SetPermission(IPermission)\n  fullName: System.Security.PermissionSet.SetPermission(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public System.Security.IPermission SetPermission (System.Security.IPermission perm);\n    parameters:\n    - id: perm\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n    return:\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)\n  id: SetPermissionImpl(System.Security.IPermission)\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: SetPermissionImpl(IPermission)\n  nameWithType: PermissionSet.SetPermissionImpl(IPermission)\n  fullName: System.Security.PermissionSet.SetPermissionImpl(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: protected virtual System.Security.IPermission SetPermissionImpl (System.Security.IPermission perm);\n    parameters:\n    - id: perm\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n    return:\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.SyncRoot\n  id: SyncRoot\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: SyncRoot\n  nameWithType: PermissionSet.SyncRoot\n  fullName: System.Security.PermissionSet.SyncRoot\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public virtual object SyncRoot { get; }\n    return:\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)\n  id: System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)\n  isEii: true\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)\n  nameWithType: PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)\n  fullName: System.Security.PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: void IDeserializationCallback.OnDeserialization (object sender);\n    parameters:\n    - id: sender\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.ToString\n  id: ToString\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: PermissionSet.ToString()\n  fullName: System.Security.PermissionSet.ToString()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.ToXml\n  id: ToXml\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: ToXml()\n  nameWithType: PermissionSet.ToXml()\n  fullName: System.Security.PermissionSet.ToXml()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public virtual System.Security.SecurityElement ToXml ();\n    parameters: []\n    return:\n      type: System.Security.SecurityElement\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.PermissionSet.Union(System.Security.PermissionSet)\n  id: Union(System.Security.PermissionSet)\n  parent: System.Security.PermissionSet\n  langs:\n  - csharp\n  name: Union(PermissionSet)\n  nameWithType: PermissionSet.Union(PermissionSet)\n  fullName: System.Security.PermissionSet.Union(PermissionSet)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public System.Security.PermissionSet Union (System.Security.PermissionSet other);\n    parameters:\n    - id: other\n      type: System.Security.PermissionSet\n      description: Parameter description to be filled\n    return:\n      type: System.Security.PermissionSet\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: PermissionSet(PermissionState)\n  nameWithType: PermissionSet.PermissionSet(PermissionState)\n  fullName: System.Security.PermissionSet.PermissionSet(PermissionState)\n- uid: System.Security.Permissions.PermissionState\n  parent: System.Security.Permissions\n  isExternal: false\n  name: PermissionState\n  nameWithType: PermissionState\n  fullName: System.Security.Permissions.PermissionState\n- uid: System.Security.PermissionSet.#ctor(System.Security.PermissionSet)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: PermissionSet(PermissionSet)\n  nameWithType: PermissionSet.PermissionSet(PermissionSet)\n  fullName: System.Security.PermissionSet.PermissionSet(PermissionSet)\n- uid: System.Security.PermissionSet\n  parent: System.Security\n  isExternal: false\n  name: PermissionSet\n  nameWithType: PermissionSet\n  fullName: System.Security.PermissionSet\n- uid: System.Security.PermissionSet.AddPermission(System.Security.IPermission)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: AddPermission(IPermission)\n  nameWithType: PermissionSet.AddPermission(IPermission)\n  fullName: System.Security.PermissionSet.AddPermission(IPermission)\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: AddPermissionImpl(IPermission)\n  nameWithType: PermissionSet.AddPermissionImpl(IPermission)\n  fullName: System.Security.PermissionSet.AddPermissionImpl(IPermission)\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.PermissionSet.Assert\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: Assert()\n  nameWithType: PermissionSet.Assert()\n  fullName: System.Security.PermissionSet.Assert()\n- uid: System.Security.PermissionSet.ContainsNonCodeAccessPermissions\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: ContainsNonCodeAccessPermissions()\n  nameWithType: PermissionSet.ContainsNonCodeAccessPermissions()\n  fullName: System.Security.PermissionSet.ContainsNonCodeAccessPermissions()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: ConvertPermissionSet(String,Byte[],String)\n  nameWithType: PermissionSet.ConvertPermissionSet(String,Byte[],String)\n  fullName: System.Security.PermissionSet.ConvertPermissionSet(String,Byte[],String)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.PermissionSet.Copy\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: Copy()\n  nameWithType: PermissionSet.Copy()\n  fullName: System.Security.PermissionSet.Copy()\n- uid: System.Security.PermissionSet\n  parent: System.Security\n  isExternal: false\n  name: PermissionSet\n  nameWithType: PermissionSet\n  fullName: System.Security.PermissionSet\n- uid: System.Security.PermissionSet.CopyTo(System.Array,System.Int32)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: CopyTo(Array,Int32)\n  nameWithType: PermissionSet.CopyTo(Array,Int32)\n  fullName: System.Security.PermissionSet.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.PermissionSet.Count\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: Count\n  nameWithType: PermissionSet.Count\n  fullName: System.Security.PermissionSet.Count\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.PermissionSet.Demand\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: Demand()\n  nameWithType: PermissionSet.Demand()\n  fullName: System.Security.PermissionSet.Demand()\n- uid: System.Security.PermissionSet.Deny\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: Deny()\n  nameWithType: PermissionSet.Deny()\n  fullName: System.Security.PermissionSet.Deny()\n- uid: System.Security.PermissionSet.Equals(System.Object)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: PermissionSet.Equals(Object)\n  fullName: System.Security.PermissionSet.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Security.PermissionSet.FromXml(System.Security.SecurityElement)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: FromXml(SecurityElement)\n  nameWithType: PermissionSet.FromXml(SecurityElement)\n  fullName: System.Security.PermissionSet.FromXml(SecurityElement)\n- uid: System.Security.SecurityElement\n  parent: System.Security\n  isExternal: false\n  name: SecurityElement\n  nameWithType: SecurityElement\n  fullName: System.Security.SecurityElement\n- uid: System.Security.PermissionSet.GetEnumerator\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: PermissionSet.GetEnumerator()\n  fullName: System.Security.PermissionSet.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Security.PermissionSet.GetEnumeratorImpl\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: GetEnumeratorImpl()\n  nameWithType: PermissionSet.GetEnumeratorImpl()\n  fullName: System.Security.PermissionSet.GetEnumeratorImpl()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Security.PermissionSet.GetHashCode\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: PermissionSet.GetHashCode()\n  fullName: System.Security.PermissionSet.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.PermissionSet.GetPermission(System.Type)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: GetPermission(Type)\n  nameWithType: PermissionSet.GetPermission(Type)\n  fullName: System.Security.PermissionSet.GetPermission(Type)\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Security.PermissionSet.GetPermissionImpl(System.Type)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: GetPermissionImpl(Type)\n  nameWithType: PermissionSet.GetPermissionImpl(Type)\n  fullName: System.Security.PermissionSet.GetPermissionImpl(Type)\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Security.PermissionSet.Intersect(System.Security.PermissionSet)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: Intersect(PermissionSet)\n  nameWithType: PermissionSet.Intersect(PermissionSet)\n  fullName: System.Security.PermissionSet.Intersect(PermissionSet)\n- uid: System.Security.PermissionSet\n  parent: System.Security\n  isExternal: false\n  name: PermissionSet\n  nameWithType: PermissionSet\n  fullName: System.Security.PermissionSet\n- uid: System.Security.PermissionSet\n  parent: System.Security\n  isExternal: false\n  name: PermissionSet\n  nameWithType: PermissionSet\n  fullName: System.Security.PermissionSet\n- uid: System.Security.PermissionSet.IsEmpty\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: IsEmpty()\n  nameWithType: PermissionSet.IsEmpty()\n  fullName: System.Security.PermissionSet.IsEmpty()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.PermissionSet.IsReadOnly\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: PermissionSet.IsReadOnly\n  fullName: System.Security.PermissionSet.IsReadOnly\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: IsSubsetOf(PermissionSet)\n  nameWithType: PermissionSet.IsSubsetOf(PermissionSet)\n  fullName: System.Security.PermissionSet.IsSubsetOf(PermissionSet)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.PermissionSet\n  parent: System.Security\n  isExternal: false\n  name: PermissionSet\n  nameWithType: PermissionSet\n  fullName: System.Security.PermissionSet\n- uid: System.Security.PermissionSet.IsSynchronized\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: PermissionSet.IsSynchronized\n  fullName: System.Security.PermissionSet.IsSynchronized\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.PermissionSet.IsUnrestricted\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: IsUnrestricted()\n  nameWithType: PermissionSet.IsUnrestricted()\n  fullName: System.Security.PermissionSet.IsUnrestricted()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.PermissionSet.PermitOnly\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: PermitOnly()\n  nameWithType: PermissionSet.PermitOnly()\n  fullName: System.Security.PermissionSet.PermitOnly()\n- uid: System.Security.PermissionSet.RemovePermission(System.Type)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: RemovePermission(Type)\n  nameWithType: PermissionSet.RemovePermission(Type)\n  fullName: System.Security.PermissionSet.RemovePermission(Type)\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Security.PermissionSet.RemovePermissionImpl(System.Type)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: RemovePermissionImpl(Type)\n  nameWithType: PermissionSet.RemovePermissionImpl(Type)\n  fullName: System.Security.PermissionSet.RemovePermissionImpl(Type)\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Security.PermissionSet.RevertAssert\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: RevertAssert()\n  nameWithType: PermissionSet.RevertAssert()\n  fullName: System.Security.PermissionSet.RevertAssert()\n- uid: System.Security.PermissionSet.SetPermission(System.Security.IPermission)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: SetPermission(IPermission)\n  nameWithType: PermissionSet.SetPermission(IPermission)\n  fullName: System.Security.PermissionSet.SetPermission(IPermission)\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: SetPermissionImpl(IPermission)\n  nameWithType: PermissionSet.SetPermissionImpl(IPermission)\n  fullName: System.Security.PermissionSet.SetPermissionImpl(IPermission)\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.PermissionSet.SyncRoot\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: SyncRoot\n  nameWithType: PermissionSet.SyncRoot\n  fullName: System.Security.PermissionSet.SyncRoot\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)\n  nameWithType: PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)\n  fullName: System.Security.PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Security.PermissionSet.ToString\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: ToString()\n  nameWithType: PermissionSet.ToString()\n  fullName: System.Security.PermissionSet.ToString()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.PermissionSet.ToXml\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: ToXml()\n  nameWithType: PermissionSet.ToXml()\n  fullName: System.Security.PermissionSet.ToXml()\n- uid: System.Security.SecurityElement\n  parent: System.Security\n  isExternal: false\n  name: SecurityElement\n  nameWithType: SecurityElement\n  fullName: System.Security.SecurityElement\n- uid: System.Security.PermissionSet.Union(System.Security.PermissionSet)\n  parent: System.Security.PermissionSet\n  isExternal: false\n  name: Union(PermissionSet)\n  nameWithType: PermissionSet.Union(PermissionSet)\n  fullName: System.Security.PermissionSet.Union(PermissionSet)\n- uid: System.Security.PermissionSet\n  parent: System.Security\n  isExternal: false\n  name: PermissionSet\n  nameWithType: PermissionSet\n  fullName: System.Security.PermissionSet\n- uid: System.Security.PermissionSet\n  parent: System.Security\n  isExternal: false\n  name: PermissionSet\n  nameWithType: PermissionSet\n  fullName: System.Security.PermissionSet\n"}