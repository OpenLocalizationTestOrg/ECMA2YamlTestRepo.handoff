{"nodes":[{"pos":[664,686],"content":"ReadOnlyCollectionBase","needQuote":true,"needEscape":true,"nodes":[{"content":"ReadOnlyCollectionBase","pos":[0,22]}]},{"pos":[1535,1559],"content":"ReadOnlyCollectionBase()","needQuote":true,"needEscape":true,"nodes":[{"content":"ReadOnlyCollectionBase()","pos":[0,24]}]},{"pos":[2057,2062],"content":"Count","needQuote":true,"needEscape":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[2357,2391],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2604,2619],"content":"GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[2999,3033],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3238,3247],"content":"InnerList","needQuote":true,"needEscape":true,"nodes":[{"content":"InnerList","pos":[0,9]}]},{"pos":[3590,3624],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3953,4003],"content":"System.Collections.ICollection.CopyTo(Array,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.CopyTo(Array,Int32)","pos":[0,50]}]},{"pos":[4422,4456],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4517,4551],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4842,4887],"content":"System.Collections.ICollection.IsSynchronized","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.IsSynchronized","pos":[0,45]}]},{"pos":[5290,5324],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5603,5642],"content":"System.Collections.ICollection.SyncRoot","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.SyncRoot","pos":[0,39]}]},{"pos":[6028,6062],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6173,6186],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[6322,6346],"content":"ReadOnlyCollectionBase()","needQuote":true,"needEscape":true,"nodes":[{"content":"ReadOnlyCollectionBase()","pos":[0,24]}]},{"pos":[6625,6630],"content":"Count","needQuote":true,"needEscape":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[6801,6806],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[6997,7012],"content":"GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[7233,7244],"content":"IEnumerator","needQuote":true,"needEscape":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[7455,7464],"content":"InnerList","needQuote":true,"needEscape":true,"nodes":[{"content":"InnerList","pos":[0,9]}]},{"pos":[7671,7680],"content":"ArrayList","needQuote":true,"needEscape":true,"nodes":[{"content":"ArrayList","pos":[0,9]}]},{"pos":[7942,7992],"content":"System.Collections.ICollection.CopyTo(Array,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.CopyTo(Array,Int32)","pos":[0,50]}]},{"pos":[8253,8258],"content":"Array","needQuote":true,"needEscape":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[8371,8376],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[8599,8644],"content":"System.Collections.ICollection.IsSynchronized","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.IsSynchronized","pos":[0,45]}]},{"pos":[8897,8904],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[9125,9164],"content":"System.Collections.ICollection.SyncRoot","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.SyncRoot","pos":[0,39]}]},{"pos":[9404,9410],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.ReadOnlyCollectionBase\n  id: ReadOnlyCollectionBase\n  children:\n  - System.Collections.ReadOnlyCollectionBase.#ctor\n  - System.Collections.ReadOnlyCollectionBase.Count\n  - System.Collections.ReadOnlyCollectionBase.GetEnumerator\n  - System.Collections.ReadOnlyCollectionBase.InnerList\n  - System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized\n  - System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot\n  langs:\n  - csharp\n  name: ReadOnlyCollectionBase\n  nameWithType: ReadOnlyCollectionBase\n  fullName: System.Collections.ReadOnlyCollectionBase\n  type: Class\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class ReadOnlyCollectionBase : System.Collections.ICollection\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.ICollection\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.ReadOnlyCollectionBase.#ctor\n  id: '#ctor'\n  parent: System.Collections.ReadOnlyCollectionBase\n  langs:\n  - csharp\n  name: ReadOnlyCollectionBase()\n  nameWithType: ReadOnlyCollectionBase.ReadOnlyCollectionBase()\n  fullName: System.Collections.ReadOnlyCollectionBase.ReadOnlyCollectionBase()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  syntax:\n    content: protected ReadOnlyCollectionBase ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.ReadOnlyCollectionBase.Count\n  id: Count\n  parent: System.Collections.ReadOnlyCollectionBase\n  langs:\n  - csharp\n  name: Count\n  nameWithType: ReadOnlyCollectionBase.Count\n  fullName: System.Collections.ReadOnlyCollectionBase.Count\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  syntax:\n    content: public virtual int Count { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.ReadOnlyCollectionBase.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.ReadOnlyCollectionBase\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: ReadOnlyCollectionBase.GetEnumerator()\n  fullName: System.Collections.ReadOnlyCollectionBase.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  syntax:\n    content: public virtual System.Collections.IEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.ReadOnlyCollectionBase.InnerList\n  id: InnerList\n  parent: System.Collections.ReadOnlyCollectionBase\n  langs:\n  - csharp\n  name: InnerList\n  nameWithType: ReadOnlyCollectionBase.InnerList\n  fullName: System.Collections.ReadOnlyCollectionBase.InnerList\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  syntax:\n    content: protected System.Collections.ArrayList InnerList { get; }\n    return:\n      type: System.Collections.ArrayList\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Collections.ReadOnlyCollectionBase\n  langs:\n  - csharp\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  syntax:\n    content: void ICollection.CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: Parameter description to be filled\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Collections.ReadOnlyCollectionBase\n  langs:\n  - csharp\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.IsSynchronized\n  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Collections.ReadOnlyCollectionBase\n  langs:\n  - csharp\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.SyncRoot\n  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Collections.ReadOnlyCollectionBase.#ctor\n  parent: System.Collections.ReadOnlyCollectionBase\n  isExternal: false\n  name: ReadOnlyCollectionBase()\n  nameWithType: ReadOnlyCollectionBase.ReadOnlyCollectionBase()\n  fullName: System.Collections.ReadOnlyCollectionBase.ReadOnlyCollectionBase()\n- uid: System.Collections.ReadOnlyCollectionBase.Count\n  parent: System.Collections.ReadOnlyCollectionBase\n  isExternal: false\n  name: Count\n  nameWithType: ReadOnlyCollectionBase.Count\n  fullName: System.Collections.ReadOnlyCollectionBase.Count\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.ReadOnlyCollectionBase.GetEnumerator\n  parent: System.Collections.ReadOnlyCollectionBase\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: ReadOnlyCollectionBase.GetEnumerator()\n  fullName: System.Collections.ReadOnlyCollectionBase.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Collections.ReadOnlyCollectionBase.InnerList\n  parent: System.Collections.ReadOnlyCollectionBase\n  isExternal: false\n  name: InnerList\n  nameWithType: ReadOnlyCollectionBase.InnerList\n  fullName: System.Collections.ReadOnlyCollectionBase.InnerList\n- uid: System.Collections.ArrayList\n  parent: System.Collections\n  isExternal: false\n  name: ArrayList\n  nameWithType: ArrayList\n  fullName: System.Collections.ArrayList\n- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ReadOnlyCollectionBase\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized\n  parent: System.Collections.ReadOnlyCollectionBase\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.IsSynchronized\n  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.IsSynchronized\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot\n  parent: System.Collections.ReadOnlyCollectionBase\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.SyncRoot\n  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.SyncRoot\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n"}