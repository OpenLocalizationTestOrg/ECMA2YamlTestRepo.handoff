{"nodes":[{"pos":[1687,1702],"content":"ArraySegment<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"ArraySegment<T>"},{"pos":[2111,2145],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2618,2635],"content":"ArraySegment(T[])","needQuote":true,"needEscape":true,"nodes":[{"content":"ArraySegment(T[])","pos":[0,17]}]},{"pos":[2929,2963],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3186,3215],"content":"ArraySegment(T[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"ArraySegment(T[],Int32,Int32)","pos":[0,29]}]},{"pos":[3556,3590],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3652,3686],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3747,3781],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3938,3943],"content":"Array","needQuote":true,"needEscape":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[4183,4217],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4374,4379],"content":"Count","needQuote":true,"needEscape":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[4628,4662],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4867,4890],"content":"Equals(ArraySegment<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Equals(ArraySegment<T>)"},{"pos":[5216,5250],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5309,5343],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5574,5588],"content":"Equals(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[5888,5922],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5981,6015],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6226,6239],"content":"GetHashCode()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[6531,6565],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6724,6730],"content":"Offset","needQuote":true,"needEscape":true,"nodes":[{"content":"Offset","pos":[0,6]}]},{"pos":[6982,7016],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7275,7319],"content":"op_Equality(ArraySegment<ph id=\"ph1\">&lt;T&gt;</ph>,ArraySegment<ph id=\"ph2\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"op_Equality(ArraySegment<T>,ArraySegment<T>)"},{"pos":[7716,7750],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7816,7850],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7909,7943],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8206,8252],"content":"op_Inequality(ArraySegment<ph id=\"ph1\">&lt;T&gt;</ph>,ArraySegment<ph id=\"ph2\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"op_Inequality(ArraySegment<T>,ArraySegment<T>)"},{"pos":[8655,8689],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8755,8789],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8848,8882],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9141,9182],"content":"System.Collections.Generic.ICollection(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection(T)","pos":[0,41]}]},{"pos":[9517,9551],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9806,9846],"content":"System.Collections.Generic.ICollection()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection()","pos":[0,40]}]},{"pos":[10398,10439],"content":"System.Collections.Generic.ICollection(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection(T)","pos":[0,41]}]},{"pos":[10779,10813],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10872,10906],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11201,11250],"content":"System.Collections.Generic.ICollection(T[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection(T[],Int32)","pos":[0,49]}]},{"pos":[11626,11660],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11726,11760],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12025,12063],"content":"System.Collections.Generic.ICollection","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection","pos":[0,38]}]},{"pos":[12421,12455],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12720,12761],"content":"System.Collections.Generic.ICollection(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection(T)","pos":[0,41]}]},{"pos":[13099,13133],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13192,13226],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13497,13537],"content":"System.Collections.Generic.IEnumerable()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.IEnumerable()","pos":[0,40]}]},{"pos":[13950,13984],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14239,14274],"content":"System.Collections.Generic.IList(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.IList(T)","pos":[0,35]}]},{"pos":[14594,14628],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14685,14719],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14998,15039],"content":"System.Collections.Generic.IList(Int32,T)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.IList(Int32,T)","pos":[0,41]}]},{"pos":[15394,15428],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15477,15511],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15780,15819],"content":"System.Collections.Generic.IList(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.IList(Int32)","pos":[0,39]}]},{"pos":[16198,16232],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16278,16312],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16589,16628],"content":"System.Collections.Generic.IList(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.IList(Int32)","pos":[0,39]}]},{"pos":[16973,17007],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17292,17339],"content":"System.Collections.Generic.IReadOnlyList(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.IReadOnlyList(Int32)","pos":[0,47]}]},{"pos":[17737,17771],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17817,17851],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18100,18146],"content":"System.Collections.IEnumerable.GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IEnumerable.GetEnumerator()","pos":[0,46]}]},{"pos":[18547,18581],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18695,18711],"content":"System.ValueType","needQuote":true,"needEscape":true,"nodes":[{"content":"System.ValueType","pos":[0,16]}]},{"pos":[18813,18830],"content":"ArraySegment(T[])","needQuote":true,"needEscape":true,"nodes":[{"content":"ArraySegment(T[])","pos":[0,17]}]},{"pos":[18983,18984],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[19146,19175],"content":"ArraySegment(T[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"ArraySegment(T[],Int32,Int32)","pos":[0,29]}]},{"pos":[19352,19353],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[19453,19458],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[19571,19576],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[19719,19724],"content":"Array","needQuote":true,"needEscape":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[19853,19854],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[19984,19989],"content":"Count","needQuote":true,"needEscape":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[20134,20139],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[20306,20329],"content":"Equals(ArraySegment<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Equals(ArraySegment<T>)"},{"pos":[20512,20519],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[20645,20660],"content":"ArraySegment<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"ArraySegment<T>"},{"pos":[20839,20853],"content":"Equals(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[21018,21025],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[21143,21149],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21300,21313],"content":"GetHashCode()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[21474,21479],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[21623,21629],"content":"Offset","needQuote":true,"needEscape":true,"nodes":[{"content":"Offset","pos":[0,6]}]},{"pos":[21776,21781],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[21975,22019],"content":"op_Equality(ArraySegment<ph id=\"ph1\">&lt;T&gt;</ph>,ArraySegment<ph id=\"ph2\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"op_Equality(ArraySegment<T>,ArraySegment<T>)"},{"pos":[22244,22251],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[22377,22392],"content":"ArraySegment<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"ArraySegment<T>"},{"pos":[22534,22549],"content":"ArraySegment<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"ArraySegment<T>"},{"pos":[22765,22811],"content":"op_Inequality(ArraySegment<ph id=\"ph1\">&lt;T&gt;</ph>,ArraySegment<ph id=\"ph2\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"op_Inequality(ArraySegment<T>,ArraySegment<T>)"},{"pos":[23040,23047],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[23173,23188],"content":"ArraySegment<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"ArraySegment<T>"},{"pos":[23330,23345],"content":"ArraySegment<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"ArraySegment<T>"},{"pos":[23552,23593],"content":"System.Collections.Generic.ICollection(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection(T)","pos":[0,41]}]},{"pos":[23794,23795],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[23965,24005],"content":"System.Collections.Generic.ICollection()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection()","pos":[0,40]}]},{"pos":[24299,24340],"content":"System.Collections.Generic.ICollection(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection(T)","pos":[0,41]}]},{"pos":[24559,24566],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[24667,24668],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[24858,24907],"content":"System.Collections.Generic.ICollection(T[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection(T[],Int32)","pos":[0,49]}]},{"pos":[25124,25125],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[25225,25230],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[25420,25458],"content":"System.Collections.Generic.ICollection","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection","pos":[0,38]}]},{"pos":[25671,25678],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[25872,25913],"content":"System.Collections.Generic.ICollection(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection(T)","pos":[0,41]}]},{"pos":[26132,26139],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[26240,26241],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[26419,26459],"content":"System.Collections.Generic.IEnumerable()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.IEnumerable()","pos":[0,40]}]},{"pos":[26722,26736],"content":"IEnumerator<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerator<T>"},{"pos":[26959,26994],"content":"System.Collections.Generic.IList(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.IList(T)","pos":[0,35]}]},{"pos":[27199,27204],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[27301,27302],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[27484,27525],"content":"System.Collections.Generic.IList(Int32,T)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.IList(Int32,T)","pos":[0,41]}]},{"pos":[27742,27747],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[27844,27845],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[28022,28061],"content":"System.Collections.Generic.IList(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.IList(Int32)","pos":[0,39]}]},{"pos":[28258,28259],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[28357,28362],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28558,28597],"content":"System.Collections.Generic.IList(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.IList(Int32)","pos":[0,39]}]},{"pos":[28810,28815],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[29015,29062],"content":"System.Collections.Generic.IReadOnlyList(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.IReadOnlyList(Int32)","pos":[0,47]}]},{"pos":[29275,29276],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[29374,29379],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[29561,29607],"content":"System.Collections.IEnumerable.GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IEnumerable.GetEnumerator()","pos":[0,46]}]},{"pos":[29864,29875],"content":"IEnumerator","needQuote":true,"needEscape":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ArraySegment`1\n  id: ArraySegment`1\n  children:\n  - System.ArraySegment`1.#ctor(`0[])\n  - System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)\n  - System.ArraySegment`1.Array\n  - System.ArraySegment`1.Count\n  - System.ArraySegment`1.Equals(System.ArraySegment`1)\n  - System.ArraySegment`1.Equals(System.Object)\n  - System.ArraySegment`1.GetHashCode\n  - System.ArraySegment`1.Offset\n  - System.ArraySegment`1.op_Equality(System.ArraySegment`1,System.ArraySegment`1)\n  - System.ArraySegment`1.op_Inequality(System.ArraySegment`1,System.ArraySegment`1)\n  - System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Add(`0)\n  - System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Clear\n  - System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Contains(`0)\n  - System.ArraySegment`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)\n  - System.ArraySegment`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  - System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Remove(`0)\n  - System.ArraySegment`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator\n  - System.ArraySegment`1.System#Collections#Generic#IList{T}#IndexOf(`0)\n  - System.ArraySegment`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)\n  - System.ArraySegment`1.System#Collections#Generic#IList{T}#Item(System.Int32)\n  - System.ArraySegment`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)\n  - System.ArraySegment`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)\n  - System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator\n  langs:\n  - csharp\n  name: ArraySegment<T>\n  nameWithType: ArraySegment<T>\n  fullName: System.ArraySegment<T>\n  type: Struct\n  syntax:\n    content: 'public struct ArraySegment<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IList<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.IReadOnlyList<T>'\n    typeParameters:\n    - id: T\n      description: Parameter description to be filled\n  inheritance:\n  - System.Object\n  - System.ValueType\n  implements:\n  - System.Collections.Generic.ICollection<T>\n  - System.Collections.Generic.IEnumerable<T>\n  - System.Collections.Generic.IList<T>\n  - System.Collections.Generic.IReadOnlyCollection<T>\n  - System.Collections.Generic.IReadOnlyList<T>\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.ArraySegment`1.#ctor(`0[])\n  id: '#ctor(`0[])'\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  name: ArraySegment(T[])\n  nameWithType: ArraySegment<T>.ArraySegment(T[])\n  fullName: System.ArraySegment<T>.ArraySegment(T[])\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System\n  syntax:\n    content: public ArraySegment (T[] array);\n    parameters:\n    - id: array\n      type: T[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)\n  id: '#ctor(`0[],System.Int32,System.Int32)'\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  name: ArraySegment(T[],Int32,Int32)\n  nameWithType: ArraySegment<T>.ArraySegment(T[],Int32,Int32)\n  fullName: System.ArraySegment<T>.ArraySegment(T[],Int32,Int32)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System\n  syntax:\n    content: public ArraySegment (T[] array, int offset, int count);\n    parameters:\n    - id: array\n      type: T[]\n      description: Parameter description to be filled\n    - id: offset\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.ArraySegment`1.Array\n  id: Array\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  name: Array\n  nameWithType: ArraySegment<T>.Array\n  fullName: System.ArraySegment<T>.Array\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  syntax:\n    content: public T[] Array { get; }\n    return:\n      type: T[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.ArraySegment`1.Count\n  id: Count\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  name: Count\n  nameWithType: ArraySegment<T>.Count\n  fullName: System.ArraySegment<T>.Count\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.ArraySegment`1.Equals(System.ArraySegment`1)\n  id: Equals(System.ArraySegment`1)\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  name: Equals(ArraySegment<T>)\n  nameWithType: ArraySegment<T>.Equals(ArraySegment<T>)\n  fullName: System.ArraySegment<T>.Equals(ArraySegment<T>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  syntax:\n    content: public bool Equals (ArraySegment<T> obj);\n    parameters:\n    - id: obj\n      type: System.ArraySegment`1\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.ArraySegment`1.Equals*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.ArraySegment`1.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: ArraySegment<T>.Equals(Object)\n  fullName: System.ArraySegment<T>.Equals(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.ArraySegment`1.Equals*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.ArraySegment`1.GetHashCode\n  id: GetHashCode\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: ArraySegment<T>.GetHashCode()\n  fullName: System.ArraySegment<T>.GetHashCode()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.ArraySegment`1.Offset\n  id: Offset\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  name: Offset\n  nameWithType: ArraySegment<T>.Offset\n  fullName: System.ArraySegment<T>.Offset\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  syntax:\n    content: public int Offset { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.ArraySegment`1.op_Equality(System.ArraySegment`1,System.ArraySegment`1)\n  id: op_Equality(System.ArraySegment`1,System.ArraySegment`1)\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  name: op_Equality(ArraySegment<T>,ArraySegment<T>)\n  nameWithType: ArraySegment<T>.op_Equality(ArraySegment<T>,ArraySegment<T>)\n  fullName: System.ArraySegment<T>.op_Equality(ArraySegment<T>,ArraySegment<T>)\n  type: Operator\n  assemblies:\n  - mscorlib\n  namespace: System\n  syntax:\n    content: public static bool op_Equality (ArraySegment<T> a, ArraySegment<T> b);\n    parameters:\n    - id: a\n      type: System.ArraySegment`1\n      description: Parameter description to be filled\n    - id: b\n      type: System.ArraySegment`1\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.ArraySegment`1.op_Inequality(System.ArraySegment`1,System.ArraySegment`1)\n  id: op_Inequality(System.ArraySegment`1,System.ArraySegment`1)\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  name: op_Inequality(ArraySegment<T>,ArraySegment<T>)\n  nameWithType: ArraySegment<T>.op_Inequality(ArraySegment<T>,ArraySegment<T>)\n  fullName: System.ArraySegment<T>.op_Inequality(ArraySegment<T>,ArraySegment<T>)\n  type: Operator\n  assemblies:\n  - mscorlib\n  namespace: System\n  syntax:\n    content: public static bool op_Inequality (ArraySegment<T> a, ArraySegment<T> b);\n    parameters:\n    - id: a\n      type: System.ArraySegment`1\n      description: Parameter description to be filled\n    - id: b\n      type: System.ArraySegment`1\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Add(`0)\n  id: System#Collections#Generic#ICollection{T}#Add(`0)\n  isEii: true\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection(T)\n  nameWithType: ArraySegment<T>.System.Collections.Generic.ICollection(T)\n  fullName: System.ArraySegment<T>.System.Collections.Generic.ICollection(T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  syntax:\n    content: void ICollection<T>.Add (T item);\n    parameters:\n    - id: item\n      type: T\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Clear\n  id: System#Collections#Generic#ICollection{T}#Clear\n  isEii: true\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection()\n  nameWithType: ArraySegment<T>.System.Collections.Generic.ICollection()\n  fullName: System.ArraySegment<T>.System.Collections.Generic.ICollection()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  syntax:\n    content: void ICollection<T>.Clear ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Contains(`0)\n  id: System#Collections#Generic#ICollection{T}#Contains(`0)\n  isEii: true\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection(T)\n  nameWithType: ArraySegment<T>.System.Collections.Generic.ICollection(T)\n  fullName: System.ArraySegment<T>.System.Collections.Generic.ICollection(T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  syntax:\n    content: bool ICollection<T>.Contains (T item);\n    parameters:\n    - id: item\n      type: T\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)\n  id: System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)\n  isEii: true\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection(T[],Int32)\n  nameWithType: ArraySegment<T>.System.Collections.Generic.ICollection(T[],Int32)\n  fullName: System.ArraySegment<T>.System.Collections.Generic.ICollection(T[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  syntax:\n    content: void ICollection<T>.CopyTo (T[] array, int arrayIndex);\n    parameters:\n    - id: array\n      type: T[]\n      description: Parameter description to be filled\n    - id: arrayIndex\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  id: System#Collections#Generic#ICollection{T}#IsReadOnly\n  isEii: true\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection\n  nameWithType: ArraySegment<T>.System.Collections.Generic.ICollection\n  fullName: System.ArraySegment<T>.System.Collections.Generic.ICollection\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  syntax:\n    content: bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Remove(`0)\n  id: System#Collections#Generic#ICollection{T}#Remove(`0)\n  isEii: true\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection(T)\n  nameWithType: ArraySegment<T>.System.Collections.Generic.ICollection(T)\n  fullName: System.ArraySegment<T>.System.Collections.Generic.ICollection(T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  syntax:\n    content: bool ICollection<T>.Remove (T item);\n    parameters:\n    - id: item\n      type: T\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.ArraySegment`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator\n  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator\n  isEii: true\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  name: System.Collections.Generic.IEnumerable()\n  nameWithType: ArraySegment<T>.System.Collections.Generic.IEnumerable()\n  fullName: System.ArraySegment<T>.System.Collections.Generic.IEnumerable()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  syntax:\n    content: System.Collections.Generic.IEnumerator<T> IEnumerable<T>.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator`1\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.ArraySegment`1.System#Collections#Generic#IList{T}#IndexOf(`0)\n  id: System#Collections#Generic#IList{T}#IndexOf(`0)\n  isEii: true\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  name: System.Collections.Generic.IList(T)\n  nameWithType: ArraySegment<T>.System.Collections.Generic.IList(T)\n  fullName: System.ArraySegment<T>.System.Collections.Generic.IList(T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  syntax:\n    content: int IList<T>.IndexOf (T item);\n    parameters:\n    - id: item\n      type: T\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.ArraySegment`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)\n  id: System#Collections#Generic#IList{T}#Insert(System.Int32,`0)\n  isEii: true\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  name: System.Collections.Generic.IList(Int32,T)\n  nameWithType: ArraySegment<T>.System.Collections.Generic.IList(Int32,T)\n  fullName: System.ArraySegment<T>.System.Collections.Generic.IList(Int32,T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  syntax:\n    content: void IList<T>.Insert (int index, T item);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: item\n      type: T\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.ArraySegment`1.System#Collections#Generic#IList{T}#Item(System.Int32)\n  id: System#Collections#Generic#IList{T}#Item(System.Int32)\n  isEii: true\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  name: System.Collections.Generic.IList(Int32)\n  nameWithType: ArraySegment<T>.System.Collections.Generic.IList(Int32)\n  fullName: System.ArraySegment<T>.System.Collections.Generic.IList(Int32)\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  syntax:\n    content: T System.Collections.Generic.IList<T>.Item[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: T\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.ArraySegment`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)\n  id: System#Collections#Generic#IList{T}#RemoveAt(System.Int32)\n  isEii: true\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  name: System.Collections.Generic.IList(Int32)\n  nameWithType: ArraySegment<T>.System.Collections.Generic.IList(Int32)\n  fullName: System.ArraySegment<T>.System.Collections.Generic.IList(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  syntax:\n    content: void IList<T>.RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.ArraySegment`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)\n  id: System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)\n  isEii: true\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  name: System.Collections.Generic.IReadOnlyList(Int32)\n  nameWithType: ArraySegment<T>.System.Collections.Generic.IReadOnlyList(Int32)\n  fullName: System.ArraySegment<T>.System.Collections.Generic.IReadOnlyList(Int32)\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  syntax:\n    content: T System.Collections.Generic.IReadOnlyList<T>.Item[int index] { get; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: T\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: ArraySegment<T>.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.ArraySegment<T>.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.ValueType\n  isExternal: false\n  name: System.ValueType\n- uid: System.ArraySegment`1.#ctor(`0[])\n  parent: System.ArraySegment`1\n  isExternal: false\n  name: ArraySegment(T[])\n  nameWithType: ArraySegment<T>.ArraySegment(T[])\n  fullName: System.ArraySegment<T>.ArraySegment(T[])\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T[]\n- uid: System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)\n  parent: System.ArraySegment`1\n  isExternal: false\n  name: ArraySegment(T[],Int32,Int32)\n  nameWithType: ArraySegment<T>.ArraySegment(T[],Int32,Int32)\n  fullName: System.ArraySegment<T>.ArraySegment(T[],Int32,Int32)\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.ArraySegment`1.Array\n  parent: System.ArraySegment`1\n  isExternal: false\n  name: Array\n  nameWithType: ArraySegment<T>.Array\n  fullName: System.ArraySegment<T>.Array\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T[]\n- uid: System.ArraySegment`1.Count\n  parent: System.ArraySegment`1\n  isExternal: false\n  name: Count\n  nameWithType: ArraySegment<T>.Count\n  fullName: System.ArraySegment<T>.Count\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.ArraySegment`1.Equals(System.ArraySegment`1)\n  parent: System.ArraySegment`1\n  isExternal: false\n  name: Equals(ArraySegment<T>)\n  nameWithType: ArraySegment<T>.Equals(ArraySegment<T>)\n  fullName: System.ArraySegment<T>.Equals(ArraySegment<T>)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ArraySegment`1\n  parent: System\n  isExternal: false\n  name: ArraySegment<T>\n  nameWithType: ArraySegment<T>\n  fullName: System.ArraySegment<T>\n- uid: System.ArraySegment`1.Equals(System.Object)\n  parent: System.ArraySegment`1\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: ArraySegment<T>.Equals(Object)\n  fullName: System.ArraySegment<T>.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArraySegment`1.GetHashCode\n  parent: System.ArraySegment`1\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: ArraySegment<T>.GetHashCode()\n  fullName: System.ArraySegment<T>.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.ArraySegment`1.Offset\n  parent: System.ArraySegment`1\n  isExternal: false\n  name: Offset\n  nameWithType: ArraySegment<T>.Offset\n  fullName: System.ArraySegment<T>.Offset\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.ArraySegment`1.op_Equality(System.ArraySegment`1,System.ArraySegment`1)\n  parent: System.ArraySegment`1\n  isExternal: false\n  name: op_Equality(ArraySegment<T>,ArraySegment<T>)\n  nameWithType: ArraySegment<T>.op_Equality(ArraySegment<T>,ArraySegment<T>)\n  fullName: System.ArraySegment<T>.op_Equality(ArraySegment<T>,ArraySegment<T>)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ArraySegment`1\n  parent: System\n  isExternal: false\n  name: ArraySegment<T>\n  nameWithType: ArraySegment<T>\n  fullName: System.ArraySegment<T>\n- uid: System.ArraySegment`1\n  parent: System\n  isExternal: false\n  name: ArraySegment<T>\n  nameWithType: ArraySegment<T>\n  fullName: System.ArraySegment<T>\n- uid: System.ArraySegment`1.op_Inequality(System.ArraySegment`1,System.ArraySegment`1)\n  parent: System.ArraySegment`1\n  isExternal: false\n  name: op_Inequality(ArraySegment<T>,ArraySegment<T>)\n  nameWithType: ArraySegment<T>.op_Inequality(ArraySegment<T>,ArraySegment<T>)\n  fullName: System.ArraySegment<T>.op_Inequality(ArraySegment<T>,ArraySegment<T>)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ArraySegment`1\n  parent: System\n  isExternal: false\n  name: ArraySegment<T>\n  nameWithType: ArraySegment<T>\n  fullName: System.ArraySegment<T>\n- uid: System.ArraySegment`1\n  parent: System\n  isExternal: false\n  name: ArraySegment<T>\n  nameWithType: ArraySegment<T>\n  fullName: System.ArraySegment<T>\n- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Add(`0)\n  parent: System.ArraySegment`1\n  isExternal: false\n  name: System.Collections.Generic.ICollection(T)\n  nameWithType: ArraySegment<T>.System.Collections.Generic.ICollection(T)\n  fullName: System.ArraySegment<T>.System.Collections.Generic.ICollection(T)\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Clear\n  parent: System.ArraySegment`1\n  isExternal: false\n  name: System.Collections.Generic.ICollection()\n  nameWithType: ArraySegment<T>.System.Collections.Generic.ICollection()\n  fullName: System.ArraySegment<T>.System.Collections.Generic.ICollection()\n- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Contains(`0)\n  parent: System.ArraySegment`1\n  isExternal: false\n  name: System.Collections.Generic.ICollection(T)\n  nameWithType: ArraySegment<T>.System.Collections.Generic.ICollection(T)\n  fullName: System.ArraySegment<T>.System.Collections.Generic.ICollection(T)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)\n  parent: System.ArraySegment`1\n  isExternal: false\n  name: System.Collections.Generic.ICollection(T[],Int32)\n  nameWithType: ArraySegment<T>.System.Collections.Generic.ICollection(T[],Int32)\n  fullName: System.ArraySegment<T>.System.Collections.Generic.ICollection(T[],Int32)\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  parent: System.ArraySegment`1\n  isExternal: false\n  name: System.Collections.Generic.ICollection\n  nameWithType: ArraySegment<T>.System.Collections.Generic.ICollection\n  fullName: System.ArraySegment<T>.System.Collections.Generic.ICollection\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Remove(`0)\n  parent: System.ArraySegment`1\n  isExternal: false\n  name: System.Collections.Generic.ICollection(T)\n  nameWithType: ArraySegment<T>.System.Collections.Generic.ICollection(T)\n  fullName: System.ArraySegment<T>.System.Collections.Generic.ICollection(T)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.ArraySegment`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator\n  parent: System.ArraySegment`1\n  isExternal: false\n  name: System.Collections.Generic.IEnumerable()\n  nameWithType: ArraySegment<T>.System.Collections.Generic.IEnumerable()\n  fullName: System.ArraySegment<T>.System.Collections.Generic.IEnumerable()\n- uid: System.Collections.Generic.IEnumerator`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerator<T>\n  nameWithType: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n- uid: System.ArraySegment`1.System#Collections#Generic#IList{T}#IndexOf(`0)\n  parent: System.ArraySegment`1\n  isExternal: false\n  name: System.Collections.Generic.IList(T)\n  nameWithType: ArraySegment<T>.System.Collections.Generic.IList(T)\n  fullName: System.ArraySegment<T>.System.Collections.Generic.IList(T)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.ArraySegment`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)\n  parent: System.ArraySegment`1\n  isExternal: false\n  name: System.Collections.Generic.IList(Int32,T)\n  nameWithType: ArraySegment<T>.System.Collections.Generic.IList(Int32,T)\n  fullName: System.ArraySegment<T>.System.Collections.Generic.IList(Int32,T)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.ArraySegment`1.System#Collections#Generic#IList{T}#Item(System.Int32)\n  parent: System.ArraySegment`1\n  isExternal: false\n  name: System.Collections.Generic.IList(Int32)\n  nameWithType: ArraySegment<T>.System.Collections.Generic.IList(Int32)\n  fullName: System.ArraySegment<T>.System.Collections.Generic.IList(Int32)\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.ArraySegment`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)\n  parent: System.ArraySegment`1\n  isExternal: false\n  name: System.Collections.Generic.IList(Int32)\n  nameWithType: ArraySegment<T>.System.Collections.Generic.IList(Int32)\n  fullName: System.ArraySegment<T>.System.Collections.Generic.IList(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.ArraySegment`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)\n  parent: System.ArraySegment`1\n  isExternal: false\n  name: System.Collections.Generic.IReadOnlyList(Int32)\n  nameWithType: ArraySegment<T>.System.Collections.Generic.IReadOnlyList(Int32)\n  fullName: System.ArraySegment<T>.System.Collections.Generic.IReadOnlyList(Int32)\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator\n  parent: System.ArraySegment`1\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: ArraySegment<T>.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.ArraySegment<T>.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.ArraySegment`1.Equals*\n  parent: System.ArraySegment`1\n  isExternal: false\n  nameWithType: ArraySegment<T>.\n"}