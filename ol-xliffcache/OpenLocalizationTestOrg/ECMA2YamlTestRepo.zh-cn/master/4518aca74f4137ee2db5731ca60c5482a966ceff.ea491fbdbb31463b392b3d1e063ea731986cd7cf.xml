{"nodes":[{"pos":[1316,1331],"content":"EventWaitHandle","needQuote":true,"needEscape":true,"nodes":[{"content":"EventWaitHandle","pos":[0,15]}]},{"pos":[4332,4371],"content":"EventWaitHandle(Boolean,EventResetMode)","needQuote":true,"needEscape":true,"nodes":[{"content":"EventWaitHandle(Boolean,EventResetMode)","pos":[0,39]}]},{"pos":[4796,4830],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4909,4943],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5248,5294],"content":"EventWaitHandle(Boolean,EventResetMode,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"EventWaitHandle(Boolean,EventResetMode,String)","pos":[0,46]}]},{"pos":[5746,5780],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5859,5893],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5954,5988],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6325,6379],"content":"EventWaitHandle(Boolean,EventResetMode,String,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"EventWaitHandle(Boolean,EventResetMode,String,Boolean)","pos":[0,54]}]},{"pos":[6868,6902],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6981,7015],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7076,7110],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7178,7212],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7657,7735],"content":"EventWaitHandle(Boolean,EventResetMode,String,Boolean,EventWaitHandleSecurity)","needQuote":true,"needEscape":true,"nodes":[{"content":"EventWaitHandle(Boolean,EventResetMode,String,Boolean,EventWaitHandleSecurity)","pos":[0,78]}]},{"pos":[8341,8375],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8454,8488],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8549,8583],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8651,8685],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8795,8829],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9030,9048],"content":"GetAccessControl()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetAccessControl()","pos":[0,18]}]},{"pos":[9457,9491],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9714,9734],"content":"OpenExisting(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"OpenExisting(String)","pos":[0,20]}]},{"pos":[10100,10134],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10211,10245],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10631,10673],"content":"OpenExisting(String,EventWaitHandleRights)","needQuote":true,"needEscape":true,"nodes":[{"content":"OpenExisting(String,EventWaitHandleRights)","pos":[0,42]}]},{"pos":[11143,11177],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11278,11312],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11389,11423],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11661,11668],"content":"Reset()","needQuote":true,"needEscape":true,"nodes":[{"content":"Reset()","pos":[0,7]}]},{"pos":[11956,11990],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12165,12170],"content":"Set()","needQuote":true,"needEscape":true,"nodes":[{"content":"Set()","pos":[0,5]}]},{"pos":[12452,12486],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12797,12838],"content":"SetAccessControl(EventWaitHandleSecurity)","needQuote":true,"needEscape":true,"nodes":[{"content":"SetAccessControl(EventWaitHandleSecurity)","pos":[0,41]}]},{"pos":[13320,13354],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13651,13690],"content":"TryOpenExisting(String,EventWaitHandle)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryOpenExisting(String,EventWaitHandle)","pos":[0,39]}]},{"pos":[14114,14148],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14230,14264],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14323,14357],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14820,14881],"content":"TryOpenExisting(String,EventWaitHandleRights,EventWaitHandle)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryOpenExisting(String,EventWaitHandleRights,EventWaitHandle)","pos":[0,61]}]},{"pos":[15409,15443],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15544,15578],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15660,15694],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15753,15787],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15974,16001],"content":"System.Threading.WaitHandle","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Threading.WaitHandle","pos":[0,27]}]},{"pos":[16167,16206],"content":"EventWaitHandle(Boolean,EventResetMode)","needQuote":true,"needEscape":true,"nodes":[{"content":"EventWaitHandle(Boolean,EventResetMode)","pos":[0,39]}]},{"pos":[16431,16438],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[16584,16598],"content":"EventResetMode","needQuote":true,"needEscape":true,"nodes":[{"content":"EventResetMode","pos":[0,14]}]},{"pos":[16853,16899],"content":"EventWaitHandle(Boolean,EventResetMode,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"EventWaitHandle(Boolean,EventResetMode,String)","pos":[0,46]}]},{"pos":[17138,17145],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[17291,17305],"content":"EventResetMode","needQuote":true,"needEscape":true,"nodes":[{"content":"EventResetMode","pos":[0,14]}]},{"pos":[17447,17453],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[17698,17752],"content":"EventWaitHandle(Boolean,EventResetMode,String,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"EventWaitHandle(Boolean,EventResetMode,String,Boolean)","pos":[0,54]}]},{"pos":[18007,18014],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[18160,18174],"content":"EventResetMode","needQuote":true,"needEscape":true,"nodes":[{"content":"EventResetMode","pos":[0,14]}]},{"pos":[18316,18322],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[18439,18446],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[18747,18825],"content":"EventWaitHandle(Boolean,EventResetMode,String,Boolean,EventWaitHandleSecurity)","needQuote":true,"needEscape":true,"nodes":[{"content":"EventWaitHandle(Boolean,EventResetMode,String,Boolean,EventWaitHandleSecurity)","pos":[0,78]}]},{"pos":[19128,19135],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[19281,19295],"content":"EventResetMode","needQuote":true,"needEscape":true,"nodes":[{"content":"EventResetMode","pos":[0,14]}]},{"pos":[19437,19443],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[19560,19567],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[19748,19771],"content":"EventWaitHandleSecurity","needQuote":true,"needEscape":true,"nodes":[{"content":"EventWaitHandleSecurity","pos":[0,23]}]},{"pos":[20006,20024],"content":"GetAccessControl()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetAccessControl()","pos":[0,18]}]},{"pos":[20269,20292],"content":"EventWaitHandleSecurity","needQuote":true,"needEscape":true,"nodes":[{"content":"EventWaitHandleSecurity","pos":[0,23]}]},{"pos":[20538,20558],"content":"OpenExisting(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"OpenExisting(String)","pos":[0,20]}]},{"pos":[20773,20788],"content":"EventWaitHandle","needQuote":true,"needEscape":true,"nodes":[{"content":"EventWaitHandle","pos":[0,15]}]},{"pos":[20932,20938],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[21179,21221],"content":"OpenExisting(String,EventWaitHandleRights)","needQuote":true,"needEscape":true,"nodes":[{"content":"OpenExisting(String,EventWaitHandleRights)","pos":[0,42]}]},{"pos":[21480,21495],"content":"EventWaitHandle","needQuote":true,"needEscape":true,"nodes":[{"content":"EventWaitHandle","pos":[0,15]}]},{"pos":[21639,21645],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[21822,21843],"content":"EventWaitHandleRights","needQuote":true,"needEscape":true,"nodes":[{"content":"EventWaitHandleRights","pos":[0,21]}]},{"pos":[22063,22070],"content":"Reset()","needQuote":true,"needEscape":true,"nodes":[{"content":"Reset()","pos":[0,7]}]},{"pos":[22231,22238],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[22405,22410],"content":"Set()","needQuote":true,"needEscape":true,"nodes":[{"content":"Set()","pos":[0,5]}]},{"pos":[22567,22574],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[22809,22850],"content":"SetAccessControl(EventWaitHandleSecurity)","needQuote":true,"needEscape":true,"nodes":[{"content":"SetAccessControl(EventWaitHandleSecurity)","pos":[0,41]}]},{"pos":[23141,23164],"content":"EventWaitHandleSecurity","needQuote":true,"needEscape":true,"nodes":[{"content":"EventWaitHandleSecurity","pos":[0,23]}]},{"pos":[23447,23486],"content":"TryOpenExisting(String,EventWaitHandle)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryOpenExisting(String,EventWaitHandle)","pos":[0,39]}]},{"pos":[23711,23718],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[23836,23842],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[23987,24002],"content":"EventWaitHandle","needQuote":true,"needEscape":true,"nodes":[{"content":"EventWaitHandle","pos":[0,15]}]},{"pos":[24308,24369],"content":"TryOpenExisting(String,EventWaitHandleRights,EventWaitHandle)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryOpenExisting(String,EventWaitHandleRights,EventWaitHandle)","pos":[0,61]}]},{"pos":[24638,24645],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[24763,24769],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[24946,24967],"content":"EventWaitHandleRights","needQuote":true,"needEscape":true,"nodes":[{"content":"EventWaitHandleRights","pos":[0,21]}]},{"pos":[25165,25180],"content":"EventWaitHandle","needQuote":true,"needEscape":true,"nodes":[{"content":"EventWaitHandle","pos":[0,15]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.EventWaitHandle\n  id: EventWaitHandle\n  children:\n  - System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode)\n  - System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)\n  - System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)\n  - System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)\n  - System.Threading.EventWaitHandle.GetAccessControl\n  - System.Threading.EventWaitHandle.OpenExisting(System.String)\n  - System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)\n  - System.Threading.EventWaitHandle.Reset\n  - System.Threading.EventWaitHandle.Set\n  - System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)\n  - System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)\n  - System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)\n  langs:\n  - csharp\n  name: EventWaitHandle\n  nameWithType: EventWaitHandle\n  fullName: System.Threading.EventWaitHandle\n  type: Class\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class EventWaitHandle : System.Threading.WaitHandle\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.Threading.WaitHandle\n  implements: []\n  inheritedMembers:\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Threading.WaitHandle.Close\n  - System.Threading.WaitHandle.Dispose\n  - System.Threading.WaitHandle.Dispose(System.Boolean)\n  - System.Threading.WaitHandle.Handle\n  - System.Threading.WaitHandle.InvalidHandle\n  - System.Threading.WaitHandle.SafeWaitHandle\n  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)\n  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)\n  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)\n  - System.Threading.WaitHandle.WaitOne\n  - System.Threading.WaitHandle.WaitOne(System.Int32)\n  - System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)\n  - System.Threading.WaitHandle.WaitOne(System.TimeSpan)\n  - System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)\n  - System.Threading.WaitHandle.WaitTimeout\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode)\n  id: '#ctor(System.Boolean,System.Threading.EventResetMode)'\n  parent: System.Threading.EventWaitHandle\n  langs:\n  - csharp\n  name: EventWaitHandle(Boolean,EventResetMode)\n  nameWithType: EventWaitHandle.EventWaitHandle(Boolean,EventResetMode)\n  fullName: System.Threading.EventWaitHandle.EventWaitHandle(Boolean,EventResetMode)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public EventWaitHandle (bool initialState, System.Threading.EventResetMode mode);\n    parameters:\n    - id: initialState\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: mode\n      type: System.Threading.EventResetMode\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)\n  id: '#ctor(System.Boolean,System.Threading.EventResetMode,System.String)'\n  parent: System.Threading.EventWaitHandle\n  langs:\n  - csharp\n  name: EventWaitHandle(Boolean,EventResetMode,String)\n  nameWithType: EventWaitHandle.EventWaitHandle(Boolean,EventResetMode,String)\n  fullName: System.Threading.EventWaitHandle.EventWaitHandle(Boolean,EventResetMode,String)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public EventWaitHandle (bool initialState, System.Threading.EventResetMode mode, string name);\n    parameters:\n    - id: initialState\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: mode\n      type: System.Threading.EventResetMode\n      description: Parameter description to be filled\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)\n  id: '#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)'\n  parent: System.Threading.EventWaitHandle\n  langs:\n  - csharp\n  name: EventWaitHandle(Boolean,EventResetMode,String,Boolean)\n  nameWithType: EventWaitHandle.EventWaitHandle(Boolean,EventResetMode,String,Boolean)\n  fullName: System.Threading.EventWaitHandle.EventWaitHandle(Boolean,EventResetMode,String,Boolean)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public EventWaitHandle (bool initialState, System.Threading.EventResetMode mode, string name, out bool createdNew);\n    parameters:\n    - id: initialState\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: mode\n      type: System.Threading.EventResetMode\n      description: Parameter description to be filled\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n    - id: createdNew\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)\n  id: '#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)'\n  parent: System.Threading.EventWaitHandle\n  langs:\n  - csharp\n  name: EventWaitHandle(Boolean,EventResetMode,String,Boolean,EventWaitHandleSecurity)\n  nameWithType: EventWaitHandle.EventWaitHandle(Boolean,EventResetMode,String,Boolean,EventWaitHandleSecurity)\n  fullName: System.Threading.EventWaitHandle.EventWaitHandle(Boolean,EventResetMode,String,Boolean,EventWaitHandleSecurity)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public EventWaitHandle (bool initialState, System.Threading.EventResetMode mode, string name, out bool createdNew, System.Security.AccessControl.EventWaitHandleSecurity eventSecurity);\n    parameters:\n    - id: initialState\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: mode\n      type: System.Threading.EventResetMode\n      description: Parameter description to be filled\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n    - id: createdNew\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: eventSecurity\n      type: System.Security.AccessControl.EventWaitHandleSecurity\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.EventWaitHandle.GetAccessControl\n  id: GetAccessControl\n  parent: System.Threading.EventWaitHandle\n  langs:\n  - csharp\n  name: GetAccessControl()\n  nameWithType: EventWaitHandle.GetAccessControl()\n  fullName: System.Threading.EventWaitHandle.GetAccessControl()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public System.Security.AccessControl.EventWaitHandleSecurity GetAccessControl ();\n    parameters: []\n    return:\n      type: System.Security.AccessControl.EventWaitHandleSecurity\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.EventWaitHandle.OpenExisting(System.String)\n  id: OpenExisting(System.String)\n  parent: System.Threading.EventWaitHandle\n  langs:\n  - csharp\n  name: OpenExisting(String)\n  nameWithType: EventWaitHandle.OpenExisting(String)\n  fullName: System.Threading.EventWaitHandle.OpenExisting(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public static System.Threading.EventWaitHandle OpenExisting (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n    return:\n      type: System.Threading.EventWaitHandle\n      description: Parameter description to be filled\n  overload: System.Threading.EventWaitHandle.OpenExisting*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)\n  id: OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)\n  parent: System.Threading.EventWaitHandle\n  langs:\n  - csharp\n  name: OpenExisting(String,EventWaitHandleRights)\n  nameWithType: EventWaitHandle.OpenExisting(String,EventWaitHandleRights)\n  fullName: System.Threading.EventWaitHandle.OpenExisting(String,EventWaitHandleRights)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public static System.Threading.EventWaitHandle OpenExisting (string name, System.Security.AccessControl.EventWaitHandleRights rights);\n    parameters:\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n    - id: rights\n      type: System.Security.AccessControl.EventWaitHandleRights\n      description: Parameter description to be filled\n    return:\n      type: System.Threading.EventWaitHandle\n      description: Parameter description to be filled\n  overload: System.Threading.EventWaitHandle.OpenExisting*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.EventWaitHandle.Reset\n  id: Reset\n  parent: System.Threading.EventWaitHandle\n  langs:\n  - csharp\n  name: Reset()\n  nameWithType: EventWaitHandle.Reset()\n  fullName: System.Threading.EventWaitHandle.Reset()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public bool Reset ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.EventWaitHandle.Set\n  id: Set\n  parent: System.Threading.EventWaitHandle\n  langs:\n  - csharp\n  name: Set()\n  nameWithType: EventWaitHandle.Set()\n  fullName: System.Threading.EventWaitHandle.Set()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public bool Set ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)\n  id: SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)\n  parent: System.Threading.EventWaitHandle\n  langs:\n  - csharp\n  name: SetAccessControl(EventWaitHandleSecurity)\n  nameWithType: EventWaitHandle.SetAccessControl(EventWaitHandleSecurity)\n  fullName: System.Threading.EventWaitHandle.SetAccessControl(EventWaitHandleSecurity)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public void SetAccessControl (System.Security.AccessControl.EventWaitHandleSecurity eventSecurity);\n    parameters:\n    - id: eventSecurity\n      type: System.Security.AccessControl.EventWaitHandleSecurity\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)\n  id: TryOpenExisting(System.String,System.Threading.EventWaitHandle@)\n  parent: System.Threading.EventWaitHandle\n  langs:\n  - csharp\n  name: TryOpenExisting(String,EventWaitHandle)\n  nameWithType: EventWaitHandle.TryOpenExisting(String,EventWaitHandle)\n  fullName: System.Threading.EventWaitHandle.TryOpenExisting(String,EventWaitHandle)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public static bool TryOpenExisting (string name, out System.Threading.EventWaitHandle result);\n    parameters:\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n    - id: result\n      type: System.Threading.EventWaitHandle\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Threading.EventWaitHandle.TryOpenExisting*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)\n  id: TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)\n  parent: System.Threading.EventWaitHandle\n  langs:\n  - csharp\n  name: TryOpenExisting(String,EventWaitHandleRights,EventWaitHandle)\n  nameWithType: EventWaitHandle.TryOpenExisting(String,EventWaitHandleRights,EventWaitHandle)\n  fullName: System.Threading.EventWaitHandle.TryOpenExisting(String,EventWaitHandleRights,EventWaitHandle)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public static bool TryOpenExisting (string name, System.Security.AccessControl.EventWaitHandleRights rights, out System.Threading.EventWaitHandle result);\n    parameters:\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n    - id: rights\n      type: System.Security.AccessControl.EventWaitHandleRights\n      description: Parameter description to be filled\n    - id: result\n      type: System.Threading.EventWaitHandle\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Threading.EventWaitHandle.TryOpenExisting*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Threading.WaitHandle\n  isExternal: false\n  name: System.Threading.WaitHandle\n- uid: System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode)\n  parent: System.Threading.EventWaitHandle\n  isExternal: false\n  name: EventWaitHandle(Boolean,EventResetMode)\n  nameWithType: EventWaitHandle.EventWaitHandle(Boolean,EventResetMode)\n  fullName: System.Threading.EventWaitHandle.EventWaitHandle(Boolean,EventResetMode)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.EventResetMode\n  parent: System.Threading\n  isExternal: false\n  name: EventResetMode\n  nameWithType: EventResetMode\n  fullName: System.Threading.EventResetMode\n- uid: System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)\n  parent: System.Threading.EventWaitHandle\n  isExternal: false\n  name: EventWaitHandle(Boolean,EventResetMode,String)\n  nameWithType: EventWaitHandle.EventWaitHandle(Boolean,EventResetMode,String)\n  fullName: System.Threading.EventWaitHandle.EventWaitHandle(Boolean,EventResetMode,String)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.EventResetMode\n  parent: System.Threading\n  isExternal: false\n  name: EventResetMode\n  nameWithType: EventResetMode\n  fullName: System.Threading.EventResetMode\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)\n  parent: System.Threading.EventWaitHandle\n  isExternal: false\n  name: EventWaitHandle(Boolean,EventResetMode,String,Boolean)\n  nameWithType: EventWaitHandle.EventWaitHandle(Boolean,EventResetMode,String,Boolean)\n  fullName: System.Threading.EventWaitHandle.EventWaitHandle(Boolean,EventResetMode,String,Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.EventResetMode\n  parent: System.Threading\n  isExternal: false\n  name: EventResetMode\n  nameWithType: EventResetMode\n  fullName: System.Threading.EventResetMode\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)\n  parent: System.Threading.EventWaitHandle\n  isExternal: false\n  name: EventWaitHandle(Boolean,EventResetMode,String,Boolean,EventWaitHandleSecurity)\n  nameWithType: EventWaitHandle.EventWaitHandle(Boolean,EventResetMode,String,Boolean,EventWaitHandleSecurity)\n  fullName: System.Threading.EventWaitHandle.EventWaitHandle(Boolean,EventResetMode,String,Boolean,EventWaitHandleSecurity)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.EventResetMode\n  parent: System.Threading\n  isExternal: false\n  name: EventResetMode\n  nameWithType: EventResetMode\n  fullName: System.Threading.EventResetMode\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.AccessControl.EventWaitHandleSecurity\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: EventWaitHandleSecurity\n  nameWithType: EventWaitHandleSecurity\n  fullName: System.Security.AccessControl.EventWaitHandleSecurity\n- uid: System.Threading.EventWaitHandle.GetAccessControl\n  parent: System.Threading.EventWaitHandle\n  isExternal: false\n  name: GetAccessControl()\n  nameWithType: EventWaitHandle.GetAccessControl()\n  fullName: System.Threading.EventWaitHandle.GetAccessControl()\n- uid: System.Security.AccessControl.EventWaitHandleSecurity\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: EventWaitHandleSecurity\n  nameWithType: EventWaitHandleSecurity\n  fullName: System.Security.AccessControl.EventWaitHandleSecurity\n- uid: System.Threading.EventWaitHandle.OpenExisting(System.String)\n  parent: System.Threading.EventWaitHandle\n  isExternal: false\n  name: OpenExisting(String)\n  nameWithType: EventWaitHandle.OpenExisting(String)\n  fullName: System.Threading.EventWaitHandle.OpenExisting(String)\n- uid: System.Threading.EventWaitHandle\n  parent: System.Threading\n  isExternal: false\n  name: EventWaitHandle\n  nameWithType: EventWaitHandle\n  fullName: System.Threading.EventWaitHandle\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)\n  parent: System.Threading.EventWaitHandle\n  isExternal: false\n  name: OpenExisting(String,EventWaitHandleRights)\n  nameWithType: EventWaitHandle.OpenExisting(String,EventWaitHandleRights)\n  fullName: System.Threading.EventWaitHandle.OpenExisting(String,EventWaitHandleRights)\n- uid: System.Threading.EventWaitHandle\n  parent: System.Threading\n  isExternal: false\n  name: EventWaitHandle\n  nameWithType: EventWaitHandle\n  fullName: System.Threading.EventWaitHandle\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.AccessControl.EventWaitHandleRights\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: EventWaitHandleRights\n  nameWithType: EventWaitHandleRights\n  fullName: System.Security.AccessControl.EventWaitHandleRights\n- uid: System.Threading.EventWaitHandle.Reset\n  parent: System.Threading.EventWaitHandle\n  isExternal: false\n  name: Reset()\n  nameWithType: EventWaitHandle.Reset()\n  fullName: System.Threading.EventWaitHandle.Reset()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.EventWaitHandle.Set\n  parent: System.Threading.EventWaitHandle\n  isExternal: false\n  name: Set()\n  nameWithType: EventWaitHandle.Set()\n  fullName: System.Threading.EventWaitHandle.Set()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)\n  parent: System.Threading.EventWaitHandle\n  isExternal: false\n  name: SetAccessControl(EventWaitHandleSecurity)\n  nameWithType: EventWaitHandle.SetAccessControl(EventWaitHandleSecurity)\n  fullName: System.Threading.EventWaitHandle.SetAccessControl(EventWaitHandleSecurity)\n- uid: System.Security.AccessControl.EventWaitHandleSecurity\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: EventWaitHandleSecurity\n  nameWithType: EventWaitHandleSecurity\n  fullName: System.Security.AccessControl.EventWaitHandleSecurity\n- uid: System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)\n  parent: System.Threading.EventWaitHandle\n  isExternal: false\n  name: TryOpenExisting(String,EventWaitHandle)\n  nameWithType: EventWaitHandle.TryOpenExisting(String,EventWaitHandle)\n  fullName: System.Threading.EventWaitHandle.TryOpenExisting(String,EventWaitHandle)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Threading.EventWaitHandle\n  parent: System.Threading\n  isExternal: false\n  name: EventWaitHandle\n  nameWithType: EventWaitHandle\n  fullName: System.Threading.EventWaitHandle\n- uid: System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)\n  parent: System.Threading.EventWaitHandle\n  isExternal: false\n  name: TryOpenExisting(String,EventWaitHandleRights,EventWaitHandle)\n  nameWithType: EventWaitHandle.TryOpenExisting(String,EventWaitHandleRights,EventWaitHandle)\n  fullName: System.Threading.EventWaitHandle.TryOpenExisting(String,EventWaitHandleRights,EventWaitHandle)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.AccessControl.EventWaitHandleRights\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: EventWaitHandleRights\n  nameWithType: EventWaitHandleRights\n  fullName: System.Security.AccessControl.EventWaitHandleRights\n- uid: System.Threading.EventWaitHandle\n  parent: System.Threading\n  isExternal: false\n  name: EventWaitHandle\n  nameWithType: EventWaitHandle\n  fullName: System.Threading.EventWaitHandle\n- uid: System.Threading.EventWaitHandle.OpenExisting*\n  parent: System.Threading.EventWaitHandle\n  isExternal: false\n  nameWithType: EventWaitHandle.\n- uid: System.Threading.EventWaitHandle.TryOpenExisting*\n  parent: System.Threading.EventWaitHandle\n  isExternal: false\n  nameWithType: EventWaitHandle.\n"}