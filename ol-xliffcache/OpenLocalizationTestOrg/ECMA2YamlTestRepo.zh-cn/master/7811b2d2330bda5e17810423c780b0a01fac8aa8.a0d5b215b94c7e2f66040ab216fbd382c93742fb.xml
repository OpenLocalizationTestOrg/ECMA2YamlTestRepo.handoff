{"nodes":[{"pos":[444,465],"content":"Lookup<TKey,TElement>","needQuote":true,"needEscape":true,"nodes":[{"content":"Lookup&lt;TKey,TElement&gt;","pos":[0,21],"source":"Lookup<TKey,TElement>"}]},{"pos":[793,827],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[866,900],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[1678,1739],"content":"ApplyResultSelector(Func&lt;TKey,IEnumerable<ph id=\"ph1\">&lt;TElement&gt;</ph>,TResult&gt;)","needQuote":true,"needEscape":true,"source":"ApplyResultSelector(Func<TKey,IEnumerable<TElement>,TResult>)"},{"pos":[2358,2392],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2484,2518],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2687,2701],"content":"Contains(TKey)","needQuote":true,"needEscape":true,"nodes":[{"content":"Contains(TKey)","pos":[0,14]}]},{"pos":[3008,3042],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3101,3135],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3290,3295],"content":"Count","needQuote":true,"needEscape":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[3569,3603],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3774,3789],"content":"GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[4240,4274],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4435,4445],"content":"Item(TKey)","needQuote":true,"needEscape":true,"nodes":[{"content":"Item(TKey)","pos":[0,10]}]},{"pos":[4793,4827],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4920,4954],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5201,5247],"content":"System.Collections.IEnumerable.GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IEnumerable.GetEnumerator()","pos":[0,46]}]},{"pos":[5673,5707],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5818,5831],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[6006,6067],"content":"ApplyResultSelector(Func&lt;TKey,IEnumerable<ph id=\"ph1\">&lt;TElement&gt;</ph>,TResult&gt;)","needQuote":true,"needEscape":true,"source":"ApplyResultSelector(Func<TKey,IEnumerable<TElement>,TResult>)"},{"pos":[6396,6416],"content":"IEnumerable<ph id=\"ph1\">&lt;TResult&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<TResult>"},{"pos":[6640,6680],"content":"Func&lt;TKey,IEnumerable<ph id=\"ph1\">&lt;TElement&gt;</ph>,TResult&gt;","needQuote":true,"needEscape":true,"source":"Func<TKey,IEnumerable<TElement>,TResult>"},{"pos":[6925,6939],"content":"Contains(TKey)","needQuote":true,"needEscape":true,"nodes":[{"content":"Contains(TKey)","pos":[0,14]}]},{"pos":[7121,7128],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[7232,7236],"content":"TKey","needQuote":true,"needEscape":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[7368,7373],"content":"Count","needQuote":true,"needEscape":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[7535,7540],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[7689,7704],"content":"GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[7970,8007],"content":"IEnumerator<IGrouping<TKey,TElement>>","needQuote":true,"needEscape":true,"nodes":[{"content":"IEnumerator&lt;IGrouping&lt;TKey,TElement&gt;&gt;","pos":[0,37],"source":"IEnumerator<IGrouping<TKey,TElement>>"}]},{"pos":[8247,8257],"content":"Item(TKey)","needQuote":true,"needEscape":true,"nodes":[{"content":"Item(TKey)","pos":[0,10]}]},{"pos":[8485,8506],"content":"IEnumerable<ph id=\"ph1\">&lt;TElement&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<TElement>"},{"pos":[8658,8662],"content":"TKey","needQuote":true,"needEscape":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[8833,8879],"content":"System.Collections.IEnumerable.GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IEnumerable.GetEnumerator()","pos":[0,46]}]},{"pos":[9153,9164],"content":"IEnumerator","needQuote":true,"needEscape":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Linq.Lookup`2\n  id: Lookup`2\n  children:\n  - System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})\n  - System.Linq.Lookup`2.Contains(`0)\n  - System.Linq.Lookup`2.Count\n  - System.Linq.Lookup`2.GetEnumerator\n  - System.Linq.Lookup`2.Item(`0)\n  - System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator\n  langs:\n  - csharp\n  name: Lookup<TKey,TElement>\n  nameWithType: Lookup<TKey,TElement>\n  fullName: System.Linq.Lookup<TKey,TElement>\n  type: Class\n  syntax:\n    content: 'public class Lookup<TKey,TElement> : System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey,TElement>>, System.Linq.ILookup<TKey,TElement>'\n    typeParameters:\n    - id: TKey\n      description: Parameter description to be filled\n    - id: TElement\n      description: Parameter description to be filled\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey,TElement>>\n  - System.Linq.ILookup<TKey,TElement>\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})\n  id: ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})\n  parent: System.Linq.Lookup`2\n  langs:\n  - csharp\n  name: ApplyResultSelector(Func<TKey,IEnumerable<TElement>,TResult>)\n  nameWithType: Lookup<TKey,TElement>.ApplyResultSelector(Func<TKey,IEnumerable<TElement>,TResult>)\n  fullName: System.Linq.Lookup<TKey,TElement>.ApplyResultSelector(Func<TKey,IEnumerable<TElement>,TResult>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<TResult> ApplyResultSelector<TResult> (Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult> resultSelector);\n    parameters:\n    - id: resultSelector\n      type: System.Func{TKey,System.Collections.Generic.IEnumerable{TElement},TResult}\n      description: Parameter description to be filled\n    return:\n      type: System.Collections.Generic.IEnumerable{TResult}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Lookup`2.Contains(`0)\n  id: Contains(`0)\n  parent: System.Linq.Lookup`2\n  langs:\n  - csharp\n  name: Contains(TKey)\n  nameWithType: Lookup<TKey,TElement>.Contains(TKey)\n  fullName: System.Linq.Lookup<TKey,TElement>.Contains(TKey)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq\n  syntax:\n    content: public bool Contains (TKey key);\n    parameters:\n    - id: key\n      type: TKey\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Lookup`2.Count\n  id: Count\n  parent: System.Linq.Lookup`2\n  langs:\n  - csharp\n  name: Count\n  nameWithType: Lookup<TKey,TElement>.Count\n  fullName: System.Linq.Lookup<TKey,TElement>.Count\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Linq\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Lookup`2.GetEnumerator\n  id: GetEnumerator\n  parent: System.Linq.Lookup`2\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: Lookup<TKey,TElement>.GetEnumerator()\n  fullName: System.Linq.Lookup<TKey,TElement>.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq\n  syntax:\n    content: public System.Collections.Generic.IEnumerator<System.Linq.IGrouping<TKey,TElement>> GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{System.Linq.IGrouping{TKey,TElement}}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Lookup`2.Item(`0)\n  id: Item(`0)\n  parent: System.Linq.Lookup`2\n  langs:\n  - csharp\n  name: Item(TKey)\n  nameWithType: Lookup<TKey,TElement>.Item(TKey)\n  fullName: System.Linq.Lookup<TKey,TElement>.Item(TKey)\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Linq\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<TElement> this[TKey key] { get; }\n    parameters:\n    - id: key\n      type: TKey\n      description: Parameter description to be filled\n    return:\n      type: System.Collections.Generic.IEnumerable{TElement}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Linq.Lookup`2\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: Lookup<TKey,TElement>.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Linq.Lookup<TKey,TElement>.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})\n  parent: System.Linq.Lookup`2\n  isExternal: false\n  name: ApplyResultSelector(Func<TKey,IEnumerable<TElement>,TResult>)\n  nameWithType: Lookup<TKey,TElement>.ApplyResultSelector(Func<TKey,IEnumerable<TElement>,TResult>)\n  fullName: System.Linq.Lookup<TKey,TElement>.ApplyResultSelector(Func<TKey,IEnumerable<TElement>,TResult>)\n- uid: System.Collections.Generic.IEnumerable{TResult}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TResult>\n  nameWithType: IEnumerable<TResult>\n  fullName: System.Collections.Generic.IEnumerable<TResult>\n- uid: System.Func{TKey,System.Collections.Generic.IEnumerable{TElement},TResult}\n  parent: System\n  isExternal: true\n  name: Func<TKey,IEnumerable<TElement>,TResult>\n  nameWithType: Func<TKey,IEnumerable<TElement>,TResult>\n  fullName: System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>\n- uid: System.Linq.Lookup`2.Contains(`0)\n  parent: System.Linq.Lookup`2\n  isExternal: false\n  name: Contains(TKey)\n  nameWithType: Lookup<TKey,TElement>.Contains(TKey)\n  fullName: System.Linq.Lookup<TKey,TElement>.Contains(TKey)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: TKey\n  parent: ''\n  isExternal: true\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: System.Linq.Lookup`2.Count\n  parent: System.Linq.Lookup`2\n  isExternal: false\n  name: Count\n  nameWithType: Lookup<TKey,TElement>.Count\n  fullName: System.Linq.Lookup<TKey,TElement>.Count\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Linq.Lookup`2.GetEnumerator\n  parent: System.Linq.Lookup`2\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: Lookup<TKey,TElement>.GetEnumerator()\n  fullName: System.Linq.Lookup<TKey,TElement>.GetEnumerator()\n- uid: System.Collections.Generic.IEnumerator{System.Linq.IGrouping{TKey,TElement}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerator<IGrouping<TKey,TElement>>\n  nameWithType: IEnumerator<IGrouping<TKey,TElement>>\n  fullName: System.Collections.Generic.IEnumerator<System.Linq.IGrouping<TKey,TElement>>\n- uid: System.Linq.Lookup`2.Item(`0)\n  parent: System.Linq.Lookup`2\n  isExternal: false\n  name: Item(TKey)\n  nameWithType: Lookup<TKey,TElement>.Item(TKey)\n  fullName: System.Linq.Lookup<TKey,TElement>.Item(TKey)\n- uid: System.Collections.Generic.IEnumerable{TElement}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TElement>\n  nameWithType: IEnumerable<TElement>\n  fullName: System.Collections.Generic.IEnumerable<TElement>\n- uid: TKey\n  parent: ''\n  isExternal: true\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Linq.Lookup`2\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: Lookup<TKey,TElement>.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Linq.Lookup<TKey,TElement>.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n"}