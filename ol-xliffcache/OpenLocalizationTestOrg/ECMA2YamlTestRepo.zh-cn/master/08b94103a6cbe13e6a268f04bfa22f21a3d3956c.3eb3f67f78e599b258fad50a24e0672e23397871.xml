{"nodes":[{"pos":[661,669],"content":"SpinLock","needQuote":true,"needEscape":true,"nodes":[{"content":"SpinLock","pos":[0,8]}]},{"pos":[1310,1327],"content":"SpinLock(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"SpinLock(Boolean)","pos":[0,17]}]},{"pos":[1675,1709],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[1908,1922],"content":"Enter(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Enter(Boolean)","pos":[0,14]}]},{"pos":[2233,2267],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2430,2436],"content":"Exit()","needQuote":true,"needEscape":true,"nodes":[{"content":"Exit()","pos":[0,6]}]},{"pos":[2887,2900],"content":"Exit(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Exit(Boolean)","pos":[0,13]}]},{"pos":[3218,3252],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3463,3469],"content":"IsHeld","needQuote":true,"needEscape":true,"nodes":[{"content":"IsHeld","pos":[0,6]}]},{"pos":[3730,3764],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3961,3982],"content":"IsHeldByCurrentThread","needQuote":true,"needEscape":true,"nodes":[{"content":"IsHeldByCurrentThread","pos":[0,21]}]},{"pos":[4288,4322],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4533,4561],"content":"IsThreadOwnerTrackingEnabled","needQuote":true,"needEscape":true,"nodes":[{"content":"IsThreadOwnerTrackingEnabled","pos":[0,28]}]},{"pos":[4888,4922],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5127,5144],"content":"TryEnter(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryEnter(Boolean)","pos":[0,17]}]},{"pos":[5464,5498],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5777,5800],"content":"TryEnter(Int32,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryEnter(Int32,Boolean)","pos":[0,23]}]},{"pos":[6165,6199],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6266,6300],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6585,6611],"content":"TryEnter(TimeSpan,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryEnter(TimeSpan,Boolean)","pos":[0,26]}]},{"pos":[6966,7000],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7067,7101],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7263,7279],"content":"System.ValueType","needQuote":true,"needEscape":true,"nodes":[{"content":"System.ValueType","pos":[0,16]}]},{"pos":[7399,7416],"content":"SpinLock(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"SpinLock(Boolean)","pos":[0,17]}]},{"pos":[7583,7590],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[7762,7776],"content":"Enter(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Enter(Boolean)","pos":[0,14]}]},{"pos":[7937,7944],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[8098,8104],"content":"Exit()","needQuote":true,"needEscape":true,"nodes":[{"content":"Exit()","pos":[0,6]}]},{"pos":[8300,8313],"content":"Exit(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Exit(Boolean)","pos":[0,13]}]},{"pos":[8472,8479],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[8635,8641],"content":"IsHeld","needQuote":true,"needEscape":true,"nodes":[{"content":"IsHeld","pos":[0,6]}]},{"pos":[8786,8793],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[8964,8985],"content":"IsHeldByCurrentThread","needQuote":true,"needEscape":true,"nodes":[{"content":"IsHeldByCurrentThread","pos":[0,21]}]},{"pos":[9160,9167],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[9345,9373],"content":"IsThreadOwnerTrackingEnabled","needQuote":true,"needEscape":true,"nodes":[{"content":"IsThreadOwnerTrackingEnabled","pos":[0,28]}]},{"pos":[9562,9569],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[9744,9761],"content":"TryEnter(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryEnter(Boolean)","pos":[0,17]}]},{"pos":[9928,9935],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[10123,10146],"content":"TryEnter(Int32,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryEnter(Int32,Boolean)","pos":[0,23]}]},{"pos":[10323,10328],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[10443,10450],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[10641,10667],"content":"TryEnter(TimeSpan,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryEnter(TimeSpan,Boolean)","pos":[0,26]}]},{"pos":[10853,10861],"content":"TimeSpan","needQuote":true,"needEscape":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[10982,10989],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.SpinLock\n  id: SpinLock\n  children:\n  - System.Threading.SpinLock.#ctor(System.Boolean)\n  - System.Threading.SpinLock.Enter(System.Boolean@)\n  - System.Threading.SpinLock.Exit\n  - System.Threading.SpinLock.Exit(System.Boolean)\n  - System.Threading.SpinLock.IsHeld\n  - System.Threading.SpinLock.IsHeldByCurrentThread\n  - System.Threading.SpinLock.IsThreadOwnerTrackingEnabled\n  - System.Threading.SpinLock.TryEnter(System.Boolean@)\n  - System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)\n  - System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)\n  langs:\n  - csharp\n  name: SpinLock\n  nameWithType: SpinLock\n  fullName: System.Threading.SpinLock\n  type: Struct\n  syntax:\n    content: >-\n      [System.Diagnostics.DebuggerDisplay(\"IsHeld = {IsHeld}\")]\n\n      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.SpinLock/SystemThreading_SpinLockDebugView))]\n\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public struct SpinLock\n  inheritance:\n  - System.Object\n  - System.ValueType\n  implements: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.SpinLock.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: System.Threading.SpinLock\n  langs:\n  - csharp\n  name: SpinLock(Boolean)\n  nameWithType: SpinLock.SpinLock(Boolean)\n  fullName: System.Threading.SpinLock.SpinLock(Boolean)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public SpinLock (bool enableThreadOwnerTracking);\n    parameters:\n    - id: enableThreadOwnerTracking\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.SpinLock.Enter(System.Boolean@)\n  id: Enter(System.Boolean@)\n  parent: System.Threading.SpinLock\n  langs:\n  - csharp\n  name: Enter(Boolean)\n  nameWithType: SpinLock.Enter(Boolean)\n  fullName: System.Threading.SpinLock.Enter(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public void Enter (ref bool lockTaken);\n    parameters:\n    - id: lockTaken\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.SpinLock.Exit\n  id: Exit\n  parent: System.Threading.SpinLock\n  langs:\n  - csharp\n  name: Exit()\n  nameWithType: SpinLock.Exit()\n  fullName: System.Threading.SpinLock.Exit()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public void Exit ();\n    parameters: []\n  overload: System.Threading.SpinLock.Exit*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.SpinLock.Exit(System.Boolean)\n  id: Exit(System.Boolean)\n  parent: System.Threading.SpinLock\n  langs:\n  - csharp\n  name: Exit(Boolean)\n  nameWithType: SpinLock.Exit(Boolean)\n  fullName: System.Threading.SpinLock.Exit(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public void Exit (bool useMemoryBarrier);\n    parameters:\n    - id: useMemoryBarrier\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Threading.SpinLock.Exit*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.SpinLock.IsHeld\n  id: IsHeld\n  parent: System.Threading.SpinLock\n  langs:\n  - csharp\n  name: IsHeld\n  nameWithType: SpinLock.IsHeld\n  fullName: System.Threading.SpinLock.IsHeld\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public bool IsHeld { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.SpinLock.IsHeldByCurrentThread\n  id: IsHeldByCurrentThread\n  parent: System.Threading.SpinLock\n  langs:\n  - csharp\n  name: IsHeldByCurrentThread\n  nameWithType: SpinLock.IsHeldByCurrentThread\n  fullName: System.Threading.SpinLock.IsHeldByCurrentThread\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public bool IsHeldByCurrentThread { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.SpinLock.IsThreadOwnerTrackingEnabled\n  id: IsThreadOwnerTrackingEnabled\n  parent: System.Threading.SpinLock\n  langs:\n  - csharp\n  name: IsThreadOwnerTrackingEnabled\n  nameWithType: SpinLock.IsThreadOwnerTrackingEnabled\n  fullName: System.Threading.SpinLock.IsThreadOwnerTrackingEnabled\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public bool IsThreadOwnerTrackingEnabled { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.SpinLock.TryEnter(System.Boolean@)\n  id: TryEnter(System.Boolean@)\n  parent: System.Threading.SpinLock\n  langs:\n  - csharp\n  name: TryEnter(Boolean)\n  nameWithType: SpinLock.TryEnter(Boolean)\n  fullName: System.Threading.SpinLock.TryEnter(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public void TryEnter (ref bool lockTaken);\n    parameters:\n    - id: lockTaken\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Threading.SpinLock.TryEnter*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)\n  id: TryEnter(System.Int32,System.Boolean@)\n  parent: System.Threading.SpinLock\n  langs:\n  - csharp\n  name: TryEnter(Int32,Boolean)\n  nameWithType: SpinLock.TryEnter(Int32,Boolean)\n  fullName: System.Threading.SpinLock.TryEnter(Int32,Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public void TryEnter (int millisecondsTimeout, ref bool lockTaken);\n    parameters:\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: lockTaken\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Threading.SpinLock.TryEnter*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)\n  id: TryEnter(System.TimeSpan,System.Boolean@)\n  parent: System.Threading.SpinLock\n  langs:\n  - csharp\n  name: TryEnter(TimeSpan,Boolean)\n  nameWithType: SpinLock.TryEnter(TimeSpan,Boolean)\n  fullName: System.Threading.SpinLock.TryEnter(TimeSpan,Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public void TryEnter (TimeSpan timeout, ref bool lockTaken);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: Parameter description to be filled\n    - id: lockTaken\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Threading.SpinLock.TryEnter*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.ValueType\n  isExternal: false\n  name: System.ValueType\n- uid: System.Threading.SpinLock.#ctor(System.Boolean)\n  parent: System.Threading.SpinLock\n  isExternal: false\n  name: SpinLock(Boolean)\n  nameWithType: SpinLock.SpinLock(Boolean)\n  fullName: System.Threading.SpinLock.SpinLock(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.SpinLock.Enter(System.Boolean@)\n  parent: System.Threading.SpinLock\n  isExternal: false\n  name: Enter(Boolean)\n  nameWithType: SpinLock.Enter(Boolean)\n  fullName: System.Threading.SpinLock.Enter(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.SpinLock.Exit\n  parent: System.Threading.SpinLock\n  isExternal: false\n  name: Exit()\n  nameWithType: SpinLock.Exit()\n  fullName: System.Threading.SpinLock.Exit()\n- uid: System.Threading.SpinLock.Exit(System.Boolean)\n  parent: System.Threading.SpinLock\n  isExternal: false\n  name: Exit(Boolean)\n  nameWithType: SpinLock.Exit(Boolean)\n  fullName: System.Threading.SpinLock.Exit(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.SpinLock.IsHeld\n  parent: System.Threading.SpinLock\n  isExternal: false\n  name: IsHeld\n  nameWithType: SpinLock.IsHeld\n  fullName: System.Threading.SpinLock.IsHeld\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.SpinLock.IsHeldByCurrentThread\n  parent: System.Threading.SpinLock\n  isExternal: false\n  name: IsHeldByCurrentThread\n  nameWithType: SpinLock.IsHeldByCurrentThread\n  fullName: System.Threading.SpinLock.IsHeldByCurrentThread\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.SpinLock.IsThreadOwnerTrackingEnabled\n  parent: System.Threading.SpinLock\n  isExternal: false\n  name: IsThreadOwnerTrackingEnabled\n  nameWithType: SpinLock.IsThreadOwnerTrackingEnabled\n  fullName: System.Threading.SpinLock.IsThreadOwnerTrackingEnabled\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.SpinLock.TryEnter(System.Boolean@)\n  parent: System.Threading.SpinLock\n  isExternal: false\n  name: TryEnter(Boolean)\n  nameWithType: SpinLock.TryEnter(Boolean)\n  fullName: System.Threading.SpinLock.TryEnter(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)\n  parent: System.Threading.SpinLock\n  isExternal: false\n  name: TryEnter(Int32,Boolean)\n  nameWithType: SpinLock.TryEnter(Int32,Boolean)\n  fullName: System.Threading.SpinLock.TryEnter(Int32,Boolean)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)\n  parent: System.Threading.SpinLock\n  isExternal: false\n  name: TryEnter(TimeSpan,Boolean)\n  nameWithType: SpinLock.TryEnter(TimeSpan,Boolean)\n  fullName: System.Threading.SpinLock.TryEnter(TimeSpan,Boolean)\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.SpinLock.Exit*\n  parent: System.Threading.SpinLock\n  isExternal: false\n  nameWithType: SpinLock.\n- uid: System.Threading.SpinLock.TryEnter*\n  parent: System.Threading.SpinLock\n  isExternal: false\n  nameWithType: SpinLock.\n"}