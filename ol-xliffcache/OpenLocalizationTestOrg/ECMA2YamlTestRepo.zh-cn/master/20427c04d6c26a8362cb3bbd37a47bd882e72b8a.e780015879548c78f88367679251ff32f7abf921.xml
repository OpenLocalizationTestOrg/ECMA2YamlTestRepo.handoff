{"nodes":[{"pos":[2587,2611],"content":"DSACryptoServiceProvider","needQuote":true,"needEscape":true,"nodes":[{"content":"DSACryptoServiceProvider","pos":[0,24]}]},{"pos":[4979,5005],"content":"DSACryptoServiceProvider()","needQuote":true,"needEscape":true,"nodes":[{"content":"DSACryptoServiceProvider()","pos":[0,26]}]},{"pos":[5584,5615],"content":"DSACryptoServiceProvider(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"DSACryptoServiceProvider(Int32)","pos":[0,31]}]},{"pos":[6028,6062],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6373,6412],"content":"DSACryptoServiceProvider(CspParameters)","needQuote":true,"needEscape":true,"nodes":[{"content":"DSACryptoServiceProvider(CspParameters)","pos":[0,39]}]},{"pos":[6912,6946],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7283,7328],"content":"DSACryptoServiceProvider(Int32,CspParameters)","needQuote":true,"needEscape":true,"nodes":[{"content":"DSACryptoServiceProvider(Int32,CspParameters)","pos":[0,45]}]},{"pos":[7824,7858],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7954,7988],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8259,8282],"content":"CreateSignature(Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"CreateSignature(Byte[])","pos":[0,23]}]},{"pos":[8681,8715],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8773,8807],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9056,9075],"content":"CspKeyContainerInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"CspKeyContainerInfo","pos":[0,19]}]},{"pos":[9509,9543],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9800,9816],"content":"Dispose(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[10197,10231],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10500,10522],"content":"ExportCspBlob(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"ExportCspBlob(Boolean)","pos":[0,22]}]},{"pos":[10941,10975],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11033,11067],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11342,11367],"content":"ExportParameters(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"ExportParameters(Boolean)","pos":[0,25]}]},{"pos":[11840,11874],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11961,11995],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12352,12386],"content":"HashData(Stream,HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"HashData(Stream,HashAlgorithmName)","pos":[0,34]}]},{"pos":[12872,12906],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13009,13043],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13101,13135],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13614,13660],"content":"HashData(Byte[],Int32,Int32,HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"HashData(Byte[],Int32,Int32,HashAlgorithmName)","pos":[0,46]}]},{"pos":[14180,14214],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14276,14310],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14371,14405],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14508,14542],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14600,14634],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14977,14998],"content":"ImportCspBlob(Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"ImportCspBlob(Byte[])","pos":[0,21]}]},{"pos":[15380,15414],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15745,15776],"content":"ImportParameters(DSAParameters)","needQuote":true,"needEscape":true,"nodes":[{"content":"ImportParameters(DSAParameters)","pos":[0,31]}]},{"pos":[16261,16295],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16546,16566],"content":"KeyExchangeAlgorithm","needQuote":true,"needEscape":true,"nodes":[{"content":"KeyExchangeAlgorithm","pos":[0,20]}]},{"pos":[16935,16969],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17194,17201],"content":"KeySize","needQuote":true,"needEscape":true,"nodes":[{"content":"KeySize","pos":[0,7]}]},{"pos":[17527,17561],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17802,17817],"content":"PersistKeyInCsp","needQuote":true,"needEscape":true,"nodes":[{"content":"PersistKeyInCsp","pos":[0,15]}]},{"pos":[18166,18200],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18431,18441],"content":"PublicOnly","needQuote":true,"needEscape":true,"nodes":[{"content":"PublicOnly","pos":[0,10]}]},{"pos":[18770,18804],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19051,19069],"content":"SignatureAlgorithm","needQuote":true,"needEscape":true,"nodes":[{"content":"SignatureAlgorithm","pos":[0,18]}]},{"pos":[19432,19466],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19723,19739],"content":"SignData(Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"SignData(Byte[])","pos":[0,16]}]},{"pos":[20106,20140],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20198,20232],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20571,20587],"content":"SignData(Stream)","needQuote":true,"needEscape":true,"nodes":[{"content":"SignData(Stream)","pos":[0,16]}]},{"pos":[20977,21011],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21069,21103],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21488,21516],"content":"SignData(Byte[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"SignData(Byte[],Int32,Int32)","pos":[0,28]}]},{"pos":[21930,21964],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22026,22060],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22121,22155],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22213,22247],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22608,22631],"content":"SignHash(Byte[],String)","needQuote":true,"needEscape":true,"nodes":[{"content":"SignHash(Byte[],String)","pos":[0,23]}]},{"pos":[23026,23060],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[23120,23154],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[23212,23246],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[23493,23511],"content":"UseMachineKeyStore","needQuote":true,"needEscape":true,"nodes":[{"content":"UseMachineKeyStore","pos":[0,18]}]},{"pos":[23876,23910],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[24199,24224],"content":"VerifyData(Byte[],Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"VerifyData(Byte[],Byte[])","pos":[0,25]}]},{"pos":[24632,24666],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[24735,24769],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[24828,24862],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[25179,25211],"content":"VerifyHash(Byte[],String,Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"VerifyHash(Byte[],String,Byte[])","pos":[0,32]}]},{"pos":[25645,25679],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[25739,25773],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[25842,25876],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[25935,25969],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[26268,26298],"content":"VerifySignature(Byte[],Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"VerifySignature(Byte[],Byte[])","pos":[0,30]}]},{"pos":[26730,26764],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[26833,26867],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[26926,26960],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[27090,27122],"content":"System.Security.Cryptography.DSA","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Security.Cryptography.DSA","pos":[0,32]}]},{"pos":[27282,27308],"content":"DSACryptoServiceProvider()","needQuote":true,"needEscape":true,"nodes":[{"content":"DSACryptoServiceProvider()","pos":[0,26]}]},{"pos":[27643,27674],"content":"DSACryptoServiceProvider(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"DSACryptoServiceProvider(Int32)","pos":[0,31]}]},{"pos":[27911,27916],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28167,28206],"content":"DSACryptoServiceProvider(CspParameters)","needQuote":true,"needEscape":true,"nodes":[{"content":"DSACryptoServiceProvider(CspParameters)","pos":[0,39]}]},{"pos":[28511,28524],"content":"CspParameters","needQuote":true,"needEscape":true,"nodes":[{"content":"CspParameters","pos":[0,13]}]},{"pos":[28826,28871],"content":"DSACryptoServiceProvider(Int32,CspParameters)","needQuote":true,"needEscape":true,"nodes":[{"content":"DSACryptoServiceProvider(Int32,CspParameters)","pos":[0,45]}]},{"pos":[29136,29141],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[29306,29319],"content":"CspParameters","needQuote":true,"needEscape":true,"nodes":[{"content":"CspParameters","pos":[0,13]}]},{"pos":[29589,29612],"content":"CreateSignature(Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"CreateSignature(Byte[])","pos":[0,23]}]},{"pos":[29832,29836],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[29948,29952],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[30173,30192],"content":"CspKeyContainerInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"CspKeyContainerInfo","pos":[0,19]}]},{"pos":[30463,30482],"content":"CspKeyContainerInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"CspKeyContainerInfo","pos":[0,19]}]},{"pos":[30757,30773],"content":"Dispose(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[30982,30989],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[31224,31246],"content":"ExportCspBlob(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"ExportCspBlob(Boolean)","pos":[0,22]}]},{"pos":[31464,31468],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[31583,31590],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[31828,31853],"content":"ExportParameters(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"ExportParameters(Boolean)","pos":[0,25]}]},{"pos":[32130,32143],"content":"DSAParameters","needQuote":true,"needEscape":true,"nodes":[{"content":"DSAParameters","pos":[0,13]}]},{"pos":[32296,32303],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[32582,32616],"content":"HashData(Stream,HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"HashData(Stream,HashAlgorithmName)","pos":[0,34]}]},{"pos":[32858,32862],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[32982,32988],"content":"Stream","needQuote":true,"needEscape":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[33162,33179],"content":"HashAlgorithmName","needQuote":true,"needEscape":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[33523,33569],"content":"HashData(Byte[],Int32,Int32,HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"HashData(Byte[],Int32,Int32,HashAlgorithmName)","pos":[0,46]}]},{"pos":[33835,33839],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[33951,33955],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[34068,34073],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[34186,34191],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[34360,34377],"content":"HashAlgorithmName","needQuote":true,"needEscape":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[34653,34674],"content":"ImportCspBlob(Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"ImportCspBlob(Byte[])","pos":[0,21]}]},{"pos":[34890,34894],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[35156,35187],"content":"ImportParameters(DSAParameters)","needQuote":true,"needEscape":true,"nodes":[{"content":"ImportParameters(DSAParameters)","pos":[0,31]}]},{"pos":[35476,35489],"content":"DSAParameters","needQuote":true,"needEscape":true,"nodes":[{"content":"DSAParameters","pos":[0,13]}]},{"pos":[35749,35769],"content":"KeyExchangeAlgorithm","needQuote":true,"needEscape":true,"nodes":[{"content":"KeyExchangeAlgorithm","pos":[0,20]}]},{"pos":[35985,35991],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[36202,36209],"content":"KeySize","needQuote":true,"needEscape":true,"nodes":[{"content":"KeySize","pos":[0,7]}]},{"pos":[36398,36403],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[36620,36635],"content":"PersistKeyInCsp","needQuote":true,"needEscape":true,"nodes":[{"content":"PersistKeyInCsp","pos":[0,15]}]},{"pos":[36842,36849],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[37065,37075],"content":"PublicOnly","needQuote":true,"needEscape":true,"nodes":[{"content":"PublicOnly","pos":[0,10]}]},{"pos":[37272,37279],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[37503,37521],"content":"SignatureAlgorithm","needQuote":true,"needEscape":true,"nodes":[{"content":"SignatureAlgorithm","pos":[0,18]}]},{"pos":[37733,37739],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[37966,37982],"content":"SignData(Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"SignData(Byte[])","pos":[0,16]}]},{"pos":[38188,38192],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[38304,38308],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[38536,38552],"content":"SignData(Stream)","needQuote":true,"needEscape":true,"nodes":[{"content":"SignData(Stream)","pos":[0,16]}]},{"pos":[38758,38762],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[38882,38888],"content":"Stream","needQuote":true,"needEscape":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[39144,39172],"content":"SignData(Byte[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"SignData(Byte[],Int32,Int32)","pos":[0,28]}]},{"pos":[39402,39406],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[39518,39522],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[39635,39640],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[39753,39758],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[39997,40020],"content":"SignHash(Byte[],String)","needQuote":true,"needEscape":true,"nodes":[{"content":"SignHash(Byte[],String)","pos":[0,23]}]},{"pos":[40240,40244],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[40356,40360],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[40474,40480],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[40702,40720],"content":"UseMachineKeyStore","needQuote":true,"needEscape":true,"nodes":[{"content":"UseMachineKeyStore","pos":[0,18]}]},{"pos":[40933,40940],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[41185,41210],"content":"VerifyData(Byte[],Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"VerifyData(Byte[],Byte[])","pos":[0,25]}]},{"pos":[41437,41444],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[41560,41564],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[41676,41680],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[41935,41967],"content":"VerifyHash(Byte[],String,Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"VerifyHash(Byte[],String,Byte[])","pos":[0,32]}]},{"pos":[42208,42215],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[42331,42335],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[42449,42455],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[42569,42573],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[42819,42849],"content":"VerifySignature(Byte[],Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"VerifySignature(Byte[],Byte[])","pos":[0,30]}]},{"pos":[43086,43093],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[43209,43213],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[43325,43329],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.DSACryptoServiceProvider\n  id: DSACryptoServiceProvider\n  children:\n  - System.Security.Cryptography.DSACryptoServiceProvider.#ctor\n  - System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32)\n  - System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)\n  - System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)\n  - System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(System.Byte[])\n  - System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo\n  - System.Security.Cryptography.DSACryptoServiceProvider.Dispose(System.Boolean)\n  - System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(System.Boolean)\n  - System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(System.Boolean)\n  - System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(System.Byte[])\n  - System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.DSAParameters)\n  - System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm\n  - System.Security.Cryptography.DSACryptoServiceProvider.KeySize\n  - System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp\n  - System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly\n  - System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm\n  - System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[])\n  - System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.IO.Stream)\n  - System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.DSACryptoServiceProvider.SignHash(System.Byte[],System.String)\n  - System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore\n  - System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(System.Byte[],System.Byte[])\n  - System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])\n  - System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(System.Byte[],System.Byte[])\n  langs:\n  - csharp\n  name: DSACryptoServiceProvider\n  nameWithType: DSACryptoServiceProvider\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider\n  type: Class\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class DSACryptoServiceProvider : System.Security.Cryptography.DSA, System.Security.Cryptography.ICspAsymmetricAlgorithm\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.AsymmetricAlgorithm\n  - System.Security.Cryptography.DSA\n  implements:\n  - System.Security.Cryptography.ICspAsymmetricAlgorithm\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  - System.Security.Cryptography.DSA.Create\n  - System.Security.Cryptography.DSA.Create(System.String)\n  - System.Security.Cryptography.DSA.FromXmlString(System.String)\n  - System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.ToXmlString(System.Boolean)\n  - System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: DSACryptoServiceProvider()\n  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider()\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public DSACryptoServiceProvider ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: DSACryptoServiceProvider(Int32)\n  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(Int32)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public DSACryptoServiceProvider (int dwKeySize);\n    parameters:\n    - id: dwKeySize\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)\n  id: '#ctor(System.Security.Cryptography.CspParameters)'\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: DSACryptoServiceProvider(CspParameters)\n  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(CspParameters)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(CspParameters)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public DSACryptoServiceProvider (System.Security.Cryptography.CspParameters parameters);\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.CspParameters\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)\n  id: '#ctor(System.Int32,System.Security.Cryptography.CspParameters)'\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: DSACryptoServiceProvider(Int32,CspParameters)\n  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32,CspParameters)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(Int32,CspParameters)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public DSACryptoServiceProvider (int dwKeySize, System.Security.Cryptography.CspParameters parameters);\n    parameters:\n    - id: dwKeySize\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: parameters\n      type: System.Security.Cryptography.CspParameters\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(System.Byte[])\n  id: CreateSignature(System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: CreateSignature(Byte[])\n  nameWithType: DSACryptoServiceProvider.CreateSignature(Byte[])\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override byte[] CreateSignature (byte[] rgbHash);\n    parameters:\n    - id: rgbHash\n      type: System.Byte[]\n      description: Parameter description to be filled\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo\n  id: CspKeyContainerInfo\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: CspKeyContainerInfo\n  nameWithType: DSACryptoServiceProvider.CspKeyContainerInfo\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public System.Security.Cryptography.CspKeyContainerInfo CspKeyContainerInfo { get; }\n    return:\n      type: System.Security.Cryptography.CspKeyContainerInfo\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: DSACryptoServiceProvider.Dispose(Boolean)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(System.Boolean)\n  id: ExportCspBlob(System.Boolean)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: ExportCspBlob(Boolean)\n  nameWithType: DSACryptoServiceProvider.ExportCspBlob(Boolean)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public byte[] ExportCspBlob (bool includePrivateParameters);\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: Parameter description to be filled\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(System.Boolean)\n  id: ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: ExportParameters(Boolean)\n  nameWithType: DSACryptoServiceProvider.ExportParameters(Boolean)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override System.Security.Cryptography.DSAParameters ExportParameters (bool includePrivateParameters);\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: Parameter description to be filled\n    return:\n      type: System.Security.Cryptography.DSAParameters\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: HashData(Stream,HashAlgorithmName)\n  nameWithType: DSACryptoServiceProvider.HashData(Stream,HashAlgorithmName)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.HashData(Stream,HashAlgorithmName)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: Parameter description to be filled\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: Parameter description to be filled\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.HashData*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  nameWithType: DSACryptoServiceProvider.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: offset\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: Parameter description to be filled\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.HashData*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(System.Byte[])\n  id: ImportCspBlob(System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: ImportCspBlob(Byte[])\n  nameWithType: DSACryptoServiceProvider.ImportCspBlob(Byte[])\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public void ImportCspBlob (byte[] keyBlob);\n    parameters:\n    - id: keyBlob\n      type: System.Byte[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.DSAParameters)\n  id: ImportParameters(System.Security.Cryptography.DSAParameters)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: ImportParameters(DSAParameters)\n  nameWithType: DSACryptoServiceProvider.ImportParameters(DSAParameters)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(DSAParameters)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override void ImportParameters (System.Security.Cryptography.DSAParameters parameters);\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.DSAParameters\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm\n  id: KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: KeyExchangeAlgorithm\n  nameWithType: DSACryptoServiceProvider.KeyExchangeAlgorithm\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override string KeyExchangeAlgorithm { get; }\n    return:\n      type: System.String\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeySize\n  id: KeySize\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: KeySize\n  nameWithType: DSACryptoServiceProvider.KeySize\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.KeySize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override int KeySize { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp\n  id: PersistKeyInCsp\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: PersistKeyInCsp\n  nameWithType: DSACryptoServiceProvider.PersistKeyInCsp\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public bool PersistKeyInCsp { get; set; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly\n  id: PublicOnly\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: PublicOnly\n  nameWithType: DSACryptoServiceProvider.PublicOnly\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public bool PublicOnly { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm\n  id: SignatureAlgorithm\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: SignatureAlgorithm\n  nameWithType: DSACryptoServiceProvider.SignatureAlgorithm\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override string SignatureAlgorithm { get; }\n    return:\n      type: System.String\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[])\n  id: SignData(System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: SignData(Byte[])\n  nameWithType: DSACryptoServiceProvider.SignData(Byte[])\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public byte[] SignData (byte[] buffer);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: Parameter description to be filled\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignData*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.IO.Stream)\n  id: SignData(System.IO.Stream)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: SignData(Stream)\n  nameWithType: DSACryptoServiceProvider.SignData(Stream)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Stream)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public byte[] SignData (System.IO.Stream inputStream);\n    parameters:\n    - id: inputStream\n      type: System.IO.Stream\n      description: Parameter description to be filled\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignData*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32)\n  id: SignData(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: SignData(Byte[],Int32,Int32)\n  nameWithType: DSACryptoServiceProvider.SignData(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public byte[] SignData (byte[] buffer, int offset, int count);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: offset\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignData*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignHash(System.Byte[],System.String)\n  id: SignHash(System.Byte[],System.String)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: SignHash(Byte[],String)\n  nameWithType: DSACryptoServiceProvider.SignHash(Byte[],String)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignHash(Byte[],String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public byte[] SignHash (byte[] rgbHash, string str);\n    parameters:\n    - id: rgbHash\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: str\n      type: System.String\n      description: Parameter description to be filled\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore\n  id: UseMachineKeyStore\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: UseMachineKeyStore\n  nameWithType: DSACryptoServiceProvider.UseMachineKeyStore\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static bool UseMachineKeyStore { get; set; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(System.Byte[],System.Byte[])\n  id: VerifyData(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: VerifyData(Byte[],Byte[])\n  nameWithType: DSACryptoServiceProvider.VerifyData(Byte[],Byte[])\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(Byte[],Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public bool VerifyData (byte[] rgbData, byte[] rgbSignature);\n    parameters:\n    - id: rgbData\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: rgbSignature\n      type: System.Byte[]\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])\n  id: VerifyHash(System.Byte[],System.String,System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: VerifyHash(Byte[],String,Byte[])\n  nameWithType: DSACryptoServiceProvider.VerifyHash(Byte[],String,Byte[])\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(Byte[],String,Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public bool VerifyHash (byte[] rgbHash, string str, byte[] rgbSignature);\n    parameters:\n    - id: rgbHash\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: str\n      type: System.String\n      description: Parameter description to be filled\n    - id: rgbSignature\n      type: System.Byte[]\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(System.Byte[],System.Byte[])\n  id: VerifySignature(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: VerifySignature(Byte[],Byte[])\n  nameWithType: DSACryptoServiceProvider.VerifySignature(Byte[],Byte[])\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(Byte[],Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override bool VerifySignature (byte[] rgbHash, byte[] rgbSignature);\n    parameters:\n    - id: rgbHash\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: rgbSignature\n      type: System.Byte[]\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Security.Cryptography.DSA\n  isExternal: false\n  name: System.Security.Cryptography.DSA\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: DSACryptoServiceProvider()\n  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider()\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider()\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: DSACryptoServiceProvider(Int32)\n  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: DSACryptoServiceProvider(CspParameters)\n  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(CspParameters)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(CspParameters)\n- uid: System.Security.Cryptography.CspParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CspParameters\n  nameWithType: CspParameters\n  fullName: System.Security.Cryptography.CspParameters\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: DSACryptoServiceProvider(Int32,CspParameters)\n  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32,CspParameters)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.DSACryptoServiceProvider(Int32,CspParameters)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.CspParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CspParameters\n  nameWithType: CspParameters\n  fullName: System.Security.Cryptography.CspParameters\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: CreateSignature(Byte[])\n  nameWithType: DSACryptoServiceProvider.CreateSignature(Byte[])\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(Byte[])\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: CspKeyContainerInfo\n  nameWithType: DSACryptoServiceProvider.CspKeyContainerInfo\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo\n- uid: System.Security.Cryptography.CspKeyContainerInfo\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CspKeyContainerInfo\n  nameWithType: CspKeyContainerInfo\n  fullName: System.Security.Cryptography.CspKeyContainerInfo\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: DSACryptoServiceProvider.Dispose(Boolean)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(System.Boolean)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: ExportCspBlob(Boolean)\n  nameWithType: DSACryptoServiceProvider.ExportCspBlob(Boolean)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(Boolean)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: ExportParameters(Boolean)\n  nameWithType: DSACryptoServiceProvider.ExportParameters(Boolean)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(Boolean)\n- uid: System.Security.Cryptography.DSAParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: DSAParameters\n  nameWithType: DSAParameters\n  fullName: System.Security.Cryptography.DSAParameters\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: HashData(Stream,HashAlgorithmName)\n  nameWithType: DSACryptoServiceProvider.HashData(Stream,HashAlgorithmName)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.HashData(Stream,HashAlgorithmName)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  nameWithType: DSACryptoServiceProvider.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: ImportCspBlob(Byte[])\n  nameWithType: DSACryptoServiceProvider.ImportCspBlob(Byte[])\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(Byte[])\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.DSAParameters)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: ImportParameters(DSAParameters)\n  nameWithType: DSACryptoServiceProvider.ImportParameters(DSAParameters)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(DSAParameters)\n- uid: System.Security.Cryptography.DSAParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: DSAParameters\n  nameWithType: DSAParameters\n  fullName: System.Security.Cryptography.DSAParameters\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: KeyExchangeAlgorithm\n  nameWithType: DSACryptoServiceProvider.KeyExchangeAlgorithm\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeySize\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: KeySize\n  nameWithType: DSACryptoServiceProvider.KeySize\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.KeySize\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: PersistKeyInCsp\n  nameWithType: DSACryptoServiceProvider.PersistKeyInCsp\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: PublicOnly\n  nameWithType: DSACryptoServiceProvider.PublicOnly\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: SignatureAlgorithm\n  nameWithType: DSACryptoServiceProvider.SignatureAlgorithm\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: SignData(Byte[])\n  nameWithType: DSACryptoServiceProvider.SignData(Byte[])\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Byte[])\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.IO.Stream)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: SignData(Stream)\n  nameWithType: DSACryptoServiceProvider.SignData(Stream)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Stream)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: SignData(Byte[],Int32,Int32)\n  nameWithType: DSACryptoServiceProvider.SignData(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignData(Byte[],Int32,Int32)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignHash(System.Byte[],System.String)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: SignHash(Byte[],String)\n  nameWithType: DSACryptoServiceProvider.SignHash(Byte[],String)\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.SignHash(Byte[],String)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: UseMachineKeyStore\n  nameWithType: DSACryptoServiceProvider.UseMachineKeyStore\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: VerifyData(Byte[],Byte[])\n  nameWithType: DSACryptoServiceProvider.VerifyData(Byte[],Byte[])\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(Byte[],Byte[])\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: VerifyHash(Byte[],String,Byte[])\n  nameWithType: DSACryptoServiceProvider.VerifyHash(Byte[],String,Byte[])\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(Byte[],String,Byte[])\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: VerifySignature(Byte[],Byte[])\n  nameWithType: DSACryptoServiceProvider.VerifySignature(Byte[],Byte[])\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(Byte[],Byte[])\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  nameWithType: DSACryptoServiceProvider.\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  nameWithType: DSACryptoServiceProvider.\n"}