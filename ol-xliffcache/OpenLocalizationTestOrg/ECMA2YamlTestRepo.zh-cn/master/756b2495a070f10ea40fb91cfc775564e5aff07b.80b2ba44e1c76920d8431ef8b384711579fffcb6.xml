{"nodes":[{"pos":[491,513],"content":"BorderGapMaskConverter","needQuote":true,"needEscape":true,"nodes":[{"content":"BorderGapMaskConverter","pos":[0,22]}]},{"pos":[1324,1348],"content":"BorderGapMaskConverter()","needQuote":true,"needEscape":true,"nodes":[{"content":"BorderGapMaskConverter()","pos":[0,24]}]},{"pos":[2032,2073],"content":"Convert(Object[],Type,Object,CultureInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Convert(Object[],Type,Object,CultureInfo)","pos":[0,41]}]},{"pos":[2569,2603],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2668,2702],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2768,2802],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2885,2919],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2977,3011],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3382,3427],"content":"ConvertBack(Object,Type[],Object,CultureInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"ConvertBack(Object,Type[],Object,CultureInfo)","pos":[0,45]}]},{"pos":[3934,3968],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4036,4070],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4136,4170],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4253,4287],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4347,4381],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4492,4505],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[4651,4675],"content":"BorderGapMaskConverter()","needQuote":true,"needEscape":true,"nodes":[{"content":"BorderGapMaskConverter()","pos":[0,24]}]},{"pos":[5047,5088],"content":"Convert(Object[],Type,Object,CultureInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Convert(Object[],Type,Object,CultureInfo)","pos":[0,41]}]},{"pos":[5337,5343],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[5459,5465],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[5581,5585],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[5697,5703],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[5852,5863],"content":"CultureInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"CultureInfo","pos":[0,11]}]},{"pos":[6164,6209],"content":"ConvertBack(Object,Type[],Object,CultureInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"ConvertBack(Object,Type[],Object,CultureInfo)","pos":[0,45]}]},{"pos":[6466,6472],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6590,6596],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6710,6714],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[6828,6834],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6983,6994],"content":"CultureInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"CultureInfo","pos":[0,11]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Controls.BorderGapMaskConverter\n  id: BorderGapMaskConverter\n  children:\n  - System.Windows.Controls.BorderGapMaskConverter.#ctor\n  - System.Windows.Controls.BorderGapMaskConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)\n  - System.Windows.Controls.BorderGapMaskConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)\n  langs:\n  - csharp\n  name: BorderGapMaskConverter\n  nameWithType: BorderGapMaskConverter\n  fullName: System.Windows.Controls.BorderGapMaskConverter\n  type: Class\n  syntax:\n    content: 'public class BorderGapMaskConverter : System.Windows.Data.IMultiValueConverter'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Windows.Data.IMultiValueConverter\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Controls.BorderGapMaskConverter.#ctor\n  id: '#ctor'\n  parent: System.Windows.Controls.BorderGapMaskConverter\n  langs:\n  - csharp\n  name: BorderGapMaskConverter()\n  nameWithType: BorderGapMaskConverter.BorderGapMaskConverter()\n  fullName: System.Windows.Controls.BorderGapMaskConverter.BorderGapMaskConverter()\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Controls\n  syntax:\n    content: public BorderGapMaskConverter ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Controls.BorderGapMaskConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)\n  id: Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)\n  parent: System.Windows.Controls.BorderGapMaskConverter\n  langs:\n  - csharp\n  name: Convert(Object[],Type,Object,CultureInfo)\n  nameWithType: BorderGapMaskConverter.Convert(Object[],Type,Object,CultureInfo)\n  fullName: System.Windows.Controls.BorderGapMaskConverter.Convert(Object[],Type,Object,CultureInfo)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Controls\n  syntax:\n    content: public object Convert (object[] values, Type targetType, object parameter, System.Globalization.CultureInfo culture);\n    parameters:\n    - id: values\n      type: System.Object[]\n      description: Parameter description to be filled\n    - id: targetType\n      type: System.Type\n      description: Parameter description to be filled\n    - id: parameter\n      type: System.Object\n      description: Parameter description to be filled\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Controls.BorderGapMaskConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)\n  id: ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)\n  parent: System.Windows.Controls.BorderGapMaskConverter\n  langs:\n  - csharp\n  name: ConvertBack(Object,Type[],Object,CultureInfo)\n  nameWithType: BorderGapMaskConverter.ConvertBack(Object,Type[],Object,CultureInfo)\n  fullName: System.Windows.Controls.BorderGapMaskConverter.ConvertBack(Object,Type[],Object,CultureInfo)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Controls\n  syntax:\n    content: public object[] ConvertBack (object value, Type[] targetTypes, object parameter, System.Globalization.CultureInfo culture);\n    parameters:\n    - id: value\n      type: System.Object\n      description: Parameter description to be filled\n    - id: targetTypes\n      type: System.Type[]\n      description: Parameter description to be filled\n    - id: parameter\n      type: System.Object\n      description: Parameter description to be filled\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Object[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Windows.Controls.BorderGapMaskConverter.#ctor\n  parent: System.Windows.Controls.BorderGapMaskConverter\n  isExternal: false\n  name: BorderGapMaskConverter()\n  nameWithType: BorderGapMaskConverter.BorderGapMaskConverter()\n  fullName: System.Windows.Controls.BorderGapMaskConverter.BorderGapMaskConverter()\n- uid: System.Windows.Controls.BorderGapMaskConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)\n  parent: System.Windows.Controls.BorderGapMaskConverter\n  isExternal: false\n  name: Convert(Object[],Type,Object,CultureInfo)\n  nameWithType: BorderGapMaskConverter.Convert(Object[],Type,Object,CultureInfo)\n  fullName: System.Windows.Controls.BorderGapMaskConverter.Convert(Object[],Type,Object,CultureInfo)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object[]\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: false\n  name: CultureInfo\n  nameWithType: CultureInfo\n  fullName: System.Globalization.CultureInfo\n- uid: System.Windows.Controls.BorderGapMaskConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)\n  parent: System.Windows.Controls.BorderGapMaskConverter\n  isExternal: false\n  name: ConvertBack(Object,Type[],Object,CultureInfo)\n  nameWithType: BorderGapMaskConverter.ConvertBack(Object,Type[],Object,CultureInfo)\n  fullName: System.Windows.Controls.BorderGapMaskConverter.ConvertBack(Object,Type[],Object,CultureInfo)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object[]\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type[]\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: false\n  name: CultureInfo\n  nameWithType: CultureInfo\n  fullName: System.Globalization.CultureInfo\n"}