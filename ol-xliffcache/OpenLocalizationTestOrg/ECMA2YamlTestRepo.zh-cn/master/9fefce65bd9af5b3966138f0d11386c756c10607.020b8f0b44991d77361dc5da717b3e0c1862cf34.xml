{"nodes":[{"pos":[860,889],"content":"OrderablePartitioner<ph id=\"ph1\">&lt;TSource&gt;</ph>","needQuote":true,"needEscape":true,"source":"OrderablePartitioner<TSource>"},{"pos":[1209,1243],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2022,2067],"content":"OrderablePartitioner(Boolean,Boolean,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"OrderablePartitioner(Boolean,Boolean,Boolean)","pos":[0,45]}]},{"pos":[2611,2645],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2730,2764],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2836,2870],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3119,3141],"content":"GetDynamicPartitions()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetDynamicPartitions()","pos":[0,22]}]},{"pos":[3613,3647],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3914,3945],"content":"GetOrderableDynamicPartitions()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetOrderableDynamicPartitions()","pos":[0,31]}]},{"pos":[4543,4577],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4858,4887],"content":"GetOrderablePartitions(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetOrderablePartitions(Int32)","pos":[0,29]}]},{"pos":[5448,5482],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5662,5696],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5959,5979],"content":"GetPartitions(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetPartitions(Int32)","pos":[0,20]}]},{"pos":[6467,6501],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6627,6661],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6898,6912],"content":"KeysNormalized","needQuote":true,"needEscape":true,"nodes":[{"content":"KeysNormalized","pos":[0,14]}]},{"pos":[7265,7299],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7562,7589],"content":"KeysOrderedAcrossPartitions","needQuote":true,"needEscape":true,"nodes":[{"content":"KeysOrderedAcrossPartitions","pos":[0,27]}]},{"pos":[7981,8015],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8276,8302],"content":"KeysOrderedInEachPartition","needQuote":true,"needEscape":true,"nodes":[{"content":"KeysOrderedInEachPartition","pos":[0,26]}]},{"pos":[8691,8725],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8866,8916],"content":"System.Collections.Concurrent.Partitioner<ph id=\"ph1\">&lt;TSource&gt;</ph>","needQuote":true,"needEscape":true,"source":"System.Collections.Concurrent.Partitioner<TSource>"},{"pos":[9120,9165],"content":"OrderablePartitioner(Boolean,Boolean,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"OrderablePartitioner(Boolean,Boolean,Boolean)","pos":[0,45]}]},{"pos":[9443,9450],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[9569,9576],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[9695,9702],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[9926,9948],"content":"GetDynamicPartitions()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetDynamicPartitions()","pos":[0,22]}]},{"pos":[10233,10253],"content":"IEnumerable<ph id=\"ph1\">&lt;TSource&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<TSource>"},{"pos":[10532,10563],"content":"GetOrderableDynamicPartitions()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetOrderableDynamicPartitions()","pos":[0,31]}]},{"pos":[10920,10960],"content":"IEnumerable<KeyValuePair<Int64,TSource>>","needQuote":true,"needEscape":true,"nodes":[{"content":"IEnumerable&lt;KeyValuePair&lt;Int64,TSource&gt;&gt;","pos":[0,40],"source":"IEnumerable<KeyValuePair<Int64,TSource>>"}]},{"pos":[11320,11349],"content":"GetOrderablePartitions(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetOrderablePartitions(Int32)","pos":[0,29]}]},{"pos":[11736,11783],"content":"IList<IEnumerator<KeyValuePair<Int64,TSource>>>","needQuote":true,"needEscape":true,"nodes":[{"content":"IList&lt;IEnumerator&lt;KeyValuePair&lt;Int64,TSource&gt;&gt;&gt;","pos":[0,47],"source":"IList<IEnumerator<KeyValuePair<Int64,TSource>>>"}]},{"pos":[12061,12066],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[12293,12313],"content":"GetPartitions(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetPartitions(Int32)","pos":[0,20]}]},{"pos":[12628,12655],"content":"IList&lt;IEnumerator<ph id=\"ph1\">&lt;TSource&gt;</ph><ph id=\"ph2\">&gt;</ph>","needQuote":true,"needEscape":true,"source":"IList<IEnumerator<TSource>>"},{"pos":[12859,12864],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[13078,13092],"content":"KeysNormalized","needQuote":true,"needEscape":true,"nodes":[{"content":"KeysNormalized","pos":[0,14]}]},{"pos":[13308,13315],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[13546,13573],"content":"KeysOrderedAcrossPartitions","needQuote":true,"needEscape":true,"nodes":[{"content":"KeysOrderedAcrossPartitions","pos":[0,27]}]},{"pos":[13815,13822],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[14052,14078],"content":"KeysOrderedInEachPartition","needQuote":true,"needEscape":true,"nodes":[{"content":"KeysOrderedInEachPartition","pos":[0,26]}]},{"pos":[14318,14325],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Concurrent.OrderablePartitioner`1\n  id: OrderablePartitioner`1\n  children:\n  - System.Collections.Concurrent.OrderablePartitioner`1.#ctor(System.Boolean,System.Boolean,System.Boolean)\n  - System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions\n  - System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions\n  - System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)\n  - System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)\n  - System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized\n  - System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions\n  - System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition\n  langs:\n  - csharp\n  name: OrderablePartitioner<TSource>\n  nameWithType: OrderablePartitioner<TSource>\n  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>\n  type: Class\n  syntax:\n    content: 'public abstract class OrderablePartitioner<TSource> : System.Collections.Concurrent.Partitioner<TSource>'\n    typeParameters:\n    - id: TSource\n      description: Parameter description to be filled\n  inheritance:\n  - System.Object\n  - System.Collections.Concurrent.Partitioner`1\n  implements: []\n  inheritedMembers:\n  - System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.#ctor(System.Boolean,System.Boolean,System.Boolean)\n  id: '#ctor(System.Boolean,System.Boolean,System.Boolean)'\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  langs:\n  - csharp\n  name: OrderablePartitioner(Boolean,Boolean,Boolean)\n  nameWithType: OrderablePartitioner<TSource>.OrderablePartitioner(Boolean,Boolean,Boolean)\n  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.OrderablePartitioner(Boolean,Boolean,Boolean)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: protected OrderablePartitioner (bool keysOrderedInEachPartition, bool keysOrderedAcrossPartitions, bool keysNormalized);\n    parameters:\n    - id: keysOrderedInEachPartition\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: keysOrderedAcrossPartitions\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: keysNormalized\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions\n  id: GetDynamicPartitions\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  langs:\n  - csharp\n  name: GetDynamicPartitions()\n  nameWithType: OrderablePartitioner<TSource>.GetDynamicPartitions()\n  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.GetDynamicPartitions()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public override System.Collections.Generic.IEnumerable<TSource> GetDynamicPartitions ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions\n  id: GetOrderableDynamicPartitions\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  langs:\n  - csharp\n  name: GetOrderableDynamicPartitions()\n  nameWithType: OrderablePartitioner<TSource>.GetOrderableDynamicPartitions()\n  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.GetOrderableDynamicPartitions()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public virtual System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<long,TSource>> GetOrderableDynamicPartitions ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int64,TSource}}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)\n  id: GetOrderablePartitions(System.Int32)\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  langs:\n  - csharp\n  name: GetOrderablePartitions(Int32)\n  nameWithType: OrderablePartitioner<TSource>.GetOrderablePartitions(Int32)\n  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.GetOrderablePartitions(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public abstract System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<long,TSource>>> GetOrderablePartitions (int partitionCount);\n    parameters:\n    - id: partitionCount\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.Int64,TSource}}}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)\n  id: GetPartitions(System.Int32)\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  langs:\n  - csharp\n  name: GetPartitions(Int32)\n  nameWithType: OrderablePartitioner<TSource>.GetPartitions(Int32)\n  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.GetPartitions(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public override System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<TSource>> GetPartitions (int partitionCount);\n    parameters:\n    - id: partitionCount\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{TSource}}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized\n  id: KeysNormalized\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  langs:\n  - csharp\n  name: KeysNormalized\n  nameWithType: OrderablePartitioner<TSource>.KeysNormalized\n  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.KeysNormalized\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public bool KeysNormalized { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions\n  id: KeysOrderedAcrossPartitions\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  langs:\n  - csharp\n  name: KeysOrderedAcrossPartitions\n  nameWithType: OrderablePartitioner<TSource>.KeysOrderedAcrossPartitions\n  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.KeysOrderedAcrossPartitions\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public bool KeysOrderedAcrossPartitions { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition\n  id: KeysOrderedInEachPartition\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  langs:\n  - csharp\n  name: KeysOrderedInEachPartition\n  nameWithType: OrderablePartitioner<TSource>.KeysOrderedInEachPartition\n  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.KeysOrderedInEachPartition\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public bool KeysOrderedInEachPartition { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Collections.Concurrent.Partitioner`1\n  isExternal: false\n  name: System.Collections.Concurrent.Partitioner<TSource>\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.#ctor(System.Boolean,System.Boolean,System.Boolean)\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  isExternal: false\n  name: OrderablePartitioner(Boolean,Boolean,Boolean)\n  nameWithType: OrderablePartitioner<TSource>.OrderablePartitioner(Boolean,Boolean,Boolean)\n  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.OrderablePartitioner(Boolean,Boolean,Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  isExternal: false\n  name: GetDynamicPartitions()\n  nameWithType: OrderablePartitioner<TSource>.GetDynamicPartitions()\n  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.GetDynamicPartitions()\n- uid: System.Collections.Generic.IEnumerable{TSource}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TSource>\n  nameWithType: IEnumerable<TSource>\n  fullName: System.Collections.Generic.IEnumerable<TSource>\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  isExternal: false\n  name: GetOrderableDynamicPartitions()\n  nameWithType: OrderablePartitioner<TSource>.GetOrderableDynamicPartitions()\n  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.GetOrderableDynamicPartitions()\n- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int64,TSource}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<KeyValuePair<Int64,TSource>>\n  nameWithType: IEnumerable<KeyValuePair<Int64,TSource>>\n  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Int64,TSource>>\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  isExternal: false\n  name: GetOrderablePartitions(Int32)\n  nameWithType: OrderablePartitioner<TSource>.GetOrderablePartitions(Int32)\n  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.GetOrderablePartitions(Int32)\n- uid: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.Int64,TSource}}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IList<IEnumerator<KeyValuePair<Int64,TSource>>>\n  nameWithType: IList<IEnumerator<KeyValuePair<Int64,TSource>>>\n  fullName: System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.Int64,TSource>>>\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  isExternal: false\n  name: GetPartitions(Int32)\n  nameWithType: OrderablePartitioner<TSource>.GetPartitions(Int32)\n  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.GetPartitions(Int32)\n- uid: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{TSource}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IList<IEnumerator<TSource>>\n  nameWithType: IList<IEnumerator<TSource>>\n  fullName: System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<TSource>>\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  isExternal: false\n  name: KeysNormalized\n  nameWithType: OrderablePartitioner<TSource>.KeysNormalized\n  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.KeysNormalized\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  isExternal: false\n  name: KeysOrderedAcrossPartitions\n  nameWithType: OrderablePartitioner<TSource>.KeysOrderedAcrossPartitions\n  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.KeysOrderedAcrossPartitions\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  isExternal: false\n  name: KeysOrderedInEachPartition\n  nameWithType: OrderablePartitioner<TSource>.KeysOrderedInEachPartition\n  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.KeysOrderedInEachPartition\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n"}