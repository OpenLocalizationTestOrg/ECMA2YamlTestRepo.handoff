{"nodes":[{"pos":[839,844],"content":"Stack","needQuote":true,"needEscape":true,"nodes":[{"content":"Stack","pos":[0,5]}]},{"pos":[1791,1798],"content":"Stack()","needQuote":true,"needEscape":true,"nodes":[{"content":"Stack()","pos":[0,7]}]},{"pos":[2240,2258],"content":"Stack(ICollection)","needQuote":true,"needEscape":true,"nodes":[{"content":"Stack(ICollection)","pos":[0,18]}]},{"pos":[2601,2635],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2828,2840],"content":"Stack(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"Stack(Int32)","pos":[0,12]}]},{"pos":[3150,3184],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3347,3354],"content":"Clear()","needQuote":true,"needEscape":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[3738,3745],"content":"Clone()","needQuote":true,"needEscape":true,"nodes":[{"content":"Clone()","pos":[0,7]}]},{"pos":[4026,4060],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4259,4275],"content":"Contains(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Contains(Object)","pos":[0,16]}]},{"pos":[4584,4618],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4677,4711],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4930,4949],"content":"CopyTo(Array,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"CopyTo(Array,Int32)","pos":[0,19]}]},{"pos":[5275,5309],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5370,5404],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5567,5572],"content":"Count","needQuote":true,"needEscape":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[5833,5867],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6046,6061],"content":"GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[6407,6441],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6622,6636],"content":"IsSynchronized","needQuote":true,"needEscape":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[6927,6961],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7122,7128],"content":"Peek()","needQuote":true,"needEscape":true,"nodes":[{"content":"Peek()","pos":[0,6]}]},{"pos":[7406,7440],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7599,7604],"content":"Pop()","needQuote":true,"needEscape":true,"nodes":[{"content":"Pop()","pos":[0,5]}]},{"pos":[7879,7913],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8104,8116],"content":"Push(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Push(Object)","pos":[0,12]}]},{"pos":[8413,8447],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8676,8695],"content":"Synchronized(Stack)","needQuote":true,"needEscape":true,"nodes":[{"content":"Synchronized(Stack)","pos":[0,19]}]},{"pos":[9066,9100],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9169,9203],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9372,9380],"content":"SyncRoot","needQuote":true,"needEscape":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[9654,9688],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9855,9864],"content":"ToArray()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToArray()","pos":[0,9]}]},{"pos":[10155,10189],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10300,10313],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[10415,10422],"content":"Stack()","needQuote":true,"needEscape":true,"nodes":[{"content":"Stack()","pos":[0,7]}]},{"pos":[10631,10649],"content":"Stack(ICollection)","needQuote":true,"needEscape":true,"nodes":[{"content":"Stack(ICollection)","pos":[0,18]}]},{"pos":[10842,10853],"content":"ICollection","needQuote":true,"needEscape":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[11040,11052],"content":"Stack(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"Stack(Int32)","pos":[0,12]}]},{"pos":[11203,11208],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[11357,11364],"content":"Clear()","needQuote":true,"needEscape":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[11541,11548],"content":"Clone()","needQuote":true,"needEscape":true,"nodes":[{"content":"Clone()","pos":[0,7]}]},{"pos":[11690,11696],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11865,11881],"content":"Contains(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Contains(Object)","pos":[0,16]}]},{"pos":[12042,12049],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[12167,12173],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12352,12371],"content":"CopyTo(Array,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"CopyTo(Array,Int32)","pos":[0,19]}]},{"pos":[12536,12541],"content":"Array","needQuote":true,"needEscape":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[12654,12659],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[12808,12813],"content":"Count","needQuote":true,"needEscape":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[12950,12955],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[13112,13127],"content":"GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[13314,13325],"content":"IEnumerator","needQuote":true,"needEscape":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[13507,13521],"content":"IsSynchronized","needQuote":true,"needEscape":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[13678,13685],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[13837,13843],"content":"Peek()","needQuote":true,"needEscape":true,"nodes":[{"content":"Peek()","pos":[0,6]}]},{"pos":[13983,13989],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14138,14143],"content":"Pop()","needQuote":true,"needEscape":true,"nodes":[{"content":"Pop()","pos":[0,5]}]},{"pos":[14281,14287],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14452,14464],"content":"Push(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Push(Object)","pos":[0,12]}]},{"pos":[14616,14622],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14806,14825],"content":"Synchronized(Stack)","needQuote":true,"needEscape":true,"nodes":[{"content":"Synchronized(Stack)","pos":[0,19]}]},{"pos":[15014,15019],"content":"Stack","needQuote":true,"needEscape":true,"nodes":[{"content":"Stack","pos":[0,5]}]},{"pos":[15168,15173],"content":"Stack","needQuote":true,"needEscape":true,"nodes":[{"content":"Stack","pos":[0,5]}]},{"pos":[15337,15345],"content":"SyncRoot","needQuote":true,"needEscape":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[15489,15495],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15648,15657],"content":"ToArray()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToArray()","pos":[0,9]}]},{"pos":[15803,15809],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Stack\n  id: Stack\n  children:\n  - System.Collections.Stack.#ctor\n  - System.Collections.Stack.#ctor(System.Collections.ICollection)\n  - System.Collections.Stack.#ctor(System.Int32)\n  - System.Collections.Stack.Clear\n  - System.Collections.Stack.Clone\n  - System.Collections.Stack.Contains(System.Object)\n  - System.Collections.Stack.CopyTo(System.Array,System.Int32)\n  - System.Collections.Stack.Count\n  - System.Collections.Stack.GetEnumerator\n  - System.Collections.Stack.IsSynchronized\n  - System.Collections.Stack.Peek\n  - System.Collections.Stack.Pop\n  - System.Collections.Stack.Push(System.Object)\n  - System.Collections.Stack.Synchronized(System.Collections.Stack)\n  - System.Collections.Stack.SyncRoot\n  - System.Collections.Stack.ToArray\n  langs:\n  - csharp\n  name: Stack\n  nameWithType: Stack\n  fullName: System.Collections.Stack\n  type: Class\n  syntax:\n    content: >-\n      [System.Diagnostics.DebuggerDisplay(\"Count = {Count}\")]\n\n      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Stack/StackDebugView))]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class Stack : ICloneable, System.Collections.ICollection\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.ICollection\n  - System.ICloneable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Stack.#ctor\n  id: '#ctor'\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Stack()\n  nameWithType: Stack.Stack()\n  fullName: System.Collections.Stack.Stack()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  syntax:\n    content: public Stack ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Stack.#ctor(System.Collections.ICollection)\n  id: '#ctor(System.Collections.ICollection)'\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Stack(ICollection)\n  nameWithType: Stack.Stack(ICollection)\n  fullName: System.Collections.Stack.Stack(ICollection)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  syntax:\n    content: public Stack (System.Collections.ICollection col);\n    parameters:\n    - id: col\n      type: System.Collections.ICollection\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Stack.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Stack(Int32)\n  nameWithType: Stack.Stack(Int32)\n  fullName: System.Collections.Stack.Stack(Int32)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  syntax:\n    content: public Stack (int initialCapacity);\n    parameters:\n    - id: initialCapacity\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Stack.Clear\n  id: Clear\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: Stack.Clear()\n  fullName: System.Collections.Stack.Clear()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  syntax:\n    content: public virtual void Clear ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Stack.Clone\n  id: Clone\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: Stack.Clone()\n  fullName: System.Collections.Stack.Clone()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  syntax:\n    content: public virtual object Clone ();\n    parameters: []\n    return:\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Stack.Contains(System.Object)\n  id: Contains(System.Object)\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Contains(Object)\n  nameWithType: Stack.Contains(Object)\n  fullName: System.Collections.Stack.Contains(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  syntax:\n    content: public virtual bool Contains (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Stack.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: CopyTo(Array,Int32)\n  nameWithType: Stack.CopyTo(Array,Int32)\n  fullName: System.Collections.Stack.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  syntax:\n    content: public virtual void CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: Parameter description to be filled\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Stack.Count\n  id: Count\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Count\n  nameWithType: Stack.Count\n  fullName: System.Collections.Stack.Count\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  syntax:\n    content: public virtual int Count { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Stack.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: Stack.GetEnumerator()\n  fullName: System.Collections.Stack.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  syntax:\n    content: public virtual System.Collections.IEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Stack.IsSynchronized\n  id: IsSynchronized\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: IsSynchronized\n  nameWithType: Stack.IsSynchronized\n  fullName: System.Collections.Stack.IsSynchronized\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  syntax:\n    content: public virtual bool IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Stack.Peek\n  id: Peek\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Peek()\n  nameWithType: Stack.Peek()\n  fullName: System.Collections.Stack.Peek()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  syntax:\n    content: public virtual object Peek ();\n    parameters: []\n    return:\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Stack.Pop\n  id: Pop\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Pop()\n  nameWithType: Stack.Pop()\n  fullName: System.Collections.Stack.Pop()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  syntax:\n    content: public virtual object Pop ();\n    parameters: []\n    return:\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Stack.Push(System.Object)\n  id: Push(System.Object)\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Push(Object)\n  nameWithType: Stack.Push(Object)\n  fullName: System.Collections.Stack.Push(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  syntax:\n    content: public virtual void Push (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Stack.Synchronized(System.Collections.Stack)\n  id: Synchronized(System.Collections.Stack)\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: Synchronized(Stack)\n  nameWithType: Stack.Synchronized(Stack)\n  fullName: System.Collections.Stack.Synchronized(Stack)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  syntax:\n    content: public static System.Collections.Stack Synchronized (System.Collections.Stack stack);\n    parameters:\n    - id: stack\n      type: System.Collections.Stack\n      description: Parameter description to be filled\n    return:\n      type: System.Collections.Stack\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Stack.SyncRoot\n  id: SyncRoot\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: SyncRoot\n  nameWithType: Stack.SyncRoot\n  fullName: System.Collections.Stack.SyncRoot\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  syntax:\n    content: public virtual object SyncRoot { get; }\n    return:\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Stack.ToArray\n  id: ToArray\n  parent: System.Collections.Stack\n  langs:\n  - csharp\n  name: ToArray()\n  nameWithType: Stack.ToArray()\n  fullName: System.Collections.Stack.ToArray()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections\n  syntax:\n    content: public virtual object[] ToArray ();\n    parameters: []\n    return:\n      type: System.Object[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Collections.Stack.#ctor\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Stack()\n  nameWithType: Stack.Stack()\n  fullName: System.Collections.Stack.Stack()\n- uid: System.Collections.Stack.#ctor(System.Collections.ICollection)\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Stack(ICollection)\n  nameWithType: Stack.Stack(ICollection)\n  fullName: System.Collections.Stack.Stack(ICollection)\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n- uid: System.Collections.Stack.#ctor(System.Int32)\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Stack(Int32)\n  nameWithType: Stack.Stack(Int32)\n  fullName: System.Collections.Stack.Stack(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Stack.Clear\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Clear()\n  nameWithType: Stack.Clear()\n  fullName: System.Collections.Stack.Clear()\n- uid: System.Collections.Stack.Clone\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Clone()\n  nameWithType: Stack.Clone()\n  fullName: System.Collections.Stack.Clone()\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Collections.Stack.Contains(System.Object)\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Contains(Object)\n  nameWithType: Stack.Contains(Object)\n  fullName: System.Collections.Stack.Contains(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Collections.Stack.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Stack\n  isExternal: false\n  name: CopyTo(Array,Int32)\n  nameWithType: Stack.CopyTo(Array,Int32)\n  fullName: System.Collections.Stack.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Stack.Count\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Count\n  nameWithType: Stack.Count\n  fullName: System.Collections.Stack.Count\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Stack.GetEnumerator\n  parent: System.Collections.Stack\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: Stack.GetEnumerator()\n  fullName: System.Collections.Stack.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Collections.Stack.IsSynchronized\n  parent: System.Collections.Stack\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: Stack.IsSynchronized\n  fullName: System.Collections.Stack.IsSynchronized\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Stack.Peek\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Peek()\n  nameWithType: Stack.Peek()\n  fullName: System.Collections.Stack.Peek()\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Collections.Stack.Pop\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Pop()\n  nameWithType: Stack.Pop()\n  fullName: System.Collections.Stack.Pop()\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Collections.Stack.Push(System.Object)\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Push(Object)\n  nameWithType: Stack.Push(Object)\n  fullName: System.Collections.Stack.Push(Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Collections.Stack.Synchronized(System.Collections.Stack)\n  parent: System.Collections.Stack\n  isExternal: false\n  name: Synchronized(Stack)\n  nameWithType: Stack.Synchronized(Stack)\n  fullName: System.Collections.Stack.Synchronized(Stack)\n- uid: System.Collections.Stack\n  parent: System.Collections\n  isExternal: false\n  name: Stack\n  nameWithType: Stack\n  fullName: System.Collections.Stack\n- uid: System.Collections.Stack\n  parent: System.Collections\n  isExternal: false\n  name: Stack\n  nameWithType: Stack\n  fullName: System.Collections.Stack\n- uid: System.Collections.Stack.SyncRoot\n  parent: System.Collections.Stack\n  isExternal: false\n  name: SyncRoot\n  nameWithType: Stack.SyncRoot\n  fullName: System.Collections.Stack.SyncRoot\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Collections.Stack.ToArray\n  parent: System.Collections.Stack\n  isExternal: false\n  name: ToArray()\n  nameWithType: Stack.ToArray()\n  fullName: System.Collections.Stack.ToArray()\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object[]\n"}