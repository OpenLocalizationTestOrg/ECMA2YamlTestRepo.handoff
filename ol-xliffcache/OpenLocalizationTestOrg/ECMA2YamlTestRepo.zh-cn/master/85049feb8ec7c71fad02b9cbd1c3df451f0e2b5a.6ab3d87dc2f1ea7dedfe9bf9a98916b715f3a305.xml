{"nodes":[{"pos":[2912,2950],"content":"ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"ContainerBidirectionalIterator<TValue>"},{"pos":[3303,3337],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3993,4025],"content":"ContainerBidirectionalIterator()","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerBidirectionalIterator()","pos":[0,32]}]},{"pos":[4800,4862],"content":"ContainerBidirectionalIterator(ContainerBidirectionalIterator)","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerBidirectionalIterator(ContainerBidirectionalIterator)","pos":[0,62]}]},{"pos":[5500,5534],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5865,5910],"content":"ContainerBidirectionalIterator(INode<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ContainerBidirectionalIterator(INode<TValue>)"},{"pos":[6472,6506],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6751,6758],"content":"Clone()","needQuote":true,"needEscape":true,"nodes":[{"content":"Clone()","pos":[0,7]}]},{"pos":[7149,7183],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7436,7447],"content":"container()","needQuote":true,"needEscape":true,"nodes":[{"content":"container()","pos":[0,11]}]},{"pos":[7850,7884],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8265,8305],"content":"equal_to(ContainerBidirectionalIterator)","needQuote":true,"needEscape":true,"nodes":[{"content":"equal_to(ContainerBidirectionalIterator)","pos":[0,40]}]},{"pos":[8877,8911],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8970,9004],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9445,9477],"content":"equal_to(IInputIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"equal_to(IInputIterator<TValue>)"},{"pos":[10019,10053],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10112,10146],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10477,10483],"content":"next()","needQuote":true,"needEscape":true,"nodes":[{"content":"next()","pos":[0,6]}]},{"pos":[11194,11235],"content":"op_Assign(ContainerBidirectionalIterator)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Assign(ContainerBidirectionalIterator)","pos":[0,41]}]},{"pos":[11871,11905],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12013,12047],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12442,12494],"content":"op_Decrement(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"op_Decrement(ContainerBidirectionalIterator<TValue>)"},{"pos":[13152,13186],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13294,13328],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13749,13807],"content":"op_Decrement(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,Int32)","needQuote":true,"needEscape":true,"source":"op_Decrement(ContainerBidirectionalIterator<TValue>,Int32)"},{"pos":[14486,14520],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14579,14613],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14721,14755],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15142,15185],"content":"op_Equality(ContainerBidirectionalIterator)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Equality(ContainerBidirectionalIterator)","pos":[0,43]}]},{"pos":[15768,15802],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15861,15895],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16254,16289],"content":"op_Equality(IInputIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"op_Equality(IInputIterator<TValue>)"},{"pos":[16834,16868],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16927,16961],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17218,17229],"content":"op_Implicit","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Implicit","pos":[0,11]}]},{"pos":[17729,17763],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18158,18210],"content":"op_Increment(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"op_Increment(ContainerBidirectionalIterator<TValue>)"},{"pos":[18868,18902],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19010,19044],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19465,19523],"content":"op_Increment(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,Int32)","needQuote":true,"needEscape":true,"source":"op_Increment(ContainerBidirectionalIterator<TValue>,Int32)"},{"pos":[20202,20236],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20295,20329],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20437,20471],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20862,20907],"content":"op_Inequality(ContainerBidirectionalIterator)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Inequality(ContainerBidirectionalIterator)","pos":[0,45]}]},{"pos":[21496,21530],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21589,21623],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21986,22023],"content":"op_Inequality(IInputIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"op_Inequality(IInputIterator<TValue>)"},{"pos":[22574,22608],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22667,22701],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[23102,23152],"content":"op_MemberSelection(ContainerBidirectionalIterator)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_MemberSelection(ContainerBidirectionalIterator)","pos":[0,50]}]},{"pos":[23763,23797],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[23849,23883],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[24290,24343],"content":"op_PointerDereference(ContainerBidirectionalIterator)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_PointerDereference(ContainerBidirectionalIterator)","pos":[0,53]}]},{"pos":[24963,24997],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[25049,25083],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[25326,25332],"content":"prev()","needQuote":true,"needEscape":true,"nodes":[{"content":"prev()","pos":[0,6]}]},{"pos":[25905,25912],"content":"valid()","needQuote":true,"needEscape":true,"nodes":[{"content":"valid()","pos":[0,7]}]},{"pos":[26302,26336],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[26447,26460],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[26644,26676],"content":"ContainerBidirectionalIterator()","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerBidirectionalIterator()","pos":[0,32]}]},{"pos":[27130,27192],"content":"ContainerBidirectionalIterator(ContainerBidirectionalIterator)","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerBidirectionalIterator(ContainerBidirectionalIterator)","pos":[0,62]}]},{"pos":[27599,27629],"content":"ContainerBidirectionalIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerBidirectionalIterator","pos":[0,30]}]},{"pos":[27978,28023],"content":"ContainerBidirectionalIterator(INode<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ContainerBidirectionalIterator(INode<TValue>)"},{"pos":[28374,28387],"content":"INode<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"INode<TValue>"},{"pos":[28660,28667],"content":"Clone()","needQuote":true,"needEscape":true,"nodes":[{"content":"Clone()","pos":[0,7]}]},{"pos":[28889,28895],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29132,29143],"content":"container()","needQuote":true,"needEscape":true,"nodes":[{"content":"container()","pos":[0,11]}]},{"pos":[29373,29379],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29680,29720],"content":"equal_to(ContainerBidirectionalIterator)","needQuote":true,"needEscape":true,"nodes":[{"content":"equal_to(ContainerBidirectionalIterator)","pos":[0,40]}]},{"pos":[30009,30016],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[30209,30239],"content":"ContainerBidirectionalIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerBidirectionalIterator","pos":[0,30]}]},{"pos":[30600,30632],"content":"equal_to(IInputIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"equal_to(IInputIterator<TValue>)"},{"pos":[30905,30912],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[31092,31114],"content":"IInputIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"IInputIterator<TValue>"},{"pos":[31404,31410],"content":"next()","needQuote":true,"needEscape":true,"nodes":[{"content":"next()","pos":[0,6]}]},{"pos":[31816,31857],"content":"op_Assign(ContainerBidirectionalIterator)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Assign(ContainerBidirectionalIterator)","pos":[0,41]}]},{"pos":[32222,32252],"content":"ContainerBidirectionalIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerBidirectionalIterator","pos":[0,30]}]},{"pos":[32517,32547],"content":"ContainerBidirectionalIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerBidirectionalIterator","pos":[0,30]}]},{"pos":[32929,32981],"content":"op_Decrement(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"op_Decrement(ContainerBidirectionalIterator<TValue>)"},{"pos":[33371,33409],"content":"ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"ContainerBidirectionalIterator<TValue>"},{"pos":[33820,33878],"content":"op_Decrement(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,Int32)","needQuote":true,"needEscape":true,"source":"op_Decrement(ContainerBidirectionalIterator<TValue>,Int32)"},{"pos":[34280,34318],"content":"ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"ContainerBidirectionalIterator<TValue>"},{"pos":[34523,34528],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[34830,34873],"content":"op_Equality(ContainerBidirectionalIterator)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Equality(ContainerBidirectionalIterator)","pos":[0,43]}]},{"pos":[35168,35175],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[35368,35398],"content":"ContainerBidirectionalIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerBidirectionalIterator","pos":[0,30]}]},{"pos":[35762,35797],"content":"op_Equality(IInputIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"op_Equality(IInputIterator<TValue>)"},{"pos":[36076,36083],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[36263,36285],"content":"IInputIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"IInputIterator<TValue>"},{"pos":[36582,36593],"content":"op_Implicit","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Implicit","pos":[0,11]}]},{"pos":[36893,36923],"content":"IBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"IBidirectionalIterator<TValue>"},{"pos":[37305,37357],"content":"op_Increment(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"op_Increment(ContainerBidirectionalIterator<TValue>)"},{"pos":[37747,37785],"content":"ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"ContainerBidirectionalIterator<TValue>"},{"pos":[38196,38254],"content":"op_Increment(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,Int32)","needQuote":true,"needEscape":true,"source":"op_Increment(ContainerBidirectionalIterator<TValue>,Int32)"},{"pos":[38656,38694],"content":"ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"ContainerBidirectionalIterator<TValue>"},{"pos":[38899,38904],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[39208,39253],"content":"op_Inequality(ContainerBidirectionalIterator)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Inequality(ContainerBidirectionalIterator)","pos":[0,45]}]},{"pos":[39552,39559],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[39752,39782],"content":"ContainerBidirectionalIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerBidirectionalIterator","pos":[0,30]}]},{"pos":[40148,40185],"content":"op_Inequality(IInputIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"op_Inequality(IInputIterator<TValue>)"},{"pos":[40468,40475],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[40655,40677],"content":"IInputIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"IInputIterator<TValue>"},{"pos":[41046,41096],"content":"op_MemberSelection(ContainerBidirectionalIterator)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_MemberSelection(ContainerBidirectionalIterator)","pos":[0,50]}]},{"pos":[41479,41509],"content":"ContainerBidirectionalIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerBidirectionalIterator","pos":[0,30]}]},{"pos":[41897,41950],"content":"op_PointerDereference(ContainerBidirectionalIterator)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_PointerDereference(ContainerBidirectionalIterator)","pos":[0,53]}]},{"pos":[42339,42369],"content":"ContainerBidirectionalIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerBidirectionalIterator","pos":[0,30]}]},{"pos":[42675,42681],"content":"prev()","needQuote":true,"needEscape":true,"nodes":[{"content":"prev()","pos":[0,6]}]},{"pos":[43018,43025],"content":"valid()","needQuote":true,"needEscape":true,"nodes":[{"content":"valid()","pos":[0,7]}]},{"pos":[43248,43255],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  id: ContainerBidirectionalIterator`1\n  children:\n  - Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor\n  - Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  - Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode`1)\n  - Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.Clone\n  - Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.container\n  - Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  - Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  - Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.next\n  - Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  - Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  - Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,System.Int32)\n  - Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  - Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  - Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Implicit\n  - Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  - Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,System.Int32)\n  - Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  - Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  - Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  - Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  - Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.prev\n  - Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.valid\n  langs:\n  - csharp\n  name: ContainerBidirectionalIterator<TValue>\n  nameWithType: ContainerBidirectionalIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>\n  type: Class\n  syntax:\n    content: 'public class ContainerBidirectionalIterator<TValue> : Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator<TValue>'\n    typeParameters:\n    - id: TValue\n      description: Parameter description to be filled\n  inheritance:\n  - System.Object\n  implements:\n  - Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator<TValue>\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor\n  id: '#ctor'\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  langs:\n  - csharp\n  name: ContainerBidirectionalIterator()\n  nameWithType: ContainerBidirectionalIterator<TValue>.ContainerBidirectionalIterator()\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.ContainerBidirectionalIterator()\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public ContainerBidirectionalIterator ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  id: '#ctor(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)'\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  langs:\n  - csharp\n  name: ContainerBidirectionalIterator(ContainerBidirectionalIterator)\n  nameWithType: ContainerBidirectionalIterator<TValue>.ContainerBidirectionalIterator(ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.ContainerBidirectionalIterator(ContainerBidirectionalIterator)\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public ContainerBidirectionalIterator (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode`1)\n  id: '#ctor(Microsoft.VisualC.StlClr.Generic.INode`1)'\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  langs:\n  - csharp\n  name: ContainerBidirectionalIterator(INode<TValue>)\n  nameWithType: ContainerBidirectionalIterator<TValue>.ContainerBidirectionalIterator(INode<TValue>)\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.ContainerBidirectionalIterator(INode<TValue>)\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public ContainerBidirectionalIterator (Microsoft.VisualC.StlClr.Generic.INode<TValue> _Node);\n    parameters:\n    - id: _Node\n      type: Microsoft.VisualC.StlClr.Generic.INode`1\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.Clone\n  id: Clone\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: ContainerBidirectionalIterator<TValue>.Clone()\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.Clone()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public virtual object Clone ();\n    parameters: []\n    return:\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.container\n  id: container\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  langs:\n  - csharp\n  name: container()\n  nameWithType: ContainerBidirectionalIterator<TValue>.container()\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.container()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public virtual object container ();\n    parameters: []\n    return:\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  id: equal_to(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  langs:\n  - csharp\n  name: equal_to(ContainerBidirectionalIterator)\n  nameWithType: ContainerBidirectionalIterator<TValue>.equal_to(ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.equal_to(ContainerBidirectionalIterator)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public bool equal_to (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  id: equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  langs:\n  - csharp\n  name: equal_to(IInputIterator<TValue>)\n  nameWithType: ContainerBidirectionalIterator<TValue>.equal_to(IInputIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.equal_to(IInputIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public virtual bool equal_to (Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.next\n  id: next\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  langs:\n  - csharp\n  name: next()\n  nameWithType: ContainerBidirectionalIterator<TValue>.next()\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.next()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public virtual void next ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  id: op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  langs:\n  - csharp\n  name: op_Assign(ContainerBidirectionalIterator)\n  nameWithType: ContainerBidirectionalIterator<TValue>.op_Assign(ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.op_Assign(ContainerBidirectionalIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator op_Assign (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: Parameter description to be filled\n    return:\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  id: op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  langs:\n  - csharp\n  name: op_Decrement(ContainerBidirectionalIterator<TValue>)\n  nameWithType: ContainerBidirectionalIterator<TValue>.op_Decrement(ContainerBidirectionalIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.op_Decrement(ContainerBidirectionalIterator<TValue>)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Decrement (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue> );\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n      description: Parameter description to be filled\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,System.Int32)\n  id: op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  langs:\n  - csharp\n  name: op_Decrement(ContainerBidirectionalIterator<TValue>,Int32)\n  nameWithType: ContainerBidirectionalIterator<TValue>.op_Decrement(ContainerBidirectionalIterator<TValue>,Int32)\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.op_Decrement(ContainerBidirectionalIterator<TValue>,Int32)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Decrement (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue> , int A_0);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n      description: Parameter description to be filled\n    - id: A_0\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  id: op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  langs:\n  - csharp\n  name: op_Equality(ContainerBidirectionalIterator)\n  nameWithType: ContainerBidirectionalIterator<TValue>.op_Equality(ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.op_Equality(ContainerBidirectionalIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public bool op_Equality (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  id: op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  langs:\n  - csharp\n  name: op_Equality(IInputIterator<TValue>)\n  nameWithType: ContainerBidirectionalIterator<TValue>.op_Equality(IInputIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.op_Equality(IInputIterator<TValue>)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public bool op_Equality (Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Implicit\n  id: op_Implicit\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  langs:\n  - csharp\n  name: op_Implicit\n  nameWithType: ContainerBidirectionalIterator<TValue>.op_Implicit\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.op_Implicit\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator<TValue> op_Implicit ();\n    parameters: []\n    return:\n      type: Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  id: op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  langs:\n  - csharp\n  name: op_Increment(ContainerBidirectionalIterator<TValue>)\n  nameWithType: ContainerBidirectionalIterator<TValue>.op_Increment(ContainerBidirectionalIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.op_Increment(ContainerBidirectionalIterator<TValue>)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Increment (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue> );\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n      description: Parameter description to be filled\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,System.Int32)\n  id: op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  langs:\n  - csharp\n  name: op_Increment(ContainerBidirectionalIterator<TValue>,Int32)\n  nameWithType: ContainerBidirectionalIterator<TValue>.op_Increment(ContainerBidirectionalIterator<TValue>,Int32)\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.op_Increment(ContainerBidirectionalIterator<TValue>,Int32)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Increment (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue> , int A_0);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n      description: Parameter description to be filled\n    - id: A_0\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  id: op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  langs:\n  - csharp\n  name: op_Inequality(ContainerBidirectionalIterator)\n  nameWithType: ContainerBidirectionalIterator<TValue>.op_Inequality(ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.op_Inequality(ContainerBidirectionalIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public bool op_Inequality (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  id: op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  langs:\n  - csharp\n  name: op_Inequality(IInputIterator<TValue>)\n  nameWithType: ContainerBidirectionalIterator<TValue>.op_Inequality(IInputIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.op_Inequality(IInputIterator<TValue>)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public bool op_Inequality (Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  id: op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  langs:\n  - csharp\n  name: op_MemberSelection(ContainerBidirectionalIterator)\n  nameWithType: ContainerBidirectionalIterator<TValue>.op_MemberSelection(ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.op_MemberSelection(ContainerBidirectionalIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public static TValue op_MemberSelection (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Left);\n    parameters:\n    - id: _Left\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: Parameter description to be filled\n    return:\n      type: TValue@\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  id: op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  langs:\n  - csharp\n  name: op_PointerDereference(ContainerBidirectionalIterator)\n  nameWithType: ContainerBidirectionalIterator<TValue>.op_PointerDereference(ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.op_PointerDereference(ContainerBidirectionalIterator)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public static TValue op_PointerDereference (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Left);\n    parameters:\n    - id: _Left\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: Parameter description to be filled\n    return:\n      type: TValue@\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.prev\n  id: prev\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  langs:\n  - csharp\n  name: prev()\n  nameWithType: ContainerBidirectionalIterator<TValue>.prev()\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.prev()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public virtual void prev ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.valid\n  id: valid\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  langs:\n  - csharp\n  name: valid()\n  nameWithType: ContainerBidirectionalIterator<TValue>.valid()\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.valid()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  syntax:\n    content: public virtual bool valid ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  isExternal: false\n  name: ContainerBidirectionalIterator()\n  nameWithType: ContainerBidirectionalIterator<TValue>.ContainerBidirectionalIterator()\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.ContainerBidirectionalIterator()\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  isExternal: false\n  name: ContainerBidirectionalIterator(ContainerBidirectionalIterator)\n  nameWithType: ContainerBidirectionalIterator<TValue>.ContainerBidirectionalIterator(ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.ContainerBidirectionalIterator(ContainerBidirectionalIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerBidirectionalIterator\n  nameWithType: ContainerBidirectionalIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.INode`1)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  isExternal: false\n  name: ContainerBidirectionalIterator(INode<TValue>)\n  nameWithType: ContainerBidirectionalIterator<TValue>.ContainerBidirectionalIterator(INode<TValue>)\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.ContainerBidirectionalIterator(INode<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.INode`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: INode<TValue>\n  nameWithType: INode<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.INode<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.Clone\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  isExternal: false\n  name: Clone()\n  nameWithType: ContainerBidirectionalIterator<TValue>.Clone()\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.Clone()\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.container\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  isExternal: false\n  name: container()\n  nameWithType: ContainerBidirectionalIterator<TValue>.container()\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.container()\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  isExternal: false\n  name: equal_to(ContainerBidirectionalIterator)\n  nameWithType: ContainerBidirectionalIterator<TValue>.equal_to(ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.equal_to(ContainerBidirectionalIterator)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerBidirectionalIterator\n  nameWithType: ContainerBidirectionalIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  isExternal: false\n  name: equal_to(IInputIterator<TValue>)\n  nameWithType: ContainerBidirectionalIterator<TValue>.equal_to(IInputIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.equal_to(IInputIterator<TValue>)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: IInputIterator<TValue>\n  nameWithType: IInputIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.next\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  isExternal: false\n  name: next()\n  nameWithType: ContainerBidirectionalIterator<TValue>.next()\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.next()\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  isExternal: false\n  name: op_Assign(ContainerBidirectionalIterator)\n  nameWithType: ContainerBidirectionalIterator<TValue>.op_Assign(ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.op_Assign(ContainerBidirectionalIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerBidirectionalIterator\n  nameWithType: ContainerBidirectionalIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerBidirectionalIterator\n  nameWithType: ContainerBidirectionalIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  isExternal: false\n  name: op_Decrement(ContainerBidirectionalIterator<TValue>)\n  nameWithType: ContainerBidirectionalIterator<TValue>.op_Decrement(ContainerBidirectionalIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.op_Decrement(ContainerBidirectionalIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ContainerBidirectionalIterator<TValue>\n  nameWithType: ContainerBidirectionalIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  isExternal: false\n  name: op_Decrement(ContainerBidirectionalIterator<TValue>,Int32)\n  nameWithType: ContainerBidirectionalIterator<TValue>.op_Decrement(ContainerBidirectionalIterator<TValue>,Int32)\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.op_Decrement(ContainerBidirectionalIterator<TValue>,Int32)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ContainerBidirectionalIterator<TValue>\n  nameWithType: ContainerBidirectionalIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  isExternal: false\n  name: op_Equality(ContainerBidirectionalIterator)\n  nameWithType: ContainerBidirectionalIterator<TValue>.op_Equality(ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.op_Equality(ContainerBidirectionalIterator)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerBidirectionalIterator\n  nameWithType: ContainerBidirectionalIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  isExternal: false\n  name: op_Equality(IInputIterator<TValue>)\n  nameWithType: ContainerBidirectionalIterator<TValue>.op_Equality(IInputIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.op_Equality(IInputIterator<TValue>)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: IInputIterator<TValue>\n  nameWithType: IInputIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Implicit\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  isExternal: false\n  name: op_Implicit\n  nameWithType: ContainerBidirectionalIterator<TValue>.op_Implicit\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.op_Implicit\n- uid: Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: IBidirectionalIterator<TValue>\n  nameWithType: IBidirectionalIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  isExternal: false\n  name: op_Increment(ContainerBidirectionalIterator<TValue>)\n  nameWithType: ContainerBidirectionalIterator<TValue>.op_Increment(ContainerBidirectionalIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.op_Increment(ContainerBidirectionalIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ContainerBidirectionalIterator<TValue>\n  nameWithType: ContainerBidirectionalIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  isExternal: false\n  name: op_Increment(ContainerBidirectionalIterator<TValue>,Int32)\n  nameWithType: ContainerBidirectionalIterator<TValue>.op_Increment(ContainerBidirectionalIterator<TValue>,Int32)\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.op_Increment(ContainerBidirectionalIterator<TValue>,Int32)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ContainerBidirectionalIterator<TValue>\n  nameWithType: ContainerBidirectionalIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  isExternal: false\n  name: op_Inequality(ContainerBidirectionalIterator)\n  nameWithType: ContainerBidirectionalIterator<TValue>.op_Inequality(ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.op_Inequality(ContainerBidirectionalIterator)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerBidirectionalIterator\n  nameWithType: ContainerBidirectionalIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  isExternal: false\n  name: op_Inequality(IInputIterator<TValue>)\n  nameWithType: ContainerBidirectionalIterator<TValue>.op_Inequality(IInputIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.op_Inequality(IInputIterator<TValue>)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: IInputIterator<TValue>\n  nameWithType: IInputIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  isExternal: false\n  name: op_MemberSelection(ContainerBidirectionalIterator)\n  nameWithType: ContainerBidirectionalIterator<TValue>.op_MemberSelection(ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.op_MemberSelection(ContainerBidirectionalIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerBidirectionalIterator\n  nameWithType: ContainerBidirectionalIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  isExternal: false\n  name: op_PointerDereference(ContainerBidirectionalIterator)\n  nameWithType: ContainerBidirectionalIterator<TValue>.op_PointerDereference(ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.op_PointerDereference(ContainerBidirectionalIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerBidirectionalIterator\n  nameWithType: ContainerBidirectionalIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.prev\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  isExternal: false\n  name: prev()\n  nameWithType: ContainerBidirectionalIterator<TValue>.prev()\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.prev()\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.valid\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  isExternal: false\n  name: valid()\n  nameWithType: ContainerBidirectionalIterator<TValue>.valid()\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>.valid()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1.equal_to*\n  parent: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  isExternal: false\n  nameWithType: ContainerBidirectionalIterator<TValue>.\n"}