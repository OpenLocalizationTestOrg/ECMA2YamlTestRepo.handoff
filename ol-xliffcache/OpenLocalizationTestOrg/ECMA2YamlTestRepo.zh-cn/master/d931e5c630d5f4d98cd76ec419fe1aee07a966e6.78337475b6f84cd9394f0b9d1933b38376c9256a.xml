{"nodes":[{"pos":[511,537],"content":"ECDsaCertificateExtensions","needQuote":true,"needEscape":true,"nodes":[{"content":"ECDsaCertificateExtensions","pos":[0,26]}]},{"pos":[1508,1544],"content":"GetECDsaPrivateKey(X509Certificate2)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetECDsaPrivateKey(X509Certificate2)","pos":[0,36]}]},{"pos":[2157,2191],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2270,2304],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2717,2752],"content":"GetECDsaPublicKey(X509Certificate2)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetECDsaPublicKey(X509Certificate2)","pos":[0,35]}]},{"pos":[3362,3396],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3475,3509],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3620,3633],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[3909,3945],"content":"GetECDsaPrivateKey(X509Certificate2)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetECDsaPrivateKey(X509Certificate2)","pos":[0,36]}]},{"pos":[4257,4262],"content":"ECDsa","needQuote":true,"needEscape":true,"nodes":[{"content":"ECDsa","pos":[0,5]}]},{"pos":[4485,4501],"content":"X509Certificate2","needQuote":true,"needEscape":true,"nodes":[{"content":"X509Certificate2","pos":[0,16]}]},{"pos":[4884,4919],"content":"GetECDsaPublicKey(X509Certificate2)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetECDsaPublicKey(X509Certificate2)","pos":[0,35]}]},{"pos":[5229,5234],"content":"ECDsa","needQuote":true,"needEscape":true,"nodes":[{"content":"ECDsa","pos":[0,5]}]},{"pos":[5457,5473],"content":"X509Certificate2","needQuote":true,"needEscape":true,"nodes":[{"content":"X509Certificate2","pos":[0,16]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  id: ECDsaCertificateExtensions\n  children:\n  - System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2@)\n  - System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2@)\n  langs:\n  - csharp\n  name: ECDsaCertificateExtensions\n  nameWithType: ECDsaCertificateExtensions\n  fullName: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  type: Class\n  syntax:\n    content: public static class ECDsaCertificateExtensions\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2@)\n  id: GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2@)\n  parent: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  langs:\n  - csharp\n  name: GetECDsaPrivateKey(X509Certificate2)\n  nameWithType: ECDsaCertificateExtensions.GetECDsaPrivateKey(X509Certificate2)\n  fullName: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(X509Certificate2)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography.X509Certificates\n  syntax:\n    content: public static System.Security.Cryptography.ECDsa GetECDsaPrivateKey (this System.Security.Cryptography.X509Certificates.X509Certificate2 certificate);\n    parameters:\n    - id: certificate\n      type: System.Security.Cryptography.X509Certificates.X509Certificate2\n      description: Parameter description to be filled\n    return:\n      type: System.Security.Cryptography.ECDsa\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2@)\n  id: GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2@)\n  parent: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  langs:\n  - csharp\n  name: GetECDsaPublicKey(X509Certificate2)\n  nameWithType: ECDsaCertificateExtensions.GetECDsaPublicKey(X509Certificate2)\n  fullName: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(X509Certificate2)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography.X509Certificates\n  syntax:\n    content: public static System.Security.Cryptography.ECDsa GetECDsaPublicKey (this System.Security.Cryptography.X509Certificates.X509Certificate2 certificate);\n    parameters:\n    - id: certificate\n      type: System.Security.Cryptography.X509Certificates.X509Certificate2\n      description: Parameter description to be filled\n    return:\n      type: System.Security.Cryptography.ECDsa\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2@)\n  parent: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  isExternal: false\n  name: GetECDsaPrivateKey(X509Certificate2)\n  nameWithType: ECDsaCertificateExtensions.GetECDsaPrivateKey(X509Certificate2)\n  fullName: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(X509Certificate2)\n- uid: System.Security.Cryptography.ECDsa\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECDsa\n  nameWithType: ECDsa\n  fullName: System.Security.Cryptography.ECDsa\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: true\n  name: X509Certificate2\n  nameWithType: X509Certificate2\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2\n- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2@)\n  parent: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  isExternal: false\n  name: GetECDsaPublicKey(X509Certificate2)\n  nameWithType: ECDsaCertificateExtensions.GetECDsaPublicKey(X509Certificate2)\n  fullName: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(X509Certificate2)\n- uid: System.Security.Cryptography.ECDsa\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECDsa\n  nameWithType: ECDsa\n  fullName: System.Security.Cryptography.ECDsa\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: true\n  name: X509Certificate2\n  nameWithType: X509Certificate2\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2\n"}