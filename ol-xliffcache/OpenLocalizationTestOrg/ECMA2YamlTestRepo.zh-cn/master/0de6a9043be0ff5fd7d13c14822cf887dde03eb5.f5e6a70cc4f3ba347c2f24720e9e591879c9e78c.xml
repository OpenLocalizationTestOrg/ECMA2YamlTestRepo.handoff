{"nodes":[{"pos":[1253,1272],"content":"PrincipalPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"PrincipalPermission","pos":[0,19]}]},{"pos":[2227,2263],"content":"PrincipalPermission(PermissionState)","needQuote":true,"needEscape":true,"nodes":[{"content":"PrincipalPermission(PermissionState)","pos":[0,36]}]},{"pos":[2732,2766],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3035,3069],"content":"PrincipalPermission(String,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"PrincipalPermission(String,String)","pos":[0,34]}]},{"pos":[3478,3512],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3573,3607],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3906,3948],"content":"PrincipalPermission(String,String,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"PrincipalPermission(String,String,Boolean)","pos":[0,42]}]},{"pos":[4395,4429],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4490,4524],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4597,4631],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4838,4844],"content":"Copy()","needQuote":true,"needEscape":true,"nodes":[{"content":"Copy()","pos":[0,6]}]},{"pos":[5195,5229],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5440,5448],"content":"Demand()","needQuote":true,"needEscape":true,"nodes":[{"content":"Demand()","pos":[0,8]}]},{"pos":[5951,5965],"content":"Equals(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[6315,6349],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6408,6442],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6721,6745],"content":"FromXml(SecurityElement)","needQuote":true,"needEscape":true,"nodes":[{"content":"FromXml(SecurityElement)","pos":[0,24]}]},{"pos":[7152,7186],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7407,7420],"content":"GetHashCode()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[7762,7796],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8071,8093],"content":"Intersect(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"Intersect(IPermission)","pos":[0,22]}]},{"pos":[8517,8551],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8623,8657],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8934,8957],"content":"IsSubsetOf(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"IsSubsetOf(IPermission)","pos":[0,23]}]},{"pos":[9361,9395],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9454,9488],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9715,9731],"content":"IsUnrestricted()","needQuote":true,"needEscape":true,"nodes":[{"content":"IsUnrestricted()","pos":[0,16]}]},{"pos":[10076,10110],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10325,10335],"content":"ToString()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[10672,10706],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10915,10922],"content":"ToXml()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToXml()","pos":[0,7]}]},{"pos":[11284,11318],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11585,11603],"content":"Union(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"Union(IPermission)","pos":[0,18]}]},{"pos":[12013,12047],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12119,12153],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12264,12277],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[12470,12506],"content":"PrincipalPermission(PermissionState)","needQuote":true,"needEscape":true,"nodes":[{"content":"PrincipalPermission(PermissionState)","pos":[0,36]}]},{"pos":[12794,12809],"content":"PermissionState","needQuote":true,"needEscape":true,"nodes":[{"content":"PermissionState","pos":[0,15]}]},{"pos":[13074,13108],"content":"PrincipalPermission(String,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"PrincipalPermission(String,String)","pos":[0,34]}]},{"pos":[13341,13347],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[13463,13469],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[13710,13752],"content":"PrincipalPermission(String,String,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"PrincipalPermission(String,String,Boolean)","pos":[0,42]}]},{"pos":[14001,14007],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[14123,14129],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[14246,14253],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[14451,14457],"content":"Copy()","needQuote":true,"needEscape":true,"nodes":[{"content":"Copy()","pos":[0,6]}]},{"pos":[14657,14668],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[14885,14893],"content":"Demand()","needQuote":true,"needEscape":true,"nodes":[{"content":"Demand()","pos":[0,8]}]},{"pos":[15171,15185],"content":"Equals(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[15379,15386],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[15504,15510],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15742,15766],"content":"FromXml(SecurityElement)","needQuote":true,"needEscape":true,"nodes":[{"content":"FromXml(SecurityElement)","pos":[0,24]}]},{"pos":[16006,16021],"content":"SecurityElement","needQuote":true,"needEscape":true,"nodes":[{"content":"SecurityElement","pos":[0,15]}]},{"pos":[16251,16264],"content":"GetHashCode()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[16454,16459],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[16687,16709],"content":"Intersect(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"Intersect(IPermission)","pos":[0,22]}]},{"pos":[16941,16952],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[17110,17121],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[17371,17394],"content":"IsSubsetOf(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"IsSubsetOf(IPermission)","pos":[0,23]}]},{"pos":[17606,17613],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[17754,17765],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[17990,18006],"content":"IsUnrestricted()","needQuote":true,"needEscape":true,"nodes":[{"content":"IsUnrestricted()","pos":[0,16]}]},{"pos":[18204,18211],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[18413,18423],"content":"ToString()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[18608,18614],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[18811,18818],"content":"ToXml()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToXml()","pos":[0,7]}]},{"pos":[19024,19039],"content":"SecurityElement","needQuote":true,"needEscape":true,"nodes":[{"content":"SecurityElement","pos":[0,15]}]},{"pos":[19292,19310],"content":"Union(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"Union(IPermission)","pos":[0,18]}]},{"pos":[19534,19545],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[19703,19714],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Permissions.PrincipalPermission\n  id: PrincipalPermission\n  children:\n  - System.Security.Permissions.PrincipalPermission.#ctor(System.Security.Permissions.PermissionState)\n  - System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String)\n  - System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String,System.Boolean)\n  - System.Security.Permissions.PrincipalPermission.Copy\n  - System.Security.Permissions.PrincipalPermission.Demand\n  - System.Security.Permissions.PrincipalPermission.Equals(System.Object)\n  - System.Security.Permissions.PrincipalPermission.FromXml(System.Security.SecurityElement)\n  - System.Security.Permissions.PrincipalPermission.GetHashCode\n  - System.Security.Permissions.PrincipalPermission.Intersect(System.Security.IPermission)\n  - System.Security.Permissions.PrincipalPermission.IsSubsetOf(System.Security.IPermission)\n  - System.Security.Permissions.PrincipalPermission.IsUnrestricted\n  - System.Security.Permissions.PrincipalPermission.ToString\n  - System.Security.Permissions.PrincipalPermission.ToXml\n  - System.Security.Permissions.PrincipalPermission.Union(System.Security.IPermission)\n  langs:\n  - csharp\n  name: PrincipalPermission\n  nameWithType: PrincipalPermission\n  fullName: System.Security.Permissions.PrincipalPermission\n  type: Class\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class PrincipalPermission : System.Security.IPermission, System.Security.Permissions.IUnrestrictedPermission\n  inheritance:\n  - System.Object\n  implements:\n  - System.Security.IPermission\n  - System.Security.Permissions.IUnrestrictedPermission\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.Security.Permissions.PermissionState)\n  id: '#ctor(System.Security.Permissions.PermissionState)'\n  parent: System.Security.Permissions.PrincipalPermission\n  langs:\n  - csharp\n  name: PrincipalPermission(PermissionState)\n  nameWithType: PrincipalPermission.PrincipalPermission(PermissionState)\n  fullName: System.Security.Permissions.PrincipalPermission.PrincipalPermission(PermissionState)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public PrincipalPermission (System.Security.Permissions.PermissionState state);\n    parameters:\n    - id: state\n      type: System.Security.Permissions.PermissionState\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String)\n  id: '#ctor(System.String,System.String)'\n  parent: System.Security.Permissions.PrincipalPermission\n  langs:\n  - csharp\n  name: PrincipalPermission(String,String)\n  nameWithType: PrincipalPermission.PrincipalPermission(String,String)\n  fullName: System.Security.Permissions.PrincipalPermission.PrincipalPermission(String,String)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public PrincipalPermission (string name, string role);\n    parameters:\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n    - id: role\n      type: System.String\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String,System.Boolean)\n  id: '#ctor(System.String,System.String,System.Boolean)'\n  parent: System.Security.Permissions.PrincipalPermission\n  langs:\n  - csharp\n  name: PrincipalPermission(String,String,Boolean)\n  nameWithType: PrincipalPermission.PrincipalPermission(String,String,Boolean)\n  fullName: System.Security.Permissions.PrincipalPermission.PrincipalPermission(String,String,Boolean)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public PrincipalPermission (string name, string role, bool isAuthenticated);\n    parameters:\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n    - id: role\n      type: System.String\n      description: Parameter description to be filled\n    - id: isAuthenticated\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.PrincipalPermission.Copy\n  id: Copy\n  parent: System.Security.Permissions.PrincipalPermission\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: PrincipalPermission.Copy()\n  fullName: System.Security.Permissions.PrincipalPermission.Copy()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public System.Security.IPermission Copy ();\n    parameters: []\n    return:\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.PrincipalPermission.Demand\n  id: Demand\n  parent: System.Security.Permissions.PrincipalPermission\n  langs:\n  - csharp\n  name: Demand()\n  nameWithType: PrincipalPermission.Demand()\n  fullName: System.Security.Permissions.PrincipalPermission.Demand()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public void Demand ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.PrincipalPermission.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Security.Permissions.PrincipalPermission\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: PrincipalPermission.Equals(Object)\n  fullName: System.Security.Permissions.PrincipalPermission.Equals(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.PrincipalPermission.FromXml(System.Security.SecurityElement)\n  id: FromXml(System.Security.SecurityElement)\n  parent: System.Security.Permissions.PrincipalPermission\n  langs:\n  - csharp\n  name: FromXml(SecurityElement)\n  nameWithType: PrincipalPermission.FromXml(SecurityElement)\n  fullName: System.Security.Permissions.PrincipalPermission.FromXml(SecurityElement)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public void FromXml (System.Security.SecurityElement elem);\n    parameters:\n    - id: elem\n      type: System.Security.SecurityElement\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.PrincipalPermission.GetHashCode\n  id: GetHashCode\n  parent: System.Security.Permissions.PrincipalPermission\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: PrincipalPermission.GetHashCode()\n  fullName: System.Security.Permissions.PrincipalPermission.GetHashCode()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.PrincipalPermission.Intersect(System.Security.IPermission)\n  id: Intersect(System.Security.IPermission)\n  parent: System.Security.Permissions.PrincipalPermission\n  langs:\n  - csharp\n  name: Intersect(IPermission)\n  nameWithType: PrincipalPermission.Intersect(IPermission)\n  fullName: System.Security.Permissions.PrincipalPermission.Intersect(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public System.Security.IPermission Intersect (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n    return:\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.PrincipalPermission.IsSubsetOf(System.Security.IPermission)\n  id: IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.Permissions.PrincipalPermission\n  langs:\n  - csharp\n  name: IsSubsetOf(IPermission)\n  nameWithType: PrincipalPermission.IsSubsetOf(IPermission)\n  fullName: System.Security.Permissions.PrincipalPermission.IsSubsetOf(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public bool IsSubsetOf (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.PrincipalPermission.IsUnrestricted\n  id: IsUnrestricted\n  parent: System.Security.Permissions.PrincipalPermission\n  langs:\n  - csharp\n  name: IsUnrestricted()\n  nameWithType: PrincipalPermission.IsUnrestricted()\n  fullName: System.Security.Permissions.PrincipalPermission.IsUnrestricted()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public bool IsUnrestricted ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.PrincipalPermission.ToString\n  id: ToString\n  parent: System.Security.Permissions.PrincipalPermission\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: PrincipalPermission.ToString()\n  fullName: System.Security.Permissions.PrincipalPermission.ToString()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.PrincipalPermission.ToXml\n  id: ToXml\n  parent: System.Security.Permissions.PrincipalPermission\n  langs:\n  - csharp\n  name: ToXml()\n  nameWithType: PrincipalPermission.ToXml()\n  fullName: System.Security.Permissions.PrincipalPermission.ToXml()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public System.Security.SecurityElement ToXml ();\n    parameters: []\n    return:\n      type: System.Security.SecurityElement\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.PrincipalPermission.Union(System.Security.IPermission)\n  id: Union(System.Security.IPermission)\n  parent: System.Security.Permissions.PrincipalPermission\n  langs:\n  - csharp\n  name: Union(IPermission)\n  nameWithType: PrincipalPermission.Union(IPermission)\n  fullName: System.Security.Permissions.PrincipalPermission.Union(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public System.Security.IPermission Union (System.Security.IPermission other);\n    parameters:\n    - id: other\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n    return:\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.Security.Permissions.PermissionState)\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: PrincipalPermission(PermissionState)\n  nameWithType: PrincipalPermission.PrincipalPermission(PermissionState)\n  fullName: System.Security.Permissions.PrincipalPermission.PrincipalPermission(PermissionState)\n- uid: System.Security.Permissions.PermissionState\n  parent: System.Security.Permissions\n  isExternal: false\n  name: PermissionState\n  nameWithType: PermissionState\n  fullName: System.Security.Permissions.PermissionState\n- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String)\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: PrincipalPermission(String,String)\n  nameWithType: PrincipalPermission.PrincipalPermission(String,String)\n  fullName: System.Security.Permissions.PrincipalPermission.PrincipalPermission(String,String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String,System.Boolean)\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: PrincipalPermission(String,String,Boolean)\n  nameWithType: PrincipalPermission.PrincipalPermission(String,String,Boolean)\n  fullName: System.Security.Permissions.PrincipalPermission.PrincipalPermission(String,String,Boolean)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Permissions.PrincipalPermission.Copy\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: Copy()\n  nameWithType: PrincipalPermission.Copy()\n  fullName: System.Security.Permissions.PrincipalPermission.Copy()\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.Permissions.PrincipalPermission.Demand\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: Demand()\n  nameWithType: PrincipalPermission.Demand()\n  fullName: System.Security.Permissions.PrincipalPermission.Demand()\n- uid: System.Security.Permissions.PrincipalPermission.Equals(System.Object)\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: PrincipalPermission.Equals(Object)\n  fullName: System.Security.Permissions.PrincipalPermission.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Security.Permissions.PrincipalPermission.FromXml(System.Security.SecurityElement)\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: FromXml(SecurityElement)\n  nameWithType: PrincipalPermission.FromXml(SecurityElement)\n  fullName: System.Security.Permissions.PrincipalPermission.FromXml(SecurityElement)\n- uid: System.Security.SecurityElement\n  parent: System.Security\n  isExternal: false\n  name: SecurityElement\n  nameWithType: SecurityElement\n  fullName: System.Security.SecurityElement\n- uid: System.Security.Permissions.PrincipalPermission.GetHashCode\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: PrincipalPermission.GetHashCode()\n  fullName: System.Security.Permissions.PrincipalPermission.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Permissions.PrincipalPermission.Intersect(System.Security.IPermission)\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: Intersect(IPermission)\n  nameWithType: PrincipalPermission.Intersect(IPermission)\n  fullName: System.Security.Permissions.PrincipalPermission.Intersect(IPermission)\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.Permissions.PrincipalPermission.IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: IsSubsetOf(IPermission)\n  nameWithType: PrincipalPermission.IsSubsetOf(IPermission)\n  fullName: System.Security.Permissions.PrincipalPermission.IsSubsetOf(IPermission)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.Permissions.PrincipalPermission.IsUnrestricted\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: IsUnrestricted()\n  nameWithType: PrincipalPermission.IsUnrestricted()\n  fullName: System.Security.Permissions.PrincipalPermission.IsUnrestricted()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Permissions.PrincipalPermission.ToString\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: ToString()\n  nameWithType: PrincipalPermission.ToString()\n  fullName: System.Security.Permissions.PrincipalPermission.ToString()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Permissions.PrincipalPermission.ToXml\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: ToXml()\n  nameWithType: PrincipalPermission.ToXml()\n  fullName: System.Security.Permissions.PrincipalPermission.ToXml()\n- uid: System.Security.SecurityElement\n  parent: System.Security\n  isExternal: false\n  name: SecurityElement\n  nameWithType: SecurityElement\n  fullName: System.Security.SecurityElement\n- uid: System.Security.Permissions.PrincipalPermission.Union(System.Security.IPermission)\n  parent: System.Security.Permissions.PrincipalPermission\n  isExternal: false\n  name: Union(IPermission)\n  nameWithType: PrincipalPermission.Union(IPermission)\n  fullName: System.Security.Permissions.PrincipalPermission.Union(IPermission)\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n"}