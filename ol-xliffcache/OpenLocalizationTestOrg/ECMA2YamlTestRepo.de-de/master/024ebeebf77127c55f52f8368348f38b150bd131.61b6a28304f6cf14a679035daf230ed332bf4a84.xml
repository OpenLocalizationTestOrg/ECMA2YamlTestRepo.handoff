{"nodes":[{"pos":[997,1002],"content":"Mutex","needQuote":true,"needEscape":true,"nodes":[{"content":"Mutex","pos":[0,5]}]},{"pos":[3864,3871],"content":"Mutex()","needQuote":true,"needEscape":true,"nodes":[{"content":"Mutex()","pos":[0,7]}]},{"pos":[4273,4287],"content":"Mutex(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Mutex(Boolean)","pos":[0,14]}]},{"pos":[4598,4632],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4853,4874],"content":"Mutex(Boolean,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Mutex(Boolean,String)","pos":[0,21]}]},{"pos":[5212,5246],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5307,5341],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5594,5623],"content":"Mutex(Boolean,String,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Mutex(Boolean,String,Boolean)","pos":[0,29]}]},{"pos":[5998,6032],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6093,6127],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6195,6229],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6570,6613],"content":"Mutex(Boolean,String,Boolean,MutexSecurity)","needQuote":true,"needEscape":true,"nodes":[{"content":"Mutex(Boolean,String,Boolean,MutexSecurity)","pos":[0,43]}]},{"pos":[7075,7109],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7170,7204],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7272,7306],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7406,7440],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7621,7639],"content":"GetAccessControl()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetAccessControl()","pos":[0,18]}]},{"pos":[8008,8042],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8245,8265],"content":"OpenExisting(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"OpenExisting(String)","pos":[0,20]}]},{"pos":[8601,8635],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8702,8736],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9072,9104],"content":"OpenExisting(String,MutexRights)","needQuote":true,"needEscape":true,"nodes":[{"content":"OpenExisting(String,MutexRights)","pos":[0,32]}]},{"pos":[9514,9548],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9639,9673],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9740,9774],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9996,10010],"content":"ReleaseMutex()","needQuote":true,"needEscape":true,"nodes":[{"content":"ReleaseMutex()","pos":[0,14]}]},{"pos":[10511,10542],"content":"SetAccessControl(MutexSecurity)","needQuote":true,"needEscape":true,"nodes":[{"content":"SetAccessControl(MutexSecurity)","pos":[0,31]}]},{"pos":[10964,10998],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11255,11284],"content":"TryOpenExisting(String,Mutex)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryOpenExisting(String,Mutex)","pos":[0,29]}]},{"pos":[11658,11692],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11764,11798],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11857,11891],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12284,12325],"content":"TryOpenExisting(String,MutexRights,Mutex)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryOpenExisting(String,MutexRights,Mutex)","pos":[0,41]}]},{"pos":[12773,12807],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12898,12932],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13004,13038],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13097,13131],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13308,13335],"content":"System.Threading.WaitHandle","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Threading.WaitHandle","pos":[0,27]}]},{"pos":[13433,13440],"content":"Mutex()","needQuote":true,"needEscape":true,"nodes":[{"content":"Mutex()","pos":[0,7]}]},{"pos":[13627,13641],"content":"Mutex(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Mutex(Boolean)","pos":[0,14]}]},{"pos":[13796,13803],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[13982,14003],"content":"Mutex(Boolean,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Mutex(Boolean,String)","pos":[0,21]}]},{"pos":[14172,14179],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[14297,14303],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[14496,14525],"content":"Mutex(Boolean,String,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Mutex(Boolean,String,Boolean)","pos":[0,29]}]},{"pos":[14710,14717],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[14835,14841],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[14958,14965],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[15204,15247],"content":"Mutex(Boolean,String,Boolean,MutexSecurity)","needQuote":true,"needEscape":true,"nodes":[{"content":"Mutex(Boolean,String,Boolean,MutexSecurity)","pos":[0,43]}]},{"pos":[15460,15467],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[15585,15591],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[15708,15715],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[15886,15899],"content":"MutexSecurity","needQuote":true,"needEscape":true,"nodes":[{"content":"MutexSecurity","pos":[0,13]}]},{"pos":[16094,16112],"content":"GetAccessControl()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetAccessControl()","pos":[0,18]}]},{"pos":[16327,16340],"content":"MutexSecurity","needQuote":true,"needEscape":true,"nodes":[{"content":"MutexSecurity","pos":[0,13]}]},{"pos":[16546,16566],"content":"OpenExisting(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"OpenExisting(String)","pos":[0,20]}]},{"pos":[16751,16756],"content":"Mutex","needQuote":true,"needEscape":true,"nodes":[{"content":"Mutex","pos":[0,5]}]},{"pos":[16880,16886],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[17097,17129],"content":"OpenExisting(String,MutexRights)","needQuote":true,"needEscape":true,"nodes":[{"content":"OpenExisting(String,MutexRights)","pos":[0,32]}]},{"pos":[17338,17343],"content":"Mutex","needQuote":true,"needEscape":true,"nodes":[{"content":"Mutex","pos":[0,5]}]},{"pos":[17467,17473],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[17640,17651],"content":"MutexRights","needQuote":true,"needEscape":true,"nodes":[{"content":"MutexRights","pos":[0,11]}]},{"pos":[17838,17852],"content":"ReleaseMutex()","needQuote":true,"needEscape":true,"nodes":[{"content":"ReleaseMutex()","pos":[0,14]}]},{"pos":[18093,18124],"content":"SetAccessControl(MutexSecurity)","needQuote":true,"needEscape":true,"nodes":[{"content":"SetAccessControl(MutexSecurity)","pos":[0,31]}]},{"pos":[18365,18378],"content":"MutexSecurity","needQuote":true,"needEscape":true,"nodes":[{"content":"MutexSecurity","pos":[0,13]}]},{"pos":[18611,18640],"content":"TryOpenExisting(String,Mutex)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryOpenExisting(String,Mutex)","pos":[0,29]}]},{"pos":[18825,18832],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[18950,18956],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[19091,19096],"content":"Mutex","needQuote":true,"needEscape":true,"nodes":[{"content":"Mutex","pos":[0,5]}]},{"pos":[19342,19383],"content":"TryOpenExisting(String,MutexRights,Mutex)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryOpenExisting(String,MutexRights,Mutex)","pos":[0,41]}]},{"pos":[19592,19599],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[19717,19723],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[19890,19901],"content":"MutexRights","needQuote":true,"needEscape":true,"nodes":[{"content":"MutexRights","pos":[0,11]}]},{"pos":[20069,20074],"content":"Mutex","needQuote":true,"needEscape":true,"nodes":[{"content":"Mutex","pos":[0,5]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.Mutex\n  id: Mutex\n  children:\n  - System.Threading.Mutex.#ctor\n  - System.Threading.Mutex.#ctor(System.Boolean)\n  - System.Threading.Mutex.#ctor(System.Boolean,System.String)\n  - System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@)\n  - System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@,System.Security.AccessControl.MutexSecurity)\n  - System.Threading.Mutex.GetAccessControl\n  - System.Threading.Mutex.OpenExisting(System.String)\n  - System.Threading.Mutex.OpenExisting(System.String,System.Security.AccessControl.MutexRights)\n  - System.Threading.Mutex.ReleaseMutex\n  - System.Threading.Mutex.SetAccessControl(System.Security.AccessControl.MutexSecurity)\n  - System.Threading.Mutex.TryOpenExisting(System.String,System.Threading.Mutex@)\n  - System.Threading.Mutex.TryOpenExisting(System.String,System.Security.AccessControl.MutexRights,System.Threading.Mutex@)\n  langs:\n  - csharp\n  name: Mutex\n  nameWithType: Mutex\n  fullName: System.Threading.Mutex\n  type: Class\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class Mutex : System.Threading.WaitHandle\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.Threading.WaitHandle\n  implements: []\n  inheritedMembers:\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Threading.WaitHandle.Close\n  - System.Threading.WaitHandle.Dispose\n  - System.Threading.WaitHandle.Dispose(System.Boolean)\n  - System.Threading.WaitHandle.Handle\n  - System.Threading.WaitHandle.InvalidHandle\n  - System.Threading.WaitHandle.SafeWaitHandle\n  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)\n  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)\n  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)\n  - System.Threading.WaitHandle.WaitOne\n  - System.Threading.WaitHandle.WaitOne(System.Int32)\n  - System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)\n  - System.Threading.WaitHandle.WaitOne(System.TimeSpan)\n  - System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)\n  - System.Threading.WaitHandle.WaitTimeout\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.Mutex.#ctor\n  id: '#ctor'\n  parent: System.Threading.Mutex\n  langs:\n  - csharp\n  name: Mutex()\n  nameWithType: Mutex.Mutex()\n  fullName: System.Threading.Mutex.Mutex()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public Mutex ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.Mutex.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: System.Threading.Mutex\n  langs:\n  - csharp\n  name: Mutex(Boolean)\n  nameWithType: Mutex.Mutex(Boolean)\n  fullName: System.Threading.Mutex.Mutex(Boolean)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public Mutex (bool initiallyOwned);\n    parameters:\n    - id: initiallyOwned\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.Mutex.#ctor(System.Boolean,System.String)\n  id: '#ctor(System.Boolean,System.String)'\n  parent: System.Threading.Mutex\n  langs:\n  - csharp\n  name: Mutex(Boolean,String)\n  nameWithType: Mutex.Mutex(Boolean,String)\n  fullName: System.Threading.Mutex.Mutex(Boolean,String)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public Mutex (bool initiallyOwned, string name);\n    parameters:\n    - id: initiallyOwned\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@)\n  id: '#ctor(System.Boolean,System.String,System.Boolean@)'\n  parent: System.Threading.Mutex\n  langs:\n  - csharp\n  name: Mutex(Boolean,String,Boolean)\n  nameWithType: Mutex.Mutex(Boolean,String,Boolean)\n  fullName: System.Threading.Mutex.Mutex(Boolean,String,Boolean)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public Mutex (bool initiallyOwned, string name, out bool createdNew);\n    parameters:\n    - id: initiallyOwned\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n    - id: createdNew\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@,System.Security.AccessControl.MutexSecurity)\n  id: '#ctor(System.Boolean,System.String,System.Boolean@,System.Security.AccessControl.MutexSecurity)'\n  parent: System.Threading.Mutex\n  langs:\n  - csharp\n  name: Mutex(Boolean,String,Boolean,MutexSecurity)\n  nameWithType: Mutex.Mutex(Boolean,String,Boolean,MutexSecurity)\n  fullName: System.Threading.Mutex.Mutex(Boolean,String,Boolean,MutexSecurity)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public Mutex (bool initiallyOwned, string name, out bool createdNew, System.Security.AccessControl.MutexSecurity mutexSecurity);\n    parameters:\n    - id: initiallyOwned\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n    - id: createdNew\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: mutexSecurity\n      type: System.Security.AccessControl.MutexSecurity\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.Mutex.GetAccessControl\n  id: GetAccessControl\n  parent: System.Threading.Mutex\n  langs:\n  - csharp\n  name: GetAccessControl()\n  nameWithType: Mutex.GetAccessControl()\n  fullName: System.Threading.Mutex.GetAccessControl()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public System.Security.AccessControl.MutexSecurity GetAccessControl ();\n    parameters: []\n    return:\n      type: System.Security.AccessControl.MutexSecurity\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.Mutex.OpenExisting(System.String)\n  id: OpenExisting(System.String)\n  parent: System.Threading.Mutex\n  langs:\n  - csharp\n  name: OpenExisting(String)\n  nameWithType: Mutex.OpenExisting(String)\n  fullName: System.Threading.Mutex.OpenExisting(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public static System.Threading.Mutex OpenExisting (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n    return:\n      type: System.Threading.Mutex\n      description: Parameter description to be filled\n  overload: System.Threading.Mutex.OpenExisting*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.Mutex.OpenExisting(System.String,System.Security.AccessControl.MutexRights)\n  id: OpenExisting(System.String,System.Security.AccessControl.MutexRights)\n  parent: System.Threading.Mutex\n  langs:\n  - csharp\n  name: OpenExisting(String,MutexRights)\n  nameWithType: Mutex.OpenExisting(String,MutexRights)\n  fullName: System.Threading.Mutex.OpenExisting(String,MutexRights)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public static System.Threading.Mutex OpenExisting (string name, System.Security.AccessControl.MutexRights rights);\n    parameters:\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n    - id: rights\n      type: System.Security.AccessControl.MutexRights\n      description: Parameter description to be filled\n    return:\n      type: System.Threading.Mutex\n      description: Parameter description to be filled\n  overload: System.Threading.Mutex.OpenExisting*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.Mutex.ReleaseMutex\n  id: ReleaseMutex\n  parent: System.Threading.Mutex\n  langs:\n  - csharp\n  name: ReleaseMutex()\n  nameWithType: Mutex.ReleaseMutex()\n  fullName: System.Threading.Mutex.ReleaseMutex()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public void ReleaseMutex ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.Mutex.SetAccessControl(System.Security.AccessControl.MutexSecurity)\n  id: SetAccessControl(System.Security.AccessControl.MutexSecurity)\n  parent: System.Threading.Mutex\n  langs:\n  - csharp\n  name: SetAccessControl(MutexSecurity)\n  nameWithType: Mutex.SetAccessControl(MutexSecurity)\n  fullName: System.Threading.Mutex.SetAccessControl(MutexSecurity)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public void SetAccessControl (System.Security.AccessControl.MutexSecurity mutexSecurity);\n    parameters:\n    - id: mutexSecurity\n      type: System.Security.AccessControl.MutexSecurity\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.Mutex.TryOpenExisting(System.String,System.Threading.Mutex@)\n  id: TryOpenExisting(System.String,System.Threading.Mutex@)\n  parent: System.Threading.Mutex\n  langs:\n  - csharp\n  name: TryOpenExisting(String,Mutex)\n  nameWithType: Mutex.TryOpenExisting(String,Mutex)\n  fullName: System.Threading.Mutex.TryOpenExisting(String,Mutex)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public static bool TryOpenExisting (string name, out System.Threading.Mutex result);\n    parameters:\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n    - id: result\n      type: System.Threading.Mutex\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Threading.Mutex.TryOpenExisting*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.Mutex.TryOpenExisting(System.String,System.Security.AccessControl.MutexRights,System.Threading.Mutex@)\n  id: TryOpenExisting(System.String,System.Security.AccessControl.MutexRights,System.Threading.Mutex@)\n  parent: System.Threading.Mutex\n  langs:\n  - csharp\n  name: TryOpenExisting(String,MutexRights,Mutex)\n  nameWithType: Mutex.TryOpenExisting(String,MutexRights,Mutex)\n  fullName: System.Threading.Mutex.TryOpenExisting(String,MutexRights,Mutex)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public static bool TryOpenExisting (string name, System.Security.AccessControl.MutexRights rights, out System.Threading.Mutex result);\n    parameters:\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n    - id: rights\n      type: System.Security.AccessControl.MutexRights\n      description: Parameter description to be filled\n    - id: result\n      type: System.Threading.Mutex\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Threading.Mutex.TryOpenExisting*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Threading.WaitHandle\n  isExternal: false\n  name: System.Threading.WaitHandle\n- uid: System.Threading.Mutex.#ctor\n  parent: System.Threading.Mutex\n  isExternal: false\n  name: Mutex()\n  nameWithType: Mutex.Mutex()\n  fullName: System.Threading.Mutex.Mutex()\n- uid: System.Threading.Mutex.#ctor(System.Boolean)\n  parent: System.Threading.Mutex\n  isExternal: false\n  name: Mutex(Boolean)\n  nameWithType: Mutex.Mutex(Boolean)\n  fullName: System.Threading.Mutex.Mutex(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.Mutex.#ctor(System.Boolean,System.String)\n  parent: System.Threading.Mutex\n  isExternal: false\n  name: Mutex(Boolean,String)\n  nameWithType: Mutex.Mutex(Boolean,String)\n  fullName: System.Threading.Mutex.Mutex(Boolean,String)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@)\n  parent: System.Threading.Mutex\n  isExternal: false\n  name: Mutex(Boolean,String,Boolean)\n  nameWithType: Mutex.Mutex(Boolean,String,Boolean)\n  fullName: System.Threading.Mutex.Mutex(Boolean,String,Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@,System.Security.AccessControl.MutexSecurity)\n  parent: System.Threading.Mutex\n  isExternal: false\n  name: Mutex(Boolean,String,Boolean,MutexSecurity)\n  nameWithType: Mutex.Mutex(Boolean,String,Boolean,MutexSecurity)\n  fullName: System.Threading.Mutex.Mutex(Boolean,String,Boolean,MutexSecurity)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.AccessControl.MutexSecurity\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: MutexSecurity\n  nameWithType: MutexSecurity\n  fullName: System.Security.AccessControl.MutexSecurity\n- uid: System.Threading.Mutex.GetAccessControl\n  parent: System.Threading.Mutex\n  isExternal: false\n  name: GetAccessControl()\n  nameWithType: Mutex.GetAccessControl()\n  fullName: System.Threading.Mutex.GetAccessControl()\n- uid: System.Security.AccessControl.MutexSecurity\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: MutexSecurity\n  nameWithType: MutexSecurity\n  fullName: System.Security.AccessControl.MutexSecurity\n- uid: System.Threading.Mutex.OpenExisting(System.String)\n  parent: System.Threading.Mutex\n  isExternal: false\n  name: OpenExisting(String)\n  nameWithType: Mutex.OpenExisting(String)\n  fullName: System.Threading.Mutex.OpenExisting(String)\n- uid: System.Threading.Mutex\n  parent: System.Threading\n  isExternal: false\n  name: Mutex\n  nameWithType: Mutex\n  fullName: System.Threading.Mutex\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Threading.Mutex.OpenExisting(System.String,System.Security.AccessControl.MutexRights)\n  parent: System.Threading.Mutex\n  isExternal: false\n  name: OpenExisting(String,MutexRights)\n  nameWithType: Mutex.OpenExisting(String,MutexRights)\n  fullName: System.Threading.Mutex.OpenExisting(String,MutexRights)\n- uid: System.Threading.Mutex\n  parent: System.Threading\n  isExternal: false\n  name: Mutex\n  nameWithType: Mutex\n  fullName: System.Threading.Mutex\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.AccessControl.MutexRights\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: MutexRights\n  nameWithType: MutexRights\n  fullName: System.Security.AccessControl.MutexRights\n- uid: System.Threading.Mutex.ReleaseMutex\n  parent: System.Threading.Mutex\n  isExternal: false\n  name: ReleaseMutex()\n  nameWithType: Mutex.ReleaseMutex()\n  fullName: System.Threading.Mutex.ReleaseMutex()\n- uid: System.Threading.Mutex.SetAccessControl(System.Security.AccessControl.MutexSecurity)\n  parent: System.Threading.Mutex\n  isExternal: false\n  name: SetAccessControl(MutexSecurity)\n  nameWithType: Mutex.SetAccessControl(MutexSecurity)\n  fullName: System.Threading.Mutex.SetAccessControl(MutexSecurity)\n- uid: System.Security.AccessControl.MutexSecurity\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: MutexSecurity\n  nameWithType: MutexSecurity\n  fullName: System.Security.AccessControl.MutexSecurity\n- uid: System.Threading.Mutex.TryOpenExisting(System.String,System.Threading.Mutex@)\n  parent: System.Threading.Mutex\n  isExternal: false\n  name: TryOpenExisting(String,Mutex)\n  nameWithType: Mutex.TryOpenExisting(String,Mutex)\n  fullName: System.Threading.Mutex.TryOpenExisting(String,Mutex)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Threading.Mutex\n  parent: System.Threading\n  isExternal: false\n  name: Mutex\n  nameWithType: Mutex\n  fullName: System.Threading.Mutex\n- uid: System.Threading.Mutex.TryOpenExisting(System.String,System.Security.AccessControl.MutexRights,System.Threading.Mutex@)\n  parent: System.Threading.Mutex\n  isExternal: false\n  name: TryOpenExisting(String,MutexRights,Mutex)\n  nameWithType: Mutex.TryOpenExisting(String,MutexRights,Mutex)\n  fullName: System.Threading.Mutex.TryOpenExisting(String,MutexRights,Mutex)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.AccessControl.MutexRights\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: MutexRights\n  nameWithType: MutexRights\n  fullName: System.Security.AccessControl.MutexRights\n- uid: System.Threading.Mutex\n  parent: System.Threading\n  isExternal: false\n  name: Mutex\n  nameWithType: Mutex\n  fullName: System.Threading.Mutex\n- uid: System.Threading.Mutex.OpenExisting*\n  parent: System.Threading.Mutex\n  isExternal: false\n  nameWithType: Mutex.\n- uid: System.Threading.Mutex.TryOpenExisting*\n  parent: System.Threading.Mutex\n  isExternal: false\n  nameWithType: Mutex.\n"}