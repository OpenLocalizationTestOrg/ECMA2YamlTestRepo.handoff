{"nodes":[{"pos":[788,799],"content":"SymbolToken","needQuote":true,"needEscape":true,"nodes":[{"content":"SymbolToken","pos":[0,11]}]},{"pos":[1312,1330],"content":"SymbolToken(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"SymbolToken(Int32)","pos":[0,18]}]},{"pos":[1670,1704],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[1993,2012],"content":"Equals(SymbolToken)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(SymbolToken)","pos":[0,19]}]},{"pos":[2418,2452],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2511,2545],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2839,2853],"content":"Equals(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[3193,3227],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3286,3320],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3594,3607],"content":"GetHashCode()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[3939,3973],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4178,4188],"content":"GetToken()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetToken()","pos":[0,10]}]},{"pos":[4502,4536],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4921,4957],"content":"op_Equality(SymbolToken,SymbolToken)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Equality(SymbolToken,SymbolToken)","pos":[0,36]}]},{"pos":[5453,5487],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5574,5608],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5667,5701],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6090,6128],"content":"op_Inequality(SymbolToken,SymbolToken)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Inequality(SymbolToken,SymbolToken)","pos":[0,38]}]},{"pos":[6630,6664],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6751,6785],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6844,6878],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6992,7008],"content":"System.ValueType","needQuote":true,"needEscape":true,"nodes":[{"content":"System.ValueType","pos":[0,16]}]},{"pos":[7160,7178],"content":"SymbolToken(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"SymbolToken(Int32)","pos":[0,18]}]},{"pos":[7365,7370],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[7600,7619],"content":"Equals(SymbolToken)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(SymbolToken)","pos":[0,19]}]},{"pos":[7810,7817],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[7988,7999],"content":"SymbolToken","needQuote":true,"needEscape":true,"nodes":[{"content":"SymbolToken","pos":[0,11]}]},{"pos":[8236,8250],"content":"Equals(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[8431,8438],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[8556,8562],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8755,8768],"content":"GetHashCode()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[8945,8950],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[9138,9148],"content":"GetToken()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetToken()","pos":[0,10]}]},{"pos":[9319,9324],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[9602,9638],"content":"op_Equality(SymbolToken,SymbolToken)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Equality(SymbolToken,SymbolToken)","pos":[0,36]}]},{"pos":[9863,9870],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[10041,10052],"content":"SymbolToken","needQuote":true,"needEscape":true,"nodes":[{"content":"SymbolToken","pos":[0,11]}]},{"pos":[10255,10266],"content":"SymbolToken","needQuote":true,"needEscape":true,"nodes":[{"content":"SymbolToken","pos":[0,11]}]},{"pos":[10582,10620],"content":"op_Inequality(SymbolToken,SymbolToken)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Inequality(SymbolToken,SymbolToken)","pos":[0,38]}]},{"pos":[10849,10856],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[11027,11038],"content":"SymbolToken","needQuote":true,"needEscape":true,"nodes":[{"content":"SymbolToken","pos":[0,11]}]},{"pos":[11241,11252],"content":"SymbolToken","needQuote":true,"needEscape":true,"nodes":[{"content":"SymbolToken","pos":[0,11]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.SymbolStore.SymbolToken\n  id: SymbolToken\n  children:\n  - System.Diagnostics.SymbolStore.SymbolToken.#ctor(System.Int32)\n  - System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Diagnostics.SymbolStore.SymbolToken)\n  - System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Object)\n  - System.Diagnostics.SymbolStore.SymbolToken.GetHashCode\n  - System.Diagnostics.SymbolStore.SymbolToken.GetToken\n  - System.Diagnostics.SymbolStore.SymbolToken.op_Equality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)\n  - System.Diagnostics.SymbolStore.SymbolToken.op_Inequality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)\n  langs:\n  - csharp\n  name: SymbolToken\n  nameWithType: SymbolToken\n  fullName: System.Diagnostics.SymbolStore.SymbolToken\n  type: Struct\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public struct SymbolToken\n  inheritance:\n  - System.Object\n  - System.ValueType\n  implements: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Diagnostics.SymbolStore.SymbolToken.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Diagnostics.SymbolStore.SymbolToken\n  langs:\n  - csharp\n  name: SymbolToken(Int32)\n  nameWithType: SymbolToken.SymbolToken(Int32)\n  fullName: System.Diagnostics.SymbolStore.SymbolToken.SymbolToken(Int32)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.SymbolStore\n  syntax:\n    content: public SymbolToken (int val);\n    parameters:\n    - id: val\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Diagnostics.SymbolStore.SymbolToken)\n  id: Equals(System.Diagnostics.SymbolStore.SymbolToken)\n  parent: System.Diagnostics.SymbolStore.SymbolToken\n  langs:\n  - csharp\n  name: Equals(SymbolToken)\n  nameWithType: SymbolToken.Equals(SymbolToken)\n  fullName: System.Diagnostics.SymbolStore.SymbolToken.Equals(SymbolToken)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.SymbolStore\n  syntax:\n    content: public bool Equals (System.Diagnostics.SymbolStore.SymbolToken obj);\n    parameters:\n    - id: obj\n      type: System.Diagnostics.SymbolStore.SymbolToken\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Diagnostics.SymbolStore.SymbolToken.Equals*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Diagnostics.SymbolStore.SymbolToken\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: SymbolToken.Equals(Object)\n  fullName: System.Diagnostics.SymbolStore.SymbolToken.Equals(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.SymbolStore\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Diagnostics.SymbolStore.SymbolToken.Equals*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Diagnostics.SymbolStore.SymbolToken.GetHashCode\n  id: GetHashCode\n  parent: System.Diagnostics.SymbolStore.SymbolToken\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: SymbolToken.GetHashCode()\n  fullName: System.Diagnostics.SymbolStore.SymbolToken.GetHashCode()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.SymbolStore\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Diagnostics.SymbolStore.SymbolToken.GetToken\n  id: GetToken\n  parent: System.Diagnostics.SymbolStore.SymbolToken\n  langs:\n  - csharp\n  name: GetToken()\n  nameWithType: SymbolToken.GetToken()\n  fullName: System.Diagnostics.SymbolStore.SymbolToken.GetToken()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.SymbolStore\n  syntax:\n    content: public int GetToken ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Diagnostics.SymbolStore.SymbolToken.op_Equality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)\n  id: op_Equality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)\n  parent: System.Diagnostics.SymbolStore.SymbolToken\n  langs:\n  - csharp\n  name: op_Equality(SymbolToken,SymbolToken)\n  nameWithType: SymbolToken.op_Equality(SymbolToken,SymbolToken)\n  fullName: System.Diagnostics.SymbolStore.SymbolToken.op_Equality(SymbolToken,SymbolToken)\n  type: Operator\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.SymbolStore\n  syntax:\n    content: public static bool op_Equality (System.Diagnostics.SymbolStore.SymbolToken a, System.Diagnostics.SymbolStore.SymbolToken b);\n    parameters:\n    - id: a\n      type: System.Diagnostics.SymbolStore.SymbolToken\n      description: Parameter description to be filled\n    - id: b\n      type: System.Diagnostics.SymbolStore.SymbolToken\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Diagnostics.SymbolStore.SymbolToken.op_Inequality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)\n  id: op_Inequality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)\n  parent: System.Diagnostics.SymbolStore.SymbolToken\n  langs:\n  - csharp\n  name: op_Inequality(SymbolToken,SymbolToken)\n  nameWithType: SymbolToken.op_Inequality(SymbolToken,SymbolToken)\n  fullName: System.Diagnostics.SymbolStore.SymbolToken.op_Inequality(SymbolToken,SymbolToken)\n  type: Operator\n  assemblies:\n  - mscorlib\n  namespace: System.Diagnostics.SymbolStore\n  syntax:\n    content: public static bool op_Inequality (System.Diagnostics.SymbolStore.SymbolToken a, System.Diagnostics.SymbolStore.SymbolToken b);\n    parameters:\n    - id: a\n      type: System.Diagnostics.SymbolStore.SymbolToken\n      description: Parameter description to be filled\n    - id: b\n      type: System.Diagnostics.SymbolStore.SymbolToken\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.ValueType\n  isExternal: false\n  name: System.ValueType\n- uid: System.Diagnostics.SymbolStore.SymbolToken.#ctor(System.Int32)\n  parent: System.Diagnostics.SymbolStore.SymbolToken\n  isExternal: false\n  name: SymbolToken(Int32)\n  nameWithType: SymbolToken.SymbolToken(Int32)\n  fullName: System.Diagnostics.SymbolStore.SymbolToken.SymbolToken(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Diagnostics.SymbolStore.SymbolToken)\n  parent: System.Diagnostics.SymbolStore.SymbolToken\n  isExternal: false\n  name: Equals(SymbolToken)\n  nameWithType: SymbolToken.Equals(SymbolToken)\n  fullName: System.Diagnostics.SymbolStore.SymbolToken.Equals(SymbolToken)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.SymbolStore.SymbolToken\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: SymbolToken\n  nameWithType: SymbolToken\n  fullName: System.Diagnostics.SymbolStore.SymbolToken\n- uid: System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Object)\n  parent: System.Diagnostics.SymbolStore.SymbolToken\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: SymbolToken.Equals(Object)\n  fullName: System.Diagnostics.SymbolStore.SymbolToken.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Diagnostics.SymbolStore.SymbolToken.GetHashCode\n  parent: System.Diagnostics.SymbolStore.SymbolToken\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: SymbolToken.GetHashCode()\n  fullName: System.Diagnostics.SymbolStore.SymbolToken.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Diagnostics.SymbolStore.SymbolToken.GetToken\n  parent: System.Diagnostics.SymbolStore.SymbolToken\n  isExternal: false\n  name: GetToken()\n  nameWithType: SymbolToken.GetToken()\n  fullName: System.Diagnostics.SymbolStore.SymbolToken.GetToken()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Diagnostics.SymbolStore.SymbolToken.op_Equality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)\n  parent: System.Diagnostics.SymbolStore.SymbolToken\n  isExternal: false\n  name: op_Equality(SymbolToken,SymbolToken)\n  nameWithType: SymbolToken.op_Equality(SymbolToken,SymbolToken)\n  fullName: System.Diagnostics.SymbolStore.SymbolToken.op_Equality(SymbolToken,SymbolToken)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.SymbolStore.SymbolToken\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: SymbolToken\n  nameWithType: SymbolToken\n  fullName: System.Diagnostics.SymbolStore.SymbolToken\n- uid: System.Diagnostics.SymbolStore.SymbolToken\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: SymbolToken\n  nameWithType: SymbolToken\n  fullName: System.Diagnostics.SymbolStore.SymbolToken\n- uid: System.Diagnostics.SymbolStore.SymbolToken.op_Inequality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)\n  parent: System.Diagnostics.SymbolStore.SymbolToken\n  isExternal: false\n  name: op_Inequality(SymbolToken,SymbolToken)\n  nameWithType: SymbolToken.op_Inequality(SymbolToken,SymbolToken)\n  fullName: System.Diagnostics.SymbolStore.SymbolToken.op_Inequality(SymbolToken,SymbolToken)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.SymbolStore.SymbolToken\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: SymbolToken\n  nameWithType: SymbolToken\n  fullName: System.Diagnostics.SymbolStore.SymbolToken\n- uid: System.Diagnostics.SymbolStore.SymbolToken\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: SymbolToken\n  nameWithType: SymbolToken\n  fullName: System.Diagnostics.SymbolStore.SymbolToken\n- uid: System.Diagnostics.SymbolStore.SymbolToken.Equals*\n  parent: System.Diagnostics.SymbolStore.SymbolToken\n  isExternal: false\n  nameWithType: SymbolToken.\n"}