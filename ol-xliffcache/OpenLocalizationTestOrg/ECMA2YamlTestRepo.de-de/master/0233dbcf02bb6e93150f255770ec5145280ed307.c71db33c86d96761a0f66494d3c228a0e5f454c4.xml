{"nodes":[{"pos":[201,217],"content":"ManualResetEvent","needQuote":true,"needEscape":true,"nodes":[{"content":"ManualResetEvent","pos":[0,16]}]},{"pos":[3893,3918],"content":"ManualResetEvent(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"ManualResetEvent(Boolean)","pos":[0,25]}]},{"pos":[4280,4314],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4444,4476],"content":"System.Threading.EventWaitHandle","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Threading.EventWaitHandle","pos":[0,32]}]},{"pos":[4612,4637],"content":"ManualResetEvent(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"ManualResetEvent(Boolean)","pos":[0,25]}]},{"pos":[4836,4843],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.ManualResetEvent\n  id: ManualResetEvent\n  children:\n  - System.Threading.ManualResetEvent.#ctor(System.Boolean)\n  langs:\n  - csharp\n  name: ManualResetEvent\n  nameWithType: ManualResetEvent\n  fullName: System.Threading.ManualResetEvent\n  type: Class\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class ManualResetEvent : System.Threading.EventWaitHandle\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.Threading.WaitHandle\n  - System.Threading.EventWaitHandle\n  implements: []\n  inheritedMembers:\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Threading.EventWaitHandle.GetAccessControl\n  - System.Threading.EventWaitHandle.OpenExisting(System.String)\n  - System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)\n  - System.Threading.EventWaitHandle.Reset\n  - System.Threading.EventWaitHandle.Set\n  - System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)\n  - System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)\n  - System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)\n  - System.Threading.WaitHandle.Close\n  - System.Threading.WaitHandle.Dispose\n  - System.Threading.WaitHandle.Dispose(System.Boolean)\n  - System.Threading.WaitHandle.Handle\n  - System.Threading.WaitHandle.InvalidHandle\n  - System.Threading.WaitHandle.SafeWaitHandle\n  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)\n  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)\n  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)\n  - System.Threading.WaitHandle.WaitOne\n  - System.Threading.WaitHandle.WaitOne(System.Int32)\n  - System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)\n  - System.Threading.WaitHandle.WaitOne(System.TimeSpan)\n  - System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)\n  - System.Threading.WaitHandle.WaitTimeout\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.ManualResetEvent.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: System.Threading.ManualResetEvent\n  langs:\n  - csharp\n  name: ManualResetEvent(Boolean)\n  nameWithType: ManualResetEvent.ManualResetEvent(Boolean)\n  fullName: System.Threading.ManualResetEvent.ManualResetEvent(Boolean)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public ManualResetEvent (bool initialState);\n    parameters:\n    - id: initialState\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Threading.EventWaitHandle\n  isExternal: false\n  name: System.Threading.EventWaitHandle\n- uid: System.Threading.ManualResetEvent.#ctor(System.Boolean)\n  parent: System.Threading.ManualResetEvent\n  isExternal: false\n  name: ManualResetEvent(Boolean)\n  nameWithType: ManualResetEvent.ManualResetEvent(Boolean)\n  fullName: System.Threading.ManualResetEvent.ManualResetEvent(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n"}