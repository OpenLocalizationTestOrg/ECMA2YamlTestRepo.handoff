{"nodes":[{"pos":[1605,1642],"content":"Dictionary<TKey,TValue>+KeyCollection","needQuote":true,"needEscape":true,"nodes":[{"content":"Dictionary&lt;TKey,TValue&gt;+KeyCollection","pos":[0,37],"source":"Dictionary<TKey,TValue>+KeyCollection"}]},{"pos":[2300,2334],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2371,2405],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3241,3276],"content":"Dictionary(Dictionary<TKey,TValue>)","needQuote":true,"needEscape":true,"nodes":[{"content":"Dictionary(Dictionary&lt;TKey,TValue&gt;)","pos":[0,35],"source":"Dictionary(Dictionary<TKey,TValue>)"}]},{"pos":[3784,3818],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4079,4099],"content":"CopyTo(TKey[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"CopyTo(TKey[],Int32)","pos":[0,20]}]},{"pos":[4494,4528],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4589,4623],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4844,4849],"content":"Count","needQuote":true,"needEscape":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[5182,5216],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5453,5468],"content":"GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[5965,5999],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6328,6372],"content":"System.Collections.Generic.ICollection(TKey)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection(TKey)","pos":[0,44]}]},{"pos":[6806,6840],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7165,7205],"content":"System.Collections.Generic.ICollection()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection()","pos":[0,40]}]},{"pos":[7914,7958],"content":"System.Collections.Generic.ICollection(TKey)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection(TKey)","pos":[0,44]}]},{"pos":[8397,8431],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8490,8524],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8859,8897],"content":"System.Collections.Generic.ICollection","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection","pos":[0,38]}]},{"pos":[9342,9376],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9711,9755],"content":"System.Collections.Generic.ICollection(TKey)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection(TKey)","pos":[0,44]}]},{"pos":[10192,10226],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10285,10319],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10660,10700],"content":"System.Collections.Generic.IEnumerable()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.IEnumerable()","pos":[0,40]}]},{"pos":[11207,11241],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11594,11644],"content":"System.Collections.ICollection.CopyTo(Array,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.CopyTo(Array,Int32)","pos":[0,50]}]},{"pos":[12109,12143],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12204,12238],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12553,12598],"content":"System.Collections.ICollection.IsSynchronized","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.IsSynchronized","pos":[0,45]}]},{"pos":[13047,13081],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13384,13423],"content":"System.Collections.ICollection.SyncRoot","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.SyncRoot","pos":[0,39]}]},{"pos":[13855,13889],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14202,14248],"content":"System.Collections.IEnumerable.GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IEnumerable.GetEnumerator()","pos":[0,46]}]},{"pos":[14733,14767],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14878,14891],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[15092,15127],"content":"Dictionary(Dictionary<TKey,TValue>)","needQuote":true,"needEscape":true,"nodes":[{"content":"Dictionary(Dictionary&lt;TKey,TValue&gt;)","pos":[0,35],"source":"Dictionary(Dictionary<TKey,TValue>)"}]},{"pos":[15443,15466],"content":"Dictionary<TKey,TValue>","needQuote":true,"needEscape":true,"nodes":[{"content":"Dictionary&lt;TKey,TValue&gt;","pos":[0,23],"source":"Dictionary<TKey,TValue>"}]},{"pos":[15749,15769],"content":"CopyTo(TKey[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"CopyTo(TKey[],Int32)","pos":[0,20]}]},{"pos":[15995,15999],"content":"TKey","needQuote":true,"needEscape":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[16105,16110],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[16317,16322],"content":"Count","needQuote":true,"needEscape":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[16531,16536],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[16751,16766],"content":"GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[17067,17115],"content":"Dictionary<TKey,TValue>+KeyCollection+Enumerator","needQuote":true,"needEscape":true,"nodes":[{"content":"Dictionary&lt;TKey,TValue&gt;+KeyCollection+Enumerator","pos":[0,48],"source":"Dictionary<TKey,TValue>+KeyCollection+Enumerator"}]},{"pos":[17475,17519],"content":"System.Collections.Generic.ICollection(TKey)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection(TKey)","pos":[0,44]}]},{"pos":[17793,17797],"content":"TKey","needQuote":true,"needEscape":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[18040,18080],"content":"System.Collections.Generic.ICollection()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection()","pos":[0,40]}]},{"pos":[18505,18549],"content":"System.Collections.Generic.ICollection(TKey)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection(TKey)","pos":[0,44]}]},{"pos":[18838,18845],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[18949,18953],"content":"TKey","needQuote":true,"needEscape":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[19201,19239],"content":"System.Collections.Generic.ICollection","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection","pos":[0,38]}]},{"pos":[19516,19523],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[19784,19828],"content":"System.Collections.Generic.ICollection(TKey)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection(TKey)","pos":[0,44]}]},{"pos":[20117,20124],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[20228,20232],"content":"TKey","needQuote":true,"needEscape":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[20483,20523],"content":"System.Collections.Generic.IEnumerable()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.IEnumerable()","pos":[0,40]}]},{"pos":[20854,20871],"content":"IEnumerator<ph id=\"ph1\">&lt;TKey&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerator<TKey>"},{"pos":[21181,21231],"content":"System.Collections.ICollection.CopyTo(Array,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.CopyTo(Array,Int32)","pos":[0,50]}]},{"pos":[21530,21535],"content":"Array","needQuote":true,"needEscape":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[21648,21653],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[21900,21945],"content":"System.Collections.ICollection.IsSynchronized","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.IsSynchronized","pos":[0,45]}]},{"pos":[22236,22243],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[22488,22527],"content":"System.Collections.ICollection.SyncRoot","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.SyncRoot","pos":[0,39]}]},{"pos":[22805,22811],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23059,23105],"content":"System.Collections.IEnumerable.GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IEnumerable.GetEnumerator()","pos":[0,46]}]},{"pos":[23426,23437],"content":"IEnumerator","needQuote":true,"needEscape":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection\n  id: Dictionary`2.KeyCollection\n  children:\n  - System.Collections.Generic.Dictionary`2.KeyCollection.#ctor(System.Collections.Generic.Dictionary`2)\n  - System.Collections.Generic.Dictionary`2.KeyCollection.CopyTo(`0[],System.Int32)\n  - System.Collections.Generic.Dictionary`2.KeyCollection.Count\n  - System.Collections.Generic.Dictionary`2.KeyCollection.GetEnumerator\n  - System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)\n  - System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear\n  - System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)\n  - System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly\n  - System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)\n  - System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator\n  - System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized\n  - System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot\n  - System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator\n  langs:\n  - csharp\n  name: Dictionary<TKey,TValue>+KeyCollection\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection\n  type: Class\n  syntax:\n    content: >-\n      [System.Diagnostics.DebuggerDisplay(\"Count = {Count}\")]\n\n      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_DictionaryKeyCollectionDebugView`2))]\n\n      public sealed class Dictionary<TKey,TValue>.KeyCollection : System.Collections.Generic.ICollection<TKey>, System.Collections.Generic.IEnumerable<TKey>, System.Collections.Generic.IReadOnlyCollection<TKey>, System.Collections.ICollection\n    typeParameters:\n    - id: TKey\n      description: Parameter description to be filled\n    - id: TValue\n      description: Parameter description to be filled\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.ICollection<TKey>\n  - System.Collections.Generic.IEnumerable<TKey>\n  - System.Collections.Generic.IReadOnlyCollection<TKey>\n  - System.Collections.ICollection\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.#ctor(System.Collections.Generic.Dictionary`2)\n  id: '#ctor(System.Collections.Generic.Dictionary`2)'\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  langs:\n  - csharp\n  name: Dictionary(Dictionary<TKey,TValue>)\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.Dictionary(Dictionary<TKey,TValue>)\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.Dictionary(Dictionary<TKey,TValue>)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public KeyCollection (System.Collections.Generic.Dictionary<TKey,TValue> dictionary);\n    parameters:\n    - id: dictionary\n      type: System.Collections.Generic.Dictionary`2\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.CopyTo(`0[],System.Int32)\n  id: CopyTo(`0[],System.Int32)\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  langs:\n  - csharp\n  name: CopyTo(TKey[],Int32)\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.CopyTo(TKey[],Int32)\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.CopyTo(TKey[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public void CopyTo (TKey[] array, int index);\n    parameters:\n    - id: array\n      type: TKey[]\n      description: Parameter description to be filled\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.Count\n  id: Count\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  langs:\n  - csharp\n  name: Count\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.Count\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.Count\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.GetEnumerator()\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public System.Collections.Generic.Dictionary<TKey,TValue>.KeyCollection.Enumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)\n  id: System#Collections#Generic#ICollection{TKey}#Add(`0)\n  isEii: true\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection(TKey)\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: void ICollection<TKey>.Add (TKey item);\n    parameters:\n    - id: item\n      type: TKey\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear\n  id: System#Collections#Generic#ICollection{TKey}#Clear\n  isEii: true\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection()\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection()\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: void ICollection<TKey>.Clear ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)\n  id: System#Collections#Generic#ICollection{TKey}#Contains(`0)\n  isEii: true\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection(TKey)\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: bool ICollection<TKey>.Contains (TKey item);\n    parameters:\n    - id: item\n      type: TKey\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly\n  id: System#Collections#Generic#ICollection{TKey}#IsReadOnly\n  isEii: true\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: bool System.Collections.Generic.ICollection<TKey>.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)\n  id: System#Collections#Generic#ICollection{TKey}#Remove(`0)\n  isEii: true\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection(TKey)\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: bool ICollection<TKey>.Remove (TKey item);\n    parameters:\n    - id: item\n      type: TKey\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator\n  id: System#Collections#Generic#IEnumerable{TKey}#GetEnumerator\n  isEii: true\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.IEnumerable()\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.IEnumerable()\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.IEnumerable()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: System.Collections.Generic.IEnumerator<TKey> IEnumerable<TKey>.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{TKey}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: void ICollection.CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: Parameter description to be filled\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.IsSynchronized\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.SyncRoot\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.#ctor(System.Collections.Generic.Dictionary`2)\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: Dictionary(Dictionary<TKey,TValue>)\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.Dictionary(Dictionary<TKey,TValue>)\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.Dictionary(Dictionary<TKey,TValue>)\n- uid: System.Collections.Generic.Dictionary`2\n  parent: System.Collections.Generic\n  isExternal: false\n  name: Dictionary<TKey,TValue>\n  nameWithType: Dictionary<TKey,TValue>\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.CopyTo(`0[],System.Int32)\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: CopyTo(TKey[],Int32)\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.CopyTo(TKey[],Int32)\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.CopyTo(TKey[],Int32)\n- uid: TKey\n  parent: ''\n  isExternal: true\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.Count\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: Count\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.Count\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.Count\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.GetEnumerator\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.GetEnumerator()\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.GetEnumerator()\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator\n  parent: System.Collections.Generic\n  isExternal: false\n  name: Dictionary<TKey,TValue>+KeyCollection+Enumerator\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection+Enumerator\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection+Enumerator\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection(TKey)\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n- uid: TKey\n  parent: ''\n  isExternal: true\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection()\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection()\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection()\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection(TKey)\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: TKey\n  parent: ''\n  isExternal: true\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection(TKey)\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection(TKey)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: TKey\n  parent: ''\n  isExternal: true\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: System.Collections.Generic.IEnumerable()\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.IEnumerable()\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.IEnumerable()\n- uid: System.Collections.Generic.IEnumerator{TKey}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerator<TKey>\n  nameWithType: IEnumerator<TKey>\n  fullName: System.Collections.Generic.IEnumerator<TKey>\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.IsSynchronized\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.IsSynchronized\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.SyncRoot\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.SyncRoot\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Collections.Generic.Dictionary`2.KeyCollection\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: Dictionary<TKey,TValue>+KeyCollection.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n"}