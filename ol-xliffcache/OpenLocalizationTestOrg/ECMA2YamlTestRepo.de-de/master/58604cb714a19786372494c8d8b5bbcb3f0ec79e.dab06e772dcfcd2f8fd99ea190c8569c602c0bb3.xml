{"nodes":[{"pos":[372,392],"content":"WaitHandleExtensions","needQuote":true,"needEscape":true,"nodes":[{"content":"WaitHandleExtensions","pos":[0,20]}]},{"pos":[1174,1203],"content":"GetSafeWaitHandle(WaitHandle)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetSafeWaitHandle(WaitHandle)","pos":[0,29]}]},{"pos":[1664,1698],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[1785,1819],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2178,2222],"content":"SetSafeWaitHandle(WaitHandle,SafeWaitHandle)","needQuote":true,"needEscape":true,"nodes":[{"content":"SetSafeWaitHandle(WaitHandle,SafeWaitHandle)","pos":[0,44]}]},{"pos":[2725,2759],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2850,2884],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2995,3008],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[3178,3207],"content":"GetSafeWaitHandle(WaitHandle)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetSafeWaitHandle(WaitHandle)","pos":[0,29]}]},{"pos":[3471,3485],"content":"SafeWaitHandle","needQuote":true,"needEscape":true,"nodes":[{"content":"SafeWaitHandle","pos":[0,14]}]},{"pos":[3662,3672],"content":"WaitHandle","needQuote":true,"needEscape":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[3952,3996],"content":"SetSafeWaitHandle(WaitHandle,SafeWaitHandle)","needQuote":true,"needEscape":true,"nodes":[{"content":"SetSafeWaitHandle(WaitHandle,SafeWaitHandle)","pos":[0,44]}]},{"pos":[4264,4274],"content":"WaitHandle","needQuote":true,"needEscape":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[4458,4472],"content":"SafeWaitHandle","needQuote":true,"needEscape":true,"nodes":[{"content":"SafeWaitHandle","pos":[0,14]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.WaitHandleExtensions\n  id: WaitHandleExtensions\n  children:\n  - System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle@)\n  - System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle@,Microsoft.Win32.SafeHandles.SafeWaitHandle)\n  langs:\n  - csharp\n  name: WaitHandleExtensions\n  nameWithType: WaitHandleExtensions\n  fullName: System.Threading.WaitHandleExtensions\n  type: Class\n  syntax:\n    content: public static class WaitHandleExtensions\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle@)\n  id: GetSafeWaitHandle(System.Threading.WaitHandle@)\n  parent: System.Threading.WaitHandleExtensions\n  langs:\n  - csharp\n  name: GetSafeWaitHandle(WaitHandle)\n  nameWithType: WaitHandleExtensions.GetSafeWaitHandle(WaitHandle)\n  fullName: System.Threading.WaitHandleExtensions.GetSafeWaitHandle(WaitHandle)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public static Microsoft.Win32.SafeHandles.SafeWaitHandle GetSafeWaitHandle (this System.Threading.WaitHandle waitHandle);\n    parameters:\n    - id: waitHandle\n      type: System.Threading.WaitHandle\n      description: Parameter description to be filled\n    return:\n      type: Microsoft.Win32.SafeHandles.SafeWaitHandle\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle@,Microsoft.Win32.SafeHandles.SafeWaitHandle)\n  id: SetSafeWaitHandle(System.Threading.WaitHandle@,Microsoft.Win32.SafeHandles.SafeWaitHandle)\n  parent: System.Threading.WaitHandleExtensions\n  langs:\n  - csharp\n  name: SetSafeWaitHandle(WaitHandle,SafeWaitHandle)\n  nameWithType: WaitHandleExtensions.SetSafeWaitHandle(WaitHandle,SafeWaitHandle)\n  fullName: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(WaitHandle,SafeWaitHandle)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading\n  syntax:\n    content: public static void SetSafeWaitHandle (this System.Threading.WaitHandle waitHandle, Microsoft.Win32.SafeHandles.SafeWaitHandle value);\n    parameters:\n    - id: waitHandle\n      type: System.Threading.WaitHandle\n      description: Parameter description to be filled\n    - id: value\n      type: Microsoft.Win32.SafeHandles.SafeWaitHandle\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle@)\n  parent: System.Threading.WaitHandleExtensions\n  isExternal: false\n  name: GetSafeWaitHandle(WaitHandle)\n  nameWithType: WaitHandleExtensions.GetSafeWaitHandle(WaitHandle)\n  fullName: System.Threading.WaitHandleExtensions.GetSafeWaitHandle(WaitHandle)\n- uid: Microsoft.Win32.SafeHandles.SafeWaitHandle\n  parent: Microsoft.Win32.SafeHandles\n  isExternal: false\n  name: SafeWaitHandle\n  nameWithType: SafeWaitHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeWaitHandle\n- uid: System.Threading.WaitHandle\n  parent: System.Threading\n  isExternal: false\n  name: WaitHandle\n  nameWithType: WaitHandle\n  fullName: System.Threading.WaitHandle\n- uid: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle@,Microsoft.Win32.SafeHandles.SafeWaitHandle)\n  parent: System.Threading.WaitHandleExtensions\n  isExternal: false\n  name: SetSafeWaitHandle(WaitHandle,SafeWaitHandle)\n  nameWithType: WaitHandleExtensions.SetSafeWaitHandle(WaitHandle,SafeWaitHandle)\n  fullName: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(WaitHandle,SafeWaitHandle)\n- uid: System.Threading.WaitHandle\n  parent: System.Threading\n  isExternal: false\n  name: WaitHandle\n  nameWithType: WaitHandle\n  fullName: System.Threading.WaitHandle\n- uid: Microsoft.Win32.SafeHandles.SafeWaitHandle\n  parent: Microsoft.Win32.SafeHandles\n  isExternal: false\n  name: SafeWaitHandle\n  nameWithType: SafeWaitHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeWaitHandle\n"}