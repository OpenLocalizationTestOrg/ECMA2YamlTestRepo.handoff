{"nodes":[{"pos":[1182,1202],"content":"CodeAccessPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"CodeAccessPermission","pos":[0,20]}]},{"pos":[1988,2010],"content":"CodeAccessPermission()","needQuote":true,"needEscape":true,"nodes":[{"content":"CodeAccessPermission()","pos":[0,22]}]},{"pos":[2484,2492],"content":"Assert()","needQuote":true,"needEscape":true,"nodes":[{"content":"Assert()","pos":[0,8]}]},{"pos":[2917,2923],"content":"Copy()","needQuote":true,"needEscape":true,"nodes":[{"content":"Copy()","pos":[0,6]}]},{"pos":[3261,3295],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3484,3492],"content":"Demand()","needQuote":true,"needEscape":true,"nodes":[{"content":"Demand()","pos":[0,8]}]},{"pos":[3917,3923],"content":"Deny()","needQuote":true,"needEscape":true,"nodes":[{"content":"Deny()","pos":[0,6]}]},{"pos":[4376,4390],"content":"Equals(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[4718,4752],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4811,4845],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5102,5126],"content":"FromXml(SecurityElement)","needQuote":true,"needEscape":true,"nodes":[{"content":"FromXml(SecurityElement)","pos":[0,24]}]},{"pos":[5520,5554],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5753,5766],"content":"GetHashCode()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[6086,6120],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6373,6395],"content":"Intersect(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"Intersect(IPermission)","pos":[0,22]}]},{"pos":[6806,6840],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6912,6946],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7201,7224],"content":"IsSubsetOf(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"IsSubsetOf(IPermission)","pos":[0,23]}]},{"pos":[7615,7649],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7708,7742],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7939,7951],"content":"PermitOnly()","needQuote":true,"needEscape":true,"nodes":[{"content":"PermitOnly()","pos":[0,12]}]},{"pos":[8398,8409],"content":"RevertAll()","needQuote":true,"needEscape":true,"nodes":[{"content":"RevertAll()","pos":[0,11]}]},{"pos":[8866,8880],"content":"RevertAssert()","needQuote":true,"needEscape":true,"nodes":[{"content":"RevertAssert()","pos":[0,14]}]},{"pos":[9342,9354],"content":"RevertDeny()","needQuote":true,"needEscape":true,"nodes":[{"content":"RevertDeny()","pos":[0,12]}]},{"pos":[9822,9840],"content":"RevertPermitOnly()","needQuote":true,"needEscape":true,"nodes":[{"content":"RevertPermitOnly()","pos":[0,18]}]},{"pos":[10310,10320],"content":"ToString()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[10635,10669],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10856,10863],"content":"ToXml()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToXml()","pos":[0,7]}]},{"pos":[11212,11246],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11491,11509],"content":"Union(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"Union(IPermission)","pos":[0,18]}]},{"pos":[11905,11939],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12011,12045],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12156,12169],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[12295,12317],"content":"CodeAccessPermission()","needQuote":true,"needEscape":true,"nodes":[{"content":"CodeAccessPermission()","pos":[0,22]}]},{"pos":[12576,12584],"content":"Assert()","needQuote":true,"needEscape":true,"nodes":[{"content":"Assert()","pos":[0,8]}]},{"pos":[12813,12819],"content":"Copy()","needQuote":true,"needEscape":true,"nodes":[{"content":"Copy()","pos":[0,6]}]},{"pos":[13009,13020],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[13215,13223],"content":"Demand()","needQuote":true,"needEscape":true,"nodes":[{"content":"Demand()","pos":[0,8]}]},{"pos":[13452,13458],"content":"Deny()","needQuote":true,"needEscape":true,"nodes":[{"content":"Deny()","pos":[0,6]}]},{"pos":[13700,13714],"content":"Equals(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[13898,13905],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[14023,14029],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14239,14263],"content":"FromXml(SecurityElement)","needQuote":true,"needEscape":true,"nodes":[{"content":"FromXml(SecurityElement)","pos":[0,24]}]},{"pos":[14493,14508],"content":"SecurityElement","needQuote":true,"needEscape":true,"nodes":[{"content":"SecurityElement","pos":[0,15]}]},{"pos":[14716,14729],"content":"GetHashCode()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[14909,14914],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[15120,15142],"content":"Intersect(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"Intersect(IPermission)","pos":[0,22]}]},{"pos":[15364,15375],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[15533,15544],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[15772,15795],"content":"IsSubsetOf(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"IsSubsetOf(IPermission)","pos":[0,23]}]},{"pos":[15997,16004],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[16145,16156],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[16355,16367],"content":"PermitOnly()","needQuote":true,"needEscape":true,"nodes":[{"content":"PermitOnly()","pos":[0,12]}]},{"pos":[16609,16620],"content":"RevertAll()","needQuote":true,"needEscape":true,"nodes":[{"content":"RevertAll()","pos":[0,11]}]},{"pos":[16863,16877],"content":"RevertAssert()","needQuote":true,"needEscape":true,"nodes":[{"content":"RevertAssert()","pos":[0,14]}]},{"pos":[17124,17136],"content":"RevertDeny()","needQuote":true,"needEscape":true,"nodes":[{"content":"RevertDeny()","pos":[0,12]}]},{"pos":[17385,17403],"content":"RevertPermitOnly()","needQuote":true,"needEscape":true,"nodes":[{"content":"RevertPermitOnly()","pos":[0,18]}]},{"pos":[17656,17666],"content":"ToString()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[17841,17847],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[18022,18029],"content":"ToXml()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToXml()","pos":[0,7]}]},{"pos":[18225,18240],"content":"SecurityElement","needQuote":true,"needEscape":true,"nodes":[{"content":"SecurityElement","pos":[0,15]}]},{"pos":[18471,18489],"content":"Union(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"Union(IPermission)","pos":[0,18]}]},{"pos":[18703,18714],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[18872,18883],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.CodeAccessPermission\n  id: CodeAccessPermission\n  children:\n  - System.Security.CodeAccessPermission.#ctor\n  - System.Security.CodeAccessPermission.Assert\n  - System.Security.CodeAccessPermission.Copy\n  - System.Security.CodeAccessPermission.Demand\n  - System.Security.CodeAccessPermission.Deny\n  - System.Security.CodeAccessPermission.Equals(System.Object)\n  - System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)\n  - System.Security.CodeAccessPermission.GetHashCode\n  - System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)\n  - System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)\n  - System.Security.CodeAccessPermission.PermitOnly\n  - System.Security.CodeAccessPermission.RevertAll\n  - System.Security.CodeAccessPermission.RevertAssert\n  - System.Security.CodeAccessPermission.RevertDeny\n  - System.Security.CodeAccessPermission.RevertPermitOnly\n  - System.Security.CodeAccessPermission.ToString\n  - System.Security.CodeAccessPermission.ToXml\n  - System.Security.CodeAccessPermission.Union(System.Security.IPermission)\n  langs:\n  - csharp\n  name: CodeAccessPermission\n  nameWithType: CodeAccessPermission\n  fullName: System.Security.CodeAccessPermission\n  type: Class\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class CodeAccessPermission : System.Security.IPermission, System.Security.IStackWalk\n  inheritance:\n  - System.Object\n  implements:\n  - System.Security.IPermission\n  - System.Security.IStackWalk\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.CodeAccessPermission.#ctor\n  id: '#ctor'\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: CodeAccessPermission()\n  nameWithType: CodeAccessPermission.CodeAccessPermission()\n  fullName: System.Security.CodeAccessPermission.CodeAccessPermission()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: protected CodeAccessPermission ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.CodeAccessPermission.Assert\n  id: Assert\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: Assert()\n  nameWithType: CodeAccessPermission.Assert()\n  fullName: System.Security.CodeAccessPermission.Assert()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public void Assert ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.CodeAccessPermission.Copy\n  id: Copy\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: CodeAccessPermission.Copy()\n  fullName: System.Security.CodeAccessPermission.Copy()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public abstract System.Security.IPermission Copy ();\n    parameters: []\n    return:\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.CodeAccessPermission.Demand\n  id: Demand\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: Demand()\n  nameWithType: CodeAccessPermission.Demand()\n  fullName: System.Security.CodeAccessPermission.Demand()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public void Demand ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.CodeAccessPermission.Deny\n  id: Deny\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: Deny()\n  nameWithType: CodeAccessPermission.Deny()\n  fullName: System.Security.CodeAccessPermission.Deny()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public void Deny ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.CodeAccessPermission.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: CodeAccessPermission.Equals(Object)\n  fullName: System.Security.CodeAccessPermission.Equals(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)\n  id: FromXml(System.Security.SecurityElement)\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: FromXml(SecurityElement)\n  nameWithType: CodeAccessPermission.FromXml(SecurityElement)\n  fullName: System.Security.CodeAccessPermission.FromXml(SecurityElement)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public abstract void FromXml (System.Security.SecurityElement elem);\n    parameters:\n    - id: elem\n      type: System.Security.SecurityElement\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.CodeAccessPermission.GetHashCode\n  id: GetHashCode\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: CodeAccessPermission.GetHashCode()\n  fullName: System.Security.CodeAccessPermission.GetHashCode()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)\n  id: Intersect(System.Security.IPermission)\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: Intersect(IPermission)\n  nameWithType: CodeAccessPermission.Intersect(IPermission)\n  fullName: System.Security.CodeAccessPermission.Intersect(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public abstract System.Security.IPermission Intersect (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n    return:\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)\n  id: IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: IsSubsetOf(IPermission)\n  nameWithType: CodeAccessPermission.IsSubsetOf(IPermission)\n  fullName: System.Security.CodeAccessPermission.IsSubsetOf(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public abstract bool IsSubsetOf (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.CodeAccessPermission.PermitOnly\n  id: PermitOnly\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: PermitOnly()\n  nameWithType: CodeAccessPermission.PermitOnly()\n  fullName: System.Security.CodeAccessPermission.PermitOnly()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public void PermitOnly ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.CodeAccessPermission.RevertAll\n  id: RevertAll\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: RevertAll()\n  nameWithType: CodeAccessPermission.RevertAll()\n  fullName: System.Security.CodeAccessPermission.RevertAll()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public static void RevertAll ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.CodeAccessPermission.RevertAssert\n  id: RevertAssert\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: RevertAssert()\n  nameWithType: CodeAccessPermission.RevertAssert()\n  fullName: System.Security.CodeAccessPermission.RevertAssert()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public static void RevertAssert ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.CodeAccessPermission.RevertDeny\n  id: RevertDeny\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: RevertDeny()\n  nameWithType: CodeAccessPermission.RevertDeny()\n  fullName: System.Security.CodeAccessPermission.RevertDeny()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public static void RevertDeny ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.CodeAccessPermission.RevertPermitOnly\n  id: RevertPermitOnly\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: RevertPermitOnly()\n  nameWithType: CodeAccessPermission.RevertPermitOnly()\n  fullName: System.Security.CodeAccessPermission.RevertPermitOnly()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public static void RevertPermitOnly ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.CodeAccessPermission.ToString\n  id: ToString\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: CodeAccessPermission.ToString()\n  fullName: System.Security.CodeAccessPermission.ToString()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.CodeAccessPermission.ToXml\n  id: ToXml\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: ToXml()\n  nameWithType: CodeAccessPermission.ToXml()\n  fullName: System.Security.CodeAccessPermission.ToXml()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public abstract System.Security.SecurityElement ToXml ();\n    parameters: []\n    return:\n      type: System.Security.SecurityElement\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.CodeAccessPermission.Union(System.Security.IPermission)\n  id: Union(System.Security.IPermission)\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: Union(IPermission)\n  nameWithType: CodeAccessPermission.Union(IPermission)\n  fullName: System.Security.CodeAccessPermission.Union(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: public virtual System.Security.IPermission Union (System.Security.IPermission other);\n    parameters:\n    - id: other\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n    return:\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Security.CodeAccessPermission.#ctor\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: CodeAccessPermission()\n  nameWithType: CodeAccessPermission.CodeAccessPermission()\n  fullName: System.Security.CodeAccessPermission.CodeAccessPermission()\n- uid: System.Security.CodeAccessPermission.Assert\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Assert()\n  nameWithType: CodeAccessPermission.Assert()\n  fullName: System.Security.CodeAccessPermission.Assert()\n- uid: System.Security.CodeAccessPermission.Copy\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Copy()\n  nameWithType: CodeAccessPermission.Copy()\n  fullName: System.Security.CodeAccessPermission.Copy()\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.CodeAccessPermission.Demand\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Demand()\n  nameWithType: CodeAccessPermission.Demand()\n  fullName: System.Security.CodeAccessPermission.Demand()\n- uid: System.Security.CodeAccessPermission.Deny\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Deny()\n  nameWithType: CodeAccessPermission.Deny()\n  fullName: System.Security.CodeAccessPermission.Deny()\n- uid: System.Security.CodeAccessPermission.Equals(System.Object)\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: CodeAccessPermission.Equals(Object)\n  fullName: System.Security.CodeAccessPermission.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: FromXml(SecurityElement)\n  nameWithType: CodeAccessPermission.FromXml(SecurityElement)\n  fullName: System.Security.CodeAccessPermission.FromXml(SecurityElement)\n- uid: System.Security.SecurityElement\n  parent: System.Security\n  isExternal: false\n  name: SecurityElement\n  nameWithType: SecurityElement\n  fullName: System.Security.SecurityElement\n- uid: System.Security.CodeAccessPermission.GetHashCode\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: CodeAccessPermission.GetHashCode()\n  fullName: System.Security.CodeAccessPermission.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Intersect(IPermission)\n  nameWithType: CodeAccessPermission.Intersect(IPermission)\n  fullName: System.Security.CodeAccessPermission.Intersect(IPermission)\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IsSubsetOf(IPermission)\n  nameWithType: CodeAccessPermission.IsSubsetOf(IPermission)\n  fullName: System.Security.CodeAccessPermission.IsSubsetOf(IPermission)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.CodeAccessPermission.PermitOnly\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: PermitOnly()\n  nameWithType: CodeAccessPermission.PermitOnly()\n  fullName: System.Security.CodeAccessPermission.PermitOnly()\n- uid: System.Security.CodeAccessPermission.RevertAll\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertAll()\n  nameWithType: CodeAccessPermission.RevertAll()\n  fullName: System.Security.CodeAccessPermission.RevertAll()\n- uid: System.Security.CodeAccessPermission.RevertAssert\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertAssert()\n  nameWithType: CodeAccessPermission.RevertAssert()\n  fullName: System.Security.CodeAccessPermission.RevertAssert()\n- uid: System.Security.CodeAccessPermission.RevertDeny\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertDeny()\n  nameWithType: CodeAccessPermission.RevertDeny()\n  fullName: System.Security.CodeAccessPermission.RevertDeny()\n- uid: System.Security.CodeAccessPermission.RevertPermitOnly\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertPermitOnly()\n  nameWithType: CodeAccessPermission.RevertPermitOnly()\n  fullName: System.Security.CodeAccessPermission.RevertPermitOnly()\n- uid: System.Security.CodeAccessPermission.ToString\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: ToString()\n  nameWithType: CodeAccessPermission.ToString()\n  fullName: System.Security.CodeAccessPermission.ToString()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.CodeAccessPermission.ToXml\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: ToXml()\n  nameWithType: CodeAccessPermission.ToXml()\n  fullName: System.Security.CodeAccessPermission.ToXml()\n- uid: System.Security.SecurityElement\n  parent: System.Security\n  isExternal: false\n  name: SecurityElement\n  nameWithType: SecurityElement\n  fullName: System.Security.SecurityElement\n- uid: System.Security.CodeAccessPermission.Union(System.Security.IPermission)\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Union(IPermission)\n  nameWithType: CodeAccessPermission.Union(IPermission)\n  fullName: System.Security.CodeAccessPermission.Union(IPermission)\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n"}