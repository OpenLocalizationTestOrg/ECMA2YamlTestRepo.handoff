{"nodes":[{"pos":[579,597],"content":"CryptoKeyAuditRule","needQuote":true,"needEscape":true,"nodes":[{"content":"CryptoKeyAuditRule","pos":[0,18]}]},{"pos":[2120,2184],"content":"CryptoKeyAuditRule(IdentityReference,CryptoKeyRights,AuditFlags)","needQuote":true,"needEscape":true,"nodes":[{"content":"CryptoKeyAuditRule(IdentityReference,CryptoKeyRights,AuditFlags)","pos":[0,64]}]},{"pos":[2827,2861],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2965,2999],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3088,3122],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3539,3592],"content":"CryptoKeyAuditRule(String,CryptoKeyRights,AuditFlags)","needQuote":true,"needEscape":true,"nodes":[{"content":"CryptoKeyAuditRule(String,CryptoKeyRights,AuditFlags)","pos":[0,53]}]},{"pos":[4146,4180],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4284,4318],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4407,4441],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4672,4687],"content":"CryptoKeyRights","needQuote":true,"needEscape":true,"nodes":[{"content":"CryptoKeyRights","pos":[0,15]}]},{"pos":[5093,5127],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5264,5303],"content":"System.Security.AccessControl.AuditRule","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Security.AccessControl.AuditRule","pos":[0,39]}]},{"pos":[5585,5649],"content":"CryptoKeyAuditRule(IdentityReference,CryptoKeyRights,AuditFlags)","needQuote":true,"needEscape":true,"nodes":[{"content":"CryptoKeyAuditRule(IdentityReference,CryptoKeyRights,AuditFlags)","pos":[0,64]}]},{"pos":[5991,6008],"content":"IdentityReference","needQuote":true,"needEscape":true,"nodes":[{"content":"IdentityReference","pos":[0,17]}]},{"pos":[6220,6235],"content":"CryptoKeyRights","needQuote":true,"needEscape":true,"nodes":[{"content":"CryptoKeyRights","pos":[0,15]}]},{"pos":[6442,6452],"content":"AuditFlags","needQuote":true,"needEscape":true,"nodes":[{"content":"AuditFlags","pos":[0,10]}]},{"pos":[6784,6837],"content":"CryptoKeyAuditRule(String,CryptoKeyRights,AuditFlags)","needQuote":true,"needEscape":true,"nodes":[{"content":"CryptoKeyAuditRule(String,CryptoKeyRights,AuditFlags)","pos":[0,53]}]},{"pos":[7108,7114],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[7285,7300],"content":"CryptoKeyRights","needQuote":true,"needEscape":true,"nodes":[{"content":"CryptoKeyRights","pos":[0,15]}]},{"pos":[7507,7517],"content":"AuditFlags","needQuote":true,"needEscape":true,"nodes":[{"content":"AuditFlags","pos":[0,10]}]},{"pos":[7757,7772],"content":"CryptoKeyRights","needQuote":true,"needEscape":true,"nodes":[{"content":"CryptoKeyRights","pos":[0,15]}]},{"pos":[8022,8037],"content":"CryptoKeyRights","needQuote":true,"needEscape":true,"nodes":[{"content":"CryptoKeyRights","pos":[0,15]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.AccessControl.CryptoKeyAuditRule\n  id: CryptoKeyAuditRule\n  children:\n  - System.Security.AccessControl.CryptoKeyAuditRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.CryptoKeyRights,System.Security.AccessControl.AuditFlags)\n  - System.Security.AccessControl.CryptoKeyAuditRule.#ctor(System.String,System.Security.AccessControl.CryptoKeyRights,System.Security.AccessControl.AuditFlags)\n  - System.Security.AccessControl.CryptoKeyAuditRule.CryptoKeyRights\n  langs:\n  - csharp\n  name: CryptoKeyAuditRule\n  nameWithType: CryptoKeyAuditRule\n  fullName: System.Security.AccessControl.CryptoKeyAuditRule\n  type: Class\n  syntax:\n    content: 'public sealed class CryptoKeyAuditRule : System.Security.AccessControl.AuditRule'\n  inheritance:\n  - System.Object\n  - System.Security.AccessControl.AuthorizationRule\n  - System.Security.AccessControl.AuditRule\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.AccessControl.AuditRule.AuditFlags\n  - System.Security.AccessControl.AuthorizationRule.AccessMask\n  - System.Security.AccessControl.AuthorizationRule.IdentityReference\n  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  - System.Security.AccessControl.AuthorizationRule.IsInherited\n  - System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.AccessControl.CryptoKeyAuditRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.CryptoKeyRights,System.Security.AccessControl.AuditFlags)\n  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.CryptoKeyRights,System.Security.AccessControl.AuditFlags)'\n  parent: System.Security.AccessControl.CryptoKeyAuditRule\n  langs:\n  - csharp\n  name: CryptoKeyAuditRule(IdentityReference,CryptoKeyRights,AuditFlags)\n  nameWithType: CryptoKeyAuditRule.CryptoKeyAuditRule(IdentityReference,CryptoKeyRights,AuditFlags)\n  fullName: System.Security.AccessControl.CryptoKeyAuditRule.CryptoKeyAuditRule(IdentityReference,CryptoKeyRights,AuditFlags)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  syntax:\n    content: public CryptoKeyAuditRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.CryptoKeyRights cryptoKeyRights, System.Security.AccessControl.AuditFlags flags);\n    parameters:\n    - id: identity\n      type: System.Security.Principal.IdentityReference\n      description: Parameter description to be filled\n    - id: cryptoKeyRights\n      type: System.Security.AccessControl.CryptoKeyRights\n      description: Parameter description to be filled\n    - id: flags\n      type: System.Security.AccessControl.AuditFlags\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.AccessControl.CryptoKeyAuditRule.#ctor(System.String,System.Security.AccessControl.CryptoKeyRights,System.Security.AccessControl.AuditFlags)\n  id: '#ctor(System.String,System.Security.AccessControl.CryptoKeyRights,System.Security.AccessControl.AuditFlags)'\n  parent: System.Security.AccessControl.CryptoKeyAuditRule\n  langs:\n  - csharp\n  name: CryptoKeyAuditRule(String,CryptoKeyRights,AuditFlags)\n  nameWithType: CryptoKeyAuditRule.CryptoKeyAuditRule(String,CryptoKeyRights,AuditFlags)\n  fullName: System.Security.AccessControl.CryptoKeyAuditRule.CryptoKeyAuditRule(String,CryptoKeyRights,AuditFlags)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  syntax:\n    content: public CryptoKeyAuditRule (string identity, System.Security.AccessControl.CryptoKeyRights cryptoKeyRights, System.Security.AccessControl.AuditFlags flags);\n    parameters:\n    - id: identity\n      type: System.String\n      description: Parameter description to be filled\n    - id: cryptoKeyRights\n      type: System.Security.AccessControl.CryptoKeyRights\n      description: Parameter description to be filled\n    - id: flags\n      type: System.Security.AccessControl.AuditFlags\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.AccessControl.CryptoKeyAuditRule.CryptoKeyRights\n  id: CryptoKeyRights\n  parent: System.Security.AccessControl.CryptoKeyAuditRule\n  langs:\n  - csharp\n  name: CryptoKeyRights\n  nameWithType: CryptoKeyAuditRule.CryptoKeyRights\n  fullName: System.Security.AccessControl.CryptoKeyAuditRule.CryptoKeyRights\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.AccessControl\n  syntax:\n    content: public System.Security.AccessControl.CryptoKeyRights CryptoKeyRights { get; }\n    return:\n      type: System.Security.AccessControl.CryptoKeyRights\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Security.AccessControl.AuditRule\n  isExternal: false\n  name: System.Security.AccessControl.AuditRule\n- uid: System.Security.AccessControl.CryptoKeyAuditRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.CryptoKeyRights,System.Security.AccessControl.AuditFlags)\n  parent: System.Security.AccessControl.CryptoKeyAuditRule\n  isExternal: false\n  name: CryptoKeyAuditRule(IdentityReference,CryptoKeyRights,AuditFlags)\n  nameWithType: CryptoKeyAuditRule.CryptoKeyAuditRule(IdentityReference,CryptoKeyRights,AuditFlags)\n  fullName: System.Security.AccessControl.CryptoKeyAuditRule.CryptoKeyAuditRule(IdentityReference,CryptoKeyRights,AuditFlags)\n- uid: System.Security.Principal.IdentityReference\n  parent: System.Security.Principal\n  isExternal: false\n  name: IdentityReference\n  nameWithType: IdentityReference\n  fullName: System.Security.Principal.IdentityReference\n- uid: System.Security.AccessControl.CryptoKeyRights\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: CryptoKeyRights\n  nameWithType: CryptoKeyRights\n  fullName: System.Security.AccessControl.CryptoKeyRights\n- uid: System.Security.AccessControl.AuditFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AuditFlags\n  nameWithType: AuditFlags\n  fullName: System.Security.AccessControl.AuditFlags\n- uid: System.Security.AccessControl.CryptoKeyAuditRule.#ctor(System.String,System.Security.AccessControl.CryptoKeyRights,System.Security.AccessControl.AuditFlags)\n  parent: System.Security.AccessControl.CryptoKeyAuditRule\n  isExternal: false\n  name: CryptoKeyAuditRule(String,CryptoKeyRights,AuditFlags)\n  nameWithType: CryptoKeyAuditRule.CryptoKeyAuditRule(String,CryptoKeyRights,AuditFlags)\n  fullName: System.Security.AccessControl.CryptoKeyAuditRule.CryptoKeyAuditRule(String,CryptoKeyRights,AuditFlags)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.AccessControl.CryptoKeyRights\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: CryptoKeyRights\n  nameWithType: CryptoKeyRights\n  fullName: System.Security.AccessControl.CryptoKeyRights\n- uid: System.Security.AccessControl.AuditFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AuditFlags\n  nameWithType: AuditFlags\n  fullName: System.Security.AccessControl.AuditFlags\n- uid: System.Security.AccessControl.CryptoKeyAuditRule.CryptoKeyRights\n  parent: System.Security.AccessControl.CryptoKeyAuditRule\n  isExternal: false\n  name: CryptoKeyRights\n  nameWithType: CryptoKeyAuditRule.CryptoKeyRights\n  fullName: System.Security.AccessControl.CryptoKeyAuditRule.CryptoKeyRights\n- uid: System.Security.AccessControl.CryptoKeyRights\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: CryptoKeyRights\n  nameWithType: CryptoKeyRights\n  fullName: System.Security.AccessControl.CryptoKeyRights\n"}