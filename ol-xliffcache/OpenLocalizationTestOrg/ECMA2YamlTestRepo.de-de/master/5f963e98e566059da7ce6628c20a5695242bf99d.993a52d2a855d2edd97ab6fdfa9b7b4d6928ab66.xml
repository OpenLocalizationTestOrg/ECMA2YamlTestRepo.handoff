{"nodes":[{"pos":[3679,3692],"content":"IList<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"IList<TValue>"},{"pos":[4015,4049],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4434,4453],"content":"assign(IEnumerable)","needQuote":true,"needEscape":true,"nodes":[{"content":"assign(IEnumerable)","pos":[0,19]}]},{"pos":[4849,4883],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5319,5372],"content":"assign(IInputIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,IInputIterator<ph id=\"ph2\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"assign(IInputIterator<TValue>,IInputIterator<TValue>)"},{"pos":[5943,5977],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6075,6109],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6377,6397],"content":"assign(Int32,TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"assign(Int32,TValue)","pos":[0,20]}]},{"pos":[6763,6797],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6851,6885],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7115,7121],"content":"back()","needQuote":true,"needEscape":true,"nodes":[{"content":"back()","pos":[0,6]}]},{"pos":[7429,7463],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7650,7659],"content":"back_item","needQuote":true,"needEscape":true,"nodes":[{"content":"back_item","pos":[0,9]}]},{"pos":[7970,8004],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8319,8364],"content":"begin(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"begin(ContainerBidirectionalIterator<TValue>)"},{"pos":[8933,8967],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9075,9109],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9288,9295],"content":"clear()","needQuote":true,"needEscape":true,"nodes":[{"content":"clear()","pos":[0,7]}]},{"pos":[9731,9738],"content":"empty()","needQuote":true,"needEscape":true,"nodes":[{"content":"empty()","pos":[0,7]}]},{"pos":[10054,10088],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10399,10442],"content":"end(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"end(ContainerBidirectionalIterator<TValue>)"},{"pos":[11005,11039],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11147,11181],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11624,11700],"content":"erase(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,ContainerBidirectionalIterator)","needQuote":true,"needEscape":true,"source":"erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator)"},{"pos":[12403,12437],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12550,12584],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12692,12726],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13349,13456],"content":"erase(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)","needQuote":true,"needEscape":true,"source":"erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)"},{"pos":[14302,14336],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14454,14488],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14605,14639],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14747,14781],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15012,15019],"content":"front()","needQuote":true,"needEscape":true,"nodes":[{"content":"front()","pos":[0,7]}]},{"pos":[15330,15364],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15553,15563],"content":"front_item","needQuote":true,"needEscape":true,"nodes":[{"content":"front_item","pos":[0,10]}]},{"pos":[15877,15911],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16284,16334],"content":"insert(ContainerBidirectionalIterator,IEnumerable)","needQuote":true,"needEscape":true,"nodes":[{"content":"insert(ContainerBidirectionalIterator,IEnumerable)","pos":[0,50]}]},{"pos":[16907,16941],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17021,17055],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17619,17703],"content":"insert(ContainerBidirectionalIterator,IInputIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,IInputIterator<ph id=\"ph2\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"insert(ContainerBidirectionalIterator,IInputIterator<TValue>,IInputIterator<TValue>)"},{"pos":[18422,18456],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18555,18589],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18687,18721],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19117,19168],"content":"insert(ContainerBidirectionalIterator,Int32,TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"insert(ContainerBidirectionalIterator,Int32,TValue)","pos":[0,51]}]},{"pos":[19719,19753],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19815,19849],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19903,19937],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20441,20525],"content":"insert(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,ContainerBidirectionalIterator,TValue)","needQuote":true,"needEscape":true,"source":"insert(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,TValue)"},{"pos":[21258,21292],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21405,21439],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21493,21527],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21635,21669],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22093,22151],"content":"merge(IList<ph id=\"ph1\">&lt;TValue&gt;</ph>,BinaryDelegate&lt;TValue,TValue,Boolean&gt;)","needQuote":true,"needEscape":true,"source":"merge(IList<TValue>,BinaryDelegate<TValue,TValue,Boolean>)"},{"pos":[22701,22735],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22853,22887],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[23072,23082],"content":"pop_back()","needQuote":true,"needEscape":true,"nodes":[{"content":"pop_back()","pos":[0,10]}]},{"pos":[23535,23546],"content":"pop_front()","needQuote":true,"needEscape":true,"nodes":[{"content":"pop_front()","pos":[0,11]}]},{"pos":[24010,24027],"content":"push_back(TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"push_back(TValue)","pos":[0,17]}]},{"pos":[24370,24404],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[24601,24619],"content":"push_front(TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"push_front(TValue)","pos":[0,18]}]},{"pos":[24965,24999],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[25312,25356],"content":"rbegin(ReverseBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"rbegin(ReverseBidirectionalIterator<TValue>)"},{"pos":[25920,25954],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[26062,26096],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[26285,26299],"content":"remove(TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"remove(TValue)","pos":[0,14]}]},{"pos":[26633,26667],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[26976,27018],"content":"rend(ReverseBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"rend(ReverseBidirectionalIterator<TValue>)"},{"pos":[27576,27610],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[27718,27752],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[27961,27974],"content":"resize(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"resize(Int32)","pos":[0,13]}]},{"pos":[28317,28351],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[28619,28639],"content":"resize(Int32,TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"resize(Int32,TValue)","pos":[0,20]}]},{"pos":[29009,29043],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[29097,29131],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[29367,29376],"content":"reverse()","needQuote":true,"needEscape":true,"nodes":[{"content":"reverse()","pos":[0,9]}]},{"pos":[29816,29822],"content":"size()","needQuote":true,"needEscape":true,"nodes":[{"content":"size()","pos":[0,6]}]},{"pos":[30132,30166],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[30469,30512],"content":"sort(BinaryDelegate<TValue,TValue,Boolean>)","needQuote":true,"needEscape":true,"nodes":[{"content":"sort(BinaryDelegate&lt;TValue,TValue,Boolean&gt;)","pos":[0,43],"source":"sort(BinaryDelegate<TValue,TValue,Boolean>)"}]},{"pos":[31020,31054],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[31431,31483],"content":"splice(ContainerBidirectionalIterator,IList<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"splice(ContainerBidirectionalIterator,IList<TValue>)"},{"pos":[32058,32092],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[32174,32208],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[32766,32849],"content":"splice(ContainerBidirectionalIterator,IList<ph id=\"ph1\">&lt;TValue&gt;</ph>,ContainerBidirectionalIterator)","needQuote":true,"needEscape":true,"source":"splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator)"},{"pos":[33558,33592],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[33674,33708],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[33821,33855],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[34541,34655],"content":"splice(ContainerBidirectionalIterator,IList<ph id=\"ph1\">&lt;TValue&gt;</ph>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)","needQuote":true,"needEscape":true,"source":"splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)"},{"pos":[35497,35531],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[35613,35647],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[35760,35794],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[35906,35940],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[36238,36257],"content":"swap(IList<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"swap(IList<TValue>)"},{"pos":[36661,36695],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[37002,37047],"content":"unique(BinaryDelegate<TValue,TValue,Boolean>)","needQuote":true,"needEscape":true,"nodes":[{"content":"unique(BinaryDelegate&lt;TValue,TValue,Boolean&gt;)","pos":[0,45],"source":"unique(BinaryDelegate<TValue,TValue,Boolean>)"}]},{"pos":[37561,37595],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[37807,37826],"content":"assign(IEnumerable)","needQuote":true,"needEscape":true,"nodes":[{"content":"assign(IEnumerable)","pos":[0,19]}]},{"pos":[38043,38054],"content":"IEnumerable","needQuote":true,"needEscape":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[38345,38398],"content":"assign(IInputIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,IInputIterator<ph id=\"ph2\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"assign(IInputIterator<TValue>,IInputIterator<TValue>)"},{"pos":[38716,38738],"content":"IInputIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"IInputIterator<TValue>"},{"pos":[38974,38996],"content":"IInputIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"IInputIterator<TValue>"},{"pos":[39239,39259],"content":"assign(Int32,TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"assign(Int32,TValue)","pos":[0,20]}]},{"pos":[39448,39453],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[39555,39561],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[39720,39726],"content":"back()","needQuote":true,"needEscape":true,"nodes":[{"content":"back()","pos":[0,6]}]},{"pos":[39943,39952],"content":"back_item","needQuote":true,"needEscape":true,"nodes":[{"content":"back_item","pos":[0,9]}]},{"pos":[40108,40114],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[40342,40387],"content":"begin(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"begin(ContainerBidirectionalIterator<TValue>)"},{"pos":[40705,40743],"content":"ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"ContainerBidirectionalIterator<TValue>"},{"pos":[41000,41007],"content":"clear()","needQuote":true,"needEscape":true,"nodes":[{"content":"clear()","pos":[0,7]}]},{"pos":[41222,41229],"content":"empty()","needQuote":true,"needEscape":true,"nodes":[{"content":"empty()","pos":[0,7]}]},{"pos":[41394,41401],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[41636,41679],"content":"end(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"end(ContainerBidirectionalIterator<TValue>)"},{"pos":[41993,42031],"content":"ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"ContainerBidirectionalIterator<TValue>"},{"pos":[42420,42496],"content":"erase(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,ContainerBidirectionalIterator)","needQuote":true,"needEscape":true,"source":"erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator)"},{"pos":[42876,42914],"content":"ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"ContainerBidirectionalIterator<TValue>"},{"pos":[43195,43225],"content":"ContainerBidirectionalIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerBidirectionalIterator","pos":[0,30]}]},{"pos":[43662,43769],"content":"erase(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)","needQuote":true,"needEscape":true,"source":"erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)"},{"pos":[44211,44249],"content":"ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"ContainerBidirectionalIterator<TValue>"},{"pos":[44530,44560],"content":"ContainerBidirectionalIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerBidirectionalIterator","pos":[0,30]}]},{"pos":[44825,44855],"content":"ContainerBidirectionalIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerBidirectionalIterator","pos":[0,30]}]},{"pos":[45096,45103],"content":"front()","needQuote":true,"needEscape":true,"nodes":[{"content":"front()","pos":[0,7]}]},{"pos":[45323,45333],"content":"front_item","needQuote":true,"needEscape":true,"nodes":[{"content":"front_item","pos":[0,10]}]},{"pos":[45491,45497],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[45754,45804],"content":"insert(ContainerBidirectionalIterator,IEnumerable)","needQuote":true,"needEscape":true,"nodes":[{"content":"insert(ContainerBidirectionalIterator,IEnumerable)","pos":[0,50]}]},{"pos":[46129,46159],"content":"ContainerBidirectionalIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerBidirectionalIterator","pos":[0,30]}]},{"pos":[46378,46389],"content":"IEnumerable","needQuote":true,"needEscape":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[46744,46828],"content":"insert(ContainerBidirectionalIterator,IInputIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,IInputIterator<ph id=\"ph2\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"insert(ContainerBidirectionalIterator,IInputIterator<TValue>,IInputIterator<TValue>)"},{"pos":[47221,47251],"content":"ContainerBidirectionalIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerBidirectionalIterator","pos":[0,30]}]},{"pos":[47503,47525],"content":"IInputIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"IInputIterator<TValue>"},{"pos":[47761,47783],"content":"IInputIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"IInputIterator<TValue>"},{"pos":[48090,48141],"content":"insert(ContainerBidirectionalIterator,Int32,TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"insert(ContainerBidirectionalIterator,Int32,TValue)","pos":[0,51]}]},{"pos":[48468,48498],"content":"ContainerBidirectionalIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerBidirectionalIterator","pos":[0,30]}]},{"pos":[48687,48692],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[48794,48800],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[49096,49180],"content":"insert(ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>,ContainerBidirectionalIterator,TValue)","needQuote":true,"needEscape":true,"source":"insert(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,TValue)"},{"pos":[49576,49614],"content":"ContainerBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"ContainerBidirectionalIterator<TValue>"},{"pos":[49895,49925],"content":"ContainerBidirectionalIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerBidirectionalIterator","pos":[0,30]}]},{"pos":[50103,50109],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[50365,50423],"content":"merge(IList<ph id=\"ph1\">&lt;TValue&gt;</ph>,BinaryDelegate&lt;TValue,TValue,Boolean&gt;)","needQuote":true,"needEscape":true,"source":"merge(IList<TValue>,BinaryDelegate<TValue,TValue,Boolean>)"},{"pos":[50726,50739],"content":"IList<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"IList<TValue>"},{"pos":[50961,50998],"content":"BinaryDelegate<TValue,TValue,Boolean>","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryDelegate&lt;TValue,TValue,Boolean&gt;","pos":[0,37],"source":"BinaryDelegate<TValue,TValue,Boolean>"}]},{"pos":[51255,51265],"content":"pop_back()","needQuote":true,"needEscape":true,"nodes":[{"content":"pop_back()","pos":[0,10]}]},{"pos":[51490,51501],"content":"pop_front()","needQuote":true,"needEscape":true,"nodes":[{"content":"pop_front()","pos":[0,11]}]},{"pos":[51732,51749],"content":"push_back(TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"push_back(TValue)","pos":[0,17]}]},{"pos":[51921,51927],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[52096,52114],"content":"push_front(TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"push_front(TValue)","pos":[0,18]}]},{"pos":[52288,52294],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[52521,52565],"content":"rbegin(ReverseBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"rbegin(ReverseBidirectionalIterator<TValue>)"},{"pos":[52879,52915],"content":"ReverseBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"ReverseBidirectionalIterator<TValue>"},{"pos":[53173,53187],"content":"remove(TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"remove(TValue)","pos":[0,14]}]},{"pos":[53353,53359],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[53584,53626],"content":"rend(ReverseBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"rend(ReverseBidirectionalIterator<TValue>)"},{"pos":[53936,53972],"content":"ReverseBidirectionalIterator<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"ReverseBidirectionalIterator<TValue>"},{"pos":[54240,54253],"content":"resize(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"resize(Int32)","pos":[0,13]}]},{"pos":[54428,54433],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[54616,54636],"content":"resize(Int32,TValue)","needQuote":true,"needEscape":true,"nodes":[{"content":"resize(Int32,TValue)","pos":[0,20]}]},{"pos":[54825,54830],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[54932,54938],"content":"TValue","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[55100,55109],"content":"reverse()","needQuote":true,"needEscape":true,"nodes":[{"content":"reverse()","pos":[0,9]}]},{"pos":[55327,55333],"content":"size()","needQuote":true,"needEscape":true,"nodes":[{"content":"size()","pos":[0,6]}]},{"pos":[55494,55499],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[55726,55769],"content":"sort(BinaryDelegate<TValue,TValue,Boolean>)","needQuote":true,"needEscape":true,"nodes":[{"content":"sort(BinaryDelegate&lt;TValue,TValue,Boolean&gt;)","pos":[0,43],"source":"sort(BinaryDelegate<TValue,TValue,Boolean>)"}]},{"pos":[56079,56116],"content":"BinaryDelegate<TValue,TValue,Boolean>","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryDelegate&lt;TValue,TValue,Boolean&gt;","pos":[0,37],"source":"BinaryDelegate<TValue,TValue,Boolean>"}]},{"pos":[56469,56521],"content":"splice(ContainerBidirectionalIterator,IList<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"splice(ContainerBidirectionalIterator,IList<TValue>)"},{"pos":[56850,56880],"content":"ContainerBidirectionalIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerBidirectionalIterator","pos":[0,30]}]},{"pos":[57107,57120],"content":"IList<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"IList<TValue>"},{"pos":[57482,57565],"content":"splice(ContainerBidirectionalIterator,IList<ph id=\"ph1\">&lt;TValue&gt;</ph>,ContainerBidirectionalIterator)","needQuote":true,"needEscape":true,"source":"splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator)"},{"pos":[57956,57986],"content":"ContainerBidirectionalIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerBidirectionalIterator","pos":[0,30]}]},{"pos":[58213,58226],"content":"IList<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"IList<TValue>"},{"pos":[58449,58479],"content":"ContainerBidirectionalIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerBidirectionalIterator","pos":[0,30]}]},{"pos":[58947,59061],"content":"splice(ContainerBidirectionalIterator,IList<ph id=\"ph1\">&lt;TValue&gt;</ph>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)","needQuote":true,"needEscape":true,"source":"splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)"},{"pos":[59514,59544],"content":"ContainerBidirectionalIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerBidirectionalIterator","pos":[0,30]}]},{"pos":[59771,59784],"content":"IList<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"IList<TValue>"},{"pos":[60007,60037],"content":"ContainerBidirectionalIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerBidirectionalIterator","pos":[0,30]}]},{"pos":[60302,60332],"content":"ContainerBidirectionalIterator","needQuote":true,"needEscape":true,"nodes":[{"content":"ContainerBidirectionalIterator","pos":[0,30]}]},{"pos":[60606,60625],"content":"swap(IList<ph id=\"ph1\">&lt;TValue&gt;</ph>)","needQuote":true,"needEscape":true,"source":"swap(IList<TValue>)"},{"pos":[60850,60863],"content":"IList<ph id=\"ph1\">&lt;TValue&gt;</ph>","needQuote":true,"needEscape":true,"source":"IList<TValue>"},{"pos":[61126,61171],"content":"unique(BinaryDelegate<TValue,TValue,Boolean>)","needQuote":true,"needEscape":true,"nodes":[{"content":"unique(BinaryDelegate&lt;TValue,TValue,Boolean&gt;)","pos":[0,45],"source":"unique(BinaryDelegate<TValue,TValue,Boolean>)"}]},{"pos":[61485,61522],"content":"BinaryDelegate<TValue,TValue,Boolean>","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryDelegate&lt;TValue,TValue,Boolean&gt;","pos":[0,37],"source":"BinaryDelegate<TValue,TValue,Boolean>"}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.VisualC.StlClr.IList`1\n  id: IList`1\n  children:\n  - Microsoft.VisualC.StlClr.IList`1.assign(System.Collections.IEnumerable)\n  - Microsoft.VisualC.StlClr.IList`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  - Microsoft.VisualC.StlClr.IList`1.assign(System.Int32,`0)\n  - Microsoft.VisualC.StlClr.IList`1.back\n  - Microsoft.VisualC.StlClr.IList`1.back_item\n  - Microsoft.VisualC.StlClr.IList`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  - Microsoft.VisualC.StlClr.IList`1.clear\n  - Microsoft.VisualC.StlClr.IList`1.empty\n  - Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  - Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  - Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  - Microsoft.VisualC.StlClr.IList`1.front\n  - Microsoft.VisualC.StlClr.IList`1.front_item\n  - Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,System.Collections.IEnumerable)\n  - Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  - Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,System.Int32,`0)\n  - Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,`0)\n  - Microsoft.VisualC.StlClr.IList`1.merge(Microsoft.VisualC.StlClr.IList`1,Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})\n  - Microsoft.VisualC.StlClr.IList`1.pop_back\n  - Microsoft.VisualC.StlClr.IList`1.pop_front\n  - Microsoft.VisualC.StlClr.IList`1.push_back(`0)\n  - Microsoft.VisualC.StlClr.IList`1.push_front(`0)\n  - Microsoft.VisualC.StlClr.IList`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1@)\n  - Microsoft.VisualC.StlClr.IList`1.remove(`0)\n  - Microsoft.VisualC.StlClr.IList`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1@)\n  - Microsoft.VisualC.StlClr.IList`1.resize(System.Int32)\n  - Microsoft.VisualC.StlClr.IList`1.resize(System.Int32,`0)\n  - Microsoft.VisualC.StlClr.IList`1.reverse\n  - Microsoft.VisualC.StlClr.IList`1.size\n  - Microsoft.VisualC.StlClr.IList`1.sort(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})\n  - Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList`1)\n  - Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList`1,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  - Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList`1,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  - Microsoft.VisualC.StlClr.IList`1.swap(Microsoft.VisualC.StlClr.IList`1)\n  - Microsoft.VisualC.StlClr.IList`1.unique(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})\n  langs:\n  - csharp\n  name: IList<TValue>\n  nameWithType: IList<TValue>\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>\n  type: Interface\n  syntax:\n    content: 'public interface IList<TValue> : ICloneable, Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer<TValue>, System.Collections.ICollection'\n    typeParameters:\n    - id: TValue\n      description: Parameter description to be filled\n  implements:\n  - Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer<TValue>\n  - System.Collections.ICollection\n  - System.ICloneable\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.assign(System.Collections.IEnumerable)\n  id: assign(System.Collections.IEnumerable)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: assign(IEnumerable)\n  nameWithType: IList<TValue>.assign(IEnumerable)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.assign(IEnumerable)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void assign (System.Collections.IEnumerable _Right);\n    parameters:\n    - id: _Right\n      type: System.Collections.IEnumerable\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.IList`1.assign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  id: assign(Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: assign(IInputIterator<TValue>,IInputIterator<TValue>)\n  nameWithType: IList<TValue>.assign(IInputIterator<TValue>,IInputIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.assign(IInputIterator<TValue>,IInputIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void assign (Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _First, Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _Last);\n    parameters:\n    - id: _First\n      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n      description: Parameter description to be filled\n    - id: _Last\n      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.IList`1.assign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.assign(System.Int32,`0)\n  id: assign(System.Int32,`0)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: assign(Int32,TValue)\n  nameWithType: IList<TValue>.assign(Int32,TValue)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.assign(Int32,TValue)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void assign (int _Count, TValue _Val);\n    parameters:\n    - id: _Count\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: _Val\n      type: TValue\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.IList`1.assign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.back\n  id: back\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: back()\n  nameWithType: IList<TValue>.back()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.back()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public TValue back ();\n    parameters: []\n    return:\n      type: TValue@\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.back_item\n  id: back_item\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: back_item\n  nameWithType: IList<TValue>.back_item\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.back_item\n  type: Property\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public TValue back_item { get; set; }\n    return:\n      type: TValue\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  id: begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: begin(ContainerBidirectionalIterator<TValue>)\n  nameWithType: IList<TValue>.begin(ContainerBidirectionalIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.begin(ContainerBidirectionalIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) begin (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue> );\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n      description: Parameter description to be filled\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.clear\n  id: clear\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: clear()\n  nameWithType: IList<TValue>.clear()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.clear()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void clear ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.empty\n  id: empty\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: empty()\n  nameWithType: IList<TValue>.empty()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.empty()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public bool empty ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  id: end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: end(ContainerBidirectionalIterator<TValue>)\n  nameWithType: IList<TValue>.end(ContainerBidirectionalIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.end(ContainerBidirectionalIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) end (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue> );\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n      description: Parameter description to be filled\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  id: erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator)\n  nameWithType: IList<TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) erase (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue> , Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Where);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n      description: Parameter description to be filled\n    - id: _Where\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: Parameter description to be filled\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.IList`1.erase*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  id: erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)\n  nameWithType: IList<TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) erase (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue> , Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _First_iter, Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Last_iter);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n      description: Parameter description to be filled\n    - id: _First_iter\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: Parameter description to be filled\n    - id: _Last_iter\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: Parameter description to be filled\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.IList`1.erase*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.front\n  id: front\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: front()\n  nameWithType: IList<TValue>.front()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.front()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public TValue front ();\n    parameters: []\n    return:\n      type: TValue@\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.front_item\n  id: front_item\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: front_item\n  nameWithType: IList<TValue>.front_item\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.front_item\n  type: Property\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public TValue front_item { get; set; }\n    return:\n      type: TValue\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,System.Collections.IEnumerable)\n  id: insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,System.Collections.IEnumerable)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: insert(ContainerBidirectionalIterator,IEnumerable)\n  nameWithType: IList<TValue>.insert(ContainerBidirectionalIterator,IEnumerable)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.insert(ContainerBidirectionalIterator,IEnumerable)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void insert (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Where_iter, System.Collections.IEnumerable _Right);\n    parameters:\n    - id: _Where_iter\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: Parameter description to be filled\n    - id: _Right\n      type: System.Collections.IEnumerable\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.IList`1.insert*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  id: insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: insert(ContainerBidirectionalIterator,IInputIterator<TValue>,IInputIterator<TValue>)\n  nameWithType: IList<TValue>.insert(ContainerBidirectionalIterator,IInputIterator<TValue>,IInputIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.insert(ContainerBidirectionalIterator,IInputIterator<TValue>,IInputIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void insert (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Where, Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _First, Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _Last);\n    parameters:\n    - id: _Where\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: Parameter description to be filled\n    - id: _First\n      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n      description: Parameter description to be filled\n    - id: _Last\n      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.IList`1.insert*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,System.Int32,`0)\n  id: insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,System.Int32,`0)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: insert(ContainerBidirectionalIterator,Int32,TValue)\n  nameWithType: IList<TValue>.insert(ContainerBidirectionalIterator,Int32,TValue)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.insert(ContainerBidirectionalIterator,Int32,TValue)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void insert (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Where, int _Count, TValue _Val);\n    parameters:\n    - id: _Where\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: Parameter description to be filled\n    - id: _Count\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: _Val\n      type: TValue\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.IList`1.insert*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,`0)\n  id: insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,`0)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: insert(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,TValue)\n  nameWithType: IList<TValue>.insert(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,TValue)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.insert(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,TValue)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) insert (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue> , Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Where, TValue _Val);\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n      description: Parameter description to be filled\n    - id: _Where\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: Parameter description to be filled\n    - id: _Val\n      type: TValue\n      description: Parameter description to be filled\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.IList`1.insert*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.merge(Microsoft.VisualC.StlClr.IList`1,Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})\n  id: merge(Microsoft.VisualC.StlClr.IList`1,Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: merge(IList<TValue>,BinaryDelegate<TValue,TValue,Boolean>)\n  nameWithType: IList<TValue>.merge(IList<TValue>,BinaryDelegate<TValue,TValue,Boolean>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.merge(IList<TValue>,BinaryDelegate<TValue,TValue,Boolean>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void merge (Microsoft.VisualC.StlClr.IList<TValue> _Right, Microsoft.VisualC.StlClr.BinaryDelegate<TValue,TValue,bool> _Pred);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.IList`1\n      description: Parameter description to be filled\n    - id: _Pred\n      type: Microsoft.VisualC.StlClr.BinaryDelegate{TValue,TValue,System.Boolean}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.pop_back\n  id: pop_back\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: pop_back()\n  nameWithType: IList<TValue>.pop_back()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.pop_back()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void pop_back ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.pop_front\n  id: pop_front\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: pop_front()\n  nameWithType: IList<TValue>.pop_front()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.pop_front()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void pop_front ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.push_back(`0)\n  id: push_back(`0)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: push_back(TValue)\n  nameWithType: IList<TValue>.push_back(TValue)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.push_back(TValue)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void push_back (TValue _Val);\n    parameters:\n    - id: _Val\n      type: TValue\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.push_front(`0)\n  id: push_front(`0)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: push_front(TValue)\n  nameWithType: IList<TValue>.push_front(TValue)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.push_front(TValue)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void push_front (TValue _Val);\n    parameters:\n    - id: _Val\n      type: TValue\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1@)\n  id: rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: rbegin(ReverseBidirectionalIterator<TValue>)\n  nameWithType: IList<TValue>.rbegin(ReverseBidirectionalIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.rbegin(ReverseBidirectionalIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) rbegin (ref Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator<TValue> );\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n      description: Parameter description to be filled\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.remove(`0)\n  id: remove(`0)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: remove(TValue)\n  nameWithType: IList<TValue>.remove(TValue)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.remove(TValue)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void remove (TValue _Val);\n    parameters:\n    - id: _Val\n      type: TValue\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1@)\n  id: rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: rend(ReverseBidirectionalIterator<TValue>)\n  nameWithType: IList<TValue>.rend(ReverseBidirectionalIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.rend(ReverseBidirectionalIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) rend (ref Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator<TValue> );\n    parameters:\n    - id: ''\n      type: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n      description: Parameter description to be filled\n    return:\n      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.resize(System.Int32)\n  id: resize(System.Int32)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: resize(Int32)\n  nameWithType: IList<TValue>.resize(Int32)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.resize(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void resize (int _Newsize);\n    parameters:\n    - id: _Newsize\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.IList`1.resize*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.resize(System.Int32,`0)\n  id: resize(System.Int32,`0)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: resize(Int32,TValue)\n  nameWithType: IList<TValue>.resize(Int32,TValue)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.resize(Int32,TValue)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void resize (int _Newsize, TValue _Val);\n    parameters:\n    - id: _Newsize\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: _Val\n      type: TValue\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.IList`1.resize*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.reverse\n  id: reverse\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: reverse()\n  nameWithType: IList<TValue>.reverse()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.reverse()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void reverse ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.size\n  id: size\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: size()\n  nameWithType: IList<TValue>.size()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.size()\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public int size ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.sort(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})\n  id: sort(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: sort(BinaryDelegate<TValue,TValue,Boolean>)\n  nameWithType: IList<TValue>.sort(BinaryDelegate<TValue,TValue,Boolean>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.sort(BinaryDelegate<TValue,TValue,Boolean>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void sort (Microsoft.VisualC.StlClr.BinaryDelegate<TValue,TValue,bool> _Pred);\n    parameters:\n    - id: _Pred\n      type: Microsoft.VisualC.StlClr.BinaryDelegate{TValue,TValue,System.Boolean}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList`1)\n  id: splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList`1)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: splice(ContainerBidirectionalIterator,IList<TValue>)\n  nameWithType: IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void splice (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Where, Microsoft.VisualC.StlClr.IList<TValue> _Right);\n    parameters:\n    - id: _Where\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: Parameter description to be filled\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.IList`1\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.IList`1.splice*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList`1,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  id: splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList`1,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator)\n  nameWithType: IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void splice (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Where, Microsoft.VisualC.StlClr.IList<TValue> _Right, Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _First);\n    parameters:\n    - id: _Where\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: Parameter description to be filled\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.IList`1\n      description: Parameter description to be filled\n    - id: _First\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.IList`1.splice*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList`1,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  id: splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList`1,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)\n  nameWithType: IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void splice (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Where, Microsoft.VisualC.StlClr.IList<TValue> _Right, Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _First, Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Last);\n    parameters:\n    - id: _Where\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: Parameter description to be filled\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.IList`1\n      description: Parameter description to be filled\n    - id: _First\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: Parameter description to be filled\n    - id: _Last\n      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n      description: Parameter description to be filled\n  overload: Microsoft.VisualC.StlClr.IList`1.splice*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.swap(Microsoft.VisualC.StlClr.IList`1)\n  id: swap(Microsoft.VisualC.StlClr.IList`1)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: swap(IList<TValue>)\n  nameWithType: IList<TValue>.swap(IList<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.swap(IList<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void swap (Microsoft.VisualC.StlClr.IList<TValue> _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.IList`1\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.IList`1.unique(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})\n  id: unique(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})\n  parent: Microsoft.VisualC.StlClr.IList`1\n  langs:\n  - csharp\n  name: unique(BinaryDelegate<TValue,TValue,Boolean>)\n  nameWithType: IList<TValue>.unique(BinaryDelegate<TValue,TValue,Boolean>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.unique(BinaryDelegate<TValue,TValue,Boolean>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void unique (Microsoft.VisualC.StlClr.BinaryDelegate<TValue,TValue,bool> _Pred);\n    parameters:\n    - id: _Pred\n      type: Microsoft.VisualC.StlClr.BinaryDelegate{TValue,TValue,System.Boolean}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: Microsoft.VisualC.StlClr.IList`1.assign(System.Collections.IEnumerable)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: assign(IEnumerable)\n  nameWithType: IList<TValue>.assign(IEnumerable)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.assign(IEnumerable)\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  nameWithType: IEnumerable\n  fullName: System.Collections.IEnumerable\n- uid: Microsoft.VisualC.StlClr.IList`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: assign(IInputIterator<TValue>,IInputIterator<TValue>)\n  nameWithType: IList<TValue>.assign(IInputIterator<TValue>,IInputIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.assign(IInputIterator<TValue>,IInputIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: IInputIterator<TValue>\n  nameWithType: IInputIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: IInputIterator<TValue>\n  nameWithType: IInputIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.IList`1.assign(System.Int32,`0)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: assign(Int32,TValue)\n  nameWithType: IList<TValue>.assign(Int32,TValue)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.assign(Int32,TValue)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: Microsoft.VisualC.StlClr.IList`1.back\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: back()\n  nameWithType: IList<TValue>.back()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.back()\n- uid: Microsoft.VisualC.StlClr.IList`1.back_item\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: back_item\n  nameWithType: IList<TValue>.back_item\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.back_item\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: Microsoft.VisualC.StlClr.IList`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: begin(ContainerBidirectionalIterator<TValue>)\n  nameWithType: IList<TValue>.begin(ContainerBidirectionalIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.begin(ContainerBidirectionalIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ContainerBidirectionalIterator<TValue>\n  nameWithType: ContainerBidirectionalIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.IList`1.clear\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: clear()\n  nameWithType: IList<TValue>.clear()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.clear()\n- uid: Microsoft.VisualC.StlClr.IList`1.empty\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: empty()\n  nameWithType: IList<TValue>.empty()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.empty()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: end(ContainerBidirectionalIterator<TValue>)\n  nameWithType: IList<TValue>.end(ContainerBidirectionalIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.end(ContainerBidirectionalIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ContainerBidirectionalIterator<TValue>\n  nameWithType: ContainerBidirectionalIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator)\n  nameWithType: IList<TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ContainerBidirectionalIterator<TValue>\n  nameWithType: ContainerBidirectionalIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerBidirectionalIterator\n  nameWithType: ContainerBidirectionalIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n- uid: Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)\n  nameWithType: IList<TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ContainerBidirectionalIterator<TValue>\n  nameWithType: ContainerBidirectionalIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerBidirectionalIterator\n  nameWithType: ContainerBidirectionalIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerBidirectionalIterator\n  nameWithType: ContainerBidirectionalIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n- uid: Microsoft.VisualC.StlClr.IList`1.front\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: front()\n  nameWithType: IList<TValue>.front()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.front()\n- uid: Microsoft.VisualC.StlClr.IList`1.front_item\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: front_item\n  nameWithType: IList<TValue>.front_item\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.front_item\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,System.Collections.IEnumerable)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: insert(ContainerBidirectionalIterator,IEnumerable)\n  nameWithType: IList<TValue>.insert(ContainerBidirectionalIterator,IEnumerable)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.insert(ContainerBidirectionalIterator,IEnumerable)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerBidirectionalIterator\n  nameWithType: ContainerBidirectionalIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  nameWithType: IEnumerable\n  fullName: System.Collections.IEnumerable\n- uid: Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.IInputIterator`1,Microsoft.VisualC.StlClr.Generic.IInputIterator`1)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: insert(ContainerBidirectionalIterator,IInputIterator<TValue>,IInputIterator<TValue>)\n  nameWithType: IList<TValue>.insert(ContainerBidirectionalIterator,IInputIterator<TValue>,IInputIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.insert(ContainerBidirectionalIterator,IInputIterator<TValue>,IInputIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerBidirectionalIterator\n  nameWithType: ContainerBidirectionalIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n- uid: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: IInputIterator<TValue>\n  nameWithType: IInputIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.IInputIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: IInputIterator<TValue>\n  nameWithType: IInputIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,System.Int32,`0)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: insert(ContainerBidirectionalIterator,Int32,TValue)\n  nameWithType: IList<TValue>.insert(ContainerBidirectionalIterator,Int32,TValue)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.insert(ContainerBidirectionalIterator,Int32,TValue)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerBidirectionalIterator\n  nameWithType: ContainerBidirectionalIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,`0)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: insert(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,TValue)\n  nameWithType: IList<TValue>.insert(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,TValue)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.insert(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,TValue)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ContainerBidirectionalIterator<TValue>\n  nameWithType: ContainerBidirectionalIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerBidirectionalIterator\n  nameWithType: ContainerBidirectionalIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: Microsoft.VisualC.StlClr.IList`1.merge(Microsoft.VisualC.StlClr.IList`1,Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: merge(IList<TValue>,BinaryDelegate<TValue,TValue,Boolean>)\n  nameWithType: IList<TValue>.merge(IList<TValue>,BinaryDelegate<TValue,TValue,Boolean>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.merge(IList<TValue>,BinaryDelegate<TValue,TValue,Boolean>)\n- uid: Microsoft.VisualC.StlClr.IList`1\n  parent: Microsoft.VisualC.StlClr\n  isExternal: false\n  name: IList<TValue>\n  nameWithType: IList<TValue>\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>\n- uid: Microsoft.VisualC.StlClr.BinaryDelegate{TValue,TValue,System.Boolean}\n  parent: Microsoft.VisualC.StlClr\n  isExternal: false\n  name: BinaryDelegate<TValue,TValue,Boolean>\n  nameWithType: BinaryDelegate<TValue,TValue,Boolean>\n  fullName: Microsoft.VisualC.StlClr.BinaryDelegate<TValue,TValue,System.Boolean>\n- uid: Microsoft.VisualC.StlClr.IList`1.pop_back\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: pop_back()\n  nameWithType: IList<TValue>.pop_back()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.pop_back()\n- uid: Microsoft.VisualC.StlClr.IList`1.pop_front\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: pop_front()\n  nameWithType: IList<TValue>.pop_front()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.pop_front()\n- uid: Microsoft.VisualC.StlClr.IList`1.push_back(`0)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: push_back(TValue)\n  nameWithType: IList<TValue>.push_back(TValue)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.push_back(TValue)\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: Microsoft.VisualC.StlClr.IList`1.push_front(`0)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: push_front(TValue)\n  nameWithType: IList<TValue>.push_front(TValue)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.push_front(TValue)\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: Microsoft.VisualC.StlClr.IList`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: rbegin(ReverseBidirectionalIterator<TValue>)\n  nameWithType: IList<TValue>.rbegin(ReverseBidirectionalIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.rbegin(ReverseBidirectionalIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ReverseBidirectionalIterator<TValue>\n  nameWithType: ReverseBidirectionalIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.IList`1.remove(`0)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: remove(TValue)\n  nameWithType: IList<TValue>.remove(TValue)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.remove(TValue)\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: Microsoft.VisualC.StlClr.IList`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1@)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: rend(ReverseBidirectionalIterator<TValue>)\n  nameWithType: IList<TValue>.rend(ReverseBidirectionalIterator<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.rend(ReverseBidirectionalIterator<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: ReverseBidirectionalIterator<TValue>\n  nameWithType: ReverseBidirectionalIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.IList`1.resize(System.Int32)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: resize(Int32)\n  nameWithType: IList<TValue>.resize(Int32)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.resize(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: Microsoft.VisualC.StlClr.IList`1.resize(System.Int32,`0)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: resize(Int32,TValue)\n  nameWithType: IList<TValue>.resize(Int32,TValue)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.resize(Int32,TValue)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: TValue\n  parent: ''\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: Microsoft.VisualC.StlClr.IList`1.reverse\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: reverse()\n  nameWithType: IList<TValue>.reverse()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.reverse()\n- uid: Microsoft.VisualC.StlClr.IList`1.size\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: size()\n  nameWithType: IList<TValue>.size()\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.size()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: Microsoft.VisualC.StlClr.IList`1.sort(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: sort(BinaryDelegate<TValue,TValue,Boolean>)\n  nameWithType: IList<TValue>.sort(BinaryDelegate<TValue,TValue,Boolean>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.sort(BinaryDelegate<TValue,TValue,Boolean>)\n- uid: Microsoft.VisualC.StlClr.BinaryDelegate{TValue,TValue,System.Boolean}\n  parent: Microsoft.VisualC.StlClr\n  isExternal: false\n  name: BinaryDelegate<TValue,TValue,Boolean>\n  nameWithType: BinaryDelegate<TValue,TValue,Boolean>\n  fullName: Microsoft.VisualC.StlClr.BinaryDelegate<TValue,TValue,System.Boolean>\n- uid: Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList`1)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: splice(ContainerBidirectionalIterator,IList<TValue>)\n  nameWithType: IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerBidirectionalIterator\n  nameWithType: ContainerBidirectionalIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n- uid: Microsoft.VisualC.StlClr.IList`1\n  parent: Microsoft.VisualC.StlClr\n  isExternal: false\n  name: IList<TValue>\n  nameWithType: IList<TValue>\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>\n- uid: Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList`1,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator)\n  nameWithType: IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerBidirectionalIterator\n  nameWithType: ContainerBidirectionalIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n- uid: Microsoft.VisualC.StlClr.IList`1\n  parent: Microsoft.VisualC.StlClr\n  isExternal: false\n  name: IList<TValue>\n  nameWithType: IList<TValue>\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerBidirectionalIterator\n  nameWithType: ContainerBidirectionalIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n- uid: Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList`1,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)\n  nameWithType: IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerBidirectionalIterator\n  nameWithType: ContainerBidirectionalIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n- uid: Microsoft.VisualC.StlClr.IList`1\n  parent: Microsoft.VisualC.StlClr\n  isExternal: false\n  name: IList<TValue>\n  nameWithType: IList<TValue>\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerBidirectionalIterator\n  nameWithType: ContainerBidirectionalIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: true\n  name: ContainerBidirectionalIterator\n  nameWithType: ContainerBidirectionalIterator\n  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator\n- uid: Microsoft.VisualC.StlClr.IList`1.swap(Microsoft.VisualC.StlClr.IList`1)\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: swap(IList<TValue>)\n  nameWithType: IList<TValue>.swap(IList<TValue>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.swap(IList<TValue>)\n- uid: Microsoft.VisualC.StlClr.IList`1\n  parent: Microsoft.VisualC.StlClr\n  isExternal: false\n  name: IList<TValue>\n  nameWithType: IList<TValue>\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>\n- uid: Microsoft.VisualC.StlClr.IList`1.unique(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  name: unique(BinaryDelegate<TValue,TValue,Boolean>)\n  nameWithType: IList<TValue>.unique(BinaryDelegate<TValue,TValue,Boolean>)\n  fullName: Microsoft.VisualC.StlClr.IList<TValue>.unique(BinaryDelegate<TValue,TValue,Boolean>)\n- uid: Microsoft.VisualC.StlClr.BinaryDelegate{TValue,TValue,System.Boolean}\n  parent: Microsoft.VisualC.StlClr\n  isExternal: false\n  name: BinaryDelegate<TValue,TValue,Boolean>\n  nameWithType: BinaryDelegate<TValue,TValue,Boolean>\n  fullName: Microsoft.VisualC.StlClr.BinaryDelegate<TValue,TValue,System.Boolean>\n- uid: Microsoft.VisualC.StlClr.IList`1.assign*\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  nameWithType: IList<TValue>.\n- uid: Microsoft.VisualC.StlClr.IList`1.erase*\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  nameWithType: IList<TValue>.\n- uid: Microsoft.VisualC.StlClr.IList`1.insert*\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  nameWithType: IList<TValue>.\n- uid: Microsoft.VisualC.StlClr.IList`1.resize*\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  nameWithType: IList<TValue>.\n- uid: Microsoft.VisualC.StlClr.IList`1.splice*\n  parent: Microsoft.VisualC.StlClr.IList`1\n  isExternal: false\n  nameWithType: IList<TValue>.\n"}