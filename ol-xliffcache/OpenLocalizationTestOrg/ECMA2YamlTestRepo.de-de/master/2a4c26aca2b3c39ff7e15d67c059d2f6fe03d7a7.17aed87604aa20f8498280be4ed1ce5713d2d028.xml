{"nodes":[{"pos":[4847,4854],"content":"List<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"List<T>"},{"pos":[5466,5500],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6287,6293],"content":"List()","needQuote":true,"needEscape":true,"nodes":[{"content":"List()","pos":[0,6]}]},{"pos":[6790,6810],"content":"List(IEnumerable<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"List(IEnumerable<T>)"},{"pos":[7211,7245],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7456,7467],"content":"List(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"List(Int32)","pos":[0,11]}]},{"pos":[7780,7814],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7999,8005],"content":"Add(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"Add(T)","pos":[0,6]}]},{"pos":[8286,8320],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8591,8615],"content":"AddRange(IEnumerable<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"AddRange(IEnumerable<T>)"},{"pos":[9028,9062],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9253,9265],"content":"AsReadOnly()","needQuote":true,"needEscape":true,"nodes":[{"content":"AsReadOnly()","pos":[0,12]}]},{"pos":[9657,9691],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9894,9909],"content":"BinarySearch(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"BinarySearch(T)","pos":[0,15]}]},{"pos":[10216,10250],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10307,10341],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10682,10710],"content":"BinarySearch(T,IComparer<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"BinarySearch(T,IComparer<T>)"},{"pos":[11093,11127],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11217,11251],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11308,11342],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11735,11775],"content":"BinarySearch(Int32,Int32,T,IComparer<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"BinarySearch(Int32,Int32,T,IComparer<T>)"},{"pos":[12216,12250],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12311,12345],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12394,12428],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12518,12552],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12609,12643],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12890,12898],"content":"Capacity","needQuote":true,"needEscape":true,"nodes":[{"content":"Capacity","pos":[0,8]}]},{"pos":[13185,13219],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13400,13407],"content":"Clear()","needQuote":true,"needEscape":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[13835,13846],"content":"Contains(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"Contains(T)","pos":[0,11]}]},{"pos":[14142,14176],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14235,14269],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14528,14560],"content":"ConvertAll(Converter<T,TOutput>)","needQuote":true,"needEscape":true,"nodes":[{"content":"ConvertAll(Converter&lt;T,TOutput&gt;)","pos":[0,32],"source":"ConvertAll(Converter<T,TOutput>)"}]},{"pos":[15000,15034],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15119,15153],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15348,15359],"content":"CopyTo(T[])","needQuote":true,"needEscape":true,"nodes":[{"content":"CopyTo(T[])","pos":[0,11]}]},{"pos":[15659,15693],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15968,15985],"content":"CopyTo(T[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"CopyTo(T[],Int32)","pos":[0,17]}]},{"pos":[16313,16347],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16413,16447],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16774,16803],"content":"CopyTo(Int32,T[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"CopyTo(Int32,T[],Int32,Int32)","pos":[0,29]}]},{"pos":[17186,17220],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17272,17306],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17372,17406],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17467,17501],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17736,17741],"content":"Count","needQuote":true,"needEscape":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[18014,18048],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18271,18291],"content":"Exists(Predicate<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Exists(Predicate<T>)"},{"pos":[18633,18667],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18726,18760],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18979,18997],"content":"Find(Predicate<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Find(Predicate<T>)"},{"pos":[19330,19364],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19410,19444],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19669,19690],"content":"FindAll(Predicate<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"FindAll(Predicate<T>)"},{"pos":[20065,20099],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20177,20211],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20440,20463],"content":"FindIndex(Predicate<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"FindIndex(Predicate<T>)"},{"pos":[20813,20847],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20904,20938],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21250,21279],"content":"FindIndex(Int32,Predicate<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"FindIndex(Int32,Predicate<T>)"},{"pos":[21656,21690],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21757,21791],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21848,21882],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22220,22255],"content":"FindIndex(Int32,Int32,Predicate<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"FindIndex(Int32,Int32,Predicate<T>)"},{"pos":[22655,22689],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22750,22784],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22851,22885],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22942,22976],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[23260,23282],"content":"FindLast(Predicate<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"FindLast(Predicate<T>)"},{"pos":[23627,23661],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[23707,23741],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[23978,24005],"content":"FindLastIndex(Predicate<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"FindLastIndex(Predicate<T>)"},{"pos":[24367,24401],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[24458,24492],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[24816,24849],"content":"FindLastIndex(Int32,Predicate<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"FindLastIndex(Int32,Predicate<T>)"},{"pos":[25238,25272],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[25339,25373],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[25430,25464],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[25814,25853],"content":"FindLastIndex(Int32,Int32,Predicate<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"FindLastIndex(Int32,Int32,Predicate<T>)"},{"pos":[26265,26299],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[26360,26394],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[26461,26495],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[26552,26586],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[26866,26884],"content":"ForEach(Action<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ForEach(Action<T>)"},{"pos":[27219,27253],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[27450,27465],"content":"GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[27852,27886],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[28127,28148],"content":"GetRange(Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetRange(Int32,Int32)","pos":[0,21]}]},{"pos":[28520,28554],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[28615,28649],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[28727,28761],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[28954,28964],"content":"IndexOf(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"IndexOf(T)","pos":[0,10]}]},{"pos":[29256,29290],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[29347,29381],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[29655,29671],"content":"IndexOf(T,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"IndexOf(T,Int32)","pos":[0,16]}]},{"pos":[29986,30020],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[30081,30115],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[30172,30206],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[30506,30528],"content":"IndexOf(T,Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"IndexOf(T,Int32,Int32)","pos":[0,22]}]},{"pos":[30866,30900],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[30961,30995],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[31056,31090],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[31147,31181],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[31453,31468],"content":"Insert(Int32,T)","needQuote":true,"needEscape":true,"nodes":[{"content":"Insert(Int32,T)","pos":[0,15]}]},{"pos":[31793,31827],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[31876,31910],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[32213,32246],"content":"InsertRange(Int32,IEnumerable<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"InsertRange(Int32,IEnumerable<T>)"},{"pos":[32658,32692],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[32786,32820],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[33027,33038],"content":"Item(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"Item(Int32)","pos":[0,11]}]},{"pos":[33356,33390],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[33436,33470],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[33671,33685],"content":"LastIndexOf(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"LastIndexOf(T)","pos":[0,14]}]},{"pos":[33989,34023],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[34080,34114],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[34400,34420],"content":"LastIndexOf(T,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"LastIndexOf(T,Int32)","pos":[0,20]}]},{"pos":[34747,34781],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[34842,34876],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[34933,34967],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[35279,35305],"content":"LastIndexOf(T,Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"LastIndexOf(T,Int32,Int32)","pos":[0,26]}]},{"pos":[35655,35689],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[35750,35784],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[35845,35879],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[35936,35970],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[36220,36229],"content":"Remove(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"Remove(T)","pos":[0,9]}]},{"pos":[36519,36553],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[36612,36646],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[36875,36898],"content":"RemoveAll(Predicate<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"RemoveAll(Predicate<T>)"},{"pos":[37248,37282],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[37339,37373],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[37588,37603],"content":"RemoveAt(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"pos":[37922,37956],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[38203,38227],"content":"RemoveRange(Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"RemoveRange(Int32,Int32)","pos":[0,24]}]},{"pos":[38578,38612],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[38673,38707],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[38892,38901],"content":"Reverse()","needQuote":true,"needEscape":true,"nodes":[{"content":"Reverse()","pos":[0,9]}]},{"pos":[39434,39454],"content":"Reverse(Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"Reverse(Int32,Int32)","pos":[0,20]}]},{"pos":[39793,39827],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[39888,39922],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[40156,40162],"content":"Sort()","needQuote":true,"needEscape":true,"nodes":[{"content":"Sort()","pos":[0,6]}]},{"pos":[40703,40721],"content":"Sort(IComparer<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Sort(IComparer<T>)"},{"pos":[41110,41144],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[41417,41436],"content":"Sort(Comparison<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Sort(Comparison<T>)"},{"pos":[41786,41820],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[42183,42213],"content":"Sort(Int32,Int32,IComparer<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Sort(Int32,Int32,IComparer<T>)"},{"pos":[42619,42653],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[42714,42748],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[42838,42872],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[43213,43251],"content":"System.Collections.Generic.ICollection","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection","pos":[0,38]}]},{"pos":[43633,43667],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[43962,44002],"content":"System.Collections.Generic.IEnumerable()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.IEnumerable()","pos":[0,40]}]},{"pos":[44439,44473],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[44786,44836],"content":"System.Collections.ICollection.CopyTo(Array,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.CopyTo(Array,Int32)","pos":[0,50]}]},{"pos":[45246,45280],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[45346,45380],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[45655,45700],"content":"System.Collections.ICollection.IsSynchronized","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.IsSynchronized","pos":[0,45]}]},{"pos":[46089,46123],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[46386,46425],"content":"System.Collections.ICollection.SyncRoot","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.SyncRoot","pos":[0,39]}]},{"pos":[46797,46831],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[47104,47150],"content":"System.Collections.IEnumerable.GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IEnumerable.GetEnumerator()","pos":[0,46]}]},{"pos":[47575,47609],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[47880,47916],"content":"System.Collections.IList.Add(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.Add(Object)","pos":[0,36]}]},{"pos":[48272,48306],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[48363,48397],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[48678,48719],"content":"System.Collections.IList.Contains(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.Contains(Object)","pos":[0,41]}]},{"pos":[49091,49125],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[49184,49218],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[49497,49537],"content":"System.Collections.IList.IndexOf(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.IndexOf(Object)","pos":[0,40]}]},{"pos":[49905,49939],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[49996,50030],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[50333,50378],"content":"System.Collections.IList.Insert(Int32,Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.Insert(Int32,Object)","pos":[0,45]}]},{"pos":[50767,50801],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[50862,50896],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[51153,51189],"content":"System.Collections.IList.IsFixedSize","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.IsFixedSize","pos":[0,36]}]},{"pos":[51551,51585],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[51840,51875],"content":"System.Collections.IList.IsReadOnly","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.IsReadOnly","pos":[0,35]}]},{"pos":[52234,52268],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[52539,52575],"content":"System.Collections.IList.Item(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.Item(Int32)","pos":[0,36]}]},{"pos":[52966,53000],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[53058,53092],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[53369,53408],"content":"System.Collections.IList.Remove(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.Remove(Object)","pos":[0,39]}]},{"pos":[53774,53808],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[53993,54002],"content":"ToArray()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToArray()","pos":[0,9]}]},{"pos":[54288,54322],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[54513,54525],"content":"TrimExcess()","needQuote":true,"needEscape":true,"nodes":[{"content":"TrimExcess()","pos":[0,12]}]},{"pos":[55004,55028],"content":"TrueForAll(Predicate<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"TrueForAll(Predicate<T>)"},{"pos":[55382,55416],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[55475,55509],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[55620,55633],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[55753,55759],"content":"List()","needQuote":true,"needEscape":true,"nodes":[{"content":"List()","pos":[0,6]}]},{"pos":[56006,56026],"content":"List(IEnumerable<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"List(IEnumerable<T>)"},{"pos":[56253,56267],"content":"IEnumerable<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<T>"},{"pos":[56486,56497],"content":"List(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"List(Int32)","pos":[0,11]}]},{"pos":[56658,56663],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[56832,56838],"content":"Add(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"Add(T)","pos":[0,6]}]},{"pos":[56973,56974],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[57171,57195],"content":"AddRange(IEnumerable<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"AddRange(IEnumerable<T>)"},{"pos":[57430,57444],"content":"IEnumerable<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<T>"},{"pos":[57654,57666],"content":"AsReadOnly()","needQuote":true,"needEscape":true,"nodes":[{"content":"AsReadOnly()","pos":[0,12]}]},{"pos":[57892,57913],"content":"ReadOnlyCollection<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"ReadOnlyCollection<T>"},{"pos":[58147,58162],"content":"BinarySearch(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"BinarySearch(T)","pos":[0,15]}]},{"pos":[58331,58336],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[58433,58434],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[58636,58664],"content":"BinarySearch(T,IComparer<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"BinarySearch(T,IComparer<T>)"},{"pos":[58859,58864],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[58961,58962],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[59106,59118],"content":"IComparer<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"IComparer<T>"},{"pos":[59395,59435],"content":"BinarySearch(Int32,Int32,T,IComparer<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"BinarySearch(Int32,Int32,T,IComparer<T>)"},{"pos":[59654,59659],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[59772,59777],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[59890,59895],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[59992,59993],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[60137,60149],"content":"IComparer<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"IComparer<T>"},{"pos":[60353,60361],"content":"Capacity","needQuote":true,"needEscape":true,"nodes":[{"content":"Capacity","pos":[0,8]}]},{"pos":[60516,60521],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[60688,60695],"content":"Clear()","needQuote":true,"needEscape":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[60909,60920],"content":"Contains(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"Contains(T)","pos":[0,11]}]},{"pos":[61083,61090],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[61191,61192],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[61383,61415],"content":"ConvertAll(Converter<T,TOutput>)","needQuote":true,"needEscape":true,"nodes":[{"content":"ConvertAll(Converter&lt;T,TOutput&gt;)","pos":[0,32],"source":"ConvertAll(Converter<T,TOutput>)"}]},{"pos":[61666,61679],"content":"List<ph id=\"ph1\">&lt;TOutput&gt;</ph>","needQuote":true,"needEscape":true,"source":"List<TOutput>"},{"pos":[61843,61863],"content":"Converter<T,TOutput>","needQuote":true,"needEscape":true,"nodes":[{"content":"Converter&lt;T,TOutput&gt;","pos":[0,20],"source":"Converter<T,TOutput>"}]},{"pos":[62067,62078],"content":"CopyTo(T[])","needQuote":true,"needEscape":true,"nodes":[{"content":"CopyTo(T[])","pos":[0,11]}]},{"pos":[62223,62224],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[62398,62415],"content":"CopyTo(T[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"CopyTo(T[],Int32)","pos":[0,17]}]},{"pos":[62572,62573],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[62673,62678],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[62891,62920],"content":"CopyTo(Int32,T[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"CopyTo(Int32,T[],Int32,Int32)","pos":[0,29]}]},{"pos":[63117,63122],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[63219,63220],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[63320,63325],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[63438,63443],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[63610,63615],"content":"Count","needQuote":true,"needEscape":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[63764,63769],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[63957,63977],"content":"Exists(Predicate<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Exists(Predicate<T>)"},{"pos":[64158,64165],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[64288,64300],"content":"Predicate<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"Predicate<T>"},{"pos":[64500,64518],"content":"Find(Predicate<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Find(Predicate<T>)"},{"pos":[64677,64678],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[64782,64794],"content":"Predicate<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"Predicate<T>"},{"pos":[64997,65018],"content":"FindAll(Predicate<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"FindAll(Predicate<T>)"},{"pos":[65240,65247],"content":"List<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"List<T>"},{"pos":[65390,65402],"content":"Predicate<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"Predicate<T>"},{"pos":[65607,65630],"content":"FindIndex(Predicate<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"FindIndex(Predicate<T>)"},{"pos":[65815,65820],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[65939,65951],"content":"Predicate<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"Predicate<T>"},{"pos":[66169,66198],"content":"FindIndex(Int32,Predicate<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"FindIndex(Int32,Predicate<T>)"},{"pos":[66395,66400],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[66513,66518],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[66637,66649],"content":"Predicate<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"Predicate<T>"},{"pos":[66880,66915],"content":"FindIndex(Int32,Int32,Predicate<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"FindIndex(Int32,Int32,Predicate<T>)"},{"pos":[67124,67129],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[67242,67247],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[67360,67365],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[67484,67496],"content":"Predicate<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"Predicate<T>"},{"pos":[67700,67722],"content":"FindLast(Predicate<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"FindLast(Predicate<T>)"},{"pos":[67889,67890],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[67994,68006],"content":"Predicate<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"Predicate<T>"},{"pos":[68215,68242],"content":"FindLastIndex(Predicate<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"FindLastIndex(Predicate<T>)"},{"pos":[68435,68440],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[68559,68571],"content":"Predicate<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"Predicate<T>"},{"pos":[68793,68826],"content":"FindLastIndex(Int32,Predicate<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"FindLastIndex(Int32,Predicate<T>)"},{"pos":[69031,69036],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[69149,69154],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[69273,69285],"content":"Predicate<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"Predicate<T>"},{"pos":[69520,69559],"content":"FindLastIndex(Int32,Int32,Predicate<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"FindLastIndex(Int32,Int32,Predicate<T>)"},{"pos":[69776,69781],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[69894,69899],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[70012,70017],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[70136,70148],"content":"Predicate<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"Predicate<T>"},{"pos":[70348,70366],"content":"ForEach(Action<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ForEach(Action<T>)"},{"pos":[70544,70553],"content":"Action<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"Action<T>"},{"pos":[70736,70751],"content":"GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[70972,70990],"content":"List<ph id=\"ph1\">&lt;T&gt;</ph>+Enumerator","needQuote":true,"needEscape":true,"source":"List<T>+Enumerator"},{"pos":[71233,71254],"content":"GetRange(Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetRange(Int32,Int32)","pos":[0,21]}]},{"pos":[71476,71483],"content":"List<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"List<T>"},{"pos":[71620,71625],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[71738,71743],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[71916,71926],"content":"IndexOf(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"IndexOf(T)","pos":[0,10]}]},{"pos":[72085,72090],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[72187,72188],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[72359,72375],"content":"IndexOf(T,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"IndexOf(T,Int32)","pos":[0,16]}]},{"pos":[72546,72551],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[72648,72649],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[72747,72752],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[72951,72973],"content":"IndexOf(T,Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"IndexOf(T,Int32,Int32)","pos":[0,22]}]},{"pos":[73156,73161],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[73258,73259],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[73357,73362],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[73475,73480],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[73665,73680],"content":"Insert(Int32,T)","needQuote":true,"needEscape":true,"nodes":[{"content":"Insert(Int32,T)","pos":[0,15]}]},{"pos":[73849,73854],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[73951,73952],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[74165,74198],"content":"InsertRange(Int32,IEnumerable<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"InsertRange(Int32,IEnumerable<T>)"},{"pos":[74403,74408],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[74569,74583],"content":"IEnumerable<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<T>"},{"pos":[74801,74812],"content":"Item(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"Item(Int32)","pos":[0,11]}]},{"pos":[74957,74958],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[75056,75061],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[75238,75252],"content":"LastIndexOf(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"LastIndexOf(T)","pos":[0,14]}]},{"pos":[75419,75424],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[75521,75522],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[75697,75717],"content":"LastIndexOf(T,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"LastIndexOf(T,Int32)","pos":[0,20]}]},{"pos":[75896,75901],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[75998,75999],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[76097,76102],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[76305,76331],"content":"LastIndexOf(T,Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"LastIndexOf(T,Int32,Int32)","pos":[0,26]}]},{"pos":[76522,76527],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[76624,76625],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[76723,76728],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[76841,76846],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[77018,77027],"content":"Remove(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"Remove(T)","pos":[0,9]}]},{"pos":[77186,77193],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[77294,77295],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[77471,77494],"content":"RemoveAll(Predicate<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"RemoveAll(Predicate<T>)"},{"pos":[77679,77684],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[77803,77815],"content":"Predicate<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"Predicate<T>"},{"pos":[78013,78028],"content":"RemoveAt(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"pos":[78197,78202],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[78402,78426],"content":"RemoveRange(Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"RemoveRange(Int32,Int32)","pos":[0,24]}]},{"pos":[78613,78618],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[78731,78736],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[78905,78914],"content":"Reverse()","needQuote":true,"needEscape":true,"nodes":[{"content":"Reverse()","pos":[0,9]}]},{"pos":[79154,79174],"content":"Reverse(Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"Reverse(Int32,Int32)","pos":[0,20]}]},{"pos":[79353,79358],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[79471,79476],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[79642,79648],"content":"Sort()","needQuote":true,"needEscape":true,"nodes":[{"content":"Sort()","pos":[0,6]}]},{"pos":[79892,79910],"content":"Sort(IComparer<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Sort(IComparer<T>)"},{"pos":[80131,80143],"content":"IComparer<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"IComparer<T>"},{"pos":[80364,80383],"content":"Sort(Comparison<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Sort(Comparison<T>)"},{"pos":[80567,80580],"content":"Comparison<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"Comparison<T>"},{"pos":[80828,80858],"content":"Sort(Int32,Int32,IComparer<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Sort(Int32,Int32,IComparer<T>)"},{"pos":[81057,81062],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[81175,81180],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[81339,81351],"content":"IComparer<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"IComparer<T>"},{"pos":[81599,81637],"content":"System.Collections.Generic.ICollection","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection","pos":[0,38]}]},{"pos":[81854,81861],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[82082,82122],"content":"System.Collections.Generic.IEnumerable()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.IEnumerable()","pos":[0,40]}]},{"pos":[82389,82403],"content":"IEnumerator<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerator<T>"},{"pos":[82667,82717],"content":"System.Collections.ICollection.CopyTo(Array,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.CopyTo(Array,Int32)","pos":[0,50]}]},{"pos":[82956,82961],"content":"Array","needQuote":true,"needEscape":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[83074,83079],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[83286,83331],"content":"System.Collections.ICollection.IsSynchronized","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.IsSynchronized","pos":[0,45]}]},{"pos":[83562,83569],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[83774,83813],"content":"System.Collections.ICollection.SyncRoot","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.SyncRoot","pos":[0,39]}]},{"pos":[84031,84037],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[84245,84291],"content":"System.Collections.IEnumerable.GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IEnumerable.GetEnumerator()","pos":[0,46]}]},{"pos":[84552,84563],"content":"IEnumerator","needQuote":true,"needEscape":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[84792,84828],"content":"System.Collections.IList.Add(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.Add(Object)","pos":[0,36]}]},{"pos":[85039,85044],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[85158,85164],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[85376,85417],"content":"System.Collections.IList.Contains(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.Contains(Object)","pos":[0,41]}]},{"pos":[85640,85647],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[85765,85771],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[85982,86022],"content":"System.Collections.IList.IndexOf(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.IndexOf(Object)","pos":[0,40]}]},{"pos":[86241,86246],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[86360,86366],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[86589,86634],"content":"System.Collections.IList.Insert(Int32,Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.Insert(Int32,Object)","pos":[0,45]}]},{"pos":[86863,86868],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[86982,86988],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[87188,87224],"content":"System.Collections.IList.IsFixedSize","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.IsFixedSize","pos":[0,36]}]},{"pos":[87437,87444],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[87645,87680],"content":"System.Collections.IList.IsReadOnly","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.IsReadOnly","pos":[0,35]}]},{"pos":[87891,87898],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[88107,88143],"content":"System.Collections.IList.Item(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.Item(Int32)","pos":[0,36]}]},{"pos":[88355,88361],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[88476,88481],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[88689,88728],"content":"System.Collections.IList.Remove(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.Remove(Object)","pos":[0,39]}]},{"pos":[88946,88952],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[89123,89132],"content":"ToArray()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToArray()","pos":[0,9]}]},{"pos":[89273,89274],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[89433,89445],"content":"TrimExcess()","needQuote":true,"needEscape":true,"nodes":[{"content":"TrimExcess()","pos":[0,12]}]},{"pos":[89687,89711],"content":"TrueForAll(Predicate<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"TrueForAll(Predicate<T>)"},{"pos":[89900,89907],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[90030,90042],"content":"Predicate<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"Predicate<T>"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Generic.List`1\n  id: List`1\n  children:\n  - System.Collections.Generic.List`1.#ctor\n  - System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable`1)\n  - System.Collections.Generic.List`1.#ctor(System.Int32)\n  - System.Collections.Generic.List`1.Add(`0)\n  - System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable`1)\n  - System.Collections.Generic.List`1.AsReadOnly\n  - System.Collections.Generic.List`1.BinarySearch(`0)\n  - System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer`1)\n  - System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer`1)\n  - System.Collections.Generic.List`1.Capacity\n  - System.Collections.Generic.List`1.Clear\n  - System.Collections.Generic.List`1.Contains(`0)\n  - System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,`0Output})\n  - System.Collections.Generic.List`1.CopyTo(`0[])\n  - System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)\n  - System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)\n  - System.Collections.Generic.List`1.Count\n  - System.Collections.Generic.List`1.Exists(System.Predicate`1)\n  - System.Collections.Generic.List`1.Find(System.Predicate`1)\n  - System.Collections.Generic.List`1.FindAll(System.Predicate`1)\n  - System.Collections.Generic.List`1.FindIndex(System.Predicate`1)\n  - System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate`1)\n  - System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate`1)\n  - System.Collections.Generic.List`1.FindLast(System.Predicate`1)\n  - System.Collections.Generic.List`1.FindLastIndex(System.Predicate`1)\n  - System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate`1)\n  - System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate`1)\n  - System.Collections.Generic.List`1.ForEach(System.Action`1)\n  - System.Collections.Generic.List`1.GetEnumerator\n  - System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)\n  - System.Collections.Generic.List`1.IndexOf(`0)\n  - System.Collections.Generic.List`1.IndexOf(`0,System.Int32)\n  - System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)\n  - System.Collections.Generic.List`1.Insert(System.Int32,`0)\n  - System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable`1)\n  - System.Collections.Generic.List`1.Item(System.Int32)\n  - System.Collections.Generic.List`1.LastIndexOf(`0)\n  - System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)\n  - System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)\n  - System.Collections.Generic.List`1.Remove(`0)\n  - System.Collections.Generic.List`1.RemoveAll(System.Predicate`1)\n  - System.Collections.Generic.List`1.RemoveAt(System.Int32)\n  - System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)\n  - System.Collections.Generic.List`1.Reverse\n  - System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)\n  - System.Collections.Generic.List`1.Sort\n  - System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer`1)\n  - System.Collections.Generic.List`1.Sort(System.Comparison`1)\n  - System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer`1)\n  - System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  - System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator\n  - System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized\n  - System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot\n  - System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator\n  - System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)\n  - System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)\n  - System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)\n  - System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  - System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize\n  - System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly\n  - System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)\n  - System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)\n  - System.Collections.Generic.List`1.ToArray\n  - System.Collections.Generic.List`1.TrimExcess\n  - System.Collections.Generic.List`1.TrueForAll(System.Predicate`1)\n  langs:\n  - csharp\n  name: List<T>\n  nameWithType: List<T>\n  fullName: System.Collections.Generic.List<T>\n  type: Class\n  syntax:\n    content: >-\n      [System.Diagnostics.DebuggerDisplay(\"Count = {Count}\")]\n\n      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_CollectionDebugView`1))]\n\n      public class List<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IList<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.IReadOnlyList<T>, System.Collections.IList\n    typeParameters:\n    - id: T\n      description: Parameter description to be filled\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.ICollection<T>\n  - System.Collections.Generic.IEnumerable<T>\n  - System.Collections.Generic.IList<T>\n  - System.Collections.Generic.IReadOnlyCollection<T>\n  - System.Collections.Generic.IReadOnlyList<T>\n  - System.Collections.IList\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.#ctor\n  id: '#ctor'\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: List()\n  nameWithType: List<T>.List()\n  fullName: System.Collections.Generic.List<T>.List()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public List ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable`1)\n  id: '#ctor(System.Collections.Generic.IEnumerable`1)'\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: List(IEnumerable<T>)\n  nameWithType: List<T>.List(IEnumerable<T>)\n  fullName: System.Collections.Generic.List<T>.List(IEnumerable<T>)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public List (System.Collections.Generic.IEnumerable<T> collection);\n    parameters:\n    - id: collection\n      type: System.Collections.Generic.IEnumerable`1\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: List(Int32)\n  nameWithType: List<T>.List(Int32)\n  fullName: System.Collections.Generic.List<T>.List(Int32)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public List (int capacity);\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.Add(`0)\n  id: Add(`0)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Add(T)\n  nameWithType: List<T>.Add(T)\n  fullName: System.Collections.Generic.List<T>.Add(T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public void Add (T item);\n    parameters:\n    - id: item\n      type: T\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable`1)\n  id: AddRange(System.Collections.Generic.IEnumerable`1)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: AddRange(IEnumerable<T>)\n  nameWithType: List<T>.AddRange(IEnumerable<T>)\n  fullName: System.Collections.Generic.List<T>.AddRange(IEnumerable<T>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public void AddRange (System.Collections.Generic.IEnumerable<T> collection);\n    parameters:\n    - id: collection\n      type: System.Collections.Generic.IEnumerable`1\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.AsReadOnly\n  id: AsReadOnly\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: AsReadOnly()\n  nameWithType: List<T>.AsReadOnly()\n  fullName: System.Collections.Generic.List<T>.AsReadOnly()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public System.Collections.ObjectModel.ReadOnlyCollection<T> AsReadOnly ();\n    parameters: []\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection`1\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.BinarySearch(`0)\n  id: BinarySearch(`0)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: BinarySearch(T)\n  nameWithType: List<T>.BinarySearch(T)\n  fullName: System.Collections.Generic.List<T>.BinarySearch(T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public int BinarySearch (T item);\n    parameters:\n    - id: item\n      type: T\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Collections.Generic.List`1.BinarySearch*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer`1)\n  id: BinarySearch(`0,System.Collections.Generic.IComparer`1)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: BinarySearch(T,IComparer<T>)\n  nameWithType: List<T>.BinarySearch(T,IComparer<T>)\n  fullName: System.Collections.Generic.List<T>.BinarySearch(T,IComparer<T>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public int BinarySearch (T item, System.Collections.Generic.IComparer<T> comparer);\n    parameters:\n    - id: item\n      type: T\n      description: Parameter description to be filled\n    - id: comparer\n      type: System.Collections.Generic.IComparer`1\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Collections.Generic.List`1.BinarySearch*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer`1)\n  id: BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer`1)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: BinarySearch(Int32,Int32,T,IComparer<T>)\n  nameWithType: List<T>.BinarySearch(Int32,Int32,T,IComparer<T>)\n  fullName: System.Collections.Generic.List<T>.BinarySearch(Int32,Int32,T,IComparer<T>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public int BinarySearch (int index, int count, T item, System.Collections.Generic.IComparer<T> comparer);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: item\n      type: T\n      description: Parameter description to be filled\n    - id: comparer\n      type: System.Collections.Generic.IComparer`1\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Collections.Generic.List`1.BinarySearch*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.Capacity\n  id: Capacity\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Capacity\n  nameWithType: List<T>.Capacity\n  fullName: System.Collections.Generic.List<T>.Capacity\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public int Capacity { get; set; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.Clear\n  id: Clear\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: List<T>.Clear()\n  fullName: System.Collections.Generic.List<T>.Clear()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.Contains(`0)\n  id: Contains(`0)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Contains(T)\n  nameWithType: List<T>.Contains(T)\n  fullName: System.Collections.Generic.List<T>.Contains(T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public bool Contains (T item);\n    parameters:\n    - id: item\n      type: T\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,`0Output})\n  id: ConvertAll``1(System.Converter{`0,`0Output})\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: ConvertAll(Converter<T,TOutput>)\n  nameWithType: List<T>.ConvertAll(Converter<T,TOutput>)\n  fullName: System.Collections.Generic.List<T>.ConvertAll(Converter<T,TOutput>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public System.Collections.Generic.List<TOutput> ConvertAll<TOutput> (Converter<T,TOutput> converter);\n    parameters:\n    - id: converter\n      type: System.Converter{T,TOutput}\n      description: Parameter description to be filled\n    return:\n      type: System.Collections.Generic.List{TOutput}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.CopyTo(`0[])\n  id: CopyTo(`0[])\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: CopyTo(T[])\n  nameWithType: List<T>.CopyTo(T[])\n  fullName: System.Collections.Generic.List<T>.CopyTo(T[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public void CopyTo (T[] array);\n    parameters:\n    - id: array\n      type: T[]\n      description: Parameter description to be filled\n  overload: System.Collections.Generic.List`1.CopyTo*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)\n  id: CopyTo(`0[],System.Int32)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: CopyTo(T[],Int32)\n  nameWithType: List<T>.CopyTo(T[],Int32)\n  fullName: System.Collections.Generic.List<T>.CopyTo(T[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public void CopyTo (T[] array, int arrayIndex);\n    parameters:\n    - id: array\n      type: T[]\n      description: Parameter description to be filled\n    - id: arrayIndex\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Collections.Generic.List`1.CopyTo*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)\n  id: CopyTo(System.Int32,`0[],System.Int32,System.Int32)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: CopyTo(Int32,T[],Int32,Int32)\n  nameWithType: List<T>.CopyTo(Int32,T[],Int32,Int32)\n  fullName: System.Collections.Generic.List<T>.CopyTo(Int32,T[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public void CopyTo (int index, T[] array, int arrayIndex, int count);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: array\n      type: T[]\n      description: Parameter description to be filled\n    - id: arrayIndex\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Collections.Generic.List`1.CopyTo*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.Count\n  id: Count\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Count\n  nameWithType: List<T>.Count\n  fullName: System.Collections.Generic.List<T>.Count\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.Exists(System.Predicate`1)\n  id: Exists(System.Predicate`1)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Exists(Predicate<T>)\n  nameWithType: List<T>.Exists(Predicate<T>)\n  fullName: System.Collections.Generic.List<T>.Exists(Predicate<T>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public bool Exists (Predicate<T> match);\n    parameters:\n    - id: match\n      type: System.Predicate`1\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.Find(System.Predicate`1)\n  id: Find(System.Predicate`1)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Find(Predicate<T>)\n  nameWithType: List<T>.Find(Predicate<T>)\n  fullName: System.Collections.Generic.List<T>.Find(Predicate<T>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public T Find (Predicate<T> match);\n    parameters:\n    - id: match\n      type: System.Predicate`1\n      description: Parameter description to be filled\n    return:\n      type: T\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.FindAll(System.Predicate`1)\n  id: FindAll(System.Predicate`1)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: FindAll(Predicate<T>)\n  nameWithType: List<T>.FindAll(Predicate<T>)\n  fullName: System.Collections.Generic.List<T>.FindAll(Predicate<T>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public System.Collections.Generic.List<T> FindAll (Predicate<T> match);\n    parameters:\n    - id: match\n      type: System.Predicate`1\n      description: Parameter description to be filled\n    return:\n      type: System.Collections.Generic.List`1\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.FindIndex(System.Predicate`1)\n  id: FindIndex(System.Predicate`1)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: FindIndex(Predicate<T>)\n  nameWithType: List<T>.FindIndex(Predicate<T>)\n  fullName: System.Collections.Generic.List<T>.FindIndex(Predicate<T>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public int FindIndex (Predicate<T> match);\n    parameters:\n    - id: match\n      type: System.Predicate`1\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Collections.Generic.List`1.FindIndex*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate`1)\n  id: FindIndex(System.Int32,System.Predicate`1)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: FindIndex(Int32,Predicate<T>)\n  nameWithType: List<T>.FindIndex(Int32,Predicate<T>)\n  fullName: System.Collections.Generic.List<T>.FindIndex(Int32,Predicate<T>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public int FindIndex (int startIndex, Predicate<T> match);\n    parameters:\n    - id: startIndex\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: match\n      type: System.Predicate`1\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Collections.Generic.List`1.FindIndex*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate`1)\n  id: FindIndex(System.Int32,System.Int32,System.Predicate`1)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: FindIndex(Int32,Int32,Predicate<T>)\n  nameWithType: List<T>.FindIndex(Int32,Int32,Predicate<T>)\n  fullName: System.Collections.Generic.List<T>.FindIndex(Int32,Int32,Predicate<T>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public int FindIndex (int startIndex, int count, Predicate<T> match);\n    parameters:\n    - id: startIndex\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: match\n      type: System.Predicate`1\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Collections.Generic.List`1.FindIndex*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.FindLast(System.Predicate`1)\n  id: FindLast(System.Predicate`1)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: FindLast(Predicate<T>)\n  nameWithType: List<T>.FindLast(Predicate<T>)\n  fullName: System.Collections.Generic.List<T>.FindLast(Predicate<T>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public T FindLast (Predicate<T> match);\n    parameters:\n    - id: match\n      type: System.Predicate`1\n      description: Parameter description to be filled\n    return:\n      type: T\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate`1)\n  id: FindLastIndex(System.Predicate`1)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: FindLastIndex(Predicate<T>)\n  nameWithType: List<T>.FindLastIndex(Predicate<T>)\n  fullName: System.Collections.Generic.List<T>.FindLastIndex(Predicate<T>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public int FindLastIndex (Predicate<T> match);\n    parameters:\n    - id: match\n      type: System.Predicate`1\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Collections.Generic.List`1.FindLastIndex*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate`1)\n  id: FindLastIndex(System.Int32,System.Predicate`1)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: FindLastIndex(Int32,Predicate<T>)\n  nameWithType: List<T>.FindLastIndex(Int32,Predicate<T>)\n  fullName: System.Collections.Generic.List<T>.FindLastIndex(Int32,Predicate<T>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public int FindLastIndex (int startIndex, Predicate<T> match);\n    parameters:\n    - id: startIndex\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: match\n      type: System.Predicate`1\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Collections.Generic.List`1.FindLastIndex*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate`1)\n  id: FindLastIndex(System.Int32,System.Int32,System.Predicate`1)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: FindLastIndex(Int32,Int32,Predicate<T>)\n  nameWithType: List<T>.FindLastIndex(Int32,Int32,Predicate<T>)\n  fullName: System.Collections.Generic.List<T>.FindLastIndex(Int32,Int32,Predicate<T>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public int FindLastIndex (int startIndex, int count, Predicate<T> match);\n    parameters:\n    - id: startIndex\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: match\n      type: System.Predicate`1\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Collections.Generic.List`1.FindLastIndex*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.ForEach(System.Action`1)\n  id: ForEach(System.Action`1)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: ForEach(Action<T>)\n  nameWithType: List<T>.ForEach(Action<T>)\n  fullName: System.Collections.Generic.List<T>.ForEach(Action<T>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public void ForEach (Action<T> action);\n    parameters:\n    - id: action\n      type: System.Action`1\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: List<T>.GetEnumerator()\n  fullName: System.Collections.Generic.List<T>.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public System.Collections.Generic.List<T>.Enumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.List`1.Enumerator\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)\n  id: GetRange(System.Int32,System.Int32)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: GetRange(Int32,Int32)\n  nameWithType: List<T>.GetRange(Int32,Int32)\n  fullName: System.Collections.Generic.List<T>.GetRange(Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public System.Collections.Generic.List<T> GetRange (int index, int count);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Collections.Generic.List`1\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.IndexOf(`0)\n  id: IndexOf(`0)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: IndexOf(T)\n  nameWithType: List<T>.IndexOf(T)\n  fullName: System.Collections.Generic.List<T>.IndexOf(T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public int IndexOf (T item);\n    parameters:\n    - id: item\n      type: T\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Collections.Generic.List`1.IndexOf*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)\n  id: IndexOf(`0,System.Int32)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: IndexOf(T,Int32)\n  nameWithType: List<T>.IndexOf(T,Int32)\n  fullName: System.Collections.Generic.List<T>.IndexOf(T,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public int IndexOf (T item, int index);\n    parameters:\n    - id: item\n      type: T\n      description: Parameter description to be filled\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Collections.Generic.List`1.IndexOf*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)\n  id: IndexOf(`0,System.Int32,System.Int32)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: IndexOf(T,Int32,Int32)\n  nameWithType: List<T>.IndexOf(T,Int32,Int32)\n  fullName: System.Collections.Generic.List<T>.IndexOf(T,Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public int IndexOf (T item, int index, int count);\n    parameters:\n    - id: item\n      type: T\n      description: Parameter description to be filled\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Collections.Generic.List`1.IndexOf*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)\n  id: Insert(System.Int32,`0)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Insert(Int32,T)\n  nameWithType: List<T>.Insert(Int32,T)\n  fullName: System.Collections.Generic.List<T>.Insert(Int32,T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public void Insert (int index, T item);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: item\n      type: T\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable`1)\n  id: InsertRange(System.Int32,System.Collections.Generic.IEnumerable`1)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: InsertRange(Int32,IEnumerable<T>)\n  nameWithType: List<T>.InsertRange(Int32,IEnumerable<T>)\n  fullName: System.Collections.Generic.List<T>.InsertRange(Int32,IEnumerable<T>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public void InsertRange (int index, System.Collections.Generic.IEnumerable<T> collection);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: collection\n      type: System.Collections.Generic.IEnumerable`1\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: List<T>.Item(Int32)\n  fullName: System.Collections.Generic.List<T>.Item(Int32)\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public T this[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: T\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.LastIndexOf(`0)\n  id: LastIndexOf(`0)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: LastIndexOf(T)\n  nameWithType: List<T>.LastIndexOf(T)\n  fullName: System.Collections.Generic.List<T>.LastIndexOf(T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public int LastIndexOf (T item);\n    parameters:\n    - id: item\n      type: T\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Collections.Generic.List`1.LastIndexOf*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)\n  id: LastIndexOf(`0,System.Int32)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: LastIndexOf(T,Int32)\n  nameWithType: List<T>.LastIndexOf(T,Int32)\n  fullName: System.Collections.Generic.List<T>.LastIndexOf(T,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public int LastIndexOf (T item, int index);\n    parameters:\n    - id: item\n      type: T\n      description: Parameter description to be filled\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Collections.Generic.List`1.LastIndexOf*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)\n  id: LastIndexOf(`0,System.Int32,System.Int32)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: LastIndexOf(T,Int32,Int32)\n  nameWithType: List<T>.LastIndexOf(T,Int32,Int32)\n  fullName: System.Collections.Generic.List<T>.LastIndexOf(T,Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public int LastIndexOf (T item, int index, int count);\n    parameters:\n    - id: item\n      type: T\n      description: Parameter description to be filled\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Collections.Generic.List`1.LastIndexOf*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.Remove(`0)\n  id: Remove(`0)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Remove(T)\n  nameWithType: List<T>.Remove(T)\n  fullName: System.Collections.Generic.List<T>.Remove(T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public bool Remove (T item);\n    parameters:\n    - id: item\n      type: T\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate`1)\n  id: RemoveAll(System.Predicate`1)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: RemoveAll(Predicate<T>)\n  nameWithType: List<T>.RemoveAll(Predicate<T>)\n  fullName: System.Collections.Generic.List<T>.RemoveAll(Predicate<T>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public int RemoveAll (Predicate<T> match);\n    parameters:\n    - id: match\n      type: System.Predicate`1\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: RemoveAt(Int32)\n  nameWithType: List<T>.RemoveAt(Int32)\n  fullName: System.Collections.Generic.List<T>.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public void RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)\n  id: RemoveRange(System.Int32,System.Int32)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: RemoveRange(Int32,Int32)\n  nameWithType: List<T>.RemoveRange(Int32,Int32)\n  fullName: System.Collections.Generic.List<T>.RemoveRange(Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public void RemoveRange (int index, int count);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.Reverse\n  id: Reverse\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Reverse()\n  nameWithType: List<T>.Reverse()\n  fullName: System.Collections.Generic.List<T>.Reverse()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public void Reverse ();\n    parameters: []\n  overload: System.Collections.Generic.List`1.Reverse*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)\n  id: Reverse(System.Int32,System.Int32)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Reverse(Int32,Int32)\n  nameWithType: List<T>.Reverse(Int32,Int32)\n  fullName: System.Collections.Generic.List<T>.Reverse(Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public void Reverse (int index, int count);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Collections.Generic.List`1.Reverse*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.Sort\n  id: Sort\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Sort()\n  nameWithType: List<T>.Sort()\n  fullName: System.Collections.Generic.List<T>.Sort()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public void Sort ();\n    parameters: []\n  overload: System.Collections.Generic.List`1.Sort*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer`1)\n  id: Sort(System.Collections.Generic.IComparer`1)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Sort(IComparer<T>)\n  nameWithType: List<T>.Sort(IComparer<T>)\n  fullName: System.Collections.Generic.List<T>.Sort(IComparer<T>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public void Sort (System.Collections.Generic.IComparer<T> comparer);\n    parameters:\n    - id: comparer\n      type: System.Collections.Generic.IComparer`1\n      description: Parameter description to be filled\n  overload: System.Collections.Generic.List`1.Sort*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.Sort(System.Comparison`1)\n  id: Sort(System.Comparison`1)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Sort(Comparison<T>)\n  nameWithType: List<T>.Sort(Comparison<T>)\n  fullName: System.Collections.Generic.List<T>.Sort(Comparison<T>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public void Sort (Comparison<T> comparison);\n    parameters:\n    - id: comparison\n      type: System.Comparison`1\n      description: Parameter description to be filled\n  overload: System.Collections.Generic.List`1.Sort*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer`1)\n  id: Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer`1)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: Sort(Int32,Int32,IComparer<T>)\n  nameWithType: List<T>.Sort(Int32,Int32,IComparer<T>)\n  fullName: System.Collections.Generic.List<T>.Sort(Int32,Int32,IComparer<T>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public void Sort (int index, int count, System.Collections.Generic.IComparer<T> comparer);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: comparer\n      type: System.Collections.Generic.IComparer`1\n      description: Parameter description to be filled\n  overload: System.Collections.Generic.List`1.Sort*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  id: System#Collections#Generic#ICollection{T}#IsReadOnly\n  isEii: true\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection\n  nameWithType: List<T>.System.Collections.Generic.ICollection\n  fullName: System.Collections.Generic.List<T>.System.Collections.Generic.ICollection\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator\n  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator\n  isEii: true\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: System.Collections.Generic.IEnumerable()\n  nameWithType: List<T>.System.Collections.Generic.IEnumerable()\n  fullName: System.Collections.Generic.List<T>.System.Collections.Generic.IEnumerable()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: System.Collections.Generic.IEnumerator<T> IEnumerable<T>.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator`1\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: List<T>.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: void ICollection.CopyTo (Array array, int arrayIndex);\n    parameters:\n    - id: array\n      type: System.Array\n      description: Parameter description to be filled\n    - id: arrayIndex\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: List<T>.System.Collections.ICollection.IsSynchronized\n  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: List<T>.System.Collections.ICollection.SyncRoot\n  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: List<T>.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Collections.Generic.List<T>.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)\n  id: System#Collections#IList#Add(System.Object)\n  isEii: true\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: System.Collections.IList.Add(Object)\n  nameWithType: List<T>.System.Collections.IList.Add(Object)\n  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Add(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: int IList.Add (object item);\n    parameters:\n    - id: item\n      type: System.Object\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)\n  id: System#Collections#IList#Contains(System.Object)\n  isEii: true\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: System.Collections.IList.Contains(Object)\n  nameWithType: List<T>.System.Collections.IList.Contains(Object)\n  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Contains(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: bool IList.Contains (object item);\n    parameters:\n    - id: item\n      type: System.Object\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)\n  id: System#Collections#IList#IndexOf(System.Object)\n  isEii: true\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: System.Collections.IList.IndexOf(Object)\n  nameWithType: List<T>.System.Collections.IList.IndexOf(Object)\n  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IndexOf(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: int IList.IndexOf (object item);\n    parameters:\n    - id: item\n      type: System.Object\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  id: System#Collections#IList#Insert(System.Int32,System.Object)\n  isEii: true\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: System.Collections.IList.Insert(Int32,Object)\n  nameWithType: List<T>.System.Collections.IList.Insert(Int32,Object)\n  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Insert(Int32,Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: void IList.Insert (int index, object item);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: item\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize\n  id: System#Collections#IList#IsFixedSize\n  isEii: true\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: List<T>.System.Collections.IList.IsFixedSize\n  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IsFixedSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: bool System.Collections.IList.IsFixedSize { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly\n  id: System#Collections#IList#IsReadOnly\n  isEii: true\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: List<T>.System.Collections.IList.IsReadOnly\n  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IsReadOnly\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: bool System.Collections.IList.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)\n  id: System#Collections#IList#Item(System.Int32)\n  isEii: true\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: System.Collections.IList.Item(Int32)\n  nameWithType: List<T>.System.Collections.IList.Item(Int32)\n  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Item(Int32)\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: object System.Collections.IList.Item[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)\n  id: System#Collections#IList#Remove(System.Object)\n  isEii: true\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: System.Collections.IList.Remove(Object)\n  nameWithType: List<T>.System.Collections.IList.Remove(Object)\n  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Remove(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: void IList.Remove (object item);\n    parameters:\n    - id: item\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.ToArray\n  id: ToArray\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: ToArray()\n  nameWithType: List<T>.ToArray()\n  fullName: System.Collections.Generic.List<T>.ToArray()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public T[] ToArray ();\n    parameters: []\n    return:\n      type: T[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.TrimExcess\n  id: TrimExcess\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: TrimExcess()\n  nameWithType: List<T>.TrimExcess()\n  fullName: System.Collections.Generic.List<T>.TrimExcess()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public void TrimExcess ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate`1)\n  id: TrueForAll(System.Predicate`1)\n  parent: System.Collections.Generic.List`1\n  langs:\n  - csharp\n  name: TrueForAll(Predicate<T>)\n  nameWithType: List<T>.TrueForAll(Predicate<T>)\n  fullName: System.Collections.Generic.List<T>.TrueForAll(Predicate<T>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Generic\n  syntax:\n    content: public bool TrueForAll (Predicate<T> match);\n    parameters:\n    - id: match\n      type: System.Predicate`1\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Collections.Generic.List`1.#ctor\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: List()\n  nameWithType: List<T>.List()\n  fullName: System.Collections.Generic.List<T>.List()\n- uid: System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable`1)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: List(IEnumerable<T>)\n  nameWithType: List<T>.List(IEnumerable<T>)\n  fullName: System.Collections.Generic.List<T>.List(IEnumerable<T>)\n- uid: System.Collections.Generic.IEnumerable`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Collections.Generic.List`1.#ctor(System.Int32)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: List(Int32)\n  nameWithType: List<T>.List(Int32)\n  fullName: System.Collections.Generic.List<T>.List(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.List`1.Add(`0)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Add(T)\n  nameWithType: List<T>.Add(T)\n  fullName: System.Collections.Generic.List<T>.Add(T)\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable`1)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: AddRange(IEnumerable<T>)\n  nameWithType: List<T>.AddRange(IEnumerable<T>)\n  fullName: System.Collections.Generic.List<T>.AddRange(IEnumerable<T>)\n- uid: System.Collections.Generic.IEnumerable`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Collections.Generic.List`1.AsReadOnly\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: AsReadOnly()\n  nameWithType: List<T>.AsReadOnly()\n  fullName: System.Collections.Generic.List<T>.AsReadOnly()\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n  parent: System.Collections.ObjectModel\n  isExternal: false\n  name: ReadOnlyCollection<T>\n  nameWithType: ReadOnlyCollection<T>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>\n- uid: System.Collections.Generic.List`1.BinarySearch(`0)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: BinarySearch(T)\n  nameWithType: List<T>.BinarySearch(T)\n  fullName: System.Collections.Generic.List<T>.BinarySearch(T)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer`1)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: BinarySearch(T,IComparer<T>)\n  nameWithType: List<T>.BinarySearch(T,IComparer<T>)\n  fullName: System.Collections.Generic.List<T>.BinarySearch(T,IComparer<T>)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Collections.Generic.IComparer`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IComparer<T>\n  nameWithType: IComparer<T>\n  fullName: System.Collections.Generic.IComparer<T>\n- uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer`1)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: BinarySearch(Int32,Int32,T,IComparer<T>)\n  nameWithType: List<T>.BinarySearch(Int32,Int32,T,IComparer<T>)\n  fullName: System.Collections.Generic.List<T>.BinarySearch(Int32,Int32,T,IComparer<T>)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Collections.Generic.IComparer`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IComparer<T>\n  nameWithType: IComparer<T>\n  fullName: System.Collections.Generic.IComparer<T>\n- uid: System.Collections.Generic.List`1.Capacity\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Capacity\n  nameWithType: List<T>.Capacity\n  fullName: System.Collections.Generic.List<T>.Capacity\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.List`1.Clear\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Clear()\n  nameWithType: List<T>.Clear()\n  fullName: System.Collections.Generic.List<T>.Clear()\n- uid: System.Collections.Generic.List`1.Contains(`0)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Contains(T)\n  nameWithType: List<T>.Contains(T)\n  fullName: System.Collections.Generic.List<T>.Contains(T)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,`0Output})\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: ConvertAll(Converter<T,TOutput>)\n  nameWithType: List<T>.ConvertAll(Converter<T,TOutput>)\n  fullName: System.Collections.Generic.List<T>.ConvertAll(Converter<T,TOutput>)\n- uid: System.Collections.Generic.List{TOutput}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: List<TOutput>\n  nameWithType: List<TOutput>\n  fullName: System.Collections.Generic.List<TOutput>\n- uid: System.Converter{T,TOutput}\n  parent: System\n  isExternal: false\n  name: Converter<T,TOutput>\n  nameWithType: Converter<T,TOutput>\n  fullName: System.Converter<T,TOutput>\n- uid: System.Collections.Generic.List`1.CopyTo(`0[])\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: CopyTo(T[])\n  nameWithType: List<T>.CopyTo(T[])\n  fullName: System.Collections.Generic.List<T>.CopyTo(T[])\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T[]\n- uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: CopyTo(T[],Int32)\n  nameWithType: List<T>.CopyTo(T[],Int32)\n  fullName: System.Collections.Generic.List<T>.CopyTo(T[],Int32)\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: CopyTo(Int32,T[],Int32,Int32)\n  nameWithType: List<T>.CopyTo(Int32,T[],Int32,Int32)\n  fullName: System.Collections.Generic.List<T>.CopyTo(Int32,T[],Int32,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.List`1.Count\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Count\n  nameWithType: List<T>.Count\n  fullName: System.Collections.Generic.List<T>.Count\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.List`1.Exists(System.Predicate`1)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Exists(Predicate<T>)\n  nameWithType: List<T>.Exists(Predicate<T>)\n  fullName: System.Collections.Generic.List<T>.Exists(Predicate<T>)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Predicate`1\n  parent: System\n  isExternal: false\n  name: Predicate<T>\n  nameWithType: Predicate<T>\n  fullName: System.Predicate<T>\n- uid: System.Collections.Generic.List`1.Find(System.Predicate`1)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Find(Predicate<T>)\n  nameWithType: List<T>.Find(Predicate<T>)\n  fullName: System.Collections.Generic.List<T>.Find(Predicate<T>)\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Predicate`1\n  parent: System\n  isExternal: false\n  name: Predicate<T>\n  nameWithType: Predicate<T>\n  fullName: System.Predicate<T>\n- uid: System.Collections.Generic.List`1.FindAll(System.Predicate`1)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: FindAll(Predicate<T>)\n  nameWithType: List<T>.FindAll(Predicate<T>)\n  fullName: System.Collections.Generic.List<T>.FindAll(Predicate<T>)\n- uid: System.Collections.Generic.List`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: List<T>\n  nameWithType: List<T>\n  fullName: System.Collections.Generic.List<T>\n- uid: System.Predicate`1\n  parent: System\n  isExternal: false\n  name: Predicate<T>\n  nameWithType: Predicate<T>\n  fullName: System.Predicate<T>\n- uid: System.Collections.Generic.List`1.FindIndex(System.Predicate`1)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: FindIndex(Predicate<T>)\n  nameWithType: List<T>.FindIndex(Predicate<T>)\n  fullName: System.Collections.Generic.List<T>.FindIndex(Predicate<T>)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Predicate`1\n  parent: System\n  isExternal: false\n  name: Predicate<T>\n  nameWithType: Predicate<T>\n  fullName: System.Predicate<T>\n- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate`1)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: FindIndex(Int32,Predicate<T>)\n  nameWithType: List<T>.FindIndex(Int32,Predicate<T>)\n  fullName: System.Collections.Generic.List<T>.FindIndex(Int32,Predicate<T>)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Predicate`1\n  parent: System\n  isExternal: false\n  name: Predicate<T>\n  nameWithType: Predicate<T>\n  fullName: System.Predicate<T>\n- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate`1)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: FindIndex(Int32,Int32,Predicate<T>)\n  nameWithType: List<T>.FindIndex(Int32,Int32,Predicate<T>)\n  fullName: System.Collections.Generic.List<T>.FindIndex(Int32,Int32,Predicate<T>)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Predicate`1\n  parent: System\n  isExternal: false\n  name: Predicate<T>\n  nameWithType: Predicate<T>\n  fullName: System.Predicate<T>\n- uid: System.Collections.Generic.List`1.FindLast(System.Predicate`1)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: FindLast(Predicate<T>)\n  nameWithType: List<T>.FindLast(Predicate<T>)\n  fullName: System.Collections.Generic.List<T>.FindLast(Predicate<T>)\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Predicate`1\n  parent: System\n  isExternal: false\n  name: Predicate<T>\n  nameWithType: Predicate<T>\n  fullName: System.Predicate<T>\n- uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate`1)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: FindLastIndex(Predicate<T>)\n  nameWithType: List<T>.FindLastIndex(Predicate<T>)\n  fullName: System.Collections.Generic.List<T>.FindLastIndex(Predicate<T>)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Predicate`1\n  parent: System\n  isExternal: false\n  name: Predicate<T>\n  nameWithType: Predicate<T>\n  fullName: System.Predicate<T>\n- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate`1)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: FindLastIndex(Int32,Predicate<T>)\n  nameWithType: List<T>.FindLastIndex(Int32,Predicate<T>)\n  fullName: System.Collections.Generic.List<T>.FindLastIndex(Int32,Predicate<T>)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Predicate`1\n  parent: System\n  isExternal: false\n  name: Predicate<T>\n  nameWithType: Predicate<T>\n  fullName: System.Predicate<T>\n- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate`1)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: FindLastIndex(Int32,Int32,Predicate<T>)\n  nameWithType: List<T>.FindLastIndex(Int32,Int32,Predicate<T>)\n  fullName: System.Collections.Generic.List<T>.FindLastIndex(Int32,Int32,Predicate<T>)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Predicate`1\n  parent: System\n  isExternal: false\n  name: Predicate<T>\n  nameWithType: Predicate<T>\n  fullName: System.Predicate<T>\n- uid: System.Collections.Generic.List`1.ForEach(System.Action`1)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: ForEach(Action<T>)\n  nameWithType: List<T>.ForEach(Action<T>)\n  fullName: System.Collections.Generic.List<T>.ForEach(Action<T>)\n- uid: System.Action`1\n  parent: System\n  isExternal: false\n  name: Action<T>\n  nameWithType: Action<T>\n  fullName: System.Action<T>\n- uid: System.Collections.Generic.List`1.GetEnumerator\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: List<T>.GetEnumerator()\n  fullName: System.Collections.Generic.List<T>.GetEnumerator()\n- uid: System.Collections.Generic.List`1.Enumerator\n  parent: System.Collections.Generic\n  isExternal: false\n  name: List<T>+Enumerator\n  nameWithType: List<T>+Enumerator\n  fullName: System.Collections.Generic.List<T>+Enumerator\n- uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: GetRange(Int32,Int32)\n  nameWithType: List<T>.GetRange(Int32,Int32)\n  fullName: System.Collections.Generic.List<T>.GetRange(Int32,Int32)\n- uid: System.Collections.Generic.List`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: List<T>\n  nameWithType: List<T>\n  fullName: System.Collections.Generic.List<T>\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.List`1.IndexOf(`0)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: IndexOf(T)\n  nameWithType: List<T>.IndexOf(T)\n  fullName: System.Collections.Generic.List<T>.IndexOf(T)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: IndexOf(T,Int32)\n  nameWithType: List<T>.IndexOf(T,Int32)\n  fullName: System.Collections.Generic.List<T>.IndexOf(T,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: IndexOf(T,Int32,Int32)\n  nameWithType: List<T>.IndexOf(T,Int32,Int32)\n  fullName: System.Collections.Generic.List<T>.IndexOf(T,Int32,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Insert(Int32,T)\n  nameWithType: List<T>.Insert(Int32,T)\n  fullName: System.Collections.Generic.List<T>.Insert(Int32,T)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable`1)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: InsertRange(Int32,IEnumerable<T>)\n  nameWithType: List<T>.InsertRange(Int32,IEnumerable<T>)\n  fullName: System.Collections.Generic.List<T>.InsertRange(Int32,IEnumerable<T>)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.IEnumerable`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Collections.Generic.List`1.Item(System.Int32)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: List<T>.Item(Int32)\n  fullName: System.Collections.Generic.List<T>.Item(Int32)\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.List`1.LastIndexOf(`0)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: LastIndexOf(T)\n  nameWithType: List<T>.LastIndexOf(T)\n  fullName: System.Collections.Generic.List<T>.LastIndexOf(T)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: LastIndexOf(T,Int32)\n  nameWithType: List<T>.LastIndexOf(T,Int32)\n  fullName: System.Collections.Generic.List<T>.LastIndexOf(T,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: LastIndexOf(T,Int32,Int32)\n  nameWithType: List<T>.LastIndexOf(T,Int32,Int32)\n  fullName: System.Collections.Generic.List<T>.LastIndexOf(T,Int32,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.List`1.Remove(`0)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Remove(T)\n  nameWithType: List<T>.Remove(T)\n  fullName: System.Collections.Generic.List<T>.Remove(T)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate`1)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: RemoveAll(Predicate<T>)\n  nameWithType: List<T>.RemoveAll(Predicate<T>)\n  fullName: System.Collections.Generic.List<T>.RemoveAll(Predicate<T>)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Predicate`1\n  parent: System\n  isExternal: false\n  name: Predicate<T>\n  nameWithType: Predicate<T>\n  fullName: System.Predicate<T>\n- uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: RemoveAt(Int32)\n  nameWithType: List<T>.RemoveAt(Int32)\n  fullName: System.Collections.Generic.List<T>.RemoveAt(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: RemoveRange(Int32,Int32)\n  nameWithType: List<T>.RemoveRange(Int32,Int32)\n  fullName: System.Collections.Generic.List<T>.RemoveRange(Int32,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.List`1.Reverse\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Reverse()\n  nameWithType: List<T>.Reverse()\n  fullName: System.Collections.Generic.List<T>.Reverse()\n- uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Reverse(Int32,Int32)\n  nameWithType: List<T>.Reverse(Int32,Int32)\n  fullName: System.Collections.Generic.List<T>.Reverse(Int32,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.List`1.Sort\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Sort()\n  nameWithType: List<T>.Sort()\n  fullName: System.Collections.Generic.List<T>.Sort()\n- uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer`1)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Sort(IComparer<T>)\n  nameWithType: List<T>.Sort(IComparer<T>)\n  fullName: System.Collections.Generic.List<T>.Sort(IComparer<T>)\n- uid: System.Collections.Generic.IComparer`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IComparer<T>\n  nameWithType: IComparer<T>\n  fullName: System.Collections.Generic.IComparer<T>\n- uid: System.Collections.Generic.List`1.Sort(System.Comparison`1)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Sort(Comparison<T>)\n  nameWithType: List<T>.Sort(Comparison<T>)\n  fullName: System.Collections.Generic.List<T>.Sort(Comparison<T>)\n- uid: System.Comparison`1\n  parent: System\n  isExternal: false\n  name: Comparison<T>\n  nameWithType: Comparison<T>\n  fullName: System.Comparison<T>\n- uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer`1)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: Sort(Int32,Int32,IComparer<T>)\n  nameWithType: List<T>.Sort(Int32,Int32,IComparer<T>)\n  fullName: System.Collections.Generic.List<T>.Sort(Int32,Int32,IComparer<T>)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.IComparer`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IComparer<T>\n  nameWithType: IComparer<T>\n  fullName: System.Collections.Generic.IComparer<T>\n- uid: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: System.Collections.Generic.ICollection\n  nameWithType: List<T>.System.Collections.Generic.ICollection\n  fullName: System.Collections.Generic.List<T>.System.Collections.Generic.ICollection\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: System.Collections.Generic.IEnumerable()\n  nameWithType: List<T>.System.Collections.Generic.IEnumerable()\n  fullName: System.Collections.Generic.List<T>.System.Collections.Generic.IEnumerable()\n- uid: System.Collections.Generic.IEnumerator`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerator<T>\n  nameWithType: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n- uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: List<T>.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: List<T>.System.Collections.ICollection.IsSynchronized\n  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.IsSynchronized\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: List<T>.System.Collections.ICollection.SyncRoot\n  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.SyncRoot\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: List<T>.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Collections.Generic.List<T>.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: System.Collections.IList.Add(Object)\n  nameWithType: List<T>.System.Collections.IList.Add(Object)\n  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Add(Object)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: System.Collections.IList.Contains(Object)\n  nameWithType: List<T>.System.Collections.IList.Contains(Object)\n  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Contains(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: System.Collections.IList.IndexOf(Object)\n  nameWithType: List<T>.System.Collections.IList.IndexOf(Object)\n  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IndexOf(Object)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: System.Collections.IList.Insert(Int32,Object)\n  nameWithType: List<T>.System.Collections.IList.Insert(Int32,Object)\n  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Insert(Int32,Object)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: List<T>.System.Collections.IList.IsFixedSize\n  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IsFixedSize\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: List<T>.System.Collections.IList.IsReadOnly\n  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IsReadOnly\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: System.Collections.IList.Item(Int32)\n  nameWithType: List<T>.System.Collections.IList.Item(Int32)\n  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Item(Int32)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: System.Collections.IList.Remove(Object)\n  nameWithType: List<T>.System.Collections.IList.Remove(Object)\n  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Remove(Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Collections.Generic.List`1.ToArray\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: ToArray()\n  nameWithType: List<T>.ToArray()\n  fullName: System.Collections.Generic.List<T>.ToArray()\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T[]\n- uid: System.Collections.Generic.List`1.TrimExcess\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: TrimExcess()\n  nameWithType: List<T>.TrimExcess()\n  fullName: System.Collections.Generic.List<T>.TrimExcess()\n- uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate`1)\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  name: TrueForAll(Predicate<T>)\n  nameWithType: List<T>.TrueForAll(Predicate<T>)\n  fullName: System.Collections.Generic.List<T>.TrueForAll(Predicate<T>)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Predicate`1\n  parent: System\n  isExternal: false\n  name: Predicate<T>\n  nameWithType: Predicate<T>\n  fullName: System.Predicate<T>\n- uid: System.Collections.Generic.List`1.BinarySearch*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  nameWithType: List<T>.\n- uid: System.Collections.Generic.List`1.CopyTo*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  nameWithType: List<T>.\n- uid: System.Collections.Generic.List`1.FindIndex*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  nameWithType: List<T>.\n- uid: System.Collections.Generic.List`1.FindLastIndex*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  nameWithType: List<T>.\n- uid: System.Collections.Generic.List`1.IndexOf*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  nameWithType: List<T>.\n- uid: System.Collections.Generic.List`1.LastIndexOf*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  nameWithType: List<T>.\n- uid: System.Collections.Generic.List`1.Reverse*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  nameWithType: List<T>.\n- uid: System.Collections.Generic.List`1.Sort*\n  parent: System.Collections.Generic.List`1\n  isExternal: false\n  nameWithType: List<T>.\n"}