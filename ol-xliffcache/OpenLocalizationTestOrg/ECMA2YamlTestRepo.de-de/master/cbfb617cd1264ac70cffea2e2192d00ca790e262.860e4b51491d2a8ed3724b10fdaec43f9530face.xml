{"nodes":[{"pos":[1552,1564],"content":"UTF8Encoding","needQuote":true,"needEscape":true,"nodes":[{"content":"UTF8Encoding","pos":[0,12]}]},{"pos":[4311,4325],"content":"UTF8Encoding()","needQuote":true,"needEscape":true,"nodes":[{"content":"UTF8Encoding()","pos":[0,14]}]},{"pos":[4756,4777],"content":"UTF8Encoding(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"UTF8Encoding(Boolean)","pos":[0,21]}]},{"pos":[5147,5181],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5408,5437],"content":"UTF8Encoding(Boolean,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"UTF8Encoding(Boolean,Boolean)","pos":[0,29]}]},{"pos":[5849,5883],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5960,5994],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6189,6203],"content":"Equals(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[6511,6545],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6604,6638],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6845,6865],"content":"GetByteCount(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetByteCount(String)","pos":[0,20]}]},{"pos":[7190,7224],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7281,7315],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7597,7622],"content":"GetByteCount(Char*,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetByteCount(Char*,Int32)","pos":[0,25]}]},{"pos":[7966,8000],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8061,8095],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8152,8186],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8496,8528],"content":"GetByteCount(Char[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetByteCount(Char[],Int32,Int32)","pos":[0,32]}]},{"pos":[8899,8933],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8994,9028],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9089,9123],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9180,9214],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9540,9573],"content":"GetBytes(Char<bpt id=\"p1\">*</bpt>,Int32,Byte<ept id=\"p1\">*</ept>,Int32)","needQuote":true,"needEscape":true,"source":"GetBytes(Char*,Int32,Byte*,Int32)"},{"pos":[9961,9995],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10060,10094],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10155,10189],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10254,10288],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10345,10379],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10731,10772],"content":"GetBytes(Char[],Int32,Int32,Byte[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetBytes(Char[],Int32,Int32,Byte[],Int32)","pos":[0,41]}]},{"pos":[11194,11228],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11293,11327],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11392,11426],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11488,11522],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11587,11621],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11678,11712],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12064,12105],"content":"GetBytes(String,Int32,Int32,Byte[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetBytes(String,Int32,Int32,Byte[],Int32)","pos":[0,41]}]},{"pos":[12519,12553],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12618,12652],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12717,12751],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12813,12847],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12912,12946],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13003,13037],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13315,13340],"content":"GetCharCount(Byte*,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetCharCount(Byte*,Int32)","pos":[0,25]}]},{"pos":[13684,13718],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13779,13813],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13870,13904],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14214,14246],"content":"GetCharCount(Byte[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetCharCount(Byte[],Int32,Int32)","pos":[0,32]}]},{"pos":[14617,14651],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14712,14746],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14807,14841],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14898,14932],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15258,15291],"content":"GetChars(Byte<bpt id=\"p1\">*</bpt>,Int32,Char<ept id=\"p1\">*</ept>,Int32)","needQuote":true,"needEscape":true,"source":"GetChars(Byte*,Int32,Char*,Int32)"},{"pos":[15679,15713],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15778,15812],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15873,15907],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15972,16006],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16063,16097],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16449,16490],"content":"GetChars(Byte[],Int32,Int32,Char[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetChars(Byte[],Int32,Int32,Char[],Int32)","pos":[0,41]}]},{"pos":[16912,16946],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17011,17045],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17110,17144],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17206,17240],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17305,17339],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17396,17430],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17650,17662],"content":"GetDecoder()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetDecoder()","pos":[0,12]}]},{"pos":[17978,18012],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18185,18197],"content":"GetEncoder()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetEncoder()","pos":[0,12]}]},{"pos":[18513,18547],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18722,18735],"content":"GetHashCode()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[19031,19065],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19276,19298],"content":"GetMaxByteCount(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetMaxByteCount(Int32)","pos":[0,22]}]},{"pos":[19634,19668],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19725,19759],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19970,19992],"content":"GetMaxCharCount(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetMaxCharCount(Int32)","pos":[0,22]}]},{"pos":[20328,20362],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20419,20453],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20628,20641],"content":"GetPreamble()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetPreamble()","pos":[0,13]}]},{"pos":[20941,20975],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21228,21257],"content":"GetString(Byte[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetString(Byte[],Int32,Int32)","pos":[0,29]}]},{"pos":[21622,21656],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21717,21751],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21812,21846],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21904,21938],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22056,22076],"content":"System.Text.Encoding","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Text.Encoding","pos":[0,20]}]},{"pos":[22178,22192],"content":"UTF8Encoding()","needQuote":true,"needEscape":true,"nodes":[{"content":"UTF8Encoding()","pos":[0,14]}]},{"pos":[22406,22427],"content":"UTF8Encoding(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"UTF8Encoding(Boolean)","pos":[0,21]}]},{"pos":[22605,22612],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[22796,22825],"content":"UTF8Encoding(Boolean,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"UTF8Encoding(Boolean,Boolean)","pos":[0,29]}]},{"pos":[23019,23026],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[23145,23152],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[23321,23335],"content":"Equals(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[23499,23506],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[23624,23630],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23803,23823],"content":"GetByteCount(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetByteCount(String)","pos":[0,20]}]},{"pos":[23997,24002],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[24116,24122],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[24307,24332],"content":"GetByteCount(Char*,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetByteCount(Char*,Int32)","pos":[0,25]}]},{"pos":[24516,24521],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[24634,24639],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[24836,24868],"content":"GetByteCount(Char[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetByteCount(Char[],Int32,Int32)","pos":[0,32]}]},{"pos":[25066,25071],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[25183,25187],"content":"Char","needQuote":true,"needEscape":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[25300,25305],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[25418,25423],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[25628,25661],"content":"GetBytes(Char<bpt id=\"p1\">*</bpt>,Int32,Byte<ept id=\"p1\">*</ept>,Int32)","needQuote":true,"needEscape":true,"source":"GetBytes(Char*,Int32,Byte*,Int32)"},{"pos":[25861,25866],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[25979,25984],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[26097,26102],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[26322,26363],"content":"GetBytes(Char[],Int32,Int32,Byte[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetBytes(Char[],Int32,Int32,Byte[],Int32)","pos":[0,41]}]},{"pos":[26579,26584],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[26696,26700],"content":"Char","needQuote":true,"needEscape":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[26813,26818],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[26931,26936],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[27048,27052],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[27165,27170],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[27390,27431],"content":"GetBytes(String,Int32,Int32,Byte[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetBytes(String,Int32,Int32,Byte[],Int32)","pos":[0,41]}]},{"pos":[27647,27652],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[27766,27772],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[27887,27892],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28005,28010],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28122,28126],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[28239,28244],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28427,28452],"content":"GetCharCount(Byte*,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetCharCount(Byte*,Int32)","pos":[0,25]}]},{"pos":[28636,28641],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28754,28759],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28956,28988],"content":"GetCharCount(Byte[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetCharCount(Byte[],Int32,Int32)","pos":[0,32]}]},{"pos":[29186,29191],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[29303,29307],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[29420,29425],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[29538,29543],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[29748,29781],"content":"GetChars(Byte<bpt id=\"p1\">*</bpt>,Int32,Char<ept id=\"p1\">*</ept>,Int32)","needQuote":true,"needEscape":true,"source":"GetChars(Byte*,Int32,Char*,Int32)"},{"pos":[29981,29986],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[30099,30104],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[30217,30222],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[30442,30483],"content":"GetChars(Byte[],Int32,Int32,Char[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetChars(Byte[],Int32,Int32,Char[],Int32)","pos":[0,41]}]},{"pos":[30699,30704],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[30816,30820],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[30933,30938],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[31051,31056],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[31168,31172],"content":"Char","needQuote":true,"needEscape":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[31285,31290],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[31444,31456],"content":"GetDecoder()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetDecoder()","pos":[0,12]}]},{"pos":[31626,31633],"content":"Decoder","needQuote":true,"needEscape":true,"nodes":[{"content":"Decoder","pos":[0,7]}]},{"pos":[31796,31808],"content":"GetEncoder()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetEncoder()","pos":[0,12]}]},{"pos":[31978,31985],"content":"Encoder","needQuote":true,"needEscape":true,"nodes":[{"content":"Encoder","pos":[0,7]}]},{"pos":[32149,32162],"content":"GetHashCode()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[32322,32327],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[32500,32522],"content":"GetMaxByteCount(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetMaxByteCount(Int32)","pos":[0,22]}]},{"pos":[32700,32705],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[32818,32823],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[32996,33018],"content":"GetMaxCharCount(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetMaxCharCount(Int32)","pos":[0,22]}]},{"pos":[33196,33201],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[33314,33319],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[33474,33487],"content":"GetPreamble()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetPreamble()","pos":[0,13]}]},{"pos":[33646,33650],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[33844,33873],"content":"GetString(Byte[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetString(Byte[],Int32,Int32)","pos":[0,29]}]},{"pos":[34066,34072],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[34186,34190],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[34303,34308],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[34421,34426],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Text.UTF8Encoding\n  id: UTF8Encoding\n  children:\n  - System.Text.UTF8Encoding.#ctor\n  - System.Text.UTF8Encoding.#ctor(System.Boolean)\n  - System.Text.UTF8Encoding.#ctor(System.Boolean,System.Boolean)\n  - System.Text.UTF8Encoding.Equals(System.Object)\n  - System.Text.UTF8Encoding.GetByteCount(System.String)\n  - System.Text.UTF8Encoding.GetByteCount(System.Char*,System.Int32)\n  - System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - System.Text.UTF8Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  - System.Text.UTF8Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Text.UTF8Encoding.GetCharCount(System.Byte*,System.Int32)\n  - System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - System.Text.UTF8Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  - System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - System.Text.UTF8Encoding.GetDecoder\n  - System.Text.UTF8Encoding.GetEncoder\n  - System.Text.UTF8Encoding.GetHashCode\n  - System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)\n  - System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)\n  - System.Text.UTF8Encoding.GetPreamble\n  - System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  langs:\n  - csharp\n  name: UTF8Encoding\n  nameWithType: UTF8Encoding\n  fullName: System.Text.UTF8Encoding\n  type: Class\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class UTF8Encoding : System.Text.Encoding\n  inheritance:\n  - System.Object\n  - System.Text.Encoding\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Text.Encoding.ASCII\n  - System.Text.Encoding.BigEndianUnicode\n  - System.Text.Encoding.BodyName\n  - System.Text.Encoding.Clone\n  - System.Text.Encoding.CodePage\n  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n  - System.Text.Encoding.DecoderFallback\n  - System.Text.Encoding.Default\n  - System.Text.Encoding.EncoderFallback\n  - System.Text.Encoding.EncodingName\n  - System.Text.Encoding.GetByteCount(System.Char[])\n  - System.Text.Encoding.GetBytes(System.Char[])\n  - System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n  - System.Text.Encoding.GetBytes(System.String)\n  - System.Text.Encoding.GetCharCount(System.Byte[])\n  - System.Text.Encoding.GetChars(System.Byte[])\n  - System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n  - System.Text.Encoding.GetEncoding(System.Int32)\n  - System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  - System.Text.Encoding.GetEncoding(System.String)\n  - System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  - System.Text.Encoding.GetEncodings\n  - System.Text.Encoding.GetString(System.Byte*,System.Int32)\n  - System.Text.Encoding.GetString(System.Byte[])\n  - System.Text.Encoding.HeaderName\n  - System.Text.Encoding.IsAlwaysNormalized\n  - System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n  - System.Text.Encoding.IsBrowserDisplay\n  - System.Text.Encoding.IsBrowserSave\n  - System.Text.Encoding.IsMailNewsDisplay\n  - System.Text.Encoding.IsMailNewsSave\n  - System.Text.Encoding.IsReadOnly\n  - System.Text.Encoding.IsSingleByte\n  - System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n  - System.Text.Encoding.Unicode\n  - System.Text.Encoding.UTF32\n  - System.Text.Encoding.UTF7\n  - System.Text.Encoding.UTF8\n  - System.Text.Encoding.WebName\n  - System.Text.Encoding.WindowsCodePage\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF8Encoding.#ctor\n  id: '#ctor'\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  name: UTF8Encoding()\n  nameWithType: UTF8Encoding.UTF8Encoding()\n  fullName: System.Text.UTF8Encoding.UTF8Encoding()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public UTF8Encoding ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF8Encoding.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  name: UTF8Encoding(Boolean)\n  nameWithType: UTF8Encoding.UTF8Encoding(Boolean)\n  fullName: System.Text.UTF8Encoding.UTF8Encoding(Boolean)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public UTF8Encoding (bool encoderShouldEmitUTF8Identifier);\n    parameters:\n    - id: encoderShouldEmitUTF8Identifier\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF8Encoding.#ctor(System.Boolean,System.Boolean)\n  id: '#ctor(System.Boolean,System.Boolean)'\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  name: UTF8Encoding(Boolean,Boolean)\n  nameWithType: UTF8Encoding.UTF8Encoding(Boolean,Boolean)\n  fullName: System.Text.UTF8Encoding.UTF8Encoding(Boolean,Boolean)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public UTF8Encoding (bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes);\n    parameters:\n    - id: encoderShouldEmitUTF8Identifier\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: throwOnInvalidBytes\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF8Encoding.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: UTF8Encoding.Equals(Object)\n  fullName: System.Text.UTF8Encoding.Equals(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override bool Equals (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF8Encoding.GetByteCount(System.String)\n  id: GetByteCount(System.String)\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  name: GetByteCount(String)\n  nameWithType: UTF8Encoding.GetByteCount(String)\n  fullName: System.Text.UTF8Encoding.GetByteCount(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override int GetByteCount (string chars);\n    parameters:\n    - id: chars\n      type: System.String\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Text.UTF8Encoding.GetByteCount*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF8Encoding.GetByteCount(System.Char*,System.Int32)\n  id: GetByteCount(System.Char*,System.Int32)\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  name: GetByteCount(Char*,Int32)\n  nameWithType: UTF8Encoding.GetByteCount(Char*,Int32)\n  fullName: System.Text.UTF8Encoding.GetByteCount(Char*,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override int GetByteCount (char* chars, int count);\n    parameters:\n    - id: chars\n      type: System.Char*\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Text.UTF8Encoding.GetByteCount*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  id: GetByteCount(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  name: GetByteCount(Char[],Int32,Int32)\n  nameWithType: UTF8Encoding.GetByteCount(Char[],Int32,Int32)\n  fullName: System.Text.UTF8Encoding.GetByteCount(Char[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override int GetByteCount (char[] chars, int index, int count);\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: Parameter description to be filled\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Text.UTF8Encoding.GetByteCount*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF8Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  id: GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  name: GetBytes(Char*,Int32,Byte*,Int32)\n  nameWithType: UTF8Encoding.GetBytes(Char*,Int32,Byte*,Int32)\n  fullName: System.Text.UTF8Encoding.GetBytes(Char*,Int32,Byte*,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);\n    parameters:\n    - id: chars\n      type: System.Char*\n      description: Parameter description to be filled\n    - id: charCount\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: bytes\n      type: System.Byte*\n      description: Parameter description to be filled\n    - id: byteCount\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Text.UTF8Encoding.GetBytes*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF8Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  name: GetBytes(Char[],Int32,Int32,Byte[],Int32)\n  nameWithType: UTF8Encoding.GetBytes(Char[],Int32,Int32,Byte[],Int32)\n  fullName: System.Text.UTF8Encoding.GetBytes(Char[],Int32,Int32,Byte[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: Parameter description to be filled\n    - id: charIndex\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: charCount\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: bytes\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: byteIndex\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Text.UTF8Encoding.GetBytes*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  name: GetBytes(String,Int32,Int32,Byte[],Int32)\n  nameWithType: UTF8Encoding.GetBytes(String,Int32,Int32,Byte[],Int32)\n  fullName: System.Text.UTF8Encoding.GetBytes(String,Int32,Int32,Byte[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);\n    parameters:\n    - id: s\n      type: System.String\n      description: Parameter description to be filled\n    - id: charIndex\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: charCount\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: bytes\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: byteIndex\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Text.UTF8Encoding.GetBytes*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF8Encoding.GetCharCount(System.Byte*,System.Int32)\n  id: GetCharCount(System.Byte*,System.Int32)\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  name: GetCharCount(Byte*,Int32)\n  nameWithType: UTF8Encoding.GetCharCount(Byte*,Int32)\n  fullName: System.Text.UTF8Encoding.GetCharCount(Byte*,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override int GetCharCount (byte* bytes, int count);\n    parameters:\n    - id: bytes\n      type: System.Byte*\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Text.UTF8Encoding.GetCharCount*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  id: GetCharCount(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  name: GetCharCount(Byte[],Int32,Int32)\n  nameWithType: UTF8Encoding.GetCharCount(Byte[],Int32,Int32)\n  fullName: System.Text.UTF8Encoding.GetCharCount(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override int GetCharCount (byte[] bytes, int index, int count);\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Text.UTF8Encoding.GetCharCount*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF8Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  id: GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  name: GetChars(Byte*,Int32,Char*,Int32)\n  nameWithType: UTF8Encoding.GetChars(Byte*,Int32,Char*,Int32)\n  fullName: System.Text.UTF8Encoding.GetChars(Byte*,Int32,Char*,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);\n    parameters:\n    - id: bytes\n      type: System.Byte*\n      description: Parameter description to be filled\n    - id: byteCount\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: chars\n      type: System.Char*\n      description: Parameter description to be filled\n    - id: charCount\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Text.UTF8Encoding.GetChars*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  name: GetChars(Byte[],Int32,Int32,Char[],Int32)\n  nameWithType: UTF8Encoding.GetChars(Byte[],Int32,Int32,Char[],Int32)\n  fullName: System.Text.UTF8Encoding.GetChars(Byte[],Int32,Int32,Char[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: byteIndex\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: byteCount\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: chars\n      type: System.Char[]\n      description: Parameter description to be filled\n    - id: charIndex\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Text.UTF8Encoding.GetChars*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF8Encoding.GetDecoder\n  id: GetDecoder\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  name: GetDecoder()\n  nameWithType: UTF8Encoding.GetDecoder()\n  fullName: System.Text.UTF8Encoding.GetDecoder()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override System.Text.Decoder GetDecoder ();\n    parameters: []\n    return:\n      type: System.Text.Decoder\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF8Encoding.GetEncoder\n  id: GetEncoder\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  name: GetEncoder()\n  nameWithType: UTF8Encoding.GetEncoder()\n  fullName: System.Text.UTF8Encoding.GetEncoder()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override System.Text.Encoder GetEncoder ();\n    parameters: []\n    return:\n      type: System.Text.Encoder\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF8Encoding.GetHashCode\n  id: GetHashCode\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: UTF8Encoding.GetHashCode()\n  fullName: System.Text.UTF8Encoding.GetHashCode()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)\n  id: GetMaxByteCount(System.Int32)\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  name: GetMaxByteCount(Int32)\n  nameWithType: UTF8Encoding.GetMaxByteCount(Int32)\n  fullName: System.Text.UTF8Encoding.GetMaxByteCount(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override int GetMaxByteCount (int charCount);\n    parameters:\n    - id: charCount\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)\n  id: GetMaxCharCount(System.Int32)\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  name: GetMaxCharCount(Int32)\n  nameWithType: UTF8Encoding.GetMaxCharCount(Int32)\n  fullName: System.Text.UTF8Encoding.GetMaxCharCount(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override int GetMaxCharCount (int byteCount);\n    parameters:\n    - id: byteCount\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF8Encoding.GetPreamble\n  id: GetPreamble\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  name: GetPreamble()\n  nameWithType: UTF8Encoding.GetPreamble()\n  fullName: System.Text.UTF8Encoding.GetPreamble()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override byte[] GetPreamble ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  id: GetString(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  name: GetString(Byte[],Int32,Int32)\n  nameWithType: UTF8Encoding.GetString(Byte[],Int32,Int32)\n  fullName: System.Text.UTF8Encoding.GetString(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Text\n  syntax:\n    content: public override string GetString (byte[] bytes, int index, int count);\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.String\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Text.Encoding\n  isExternal: false\n  name: System.Text.Encoding\n- uid: System.Text.UTF8Encoding.#ctor\n  parent: System.Text.UTF8Encoding\n  isExternal: false\n  name: UTF8Encoding()\n  nameWithType: UTF8Encoding.UTF8Encoding()\n  fullName: System.Text.UTF8Encoding.UTF8Encoding()\n- uid: System.Text.UTF8Encoding.#ctor(System.Boolean)\n  parent: System.Text.UTF8Encoding\n  isExternal: false\n  name: UTF8Encoding(Boolean)\n  nameWithType: UTF8Encoding.UTF8Encoding(Boolean)\n  fullName: System.Text.UTF8Encoding.UTF8Encoding(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Text.UTF8Encoding.#ctor(System.Boolean,System.Boolean)\n  parent: System.Text.UTF8Encoding\n  isExternal: false\n  name: UTF8Encoding(Boolean,Boolean)\n  nameWithType: UTF8Encoding.UTF8Encoding(Boolean,Boolean)\n  fullName: System.Text.UTF8Encoding.UTF8Encoding(Boolean,Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Text.UTF8Encoding.Equals(System.Object)\n  parent: System.Text.UTF8Encoding\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: UTF8Encoding.Equals(Object)\n  fullName: System.Text.UTF8Encoding.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Text.UTF8Encoding.GetByteCount(System.String)\n  parent: System.Text.UTF8Encoding\n  isExternal: false\n  name: GetByteCount(String)\n  nameWithType: UTF8Encoding.GetByteCount(String)\n  fullName: System.Text.UTF8Encoding.GetByteCount(String)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Text.UTF8Encoding.GetByteCount(System.Char*,System.Int32)\n  parent: System.Text.UTF8Encoding\n  isExternal: false\n  name: GetByteCount(Char*,Int32)\n  nameWithType: UTF8Encoding.GetByteCount(Char*,Int32)\n  fullName: System.Text.UTF8Encoding.GetByteCount(Char*,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.UTF8Encoding\n  isExternal: false\n  name: GetByteCount(Char[],Int32,Int32)\n  nameWithType: UTF8Encoding.GetByteCount(Char[],Int32,Int32)\n  fullName: System.Text.UTF8Encoding.GetByteCount(Char[],Int32,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  nameWithType: Char\n  fullName: System.Char[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.UTF8Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  parent: System.Text.UTF8Encoding\n  isExternal: false\n  name: GetBytes(Char*,Int32,Byte*,Int32)\n  nameWithType: UTF8Encoding.GetBytes(Char*,Int32,Byte*,Int32)\n  fullName: System.Text.UTF8Encoding.GetBytes(Char*,Int32,Byte*,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.UTF8Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.UTF8Encoding\n  isExternal: false\n  name: GetBytes(Char[],Int32,Int32,Byte[],Int32)\n  nameWithType: UTF8Encoding.GetBytes(Char[],Int32,Int32,Byte[],Int32)\n  fullName: System.Text.UTF8Encoding.GetBytes(Char[],Int32,Int32,Byte[],Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  nameWithType: Char\n  fullName: System.Char[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.UTF8Encoding\n  isExternal: false\n  name: GetBytes(String,Int32,Int32,Byte[],Int32)\n  nameWithType: UTF8Encoding.GetBytes(String,Int32,Int32,Byte[],Int32)\n  fullName: System.Text.UTF8Encoding.GetBytes(String,Int32,Int32,Byte[],Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.UTF8Encoding.GetCharCount(System.Byte*,System.Int32)\n  parent: System.Text.UTF8Encoding\n  isExternal: false\n  name: GetCharCount(Byte*,Int32)\n  nameWithType: UTF8Encoding.GetCharCount(Byte*,Int32)\n  fullName: System.Text.UTF8Encoding.GetCharCount(Byte*,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.UTF8Encoding\n  isExternal: false\n  name: GetCharCount(Byte[],Int32,Int32)\n  nameWithType: UTF8Encoding.GetCharCount(Byte[],Int32,Int32)\n  fullName: System.Text.UTF8Encoding.GetCharCount(Byte[],Int32,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.UTF8Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  parent: System.Text.UTF8Encoding\n  isExternal: false\n  name: GetChars(Byte*,Int32,Char*,Int32)\n  nameWithType: UTF8Encoding.GetChars(Byte*,Int32,Char*,Int32)\n  fullName: System.Text.UTF8Encoding.GetChars(Byte*,Int32,Char*,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  parent: System.Text.UTF8Encoding\n  isExternal: false\n  name: GetChars(Byte[],Int32,Int32,Char[],Int32)\n  nameWithType: UTF8Encoding.GetChars(Byte[],Int32,Int32,Char[],Int32)\n  fullName: System.Text.UTF8Encoding.GetChars(Byte[],Int32,Int32,Char[],Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  nameWithType: Char\n  fullName: System.Char[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.UTF8Encoding.GetDecoder\n  parent: System.Text.UTF8Encoding\n  isExternal: false\n  name: GetDecoder()\n  nameWithType: UTF8Encoding.GetDecoder()\n  fullName: System.Text.UTF8Encoding.GetDecoder()\n- uid: System.Text.Decoder\n  parent: System.Text\n  isExternal: false\n  name: Decoder\n  nameWithType: Decoder\n  fullName: System.Text.Decoder\n- uid: System.Text.UTF8Encoding.GetEncoder\n  parent: System.Text.UTF8Encoding\n  isExternal: false\n  name: GetEncoder()\n  nameWithType: UTF8Encoding.GetEncoder()\n  fullName: System.Text.UTF8Encoding.GetEncoder()\n- uid: System.Text.Encoder\n  parent: System.Text\n  isExternal: false\n  name: Encoder\n  nameWithType: Encoder\n  fullName: System.Text.Encoder\n- uid: System.Text.UTF8Encoding.GetHashCode\n  parent: System.Text.UTF8Encoding\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: UTF8Encoding.GetHashCode()\n  fullName: System.Text.UTF8Encoding.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)\n  parent: System.Text.UTF8Encoding\n  isExternal: false\n  name: GetMaxByteCount(Int32)\n  nameWithType: UTF8Encoding.GetMaxByteCount(Int32)\n  fullName: System.Text.UTF8Encoding.GetMaxByteCount(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)\n  parent: System.Text.UTF8Encoding\n  isExternal: false\n  name: GetMaxCharCount(Int32)\n  nameWithType: UTF8Encoding.GetMaxCharCount(Int32)\n  fullName: System.Text.UTF8Encoding.GetMaxCharCount(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.UTF8Encoding.GetPreamble\n  parent: System.Text.UTF8Encoding\n  isExternal: false\n  name: GetPreamble()\n  nameWithType: UTF8Encoding.GetPreamble()\n  fullName: System.Text.UTF8Encoding.GetPreamble()\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.UTF8Encoding\n  isExternal: false\n  name: GetString(Byte[],Int32,Int32)\n  nameWithType: UTF8Encoding.GetString(Byte[],Int32,Int32)\n  fullName: System.Text.UTF8Encoding.GetString(Byte[],Int32,Int32)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.UTF8Encoding.GetByteCount*\n  parent: System.Text.UTF8Encoding\n  isExternal: false\n  nameWithType: UTF8Encoding.\n- uid: System.Text.UTF8Encoding.GetBytes*\n  parent: System.Text.UTF8Encoding\n  isExternal: false\n  nameWithType: UTF8Encoding.\n- uid: System.Text.UTF8Encoding.GetCharCount*\n  parent: System.Text.UTF8Encoding\n  isExternal: false\n  nameWithType: UTF8Encoding.\n- uid: System.Text.UTF8Encoding.GetChars*\n  parent: System.Text.UTF8Encoding\n  isExternal: false\n  nameWithType: UTF8Encoding.\n"}