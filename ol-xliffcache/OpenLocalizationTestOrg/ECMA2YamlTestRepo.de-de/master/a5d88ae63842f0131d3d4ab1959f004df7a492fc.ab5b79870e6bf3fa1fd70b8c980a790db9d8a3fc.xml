{"nodes":[{"pos":[1015,1018],"content":"Log","needQuote":true,"needEscape":true,"nodes":[{"content":"Log","pos":[0,3]}]},{"pos":[1665,1670],"content":"Log()","needQuote":true,"needEscape":true,"nodes":[{"content":"Log()","pos":[0,5]}]},{"pos":[2121,2132],"content":"Log(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Log(String)","pos":[0,11]}]},{"pos":[2451,2485],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2696,2716],"content":"DefaultFileLogWriter","needQuote":true,"needEscape":true,"nodes":[{"content":"DefaultFileLogWriter","pos":[0,20]}]},{"pos":[3130,3164],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3417,3460],"content":"InitializeWithDefaultsSinceNoConfigExists()","needQuote":true,"needEscape":true,"nodes":[{"content":"InitializeWithDefaultsSinceNoConfigExists()","pos":[0,43]}]},{"pos":[4016,4027],"content":"TraceSource","needQuote":true,"needEscape":true,"nodes":[{"content":"TraceSource","pos":[0,11]}]},{"pos":[4374,4408],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4629,4647],"content":"WriteEntry(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"WriteEntry(String)","pos":[0,18]}]},{"pos":[4993,5027],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5374,5407],"content":"WriteEntry(String,TraceEventType)","needQuote":true,"needEscape":true,"nodes":[{"content":"WriteEntry(String,TraceEventType)","pos":[0,33]}]},{"pos":[5827,5861],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5946,5980],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6353,6392],"content":"WriteEntry(String,TraceEventType,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"WriteEntry(String,TraceEventType,Int32)","pos":[0,39]}]},{"pos":[6832,6866],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6951,6985],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7043,7077],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7370,7395],"content":"WriteException(Exception)","needQuote":true,"needEscape":true,"nodes":[{"content":"WriteException(Exception)","pos":[0,25]}]},{"pos":[7755,7789],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8182,8229],"content":"WriteException(Exception,TraceEventType,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"WriteException(Exception,TraceEventType,String)","pos":[0,47]}]},{"pos":[8700,8734],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8819,8853],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8924,8958],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9377,9430],"content":"WriteException(Exception,TraceEventType,String,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"WriteException(Exception,TraceEventType,String,Int32)","pos":[0,53]}]},{"pos":[9921,9955],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10040,10074],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10145,10179],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10237,10271],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10444,10457],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[10577,10582],"content":"Log()","needQuote":true,"needEscape":true,"nodes":[{"content":"Log()","pos":[0,5]}]},{"pos":[10795,10806],"content":"Log(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Log(String)","pos":[0,11]}]},{"pos":[10963,10969],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[11153,11173],"content":"DefaultFileLogWriter","needQuote":true,"needEscape":true,"nodes":[{"content":"DefaultFileLogWriter","pos":[0,20]}]},{"pos":[11408,11428],"content":"FileLogTraceListener","needQuote":true,"needEscape":true,"nodes":[{"content":"FileLogTraceListener","pos":[0,20]}]},{"pos":[11684,11727],"content":"InitializeWithDefaultsSinceNoConfigExists()","needQuote":true,"needEscape":true,"nodes":[{"content":"InitializeWithDefaultsSinceNoConfigExists()","pos":[0,43]}]},{"pos":[12007,12018],"content":"TraceSource","needQuote":true,"needEscape":true,"nodes":[{"content":"TraceSource","pos":[0,11]}]},{"pos":[12203,12214],"content":"TraceSource","needQuote":true,"needEscape":true,"nodes":[{"content":"TraceSource","pos":[0,11]}]},{"pos":[12425,12443],"content":"WriteEntry(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"WriteEntry(String)","pos":[0,18]}]},{"pos":[12614,12620],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[12843,12876],"content":"WriteEntry(String,TraceEventType)","needQuote":true,"needEscape":true,"nodes":[{"content":"WriteEntry(String,TraceEventType)","pos":[0,33]}]},{"pos":[13077,13083],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[13230,13244],"content":"TraceEventType","needQuote":true,"needEscape":true,"nodes":[{"content":"TraceEventType","pos":[0,14]}]},{"pos":[13508,13547],"content":"WriteEntry(String,TraceEventType,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"WriteEntry(String,TraceEventType,Int32)","pos":[0,39]}]},{"pos":[13760,13766],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[13913,13927],"content":"TraceEventType","needQuote":true,"needEscape":true,"nodes":[{"content":"TraceEventType","pos":[0,14]}]},{"pos":[14070,14075],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[14269,14294],"content":"WriteException(Exception)","needQuote":true,"needEscape":true,"nodes":[{"content":"WriteException(Exception)","pos":[0,25]}]},{"pos":[14482,14491],"content":"Exception","needQuote":true,"needEscape":true,"nodes":[{"content":"Exception","pos":[0,9]}]},{"pos":[14741,14788],"content":"WriteException(Exception,TraceEventType,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"WriteException(Exception,TraceEventType,String)","pos":[0,47]}]},{"pos":[15020,15029],"content":"Exception","needQuote":true,"needEscape":true,"nodes":[{"content":"Exception","pos":[0,9]}]},{"pos":[15182,15196],"content":"TraceEventType","needQuote":true,"needEscape":true,"nodes":[{"content":"TraceEventType","pos":[0,14]}]},{"pos":[15340,15346],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[15603,15656],"content":"WriteException(Exception,TraceEventType,String,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"WriteException(Exception,TraceEventType,String,Int32)","pos":[0,53]}]},{"pos":[15900,15909],"content":"Exception","needQuote":true,"needEscape":true,"nodes":[{"content":"Exception","pos":[0,9]}]},{"pos":[16062,16076],"content":"TraceEventType","needQuote":true,"needEscape":true,"nodes":[{"content":"TraceEventType","pos":[0,14]}]},{"pos":[16220,16226],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[16341,16346],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.VisualBasic.Logging.Log\n  id: Log\n  children:\n  - Microsoft.VisualBasic.Logging.Log.#ctor\n  - Microsoft.VisualBasic.Logging.Log.#ctor(System.String)\n  - Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter\n  - Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists\n  - Microsoft.VisualBasic.Logging.Log.TraceSource\n  - Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)\n  - Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)\n  - Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)\n  - Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)\n  - Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)\n  - Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)\n  langs:\n  - csharp\n  name: Log\n  nameWithType: Log\n  fullName: Microsoft.VisualBasic.Logging.Log\n  type: Class\n  syntax:\n    content: public class Log\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualBasic.Logging.Log.#ctor\n  id: '#ctor'\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: Log()\n  nameWithType: Log.Log()\n  fullName: Microsoft.VisualBasic.Logging.Log.Log()\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  syntax:\n    content: public Log ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualBasic.Logging.Log.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: Log(String)\n  nameWithType: Log.Log(String)\n  fullName: Microsoft.VisualBasic.Logging.Log.Log(String)\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  syntax:\n    content: public Log (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter\n  id: DefaultFileLogWriter\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: DefaultFileLogWriter\n  nameWithType: Log.DefaultFileLogWriter\n  fullName: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  syntax:\n    content: public Microsoft.VisualBasic.Logging.FileLogTraceListener DefaultFileLogWriter { get; }\n    return:\n      type: Microsoft.VisualBasic.Logging.FileLogTraceListener\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists\n  id: InitializeWithDefaultsSinceNoConfigExists\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: InitializeWithDefaultsSinceNoConfigExists()\n  nameWithType: Log.InitializeWithDefaultsSinceNoConfigExists()\n  fullName: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists()\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  syntax:\n    content: protected virtual void InitializeWithDefaultsSinceNoConfigExists ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualBasic.Logging.Log.TraceSource\n  id: TraceSource\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: TraceSource\n  nameWithType: Log.TraceSource\n  fullName: Microsoft.VisualBasic.Logging.Log.TraceSource\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  syntax:\n    content: public System.Diagnostics.TraceSource TraceSource { get; }\n    return:\n      type: System.Diagnostics.TraceSource\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)\n  id: WriteEntry(System.String)\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: WriteEntry(String)\n  nameWithType: Log.WriteEntry(String)\n  fullName: Microsoft.VisualBasic.Logging.Log.WriteEntry(String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  syntax:\n    content: public void WriteEntry (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: Parameter description to be filled\n  overload: Microsoft.VisualBasic.Logging.Log.WriteEntry*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)\n  id: WriteEntry(System.String,System.Diagnostics.TraceEventType)\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: WriteEntry(String,TraceEventType)\n  nameWithType: Log.WriteEntry(String,TraceEventType)\n  fullName: Microsoft.VisualBasic.Logging.Log.WriteEntry(String,TraceEventType)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  syntax:\n    content: public void WriteEntry (string message, System.Diagnostics.TraceEventType severity);\n    parameters:\n    - id: message\n      type: System.String\n      description: Parameter description to be filled\n    - id: severity\n      type: System.Diagnostics.TraceEventType\n      description: Parameter description to be filled\n  overload: Microsoft.VisualBasic.Logging.Log.WriteEntry*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)\n  id: WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: WriteEntry(String,TraceEventType,Int32)\n  nameWithType: Log.WriteEntry(String,TraceEventType,Int32)\n  fullName: Microsoft.VisualBasic.Logging.Log.WriteEntry(String,TraceEventType,Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  syntax:\n    content: public void WriteEntry (string message, System.Diagnostics.TraceEventType severity, int id);\n    parameters:\n    - id: message\n      type: System.String\n      description: Parameter description to be filled\n    - id: severity\n      type: System.Diagnostics.TraceEventType\n      description: Parameter description to be filled\n    - id: id\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: Microsoft.VisualBasic.Logging.Log.WriteEntry*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)\n  id: WriteException(System.Exception)\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: WriteException(Exception)\n  nameWithType: Log.WriteException(Exception)\n  fullName: Microsoft.VisualBasic.Logging.Log.WriteException(Exception)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  syntax:\n    content: public void WriteException (Exception ex);\n    parameters:\n    - id: ex\n      type: System.Exception\n      description: Parameter description to be filled\n  overload: Microsoft.VisualBasic.Logging.Log.WriteException*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)\n  id: WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: WriteException(Exception,TraceEventType,String)\n  nameWithType: Log.WriteException(Exception,TraceEventType,String)\n  fullName: Microsoft.VisualBasic.Logging.Log.WriteException(Exception,TraceEventType,String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  syntax:\n    content: public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo);\n    parameters:\n    - id: ex\n      type: System.Exception\n      description: Parameter description to be filled\n    - id: severity\n      type: System.Diagnostics.TraceEventType\n      description: Parameter description to be filled\n    - id: additionalInfo\n      type: System.String\n      description: Parameter description to be filled\n  overload: Microsoft.VisualBasic.Logging.Log.WriteException*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)\n  id: WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: WriteException(Exception,TraceEventType,String,Int32)\n  nameWithType: Log.WriteException(Exception,TraceEventType,String,Int32)\n  fullName: Microsoft.VisualBasic.Logging.Log.WriteException(Exception,TraceEventType,String,Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  syntax:\n    content: public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo, int id);\n    parameters:\n    - id: ex\n      type: System.Exception\n      description: Parameter description to be filled\n    - id: severity\n      type: System.Diagnostics.TraceEventType\n      description: Parameter description to be filled\n    - id: additionalInfo\n      type: System.String\n      description: Parameter description to be filled\n    - id: id\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: Microsoft.VisualBasic.Logging.Log.WriteException*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: Microsoft.VisualBasic.Logging.Log.#ctor\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: Log()\n  nameWithType: Log.Log()\n  fullName: Microsoft.VisualBasic.Logging.Log.Log()\n- uid: Microsoft.VisualBasic.Logging.Log.#ctor(System.String)\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: Log(String)\n  nameWithType: Log.Log(String)\n  fullName: Microsoft.VisualBasic.Logging.Log.Log(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: DefaultFileLogWriter\n  nameWithType: Log.DefaultFileLogWriter\n  fullName: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  parent: Microsoft.VisualBasic.Logging\n  isExternal: false\n  name: FileLogTraceListener\n  nameWithType: FileLogTraceListener\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener\n- uid: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: InitializeWithDefaultsSinceNoConfigExists()\n  nameWithType: Log.InitializeWithDefaultsSinceNoConfigExists()\n  fullName: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists()\n- uid: Microsoft.VisualBasic.Logging.Log.TraceSource\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: TraceSource\n  nameWithType: Log.TraceSource\n  fullName: Microsoft.VisualBasic.Logging.Log.TraceSource\n- uid: System.Diagnostics.TraceSource\n  parent: System.Diagnostics\n  isExternal: true\n  name: TraceSource\n  nameWithType: TraceSource\n  fullName: System.Diagnostics.TraceSource\n- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: WriteEntry(String)\n  nameWithType: Log.WriteEntry(String)\n  fullName: Microsoft.VisualBasic.Logging.Log.WriteEntry(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: WriteEntry(String,TraceEventType)\n  nameWithType: Log.WriteEntry(String,TraceEventType)\n  fullName: Microsoft.VisualBasic.Logging.Log.WriteEntry(String,TraceEventType)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Diagnostics.TraceEventType\n  parent: System.Diagnostics\n  isExternal: true\n  name: TraceEventType\n  nameWithType: TraceEventType\n  fullName: System.Diagnostics.TraceEventType\n- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: WriteEntry(String,TraceEventType,Int32)\n  nameWithType: Log.WriteEntry(String,TraceEventType,Int32)\n  fullName: Microsoft.VisualBasic.Logging.Log.WriteEntry(String,TraceEventType,Int32)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Diagnostics.TraceEventType\n  parent: System.Diagnostics\n  isExternal: true\n  name: TraceEventType\n  nameWithType: TraceEventType\n  fullName: System.Diagnostics.TraceEventType\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: WriteException(Exception)\n  nameWithType: Log.WriteException(Exception)\n  fullName: Microsoft.VisualBasic.Logging.Log.WriteException(Exception)\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: WriteException(Exception,TraceEventType,String)\n  nameWithType: Log.WriteException(Exception,TraceEventType,String)\n  fullName: Microsoft.VisualBasic.Logging.Log.WriteException(Exception,TraceEventType,String)\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Diagnostics.TraceEventType\n  parent: System.Diagnostics\n  isExternal: true\n  name: TraceEventType\n  nameWithType: TraceEventType\n  fullName: System.Diagnostics.TraceEventType\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: WriteException(Exception,TraceEventType,String,Int32)\n  nameWithType: Log.WriteException(Exception,TraceEventType,String,Int32)\n  fullName: Microsoft.VisualBasic.Logging.Log.WriteException(Exception,TraceEventType,String,Int32)\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Diagnostics.TraceEventType\n  parent: System.Diagnostics\n  isExternal: true\n  name: TraceEventType\n  nameWithType: TraceEventType\n  fullName: System.Diagnostics.TraceEventType\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry*\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  nameWithType: Log.\n- uid: Microsoft.VisualBasic.Logging.Log.WriteException*\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  nameWithType: Log.\n"}