{"nodes":[{"pos":[3420,3437],"content":"DynamicExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"DynamicExpression","pos":[0,17]}]},{"pos":[44409,44434],"content":"Accept(ExpressionVisitor)","needQuote":true,"needEscape":true,"nodes":[{"content":"Accept(ExpressionVisitor)","pos":[0,25]}]},{"pos":[44901,44935],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[45014,45048],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[45253,45262],"content":"Arguments","needQuote":true,"needEscape":true,"nodes":[{"content":"Arguments","pos":[0,9]}]},{"pos":[45719,45753],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[45952,45958],"content":"Binder","needQuote":true,"needEscape":true,"nodes":[{"content":"Binder","pos":[0,6]}]},{"pos":[46328,46362],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[46573,46585],"content":"DelegateType","needQuote":true,"needEscape":true,"nodes":[{"content":"DelegateType","pos":[0,12]}]},{"pos":[46896,46930],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[47401,47453],"content":"Dynamic(CallSiteBinder,Type,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Dynamic(CallSiteBinder,Type,IEnumerable<Expression>)"},{"pos":[48088,48122],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[48187,48221],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[48348,48382],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[48468,48502],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[48956,48995],"content":"Dynamic(CallSiteBinder,Type,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Dynamic(CallSiteBinder,Type,Expression)","pos":[0,39]}]},{"pos":[49559,49593],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[49658,49692],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[49774,49808],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[49894,49928],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[50386,50427],"content":"Dynamic(CallSiteBinder,Type,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Dynamic(CallSiteBinder,Type,Expression[])","pos":[0,41]}]},{"pos":[51002,51036],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[51101,51135],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[51224,51258],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[51344,51378],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[51902,51952],"content":"Dynamic(CallSiteBinder,Type,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Dynamic(CallSiteBinder,Type,Expression,Expression)","pos":[0,50]}]},{"pos":[52579,52613],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[52678,52712],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[52794,52828],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[52910,52944],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[53030,53064],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[53658,53719],"content":"Dynamic(CallSiteBinder,Type,Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Dynamic(CallSiteBinder,Type,Expression,Expression,Expression)","pos":[0,61]}]},{"pos":[54409,54443],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[54508,54542],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[54624,54658],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[54740,54774],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[54856,54890],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[54976,55010],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[55674,55746],"content":"Dynamic(CallSiteBinder,Type,Expression,Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Dynamic(CallSiteBinder,Type,Expression,Expression,Expression,Expression)","pos":[0,72]}]},{"pos":[56499,56533],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[56598,56632],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[56714,56748],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[56830,56864],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[56946,56980],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[57062,57096],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[57182,57216],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[57758,57814],"content":"MakeDynamic(Type,CallSiteBinder,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"MakeDynamic(Type,CallSiteBinder,IEnumerable<Expression>)"},{"pos":[58434,58468],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[58564,58598],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[58725,58759],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[58845,58879],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[59345,59388],"content":"MakeDynamic(Type,CallSiteBinder,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeDynamic(Type,CallSiteBinder,Expression)","pos":[0,43]}]},{"pos":[59937,59971],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[60067,60101],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[60183,60217],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[60303,60337],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[60807,60852],"content":"MakeDynamic(Type,CallSiteBinder,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeDynamic(Type,CallSiteBinder,Expression[])","pos":[0,45]}]},{"pos":[61412,61446],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[61542,61576],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[61665,61699],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[61785,61819],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[62355,62409],"content":"MakeDynamic(Type,CallSiteBinder,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeDynamic(Type,CallSiteBinder,Expression,Expression)","pos":[0,54]}]},{"pos":[63021,63055],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[63151,63185],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[63267,63301],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[63383,63417],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[63503,63537],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[64143,64208],"content":"MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression)","pos":[0,65]}]},{"pos":[64883,64917],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[65013,65047],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[65129,65163],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[65245,65279],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[65361,65395],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[65481,65515],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[66191,66267],"content":"MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression,Expression)","pos":[0,76]}]},{"pos":[67005,67039],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[67135,67169],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[67251,67285],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[67367,67401],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[67483,67517],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[67599,67633],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[67719,67753],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[68023,68031],"content":"NodeType","needQuote":true,"needEscape":true,"nodes":[{"content":"NodeType","pos":[0,8]}]},{"pos":[68407,68441],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[68752,68807],"content":"System.Linq.Expressions.IArgumentProvider.ArgumentCount","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Linq.Expressions.IArgumentProvider.ArgumentCount","pos":[0,55]}]},{"pos":[69240,69274],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[69609,69669],"content":"System.Linq.Expressions.IArgumentProvider.GetArgument(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Linq.Expressions.IArgumentProvider.GetArgument(Int32)","pos":[0,60]}]},{"pos":[70139,70173],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[70252,70286],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[70601,70660],"content":"System.Linq.Expressions.IDynamicExpression.CreateCallSite()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Linq.Expressions.IDynamicExpression.CreateCallSite()","pos":[0,59]}]},{"pos":[71095,71129],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[71506,71570],"content":"System.Linq.Expressions.IDynamicExpression.Rewrite(Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Linq.Expressions.IDynamicExpression.Rewrite(Expression[])","pos":[0,64]}]},{"pos":[72100,72134],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[72213,72247],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[72442,72446],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[72742,72776],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[73127,73158],"content":"Update(IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Update(IEnumerable<Expression>)"},{"pos":[73702,73736],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[73822,73856],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[73988,74022],"content":"System.Linq.Expressions.Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Linq.Expressions.Expression","pos":[0,34]}]},{"pos":[74202,74227],"content":"Accept(ExpressionVisitor)","needQuote":true,"needEscape":true,"nodes":[{"content":"Accept(ExpressionVisitor)","pos":[0,25]}]},{"pos":[74472,74482],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[74668,74685],"content":"ExpressionVisitor","needQuote":true,"needEscape":true,"nodes":[{"content":"ExpressionVisitor","pos":[0,17]}]},{"pos":[74913,74922],"content":"Arguments","needQuote":true,"needEscape":true,"nodes":[{"content":"Arguments","pos":[0,9]}]},{"pos":[75193,75223],"content":"ReadOnlyCollection<ph id=\"ph1\">&lt;Expression&gt;</ph>","needQuote":true,"needEscape":true,"source":"ReadOnlyCollection<Expression>"},{"pos":[75505,75511],"content":"Binder","needQuote":true,"needEscape":true,"nodes":[{"content":"Binder","pos":[0,6]}]},{"pos":[75738,75752],"content":"CallSiteBinder","needQuote":true,"needEscape":true,"nodes":[{"content":"CallSiteBinder","pos":[0,14]}]},{"pos":[75985,75997],"content":"DelegateType","needQuote":true,"needEscape":true,"nodes":[{"content":"DelegateType","pos":[0,12]}]},{"pos":[76176,76180],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[76498,76550],"content":"Dynamic(CallSiteBinder,Type,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Dynamic(CallSiteBinder,Type,IEnumerable<Expression>)"},{"pos":[76856,76873],"content":"DynamicExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"DynamicExpression","pos":[0,17]}]},{"pos":[77086,77100],"content":"CallSiteBinder","needQuote":true,"needEscape":true,"nodes":[{"content":"CallSiteBinder","pos":[0,14]}]},{"pos":[77255,77259],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[77452,77475],"content":"IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<Expression>"},{"pos":[77835,77874],"content":"Dynamic(CallSiteBinder,Type,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Dynamic(CallSiteBinder,Type,Expression)","pos":[0,39]}]},{"pos":[78154,78171],"content":"DynamicExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"DynamicExpression","pos":[0,17]}]},{"pos":[78384,78398],"content":"CallSiteBinder","needQuote":true,"needEscape":true,"nodes":[{"content":"CallSiteBinder","pos":[0,14]}]},{"pos":[78553,78557],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[78707,78717],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[79026,79067],"content":"Dynamic(CallSiteBinder,Type,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Dynamic(CallSiteBinder,Type,Expression[])","pos":[0,41]}]},{"pos":[79351,79368],"content":"DynamicExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"DynamicExpression","pos":[0,17]}]},{"pos":[79581,79595],"content":"CallSiteBinder","needQuote":true,"needEscape":true,"nodes":[{"content":"CallSiteBinder","pos":[0,14]}]},{"pos":[79750,79754],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[79904,79914],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[80258,80308],"content":"Dynamic(CallSiteBinder,Type,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Dynamic(CallSiteBinder,Type,Expression,Expression)","pos":[0,50]}]},{"pos":[80610,80627],"content":"DynamicExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"DynamicExpression","pos":[0,17]}]},{"pos":[80840,80854],"content":"CallSiteBinder","needQuote":true,"needEscape":true,"nodes":[{"content":"CallSiteBinder","pos":[0,14]}]},{"pos":[81009,81013],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[81163,81173],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[81352,81362],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[81739,81800],"content":"Dynamic(CallSiteBinder,Type,Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Dynamic(CallSiteBinder,Type,Expression,Expression,Expression)","pos":[0,61]}]},{"pos":[82124,82141],"content":"DynamicExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"DynamicExpression","pos":[0,17]}]},{"pos":[82354,82368],"content":"CallSiteBinder","needQuote":true,"needEscape":true,"nodes":[{"content":"CallSiteBinder","pos":[0,14]}]},{"pos":[82523,82527],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[82677,82687],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[82866,82876],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[83055,83065],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[83477,83549],"content":"Dynamic(CallSiteBinder,Type,Expression,Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Dynamic(CallSiteBinder,Type,Expression,Expression,Expression,Expression)","pos":[0,72]}]},{"pos":[83895,83912],"content":"DynamicExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"DynamicExpression","pos":[0,17]}]},{"pos":[84125,84139],"content":"CallSiteBinder","needQuote":true,"needEscape":true,"nodes":[{"content":"CallSiteBinder","pos":[0,14]}]},{"pos":[84294,84298],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[84448,84458],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[84637,84647],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[84826,84836],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[85015,85025],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[85376,85432],"content":"MakeDynamic(Type,CallSiteBinder,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"MakeDynamic(Type,CallSiteBinder,IEnumerable<Expression>)"},{"pos":[85746,85763],"content":"DynamicExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"DynamicExpression","pos":[0,17]}]},{"pos":[85916,85920],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[86090,86104],"content":"CallSiteBinder","needQuote":true,"needEscape":true,"nodes":[{"content":"CallSiteBinder","pos":[0,14]}]},{"pos":[86342,86365],"content":"IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<Expression>"},{"pos":[86729,86772],"content":"MakeDynamic(Type,CallSiteBinder,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeDynamic(Type,CallSiteBinder,Expression)","pos":[0,43]}]},{"pos":[87060,87077],"content":"DynamicExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"DynamicExpression","pos":[0,17]}]},{"pos":[87230,87234],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[87404,87418],"content":"CallSiteBinder","needQuote":true,"needEscape":true,"nodes":[{"content":"CallSiteBinder","pos":[0,14]}]},{"pos":[87613,87623],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[87936,87981],"content":"MakeDynamic(Type,CallSiteBinder,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeDynamic(Type,CallSiteBinder,Expression[])","pos":[0,45]}]},{"pos":[88273,88290],"content":"DynamicExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"DynamicExpression","pos":[0,17]}]},{"pos":[88443,88447],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[88617,88631],"content":"CallSiteBinder","needQuote":true,"needEscape":true,"nodes":[{"content":"CallSiteBinder","pos":[0,14]}]},{"pos":[88826,88836],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[89184,89238],"content":"MakeDynamic(Type,CallSiteBinder,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeDynamic(Type,CallSiteBinder,Expression,Expression)","pos":[0,54]}]},{"pos":[89548,89565],"content":"DynamicExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"DynamicExpression","pos":[0,17]}]},{"pos":[89718,89722],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[89892,89906],"content":"CallSiteBinder","needQuote":true,"needEscape":true,"nodes":[{"content":"CallSiteBinder","pos":[0,14]}]},{"pos":[90101,90111],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[90290,90300],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[90681,90746],"content":"MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression)","pos":[0,65]}]},{"pos":[91078,91095],"content":"DynamicExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"DynamicExpression","pos":[0,17]}]},{"pos":[91248,91252],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[91422,91436],"content":"CallSiteBinder","needQuote":true,"needEscape":true,"nodes":[{"content":"CallSiteBinder","pos":[0,14]}]},{"pos":[91631,91641],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[91820,91830],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[92009,92019],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[92435,92511],"content":"MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression,Expression)","pos":[0,76]}]},{"pos":[92865,92882],"content":"DynamicExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"DynamicExpression","pos":[0,17]}]},{"pos":[93035,93039],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[93209,93223],"content":"CallSiteBinder","needQuote":true,"needEscape":true,"nodes":[{"content":"CallSiteBinder","pos":[0,14]}]},{"pos":[93418,93428],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[93607,93617],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[93796,93806],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[93985,93995],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[94208,94216],"content":"NodeType","needQuote":true,"needEscape":true,"nodes":[{"content":"NodeType","pos":[0,8]}]},{"pos":[94431,94445],"content":"ExpressionType","needQuote":true,"needEscape":true,"nodes":[{"content":"ExpressionType","pos":[0,14]}]},{"pos":[94713,94768],"content":"System.Linq.Expressions.IArgumentProvider.ArgumentCount","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Linq.Expressions.IArgumentProvider.ArgumentCount","pos":[0,55]}]},{"pos":[95034,95039],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[95284,95344],"content":"System.Linq.Expressions.IArgumentProvider.GetArgument(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Linq.Expressions.IArgumentProvider.GetArgument(Int32)","pos":[0,60]}]},{"pos":[95659,95669],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[95809,95814],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[96049,96108],"content":"System.Linq.Expressions.IDynamicExpression.CreateCallSite()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Linq.Expressions.IDynamicExpression.CreateCallSite()","pos":[0,59]}]},{"pos":[96383,96389],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[96657,96721],"content":"System.Linq.Expressions.IDynamicExpression.Rewrite(Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Linq.Expressions.IDynamicExpression.Rewrite(Expression[])","pos":[0,64]}]},{"pos":[97044,97054],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[97233,97243],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[97454,97458],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[97621,97625],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[97883,97914],"content":"Update(IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Update(IEnumerable<Expression>)"},{"pos":[98178,98195],"content":"DynamicExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"DynamicExpression","pos":[0,17]}]},{"pos":[98431,98454],"content":"IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<Expression>"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Linq.Expressions.DynamicExpression\n  id: DynamicExpression\n  children:\n  - System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)\n  - System.Linq.Expressions.DynamicExpression.Arguments\n  - System.Linq.Expressions.DynamicExpression.Binder\n  - System.Linq.Expressions.DynamicExpression.DelegateType\n  - System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.DynamicExpression.NodeType\n  - System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount\n  - System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)\n  - System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#CreateCallSite\n  - System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#Rewrite(System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.DynamicExpression.Type\n  - System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  langs:\n  - csharp\n  name: DynamicExpression\n  nameWithType: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n  type: Class\n  syntax:\n    content: >-\n      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Linq.Expressions.Expression/DynamicExpressionProxy))]\n\n      public class DynamicExpression : System.Linq.Expressions.Expression, System.Linq.Expressions.IDynamicExpression\n  inheritance:\n  - System.Object\n  - System.Linq.Expressions.Expression\n  implements:\n  - System.Linq.Expressions.IDynamicExpression\n  inheritedMembers:\n  - System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.CanReduce\n  - System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)\n  - System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Constant(System.Object)\n  - System.Linq.Expressions.Expression.Constant(System.Object,System.Type)\n  - System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)\n  - System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Default(System.Type)\n  - System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Empty\n  - System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)\n  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)\n  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)\n  - System.Linq.Expressions.Expression.GetActionType(System.Type[])\n  - System.Linq.Expressions.Expression.GetDelegateType(System.Type[])\n  - System.Linq.Expressions.Expression.GetFuncType(System.Type[])\n  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)\n  - System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Label\n  - System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Label(System.String)\n  - System.Linq.Expressions.Expression.Label(System.Type)\n  - System.Linq.Expressions.Expression.Label(System.Type,System.String)\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])\n  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)\n  - System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})\n  - System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])\n  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])\n  - System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  - System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])\n  - System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)\n  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})\n  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])\n  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.New(System.Type)\n  - System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Parameter(System.Type)\n  - System.Linq.Expressions.Expression.Parameter(System.Type,System.String)\n  - System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)\n  - System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)\n  - System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Reduce\n  - System.Linq.Expressions.Expression.ReduceAndCheck\n  - System.Linq.Expressions.Expression.ReduceExtensions\n  - System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Rethrow\n  - System.Linq.Expressions.Expression.Rethrow(System.Type)\n  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)\n  - System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  - System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  - System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  - System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.SymbolDocument(System.String)\n  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)\n  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)\n  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)\n  - System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.ToString\n  - System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  - System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  - System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)\n  - System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)\n  - System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Variable(System.Type)\n  - System.Linq.Expressions.Expression.Variable(System.Type,System.String)\n  - System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)\n  id: Accept(System.Linq.Expressions.ExpressionVisitor)\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: Accept(ExpressionVisitor)\n  nameWithType: DynamicExpression.Accept(ExpressionVisitor)\n  fullName: System.Linq.Expressions.DynamicExpression.Accept(ExpressionVisitor)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: protected override System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);\n    parameters:\n    - id: visitor\n      type: System.Linq.Expressions.ExpressionVisitor\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.DynamicExpression.Arguments\n  id: Arguments\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: Arguments\n  nameWithType: DynamicExpression.Arguments\n  fullName: System.Linq.Expressions.DynamicExpression.Arguments\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> Arguments { get; }\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.DynamicExpression.Binder\n  id: Binder\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: Binder\n  nameWithType: DynamicExpression.Binder\n  fullName: System.Linq.Expressions.DynamicExpression.Binder\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public System.Runtime.CompilerServices.CallSiteBinder Binder { get; }\n    return:\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.DynamicExpression.DelegateType\n  id: DelegateType\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: DelegateType\n  nameWithType: DynamicExpression.DelegateType\n  fullName: System.Linq.Expressions.DynamicExpression.DelegateType\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public Type DelegateType { get; }\n    return:\n      type: System.Type\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: Dynamic(CallSiteBinder,Type,IEnumerable<Expression>)\n  nameWithType: DynamicExpression.Dynamic(CallSiteBinder,Type,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.DynamicExpression.Dynamic(CallSiteBinder,Type,IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);\n    parameters:\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: Parameter description to be filled\n    - id: returnType\n      type: System.Type\n      description: Parameter description to be filled\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.DynamicExpression.Dynamic*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)\n  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: Dynamic(CallSiteBinder,Type,Expression)\n  nameWithType: DynamicExpression.Dynamic(CallSiteBinder,Type,Expression)\n  fullName: System.Linq.Expressions.DynamicExpression.Dynamic(CallSiteBinder,Type,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0);\n    parameters:\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: Parameter description to be filled\n    - id: returnType\n      type: System.Type\n      description: Parameter description to be filled\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.DynamicExpression.Dynamic*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])\n  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: Dynamic(CallSiteBinder,Type,Expression[])\n  nameWithType: DynamicExpression.Dynamic(CallSiteBinder,Type,Expression[])\n  fullName: System.Linq.Expressions.DynamicExpression.Dynamic(CallSiteBinder,Type,Expression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression[] arguments);\n    parameters:\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: Parameter description to be filled\n    - id: returnType\n      type: System.Type\n      description: Parameter description to be filled\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.DynamicExpression.Dynamic*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: Dynamic(CallSiteBinder,Type,Expression,Expression)\n  nameWithType: DynamicExpression.Dynamic(CallSiteBinder,Type,Expression,Expression)\n  fullName: System.Linq.Expressions.DynamicExpression.Dynamic(CallSiteBinder,Type,Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);\n    parameters:\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: Parameter description to be filled\n    - id: returnType\n      type: System.Type\n      description: Parameter description to be filled\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.DynamicExpression.Dynamic*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: Dynamic(CallSiteBinder,Type,Expression,Expression,Expression)\n  nameWithType: DynamicExpression.Dynamic(CallSiteBinder,Type,Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.DynamicExpression.Dynamic(CallSiteBinder,Type,Expression,Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);\n    parameters:\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: Parameter description to be filled\n    - id: returnType\n      type: System.Type\n      description: Parameter description to be filled\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.DynamicExpression.Dynamic*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: Dynamic(CallSiteBinder,Type,Expression,Expression,Expression,Expression)\n  nameWithType: DynamicExpression.Dynamic(CallSiteBinder,Type,Expression,Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.DynamicExpression.Dynamic(CallSiteBinder,Type,Expression,Expression,Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);\n    parameters:\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: Parameter description to be filled\n    - id: returnType\n      type: System.Type\n      description: Parameter description to be filled\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg3\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.DynamicExpression.Dynamic*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: MakeDynamic(Type,CallSiteBinder,IEnumerable<Expression>)\n  nameWithType: DynamicExpression.MakeDynamic(Type,CallSiteBinder,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.DynamicExpression.MakeDynamic(Type,CallSiteBinder,IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: Parameter description to be filled\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: Parameter description to be filled\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.DynamicExpression.MakeDynamic*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)\n  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: MakeDynamic(Type,CallSiteBinder,Expression)\n  nameWithType: DynamicExpression.MakeDynamic(Type,CallSiteBinder,Expression)\n  fullName: System.Linq.Expressions.DynamicExpression.MakeDynamic(Type,CallSiteBinder,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: Parameter description to be filled\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: Parameter description to be filled\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.DynamicExpression.MakeDynamic*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])\n  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: MakeDynamic(Type,CallSiteBinder,Expression[])\n  nameWithType: DynamicExpression.MakeDynamic(Type,CallSiteBinder,Expression[])\n  fullName: System.Linq.Expressions.DynamicExpression.MakeDynamic(Type,CallSiteBinder,Expression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression[] arguments);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: Parameter description to be filled\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: Parameter description to be filled\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.DynamicExpression.MakeDynamic*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: MakeDynamic(Type,CallSiteBinder,Expression,Expression)\n  nameWithType: DynamicExpression.MakeDynamic(Type,CallSiteBinder,Expression,Expression)\n  fullName: System.Linq.Expressions.DynamicExpression.MakeDynamic(Type,CallSiteBinder,Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: Parameter description to be filled\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: Parameter description to be filled\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.DynamicExpression.MakeDynamic*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression)\n  nameWithType: DynamicExpression.MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.DynamicExpression.MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: Parameter description to be filled\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: Parameter description to be filled\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.DynamicExpression.MakeDynamic*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression,Expression)\n  nameWithType: DynamicExpression.MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.DynamicExpression.MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: Parameter description to be filled\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: Parameter description to be filled\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg3\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.DynamicExpression.MakeDynamic*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.DynamicExpression.NodeType\n  id: NodeType\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: NodeType\n  nameWithType: DynamicExpression.NodeType\n  fullName: System.Linq.Expressions.DynamicExpression.NodeType\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public override sealed System.Linq.Expressions.ExpressionType NodeType { get; }\n    return:\n      type: System.Linq.Expressions.ExpressionType\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount\n  id: System#Linq#Expressions#IArgumentProvider#ArgumentCount\n  isEii: true\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: System.Linq.Expressions.IArgumentProvider.ArgumentCount\n  nameWithType: DynamicExpression.System.Linq.Expressions.IArgumentProvider.ArgumentCount\n  fullName: System.Linq.Expressions.DynamicExpression.System.Linq.Expressions.IArgumentProvider.ArgumentCount\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: int System.Linq.Expressions.IArgumentProvider.ArgumentCount { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)\n  id: System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)\n  isEii: true\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: System.Linq.Expressions.IArgumentProvider.GetArgument(Int32)\n  nameWithType: DynamicExpression.System.Linq.Expressions.IArgumentProvider.GetArgument(Int32)\n  fullName: System.Linq.Expressions.DynamicExpression.System.Linq.Expressions.IArgumentProvider.GetArgument(Int32)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: System.Linq.Expressions.Expression IArgumentProvider.GetArgument (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#CreateCallSite\n  id: System#Linq#Expressions#IDynamicExpression#CreateCallSite\n  isEii: true\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: System.Linq.Expressions.IDynamicExpression.CreateCallSite()\n  nameWithType: DynamicExpression.System.Linq.Expressions.IDynamicExpression.CreateCallSite()\n  fullName: System.Linq.Expressions.DynamicExpression.System.Linq.Expressions.IDynamicExpression.CreateCallSite()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: object IDynamicExpression.CreateCallSite ();\n    parameters: []\n    return:\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#Rewrite(System.Linq.Expressions.Expression[])\n  id: System#Linq#Expressions#IDynamicExpression#Rewrite(System.Linq.Expressions.Expression[])\n  isEii: true\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: System.Linq.Expressions.IDynamicExpression.Rewrite(Expression[])\n  nameWithType: DynamicExpression.System.Linq.Expressions.IDynamicExpression.Rewrite(Expression[])\n  fullName: System.Linq.Expressions.DynamicExpression.System.Linq.Expressions.IDynamicExpression.Rewrite(Expression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: System.Linq.Expressions.Expression IDynamicExpression.Rewrite (System.Linq.Expressions.Expression[] args);\n    parameters:\n    - id: args\n      type: System.Linq.Expressions.Expression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.DynamicExpression.Type\n  id: Type\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: Type\n  nameWithType: DynamicExpression.Type\n  fullName: System.Linq.Expressions.DynamicExpression.Type\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public override Type Type { get; }\n    return:\n      type: System.Type\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: Update(IEnumerable<Expression>)\n  nameWithType: DynamicExpression.Update(IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.DynamicExpression.Update(IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public System.Linq.Expressions.DynamicExpression Update (System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);\n    parameters:\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Linq.Expressions.Expression\n  isExternal: false\n  name: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: Accept(ExpressionVisitor)\n  nameWithType: DynamicExpression.Accept(ExpressionVisitor)\n  fullName: System.Linq.Expressions.DynamicExpression.Accept(ExpressionVisitor)\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.ExpressionVisitor\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ExpressionVisitor\n  nameWithType: ExpressionVisitor\n  fullName: System.Linq.Expressions.ExpressionVisitor\n- uid: System.Linq.Expressions.DynamicExpression.Arguments\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: Arguments\n  nameWithType: DynamicExpression.Arguments\n  fullName: System.Linq.Expressions.DynamicExpression.Arguments\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression}\n  parent: System.Collections.ObjectModel\n  isExternal: false\n  name: ReadOnlyCollection<Expression>\n  nameWithType: ReadOnlyCollection<Expression>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression>\n- uid: System.Linq.Expressions.DynamicExpression.Binder\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: Binder\n  nameWithType: DynamicExpression.Binder\n  fullName: System.Linq.Expressions.DynamicExpression.Binder\n- uid: System.Runtime.CompilerServices.CallSiteBinder\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: CallSiteBinder\n  nameWithType: CallSiteBinder\n  fullName: System.Runtime.CompilerServices.CallSiteBinder\n- uid: System.Linq.Expressions.DynamicExpression.DelegateType\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: DelegateType\n  nameWithType: DynamicExpression.DelegateType\n  fullName: System.Linq.Expressions.DynamicExpression.DelegateType\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: Dynamic(CallSiteBinder,Type,IEnumerable<Expression>)\n  nameWithType: DynamicExpression.Dynamic(CallSiteBinder,Type,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.DynamicExpression.Dynamic(CallSiteBinder,Type,IEnumerable<Expression>)\n- uid: System.Linq.Expressions.DynamicExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DynamicExpression\n  nameWithType: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n- uid: System.Runtime.CompilerServices.CallSiteBinder\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: CallSiteBinder\n  nameWithType: CallSiteBinder\n  fullName: System.Runtime.CompilerServices.CallSiteBinder\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Expression>\n  nameWithType: IEnumerable<Expression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: Dynamic(CallSiteBinder,Type,Expression)\n  nameWithType: DynamicExpression.Dynamic(CallSiteBinder,Type,Expression)\n  fullName: System.Linq.Expressions.DynamicExpression.Dynamic(CallSiteBinder,Type,Expression)\n- uid: System.Linq.Expressions.DynamicExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DynamicExpression\n  nameWithType: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n- uid: System.Runtime.CompilerServices.CallSiteBinder\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: CallSiteBinder\n  nameWithType: CallSiteBinder\n  fullName: System.Runtime.CompilerServices.CallSiteBinder\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: Dynamic(CallSiteBinder,Type,Expression[])\n  nameWithType: DynamicExpression.Dynamic(CallSiteBinder,Type,Expression[])\n  fullName: System.Linq.Expressions.DynamicExpression.Dynamic(CallSiteBinder,Type,Expression[])\n- uid: System.Linq.Expressions.DynamicExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DynamicExpression\n  nameWithType: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n- uid: System.Runtime.CompilerServices.CallSiteBinder\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: CallSiteBinder\n  nameWithType: CallSiteBinder\n  fullName: System.Runtime.CompilerServices.CallSiteBinder\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression[]\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: Dynamic(CallSiteBinder,Type,Expression,Expression)\n  nameWithType: DynamicExpression.Dynamic(CallSiteBinder,Type,Expression,Expression)\n  fullName: System.Linq.Expressions.DynamicExpression.Dynamic(CallSiteBinder,Type,Expression,Expression)\n- uid: System.Linq.Expressions.DynamicExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DynamicExpression\n  nameWithType: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n- uid: System.Runtime.CompilerServices.CallSiteBinder\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: CallSiteBinder\n  nameWithType: CallSiteBinder\n  fullName: System.Runtime.CompilerServices.CallSiteBinder\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: Dynamic(CallSiteBinder,Type,Expression,Expression,Expression)\n  nameWithType: DynamicExpression.Dynamic(CallSiteBinder,Type,Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.DynamicExpression.Dynamic(CallSiteBinder,Type,Expression,Expression,Expression)\n- uid: System.Linq.Expressions.DynamicExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DynamicExpression\n  nameWithType: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n- uid: System.Runtime.CompilerServices.CallSiteBinder\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: CallSiteBinder\n  nameWithType: CallSiteBinder\n  fullName: System.Runtime.CompilerServices.CallSiteBinder\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: Dynamic(CallSiteBinder,Type,Expression,Expression,Expression,Expression)\n  nameWithType: DynamicExpression.Dynamic(CallSiteBinder,Type,Expression,Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.DynamicExpression.Dynamic(CallSiteBinder,Type,Expression,Expression,Expression,Expression)\n- uid: System.Linq.Expressions.DynamicExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DynamicExpression\n  nameWithType: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n- uid: System.Runtime.CompilerServices.CallSiteBinder\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: CallSiteBinder\n  nameWithType: CallSiteBinder\n  fullName: System.Runtime.CompilerServices.CallSiteBinder\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: MakeDynamic(Type,CallSiteBinder,IEnumerable<Expression>)\n  nameWithType: DynamicExpression.MakeDynamic(Type,CallSiteBinder,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.DynamicExpression.MakeDynamic(Type,CallSiteBinder,IEnumerable<Expression>)\n- uid: System.Linq.Expressions.DynamicExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DynamicExpression\n  nameWithType: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Runtime.CompilerServices.CallSiteBinder\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: CallSiteBinder\n  nameWithType: CallSiteBinder\n  fullName: System.Runtime.CompilerServices.CallSiteBinder\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Expression>\n  nameWithType: IEnumerable<Expression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: MakeDynamic(Type,CallSiteBinder,Expression)\n  nameWithType: DynamicExpression.MakeDynamic(Type,CallSiteBinder,Expression)\n  fullName: System.Linq.Expressions.DynamicExpression.MakeDynamic(Type,CallSiteBinder,Expression)\n- uid: System.Linq.Expressions.DynamicExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DynamicExpression\n  nameWithType: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Runtime.CompilerServices.CallSiteBinder\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: CallSiteBinder\n  nameWithType: CallSiteBinder\n  fullName: System.Runtime.CompilerServices.CallSiteBinder\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: MakeDynamic(Type,CallSiteBinder,Expression[])\n  nameWithType: DynamicExpression.MakeDynamic(Type,CallSiteBinder,Expression[])\n  fullName: System.Linq.Expressions.DynamicExpression.MakeDynamic(Type,CallSiteBinder,Expression[])\n- uid: System.Linq.Expressions.DynamicExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DynamicExpression\n  nameWithType: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Runtime.CompilerServices.CallSiteBinder\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: CallSiteBinder\n  nameWithType: CallSiteBinder\n  fullName: System.Runtime.CompilerServices.CallSiteBinder\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression[]\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: MakeDynamic(Type,CallSiteBinder,Expression,Expression)\n  nameWithType: DynamicExpression.MakeDynamic(Type,CallSiteBinder,Expression,Expression)\n  fullName: System.Linq.Expressions.DynamicExpression.MakeDynamic(Type,CallSiteBinder,Expression,Expression)\n- uid: System.Linq.Expressions.DynamicExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DynamicExpression\n  nameWithType: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Runtime.CompilerServices.CallSiteBinder\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: CallSiteBinder\n  nameWithType: CallSiteBinder\n  fullName: System.Runtime.CompilerServices.CallSiteBinder\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression)\n  nameWithType: DynamicExpression.MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.DynamicExpression.MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression)\n- uid: System.Linq.Expressions.DynamicExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DynamicExpression\n  nameWithType: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Runtime.CompilerServices.CallSiteBinder\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: CallSiteBinder\n  nameWithType: CallSiteBinder\n  fullName: System.Runtime.CompilerServices.CallSiteBinder\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression,Expression)\n  nameWithType: DynamicExpression.MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.DynamicExpression.MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression,Expression)\n- uid: System.Linq.Expressions.DynamicExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DynamicExpression\n  nameWithType: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Runtime.CompilerServices.CallSiteBinder\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: CallSiteBinder\n  nameWithType: CallSiteBinder\n  fullName: System.Runtime.CompilerServices.CallSiteBinder\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.DynamicExpression.NodeType\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: NodeType\n  nameWithType: DynamicExpression.NodeType\n  fullName: System.Linq.Expressions.DynamicExpression.NodeType\n- uid: System.Linq.Expressions.ExpressionType\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ExpressionType\n  nameWithType: ExpressionType\n  fullName: System.Linq.Expressions.ExpressionType\n- uid: System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: System.Linq.Expressions.IArgumentProvider.ArgumentCount\n  nameWithType: DynamicExpression.System.Linq.Expressions.IArgumentProvider.ArgumentCount\n  fullName: System.Linq.Expressions.DynamicExpression.System.Linq.Expressions.IArgumentProvider.ArgumentCount\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: System.Linq.Expressions.IArgumentProvider.GetArgument(Int32)\n  nameWithType: DynamicExpression.System.Linq.Expressions.IArgumentProvider.GetArgument(Int32)\n  fullName: System.Linq.Expressions.DynamicExpression.System.Linq.Expressions.IArgumentProvider.GetArgument(Int32)\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#CreateCallSite\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: System.Linq.Expressions.IDynamicExpression.CreateCallSite()\n  nameWithType: DynamicExpression.System.Linq.Expressions.IDynamicExpression.CreateCallSite()\n  fullName: System.Linq.Expressions.DynamicExpression.System.Linq.Expressions.IDynamicExpression.CreateCallSite()\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#Rewrite(System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: System.Linq.Expressions.IDynamicExpression.Rewrite(Expression[])\n  nameWithType: DynamicExpression.System.Linq.Expressions.IDynamicExpression.Rewrite(Expression[])\n  fullName: System.Linq.Expressions.DynamicExpression.System.Linq.Expressions.IDynamicExpression.Rewrite(Expression[])\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression[]\n- uid: System.Linq.Expressions.DynamicExpression.Type\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: Type\n  nameWithType: DynamicExpression.Type\n  fullName: System.Linq.Expressions.DynamicExpression.Type\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: Update(IEnumerable<Expression>)\n  nameWithType: DynamicExpression.Update(IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.DynamicExpression.Update(IEnumerable<Expression>)\n- uid: System.Linq.Expressions.DynamicExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DynamicExpression\n  nameWithType: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Expression>\n  nameWithType: IEnumerable<Expression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic*\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  nameWithType: DynamicExpression.\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic*\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  nameWithType: DynamicExpression.\n"}