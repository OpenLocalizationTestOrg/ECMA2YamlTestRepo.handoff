{"nodes":[{"pos":[783,792],"content":"Thickness","needQuote":true,"needEscape":true,"nodes":[{"content":"Thickness","pos":[0,9]}]},{"pos":[1496,1513],"content":"Thickness(Double)","needQuote":true,"needEscape":true,"nodes":[{"content":"Thickness(Double)","pos":[0,17]}]},{"pos":[1850,1884],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2163,2201],"content":"Thickness(Double,Double,Double,Double)","needQuote":true,"needEscape":true,"nodes":[{"content":"Thickness(Double,Double,Double,Double)","pos":[0,38]}]},{"pos":[2603,2637],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2697,2731],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2793,2827],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2890,2924],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3089,3095],"content":"Bottom","needQuote":true,"needEscape":true,"nodes":[{"content":"Bottom","pos":[0,6]}]},{"pos":[3373,3407],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3602,3616],"content":"Equals(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[3933,3967],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4026,4060],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4322,4339],"content":"Equals(Thickness)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(Thickness)","pos":[0,17]}]},{"pos":[4694,4728],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4787,4821],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5041,5054],"content":"GetHashCode()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[5363,5397],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5558,5562],"content":"Left","needQuote":true,"needEscape":true,"nodes":[{"content":"Left","pos":[0,4]}]},{"pos":[5834,5868],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6145,6177],"content":"op_Equality(Thickness,Thickness)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Equality(Thickness,Thickness)","pos":[0,32]}]},{"pos":[6591,6625],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6695,6729],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6788,6822],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7103,7137],"content":"op_Inequality(Thickness,Thickness)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Inequality(Thickness,Thickness)","pos":[0,34]}]},{"pos":[7557,7591],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7661,7695],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7754,7788],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7951,7956],"content":"Right","needQuote":true,"needEscape":true,"nodes":[{"content":"Right","pos":[0,5]}]},{"pos":[8231,8265],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8424,8427],"content":"Top","needQuote":true,"needEscape":true,"nodes":[{"content":"Top","pos":[0,3]}]},{"pos":[8696,8730],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8899,8909],"content":"ToString()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[9213,9247],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9361,9377],"content":"System.ValueType","needQuote":true,"needEscape":true,"nodes":[{"content":"System.ValueType","pos":[0,16]}]},{"pos":[9494,9511],"content":"Thickness(Double)","needQuote":true,"needEscape":true,"nodes":[{"content":"Thickness(Double)","pos":[0,17]}]},{"pos":[9677,9683],"content":"Double","needQuote":true,"needEscape":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[9891,9929],"content":"Thickness(Double,Double,Double,Double)","needQuote":true,"needEscape":true,"nodes":[{"content":"Thickness(Double,Double,Double,Double)","pos":[0,38]}]},{"pos":[10137,10143],"content":"Double","needQuote":true,"needEscape":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[10259,10265],"content":"Double","needQuote":true,"needEscape":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[10381,10387],"content":"Double","needQuote":true,"needEscape":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[10503,10509],"content":"Double","needQuote":true,"needEscape":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[10661,10667],"content":"Bottom","needQuote":true,"needEscape":true,"nodes":[{"content":"Bottom","pos":[0,6]}]},{"pos":[10811,10817],"content":"Double","needQuote":true,"needEscape":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[10984,10998],"content":"Equals(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[11159,11166],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[11284,11290],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11468,11485],"content":"Equals(Thickness)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(Thickness)","pos":[0,17]}]},{"pos":[11652,11659],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[11796,11805],"content":"Thickness","needQuote":true,"needEscape":true,"nodes":[{"content":"Thickness","pos":[0,9]}]},{"pos":[11976,11989],"content":"GetHashCode()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[12146,12151],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[12299,12303],"content":"Left","needQuote":true,"needEscape":true,"nodes":[{"content":"Left","pos":[0,4]}]},{"pos":[12443,12449],"content":"Double","needQuote":true,"needEscape":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[12657,12689],"content":"op_Equality(Thickness,Thickness)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Equality(Thickness,Thickness)","pos":[0,32]}]},{"pos":[12886,12893],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[13030,13039],"content":"Thickness","needQuote":true,"needEscape":true,"nodes":[{"content":"Thickness","pos":[0,9]}]},{"pos":[13188,13197],"content":"Thickness","needQuote":true,"needEscape":true,"nodes":[{"content":"Thickness","pos":[0,9]}]},{"pos":[13421,13455],"content":"op_Inequality(Thickness,Thickness)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Inequality(Thickness,Thickness)","pos":[0,34]}]},{"pos":[13656,13663],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[13800,13809],"content":"Thickness","needQuote":true,"needEscape":true,"nodes":[{"content":"Thickness","pos":[0,9]}]},{"pos":[13958,13967],"content":"Thickness","needQuote":true,"needEscape":true,"nodes":[{"content":"Thickness","pos":[0,9]}]},{"pos":[14132,14137],"content":"Right","needQuote":true,"needEscape":true,"nodes":[{"content":"Right","pos":[0,5]}]},{"pos":[14279,14285],"content":"Double","needQuote":true,"needEscape":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[14434,14437],"content":"Top","needQuote":true,"needEscape":true,"nodes":[{"content":"Top","pos":[0,3]}]},{"pos":[14575,14581],"content":"Double","needQuote":true,"needEscape":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[14735,14745],"content":"ToString()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[14897,14903],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Thickness\n  id: Thickness\n  children:\n  - System.Windows.Thickness.#ctor(System.Double)\n  - System.Windows.Thickness.#ctor(System.Double,System.Double,System.Double,System.Double)\n  - System.Windows.Thickness.Bottom\n  - System.Windows.Thickness.Equals(System.Object)\n  - System.Windows.Thickness.Equals(System.Windows.Thickness)\n  - System.Windows.Thickness.GetHashCode\n  - System.Windows.Thickness.Left\n  - System.Windows.Thickness.op_Equality(System.Windows.Thickness,System.Windows.Thickness)\n  - System.Windows.Thickness.op_Inequality(System.Windows.Thickness,System.Windows.Thickness)\n  - System.Windows.Thickness.Right\n  - System.Windows.Thickness.Top\n  - System.Windows.Thickness.ToString\n  langs:\n  - csharp\n  name: Thickness\n  nameWithType: Thickness\n  fullName: System.Windows.Thickness\n  type: Struct\n  syntax:\n    content: >-\n      [System.ComponentModel.TypeConverter(typeof(System.Windows.ThicknessConverter))]\n\n      [System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)]\n\n      public struct Thickness : IEquatable<System.Windows.Thickness>\n  inheritance:\n  - System.Object\n  - System.ValueType\n  implements:\n  - System.IEquatable<System.Windows.Thickness>\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Thickness.#ctor(System.Double)\n  id: '#ctor(System.Double)'\n  parent: System.Windows.Thickness\n  langs:\n  - csharp\n  name: Thickness(Double)\n  nameWithType: Thickness.Thickness(Double)\n  fullName: System.Windows.Thickness.Thickness(Double)\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  syntax:\n    content: public Thickness (double uniformLength);\n    parameters:\n    - id: uniformLength\n      type: System.Double\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Thickness.#ctor(System.Double,System.Double,System.Double,System.Double)\n  id: '#ctor(System.Double,System.Double,System.Double,System.Double)'\n  parent: System.Windows.Thickness\n  langs:\n  - csharp\n  name: Thickness(Double,Double,Double,Double)\n  nameWithType: Thickness.Thickness(Double,Double,Double,Double)\n  fullName: System.Windows.Thickness.Thickness(Double,Double,Double,Double)\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  syntax:\n    content: public Thickness (double left, double top, double right, double bottom);\n    parameters:\n    - id: left\n      type: System.Double\n      description: Parameter description to be filled\n    - id: top\n      type: System.Double\n      description: Parameter description to be filled\n    - id: right\n      type: System.Double\n      description: Parameter description to be filled\n    - id: bottom\n      type: System.Double\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Thickness.Bottom\n  id: Bottom\n  parent: System.Windows.Thickness\n  langs:\n  - csharp\n  name: Bottom\n  nameWithType: Thickness.Bottom\n  fullName: System.Windows.Thickness.Bottom\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  syntax:\n    content: public double Bottom { get; set; }\n    return:\n      type: System.Double\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Thickness.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Windows.Thickness\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: Thickness.Equals(Object)\n  fullName: System.Windows.Thickness.Equals(Object)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Windows.Thickness.Equals*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Thickness.Equals(System.Windows.Thickness)\n  id: Equals(System.Windows.Thickness)\n  parent: System.Windows.Thickness\n  langs:\n  - csharp\n  name: Equals(Thickness)\n  nameWithType: Thickness.Equals(Thickness)\n  fullName: System.Windows.Thickness.Equals(Thickness)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  syntax:\n    content: public bool Equals (System.Windows.Thickness thickness);\n    parameters:\n    - id: thickness\n      type: System.Windows.Thickness\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Windows.Thickness.Equals*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Thickness.GetHashCode\n  id: GetHashCode\n  parent: System.Windows.Thickness\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: Thickness.GetHashCode()\n  fullName: System.Windows.Thickness.GetHashCode()\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Thickness.Left\n  id: Left\n  parent: System.Windows.Thickness\n  langs:\n  - csharp\n  name: Left\n  nameWithType: Thickness.Left\n  fullName: System.Windows.Thickness.Left\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  syntax:\n    content: public double Left { get; set; }\n    return:\n      type: System.Double\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Thickness.op_Equality(System.Windows.Thickness,System.Windows.Thickness)\n  id: op_Equality(System.Windows.Thickness,System.Windows.Thickness)\n  parent: System.Windows.Thickness\n  langs:\n  - csharp\n  name: op_Equality(Thickness,Thickness)\n  nameWithType: Thickness.op_Equality(Thickness,Thickness)\n  fullName: System.Windows.Thickness.op_Equality(Thickness,Thickness)\n  type: Operator\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  syntax:\n    content: public static bool op_Equality (System.Windows.Thickness t1, System.Windows.Thickness t2);\n    parameters:\n    - id: t1\n      type: System.Windows.Thickness\n      description: Parameter description to be filled\n    - id: t2\n      type: System.Windows.Thickness\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Thickness.op_Inequality(System.Windows.Thickness,System.Windows.Thickness)\n  id: op_Inequality(System.Windows.Thickness,System.Windows.Thickness)\n  parent: System.Windows.Thickness\n  langs:\n  - csharp\n  name: op_Inequality(Thickness,Thickness)\n  nameWithType: Thickness.op_Inequality(Thickness,Thickness)\n  fullName: System.Windows.Thickness.op_Inequality(Thickness,Thickness)\n  type: Operator\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  syntax:\n    content: public static bool op_Inequality (System.Windows.Thickness t1, System.Windows.Thickness t2);\n    parameters:\n    - id: t1\n      type: System.Windows.Thickness\n      description: Parameter description to be filled\n    - id: t2\n      type: System.Windows.Thickness\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Thickness.Right\n  id: Right\n  parent: System.Windows.Thickness\n  langs:\n  - csharp\n  name: Right\n  nameWithType: Thickness.Right\n  fullName: System.Windows.Thickness.Right\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  syntax:\n    content: public double Right { get; set; }\n    return:\n      type: System.Double\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Thickness.Top\n  id: Top\n  parent: System.Windows.Thickness\n  langs:\n  - csharp\n  name: Top\n  nameWithType: Thickness.Top\n  fullName: System.Windows.Thickness.Top\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  syntax:\n    content: public double Top { get; set; }\n    return:\n      type: System.Double\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Thickness.ToString\n  id: ToString\n  parent: System.Windows.Thickness\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: Thickness.ToString()\n  fullName: System.Windows.Thickness.ToString()\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.ValueType\n  isExternal: false\n  name: System.ValueType\n- uid: System.Windows.Thickness.#ctor(System.Double)\n  parent: System.Windows.Thickness\n  isExternal: false\n  name: Thickness(Double)\n  nameWithType: Thickness.Thickness(Double)\n  fullName: System.Windows.Thickness.Thickness(Double)\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Windows.Thickness.#ctor(System.Double,System.Double,System.Double,System.Double)\n  parent: System.Windows.Thickness\n  isExternal: false\n  name: Thickness(Double,Double,Double,Double)\n  nameWithType: Thickness.Thickness(Double,Double,Double,Double)\n  fullName: System.Windows.Thickness.Thickness(Double,Double,Double,Double)\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Windows.Thickness.Bottom\n  parent: System.Windows.Thickness\n  isExternal: false\n  name: Bottom\n  nameWithType: Thickness.Bottom\n  fullName: System.Windows.Thickness.Bottom\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Windows.Thickness.Equals(System.Object)\n  parent: System.Windows.Thickness\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Thickness.Equals(Object)\n  fullName: System.Windows.Thickness.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Thickness.Equals(System.Windows.Thickness)\n  parent: System.Windows.Thickness\n  isExternal: false\n  name: Equals(Thickness)\n  nameWithType: Thickness.Equals(Thickness)\n  fullName: System.Windows.Thickness.Equals(Thickness)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Thickness\n  parent: System.Windows\n  isExternal: false\n  name: Thickness\n  nameWithType: Thickness\n  fullName: System.Windows.Thickness\n- uid: System.Windows.Thickness.GetHashCode\n  parent: System.Windows.Thickness\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Thickness.GetHashCode()\n  fullName: System.Windows.Thickness.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Thickness.Left\n  parent: System.Windows.Thickness\n  isExternal: false\n  name: Left\n  nameWithType: Thickness.Left\n  fullName: System.Windows.Thickness.Left\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Windows.Thickness.op_Equality(System.Windows.Thickness,System.Windows.Thickness)\n  parent: System.Windows.Thickness\n  isExternal: false\n  name: op_Equality(Thickness,Thickness)\n  nameWithType: Thickness.op_Equality(Thickness,Thickness)\n  fullName: System.Windows.Thickness.op_Equality(Thickness,Thickness)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Thickness\n  parent: System.Windows\n  isExternal: false\n  name: Thickness\n  nameWithType: Thickness\n  fullName: System.Windows.Thickness\n- uid: System.Windows.Thickness\n  parent: System.Windows\n  isExternal: false\n  name: Thickness\n  nameWithType: Thickness\n  fullName: System.Windows.Thickness\n- uid: System.Windows.Thickness.op_Inequality(System.Windows.Thickness,System.Windows.Thickness)\n  parent: System.Windows.Thickness\n  isExternal: false\n  name: op_Inequality(Thickness,Thickness)\n  nameWithType: Thickness.op_Inequality(Thickness,Thickness)\n  fullName: System.Windows.Thickness.op_Inequality(Thickness,Thickness)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Thickness\n  parent: System.Windows\n  isExternal: false\n  name: Thickness\n  nameWithType: Thickness\n  fullName: System.Windows.Thickness\n- uid: System.Windows.Thickness\n  parent: System.Windows\n  isExternal: false\n  name: Thickness\n  nameWithType: Thickness\n  fullName: System.Windows.Thickness\n- uid: System.Windows.Thickness.Right\n  parent: System.Windows.Thickness\n  isExternal: false\n  name: Right\n  nameWithType: Thickness.Right\n  fullName: System.Windows.Thickness.Right\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Windows.Thickness.Top\n  parent: System.Windows.Thickness\n  isExternal: false\n  name: Top\n  nameWithType: Thickness.Top\n  fullName: System.Windows.Thickness.Top\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Windows.Thickness.ToString\n  parent: System.Windows.Thickness\n  isExternal: false\n  name: ToString()\n  nameWithType: Thickness.ToString()\n  fullName: System.Windows.Thickness.ToString()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Windows.Thickness.Equals*\n  parent: System.Windows.Thickness\n  isExternal: false\n  nameWithType: Thickness.\n"}