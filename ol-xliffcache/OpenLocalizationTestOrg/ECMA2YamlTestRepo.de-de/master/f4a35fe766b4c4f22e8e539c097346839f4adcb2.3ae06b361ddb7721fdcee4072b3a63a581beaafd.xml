{"nodes":[{"pos":[3089,3106],"content":"DrawingCollection","needQuote":true,"needEscape":true,"nodes":[{"content":"DrawingCollection","pos":[0,17]}]},{"pos":[5064,5083],"content":"DrawingCollection()","needQuote":true,"needEscape":true,"nodes":[{"content":"DrawingCollection()","pos":[0,19]}]},{"pos":[5701,5740],"content":"DrawingCollection(IEnumerable<ph id=\"ph1\">&lt;Drawing&gt;</ph>)","needQuote":true,"needEscape":true,"source":"DrawingCollection(IEnumerable<Drawing>)"},{"pos":[6263,6297],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6518,6542],"content":"DrawingCollection(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"DrawingCollection(Int32)","pos":[0,24]}]},{"pos":[6910,6944],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7191,7203],"content":"Add(Drawing)","needQuote":true,"needEscape":true,"nodes":[{"content":"Add(Drawing)","pos":[0,12]}]},{"pos":[7568,7602],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7793,7800],"content":"Clear()","needQuote":true,"needEscape":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[8240,8247],"content":"Clone()","needQuote":true,"needEscape":true,"nodes":[{"content":"Clone()","pos":[0,7]}]},{"pos":[8613,8647],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8898,8918],"content":"CloneCore(Freezable)","needQuote":true,"needEscape":true,"nodes":[{"content":"CloneCore(Freezable)","pos":[0,20]}]},{"pos":[9311,9345],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9560,9579],"content":"CloneCurrentValue()","needQuote":true,"needEscape":true,"nodes":[{"content":"CloneCurrentValue()","pos":[0,19]}]},{"pos":[9981,10015],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10290,10322],"content":"CloneCurrentValueCore(Freezable)","needQuote":true,"needEscape":true,"nodes":[{"content":"CloneCurrentValueCore(Freezable)","pos":[0,32]}]},{"pos":[10751,10785],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11042,11059],"content":"Contains(Drawing)","needQuote":true,"needEscape":true,"nodes":[{"content":"Contains(Drawing)","pos":[0,17]}]},{"pos":[11439,11473],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11532,11566],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11849,11872],"content":"CopyTo(Drawing[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"CopyTo(Drawing[],Int32)","pos":[0,23]}]},{"pos":[12277,12311],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12372,12406],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12597,12602],"content":"Count","needQuote":true,"needEscape":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[12891,12925],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13142,13162],"content":"CreateInstanceCore()","needQuote":true,"needEscape":true,"nodes":[{"content":"CreateInstanceCore()","pos":[0,20]}]},{"pos":[13551,13585],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13818,13837],"content":"FreezeCore(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"FreezeCore(Boolean)","pos":[0,19]}]},{"pos":[14207,14241],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14300,14334],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14597,14623],"content":"GetAsFrozenCore(Freezable)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetAsFrozenCore(Freezable)","pos":[0,26]}]},{"pos":[15034,15068],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15355,15393],"content":"GetCurrentValueAsFrozenCore(Freezable)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetCurrentValueAsFrozenCore(Freezable)","pos":[0,38]}]},{"pos":[15840,15874],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16081,16096],"content":"GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[16508,16542],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16797,16813],"content":"IndexOf(Drawing)","needQuote":true,"needEscape":true,"nodes":[{"content":"IndexOf(Drawing)","pos":[0,16]}]},{"pos":[17189,17223],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17280,17314],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17593,17614],"content":"Insert(Int32,Drawing)","needQuote":true,"needEscape":true,"nodes":[{"content":"Insert(Int32,Drawing)","pos":[0,21]}]},{"pos":[17995,18029],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18106,18140],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18357,18368],"content":"Item(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"Item(Int32)","pos":[0,11]}]},{"pos":[18729,18763],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18836,18870],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19123,19138],"content":"Remove(Drawing)","needQuote":true,"needEscape":true,"nodes":[{"content":"Remove(Drawing)","pos":[0,15]}]},{"pos":[19512,19546],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19605,19639],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19864,19879],"content":"RemoveAt(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"pos":[20214,20248],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20601,20639],"content":"System.Collections.Generic.ICollection","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection","pos":[0,38]}]},{"pos":[21064,21098],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21457,21497],"content":"System.Collections.Generic.IEnumerable()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.IEnumerable()","pos":[0,40]}]},{"pos":[22011,22045],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22368,22418],"content":"System.Collections.ICollection.CopyTo(Array,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.CopyTo(Array,Int32)","pos":[0,50]}]},{"pos":[22839,22873],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22934,22968],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[23253,23298],"content":"System.Collections.ICollection.IsSynchronized","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.IsSynchronized","pos":[0,45]}]},{"pos":[23703,23737],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[24010,24049],"content":"System.Collections.ICollection.SyncRoot","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.SyncRoot","pos":[0,39]}]},{"pos":[24437,24471],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[24754,24800],"content":"System.Collections.IEnumerable.GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IEnumerable.GetEnumerator()","pos":[0,46]}]},{"pos":[25241,25275],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[25556,25592],"content":"System.Collections.IList.Add(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.Add(Object)","pos":[0,36]}]},{"pos":[25966,26000],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[26057,26091],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[26382,26423],"content":"System.Collections.IList.Contains(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.Contains(Object)","pos":[0,41]}]},{"pos":[26813,26847],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[26906,26940],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[27229,27269],"content":"System.Collections.IList.IndexOf(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.IndexOf(Object)","pos":[0,40]}]},{"pos":[27655,27689],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[27746,27780],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[28093,28138],"content":"System.Collections.IList.Insert(Int32,Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.Insert(Int32,Object)","pos":[0,45]}]},{"pos":[28544,28578],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[28640,28674],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[28941,28977],"content":"System.Collections.IList.IsFixedSize","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.IsFixedSize","pos":[0,36]}]},{"pos":[29355,29389],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[29654,29689],"content":"System.Collections.IList.IsReadOnly","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.IsReadOnly","pos":[0,35]}]},{"pos":[30064,30098],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[30379,30415],"content":"System.Collections.IList.Item(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.Item(Int32)","pos":[0,36]}]},{"pos":[30822,30856],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[30914,30948],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[31235,31274],"content":"System.Collections.IList.Remove(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.Remove(Object)","pos":[0,39]}]},{"pos":[31658,31692],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[31831,31872],"content":"System.Windows.Media.Animation.Animatable","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Windows.Media.Animation.Animatable","pos":[0,41]}]},{"pos":[32002,32021],"content":"DrawingCollection()","needQuote":true,"needEscape":true,"nodes":[{"content":"DrawingCollection()","pos":[0,19]}]},{"pos":[32346,32385],"content":"DrawingCollection(IEnumerable<ph id=\"ph1\">&lt;Drawing&gt;</ph>)","needQuote":true,"needEscape":true,"source":"DrawingCollection(IEnumerable<Drawing>)"},{"pos":[32692,32712],"content":"IEnumerable<ph id=\"ph1\">&lt;Drawing&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<Drawing>"},{"pos":[32974,32998],"content":"DrawingCollection(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"DrawingCollection(Int32)","pos":[0,24]}]},{"pos":[33199,33204],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[33409,33421],"content":"Add(Drawing)","needQuote":true,"needEscape":true,"nodes":[{"content":"Add(Drawing)","pos":[0,12]}]},{"pos":[33628,33635],"content":"Drawing","needQuote":true,"needEscape":true,"nodes":[{"content":"Drawing","pos":[0,7]}]},{"pos":[33830,33837],"content":"Clear()","needQuote":true,"needEscape":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[34068,34075],"content":"Clone()","needQuote":true,"needEscape":true,"nodes":[{"content":"Clone()","pos":[0,7]}]},{"pos":[34282,34299],"content":"DrawingCollection","needQuote":true,"needEscape":true,"nodes":[{"content":"DrawingCollection","pos":[0,17]}]},{"pos":[34544,34564],"content":"CloneCore(Freezable)","needQuote":true,"needEscape":true,"nodes":[{"content":"CloneCore(Freezable)","pos":[0,20]}]},{"pos":[34776,34785],"content":"Freezable","needQuote":true,"needEscape":true,"nodes":[{"content":"Freezable","pos":[0,9]}]},{"pos":[34990,35009],"content":"CloneCurrentValue()","needQuote":true,"needEscape":true,"nodes":[{"content":"CloneCurrentValue()","pos":[0,19]}]},{"pos":[35240,35257],"content":"DrawingCollection","needQuote":true,"needEscape":true,"nodes":[{"content":"DrawingCollection","pos":[0,17]}]},{"pos":[35514,35546],"content":"CloneCurrentValueCore(Freezable)","needQuote":true,"needEscape":true,"nodes":[{"content":"CloneCurrentValueCore(Freezable)","pos":[0,32]}]},{"pos":[35782,35791],"content":"Freezable","needQuote":true,"needEscape":true,"nodes":[{"content":"Freezable","pos":[0,9]}]},{"pos":[36017,36034],"content":"Contains(Drawing)","needQuote":true,"needEscape":true,"nodes":[{"content":"Contains(Drawing)","pos":[0,17]}]},{"pos":[36223,36230],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[36377,36384],"content":"Drawing","needQuote":true,"needEscape":true,"nodes":[{"content":"Drawing","pos":[0,7]}]},{"pos":[36625,36648],"content":"CopyTo(Drawing[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"CopyTo(Drawing[],Int32)","pos":[0,23]}]},{"pos":[36877,36884],"content":"Drawing","needQuote":true,"needEscape":true,"nodes":[{"content":"Drawing","pos":[0,7]}]},{"pos":[37017,37022],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[37199,37204],"content":"Count","needQuote":true,"needEscape":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[37367,37372],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[37562,37582],"content":"CreateInstanceCore()","needQuote":true,"needEscape":true,"nodes":[{"content":"CreateInstanceCore()","pos":[0,20]}]},{"pos":[37794,37803],"content":"Freezable","needQuote":true,"needEscape":true,"nodes":[{"content":"Freezable","pos":[0,9]}]},{"pos":[38017,38036],"content":"FreezeCore(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"FreezeCore(Boolean)","pos":[0,19]}]},{"pos":[38229,38236],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[38355,38362],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[38579,38605],"content":"GetAsFrozenCore(Freezable)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetAsFrozenCore(Freezable)","pos":[0,26]}]},{"pos":[38829,38838],"content":"Freezable","needQuote":true,"needEscape":true,"nodes":[{"content":"Freezable","pos":[0,9]}]},{"pos":[39079,39117],"content":"GetCurrentValueAsFrozenCore(Freezable)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetCurrentValueAsFrozenCore(Freezable)","pos":[0,38]}]},{"pos":[39365,39374],"content":"Freezable","needQuote":true,"needEscape":true,"nodes":[{"content":"Freezable","pos":[0,9]}]},{"pos":[39575,39590],"content":"GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[39824,39852],"content":"DrawingCollection+Enumerator","needQuote":true,"needEscape":true,"nodes":[{"content":"DrawingCollection+Enumerator","pos":[0,28]}]},{"pos":[40121,40137],"content":"IndexOf(Drawing)","needQuote":true,"needEscape":true,"nodes":[{"content":"IndexOf(Drawing)","pos":[0,16]}]},{"pos":[40322,40327],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[40470,40477],"content":"Drawing","needQuote":true,"needEscape":true,"nodes":[{"content":"Drawing","pos":[0,7]}]},{"pos":[40716,40737],"content":"Insert(Int32,Drawing)","needQuote":true,"needEscape":true,"nodes":[{"content":"Insert(Int32,Drawing)","pos":[0,21]}]},{"pos":[40932,40937],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[41080,41087],"content":"Drawing","needQuote":true,"needEscape":true,"nodes":[{"content":"Drawing","pos":[0,7]}]},{"pos":[41295,41306],"content":"Item(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"Item(Int32)","pos":[0,11]}]},{"pos":[41511,41518],"content":"Drawing","needQuote":true,"needEscape":true,"nodes":[{"content":"Drawing","pos":[0,7]}]},{"pos":[41649,41654],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[41862,41877],"content":"Remove(Drawing)","needQuote":true,"needEscape":true,"nodes":[{"content":"Remove(Drawing)","pos":[0,15]}]},{"pos":[42062,42069],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[42216,42223],"content":"Drawing","needQuote":true,"needEscape":true,"nodes":[{"content":"Drawing","pos":[0,7]}]},{"pos":[42435,42450],"content":"RemoveAt(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"pos":[42633,42638],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[42889,42927],"content":"System.Collections.Generic.ICollection","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.ICollection","pos":[0,38]}]},{"pos":[43158,43165],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[43423,43463],"content":"System.Collections.Generic.IEnumerable()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Generic.IEnumerable()","pos":[0,40]}]},{"pos":[43772,43792],"content":"IEnumerator<ph id=\"ph1\">&lt;Drawing&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerator<Drawing>"},{"pos":[44099,44149],"content":"System.Collections.ICollection.CopyTo(Array,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.CopyTo(Array,Int32)","pos":[0,50]}]},{"pos":[44402,44407],"content":"Array","needQuote":true,"needEscape":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[44520,44525],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[44742,44787],"content":"System.Collections.ICollection.IsSynchronized","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.IsSynchronized","pos":[0,45]}]},{"pos":[45032,45039],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[45254,45293],"content":"System.Collections.ICollection.SyncRoot","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.SyncRoot","pos":[0,39]}]},{"pos":[45525,45531],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[45749,45795],"content":"System.Collections.IEnumerable.GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IEnumerable.GetEnumerator()","pos":[0,46]}]},{"pos":[46070,46081],"content":"IEnumerator","needQuote":true,"needEscape":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[46320,46356],"content":"System.Collections.IList.Add(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.Add(Object)","pos":[0,36]}]},{"pos":[46581,46586],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[46700,46706],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[46928,46969],"content":"System.Collections.IList.Contains(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.Contains(Object)","pos":[0,41]}]},{"pos":[47206,47213],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[47331,47337],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[47558,47598],"content":"System.Collections.IList.IndexOf(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.IndexOf(Object)","pos":[0,40]}]},{"pos":[47831,47836],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[47950,47956],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[48189,48234],"content":"System.Collections.IList.Insert(Int32,Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.Insert(Int32,Object)","pos":[0,45]}]},{"pos":[48477,48482],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[48596,48602],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[48812,48848],"content":"System.Collections.IList.IsFixedSize","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.IsFixedSize","pos":[0,36]}]},{"pos":[49075,49082],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[49293,49328],"content":"System.Collections.IList.IsReadOnly","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.IsReadOnly","pos":[0,35]}]},{"pos":[49553,49560],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[49779,49815],"content":"System.Collections.IList.Item(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.Item(Int32)","pos":[0,36]}]},{"pos":[50041,50047],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[50162,50167],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[50385,50424],"content":"System.Collections.IList.Remove(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IList.Remove(Object)","pos":[0,39]}]},{"pos":[50656,50662],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Media.DrawingCollection\n  id: DrawingCollection\n  children:\n  - System.Windows.Media.DrawingCollection.#ctor\n  - System.Windows.Media.DrawingCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Media.Drawing})\n  - System.Windows.Media.DrawingCollection.#ctor(System.Int32)\n  - System.Windows.Media.DrawingCollection.Add(System.Windows.Media.Drawing)\n  - System.Windows.Media.DrawingCollection.Clear\n  - System.Windows.Media.DrawingCollection.Clone\n  - System.Windows.Media.DrawingCollection.CloneCore(System.Windows.Freezable)\n  - System.Windows.Media.DrawingCollection.CloneCurrentValue\n  - System.Windows.Media.DrawingCollection.CloneCurrentValueCore(System.Windows.Freezable)\n  - System.Windows.Media.DrawingCollection.Contains(System.Windows.Media.Drawing)\n  - System.Windows.Media.DrawingCollection.CopyTo(System.Windows.Media.Drawing[],System.Int32)\n  - System.Windows.Media.DrawingCollection.Count\n  - System.Windows.Media.DrawingCollection.CreateInstanceCore\n  - System.Windows.Media.DrawingCollection.FreezeCore(System.Boolean)\n  - System.Windows.Media.DrawingCollection.GetAsFrozenCore(System.Windows.Freezable)\n  - System.Windows.Media.DrawingCollection.GetCurrentValueAsFrozenCore(System.Windows.Freezable)\n  - System.Windows.Media.DrawingCollection.GetEnumerator\n  - System.Windows.Media.DrawingCollection.IndexOf(System.Windows.Media.Drawing)\n  - System.Windows.Media.DrawingCollection.Insert(System.Int32,System.Windows.Media.Drawing)\n  - System.Windows.Media.DrawingCollection.Item(System.Int32)\n  - System.Windows.Media.DrawingCollection.Remove(System.Windows.Media.Drawing)\n  - System.Windows.Media.DrawingCollection.RemoveAt(System.Int32)\n  - System.Windows.Media.DrawingCollection.System#Collections#Generic#ICollection{System#Windows#Media#Drawing}#IsReadOnly\n  - System.Windows.Media.DrawingCollection.System#Collections#Generic#IEnumerable{System#Windows#Media#Drawing}#GetEnumerator\n  - System.Windows.Media.DrawingCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Windows.Media.DrawingCollection.System#Collections#ICollection#IsSynchronized\n  - System.Windows.Media.DrawingCollection.System#Collections#ICollection#SyncRoot\n  - System.Windows.Media.DrawingCollection.System#Collections#IEnumerable#GetEnumerator\n  - System.Windows.Media.DrawingCollection.System#Collections#IList#Add(System.Object)\n  - System.Windows.Media.DrawingCollection.System#Collections#IList#Contains(System.Object)\n  - System.Windows.Media.DrawingCollection.System#Collections#IList#IndexOf(System.Object)\n  - System.Windows.Media.DrawingCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  - System.Windows.Media.DrawingCollection.System#Collections#IList#IsFixedSize\n  - System.Windows.Media.DrawingCollection.System#Collections#IList#IsReadOnly\n  - System.Windows.Media.DrawingCollection.System#Collections#IList#Item(System.Int32)\n  - System.Windows.Media.DrawingCollection.System#Collections#IList#Remove(System.Object)\n  langs:\n  - csharp\n  name: DrawingCollection\n  nameWithType: DrawingCollection\n  fullName: System.Windows.Media.DrawingCollection\n  type: Class\n  syntax:\n    content: 'public sealed class DrawingCollection : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<System.Windows.Media.Drawing>, System.Collections.Generic.IEnumerable<System.Windows.Media.Drawing>, System.Collections.Generic.IList<System.Windows.Media.Drawing>, System.Collections.IList'\n  inheritance:\n  - System.Windows.Freezable\n  - System.Windows.Media.Animation.Animatable\n  implements:\n  - System.Collections.Generic.ICollection<System.Windows.Media.Drawing>\n  - System.Collections.Generic.IEnumerable<System.Windows.Media.Drawing>\n  - System.Collections.Generic.IList<System.Windows.Media.Drawing>\n  - System.Collections.IList\n  inheritedMembers:\n  - System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)\n  - System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)\n  - System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)\n  - System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)\n  - System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(System.Windows.DependencyProperty)\n  - System.Windows.Media.Animation.Animatable.HasAnimatedProperties\n  - System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.#ctor\n  id: '#ctor'\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: DrawingCollection()\n  nameWithType: DrawingCollection.DrawingCollection()\n  fullName: System.Windows.Media.DrawingCollection.DrawingCollection()\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: public DrawingCollection ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Media.Drawing})\n  id: '#ctor(System.Collections.Generic.IEnumerable{System.Windows.Media.Drawing})'\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: DrawingCollection(IEnumerable<Drawing>)\n  nameWithType: DrawingCollection.DrawingCollection(IEnumerable<Drawing>)\n  fullName: System.Windows.Media.DrawingCollection.DrawingCollection(IEnumerable<Drawing>)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: public DrawingCollection (System.Collections.Generic.IEnumerable<System.Windows.Media.Drawing> collection);\n    parameters:\n    - id: collection\n      type: System.Collections.Generic.IEnumerable{System.Windows.Media.Drawing}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: DrawingCollection(Int32)\n  nameWithType: DrawingCollection.DrawingCollection(Int32)\n  fullName: System.Windows.Media.DrawingCollection.DrawingCollection(Int32)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: public DrawingCollection (int capacity);\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.Add(System.Windows.Media.Drawing)\n  id: Add(System.Windows.Media.Drawing)\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: Add(Drawing)\n  nameWithType: DrawingCollection.Add(Drawing)\n  fullName: System.Windows.Media.DrawingCollection.Add(Drawing)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: public void Add (System.Windows.Media.Drawing value);\n    parameters:\n    - id: value\n      type: System.Windows.Media.Drawing\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.Clear\n  id: Clear\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: DrawingCollection.Clear()\n  fullName: System.Windows.Media.DrawingCollection.Clear()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.Clone\n  id: Clone\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: DrawingCollection.Clone()\n  fullName: System.Windows.Media.DrawingCollection.Clone()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: public System.Windows.Media.DrawingCollection Clone ();\n    parameters: []\n    return:\n      type: System.Windows.Media.DrawingCollection\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.CloneCore(System.Windows.Freezable)\n  id: CloneCore(System.Windows.Freezable)\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: CloneCore(Freezable)\n  nameWithType: DrawingCollection.CloneCore(Freezable)\n  fullName: System.Windows.Media.DrawingCollection.CloneCore(Freezable)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: protected override void CloneCore (System.Windows.Freezable source);\n    parameters:\n    - id: source\n      type: System.Windows.Freezable\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.CloneCurrentValue\n  id: CloneCurrentValue\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: CloneCurrentValue()\n  nameWithType: DrawingCollection.CloneCurrentValue()\n  fullName: System.Windows.Media.DrawingCollection.CloneCurrentValue()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: public System.Windows.Media.DrawingCollection CloneCurrentValue ();\n    parameters: []\n    return:\n      type: System.Windows.Media.DrawingCollection\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.CloneCurrentValueCore(System.Windows.Freezable)\n  id: CloneCurrentValueCore(System.Windows.Freezable)\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: CloneCurrentValueCore(Freezable)\n  nameWithType: DrawingCollection.CloneCurrentValueCore(Freezable)\n  fullName: System.Windows.Media.DrawingCollection.CloneCurrentValueCore(Freezable)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: protected override void CloneCurrentValueCore (System.Windows.Freezable source);\n    parameters:\n    - id: source\n      type: System.Windows.Freezable\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.Contains(System.Windows.Media.Drawing)\n  id: Contains(System.Windows.Media.Drawing)\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: Contains(Drawing)\n  nameWithType: DrawingCollection.Contains(Drawing)\n  fullName: System.Windows.Media.DrawingCollection.Contains(Drawing)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: public bool Contains (System.Windows.Media.Drawing value);\n    parameters:\n    - id: value\n      type: System.Windows.Media.Drawing\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.CopyTo(System.Windows.Media.Drawing[],System.Int32)\n  id: CopyTo(System.Windows.Media.Drawing[],System.Int32)\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: CopyTo(Drawing[],Int32)\n  nameWithType: DrawingCollection.CopyTo(Drawing[],Int32)\n  fullName: System.Windows.Media.DrawingCollection.CopyTo(Drawing[],Int32)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: public void CopyTo (System.Windows.Media.Drawing[] array, int index);\n    parameters:\n    - id: array\n      type: System.Windows.Media.Drawing[]\n      description: Parameter description to be filled\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.Count\n  id: Count\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: Count\n  nameWithType: DrawingCollection.Count\n  fullName: System.Windows.Media.DrawingCollection.Count\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.CreateInstanceCore\n  id: CreateInstanceCore\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: CreateInstanceCore()\n  nameWithType: DrawingCollection.CreateInstanceCore()\n  fullName: System.Windows.Media.DrawingCollection.CreateInstanceCore()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: protected override System.Windows.Freezable CreateInstanceCore ();\n    parameters: []\n    return:\n      type: System.Windows.Freezable\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.FreezeCore(System.Boolean)\n  id: FreezeCore(System.Boolean)\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: FreezeCore(Boolean)\n  nameWithType: DrawingCollection.FreezeCore(Boolean)\n  fullName: System.Windows.Media.DrawingCollection.FreezeCore(Boolean)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: protected override bool FreezeCore (bool isChecking);\n    parameters:\n    - id: isChecking\n      type: System.Boolean\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.GetAsFrozenCore(System.Windows.Freezable)\n  id: GetAsFrozenCore(System.Windows.Freezable)\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: GetAsFrozenCore(Freezable)\n  nameWithType: DrawingCollection.GetAsFrozenCore(Freezable)\n  fullName: System.Windows.Media.DrawingCollection.GetAsFrozenCore(Freezable)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: protected override void GetAsFrozenCore (System.Windows.Freezable source);\n    parameters:\n    - id: source\n      type: System.Windows.Freezable\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.GetCurrentValueAsFrozenCore(System.Windows.Freezable)\n  id: GetCurrentValueAsFrozenCore(System.Windows.Freezable)\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: GetCurrentValueAsFrozenCore(Freezable)\n  nameWithType: DrawingCollection.GetCurrentValueAsFrozenCore(Freezable)\n  fullName: System.Windows.Media.DrawingCollection.GetCurrentValueAsFrozenCore(Freezable)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: protected override void GetCurrentValueAsFrozenCore (System.Windows.Freezable source);\n    parameters:\n    - id: source\n      type: System.Windows.Freezable\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: DrawingCollection.GetEnumerator()\n  fullName: System.Windows.Media.DrawingCollection.GetEnumerator()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: public System.Windows.Media.DrawingCollection.Enumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Windows.Media.DrawingCollection.Enumerator\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.IndexOf(System.Windows.Media.Drawing)\n  id: IndexOf(System.Windows.Media.Drawing)\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: IndexOf(Drawing)\n  nameWithType: DrawingCollection.IndexOf(Drawing)\n  fullName: System.Windows.Media.DrawingCollection.IndexOf(Drawing)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: public int IndexOf (System.Windows.Media.Drawing value);\n    parameters:\n    - id: value\n      type: System.Windows.Media.Drawing\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.Insert(System.Int32,System.Windows.Media.Drawing)\n  id: Insert(System.Int32,System.Windows.Media.Drawing)\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: Insert(Int32,Drawing)\n  nameWithType: DrawingCollection.Insert(Int32,Drawing)\n  fullName: System.Windows.Media.DrawingCollection.Insert(Int32,Drawing)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: public void Insert (int index, System.Windows.Media.Drawing value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: value\n      type: System.Windows.Media.Drawing\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: DrawingCollection.Item(Int32)\n  fullName: System.Windows.Media.DrawingCollection.Item(Int32)\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: public System.Windows.Media.Drawing this[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Windows.Media.Drawing\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.Remove(System.Windows.Media.Drawing)\n  id: Remove(System.Windows.Media.Drawing)\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: Remove(Drawing)\n  nameWithType: DrawingCollection.Remove(Drawing)\n  fullName: System.Windows.Media.DrawingCollection.Remove(Drawing)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: public bool Remove (System.Windows.Media.Drawing value);\n    parameters:\n    - id: value\n      type: System.Windows.Media.Drawing\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: RemoveAt(Int32)\n  nameWithType: DrawingCollection.RemoveAt(Int32)\n  fullName: System.Windows.Media.DrawingCollection.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: public void RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.System#Collections#Generic#ICollection{System#Windows#Media#Drawing}#IsReadOnly\n  id: System#Collections#Generic#ICollection{System#Windows#Media#Drawing}#IsReadOnly\n  isEii: true\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.ICollection\n  nameWithType: DrawingCollection.System.Collections.Generic.ICollection\n  fullName: System.Windows.Media.DrawingCollection.System.Collections.Generic.ICollection\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: bool System.Collections.Generic.ICollection<System.Windows.Media.Drawing>.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.System#Collections#Generic#IEnumerable{System#Windows#Media#Drawing}#GetEnumerator\n  id: System#Collections#Generic#IEnumerable{System#Windows#Media#Drawing}#GetEnumerator\n  isEii: true\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: System.Collections.Generic.IEnumerable()\n  nameWithType: DrawingCollection.System.Collections.Generic.IEnumerable()\n  fullName: System.Windows.Media.DrawingCollection.System.Collections.Generic.IEnumerable()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: System.Collections.Generic.IEnumerator<System.Windows.Media.Drawing> IEnumerable<Drawing>.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{System.Windows.Media.Drawing}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: DrawingCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Windows.Media.DrawingCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: void ICollection.CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: Parameter description to be filled\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: DrawingCollection.System.Collections.ICollection.IsSynchronized\n  fullName: System.Windows.Media.DrawingCollection.System.Collections.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: DrawingCollection.System.Collections.ICollection.SyncRoot\n  fullName: System.Windows.Media.DrawingCollection.System.Collections.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: DrawingCollection.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Windows.Media.DrawingCollection.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.System#Collections#IList#Add(System.Object)\n  id: System#Collections#IList#Add(System.Object)\n  isEii: true\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Add(Object)\n  nameWithType: DrawingCollection.System.Collections.IList.Add(Object)\n  fullName: System.Windows.Media.DrawingCollection.System.Collections.IList.Add(Object)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: int IList.Add (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.System#Collections#IList#Contains(System.Object)\n  id: System#Collections#IList#Contains(System.Object)\n  isEii: true\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Contains(Object)\n  nameWithType: DrawingCollection.System.Collections.IList.Contains(Object)\n  fullName: System.Windows.Media.DrawingCollection.System.Collections.IList.Contains(Object)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: bool IList.Contains (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.System#Collections#IList#IndexOf(System.Object)\n  id: System#Collections#IList#IndexOf(System.Object)\n  isEii: true\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.IndexOf(Object)\n  nameWithType: DrawingCollection.System.Collections.IList.IndexOf(Object)\n  fullName: System.Windows.Media.DrawingCollection.System.Collections.IList.IndexOf(Object)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: int IList.IndexOf (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  id: System#Collections#IList#Insert(System.Int32,System.Object)\n  isEii: true\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Insert(Int32,Object)\n  nameWithType: DrawingCollection.System.Collections.IList.Insert(Int32,Object)\n  fullName: System.Windows.Media.DrawingCollection.System.Collections.IList.Insert(Int32,Object)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: void IList.Insert (int index, object value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: value\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.System#Collections#IList#IsFixedSize\n  id: System#Collections#IList#IsFixedSize\n  isEii: true\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: DrawingCollection.System.Collections.IList.IsFixedSize\n  fullName: System.Windows.Media.DrawingCollection.System.Collections.IList.IsFixedSize\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: bool System.Collections.IList.IsFixedSize { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.System#Collections#IList#IsReadOnly\n  id: System#Collections#IList#IsReadOnly\n  isEii: true\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: DrawingCollection.System.Collections.IList.IsReadOnly\n  fullName: System.Windows.Media.DrawingCollection.System.Collections.IList.IsReadOnly\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: bool System.Collections.IList.IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.System#Collections#IList#Item(System.Int32)\n  id: System#Collections#IList#Item(System.Int32)\n  isEii: true\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Item(Int32)\n  nameWithType: DrawingCollection.System.Collections.IList.Item(Int32)\n  fullName: System.Windows.Media.DrawingCollection.System.Collections.IList.Item(Int32)\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: object System.Collections.IList.Item[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Windows.Media.DrawingCollection.System#Collections#IList#Remove(System.Object)\n  id: System#Collections#IList#Remove(System.Object)\n  isEii: true\n  parent: System.Windows.Media.DrawingCollection\n  langs:\n  - csharp\n  name: System.Collections.IList.Remove(Object)\n  nameWithType: DrawingCollection.System.Collections.IList.Remove(Object)\n  fullName: System.Windows.Media.DrawingCollection.System.Collections.IList.Remove(Object)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media\n  syntax:\n    content: void IList.Remove (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Windows.Media.Animation.Animatable\n  isExternal: false\n  name: System.Windows.Media.Animation.Animatable\n- uid: System.Windows.Media.DrawingCollection.#ctor\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: DrawingCollection()\n  nameWithType: DrawingCollection.DrawingCollection()\n  fullName: System.Windows.Media.DrawingCollection.DrawingCollection()\n- uid: System.Windows.Media.DrawingCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Media.Drawing})\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: DrawingCollection(IEnumerable<Drawing>)\n  nameWithType: DrawingCollection.DrawingCollection(IEnumerable<Drawing>)\n  fullName: System.Windows.Media.DrawingCollection.DrawingCollection(IEnumerable<Drawing>)\n- uid: System.Collections.Generic.IEnumerable{System.Windows.Media.Drawing}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Drawing>\n  nameWithType: IEnumerable<Drawing>\n  fullName: System.Collections.Generic.IEnumerable<System.Windows.Media.Drawing>\n- uid: System.Windows.Media.DrawingCollection.#ctor(System.Int32)\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: DrawingCollection(Int32)\n  nameWithType: DrawingCollection.DrawingCollection(Int32)\n  fullName: System.Windows.Media.DrawingCollection.DrawingCollection(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Media.DrawingCollection.Add(System.Windows.Media.Drawing)\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: Add(Drawing)\n  nameWithType: DrawingCollection.Add(Drawing)\n  fullName: System.Windows.Media.DrawingCollection.Add(Drawing)\n- uid: System.Windows.Media.Drawing\n  parent: System.Windows.Media\n  isExternal: false\n  name: Drawing\n  nameWithType: Drawing\n  fullName: System.Windows.Media.Drawing\n- uid: System.Windows.Media.DrawingCollection.Clear\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: Clear()\n  nameWithType: DrawingCollection.Clear()\n  fullName: System.Windows.Media.DrawingCollection.Clear()\n- uid: System.Windows.Media.DrawingCollection.Clone\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: Clone()\n  nameWithType: DrawingCollection.Clone()\n  fullName: System.Windows.Media.DrawingCollection.Clone()\n- uid: System.Windows.Media.DrawingCollection\n  parent: System.Windows.Media\n  isExternal: false\n  name: DrawingCollection\n  nameWithType: DrawingCollection\n  fullName: System.Windows.Media.DrawingCollection\n- uid: System.Windows.Media.DrawingCollection.CloneCore(System.Windows.Freezable)\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: CloneCore(Freezable)\n  nameWithType: DrawingCollection.CloneCore(Freezable)\n  fullName: System.Windows.Media.DrawingCollection.CloneCore(Freezable)\n- uid: System.Windows.Freezable\n  parent: System.Windows\n  isExternal: true\n  name: Freezable\n  nameWithType: Freezable\n  fullName: System.Windows.Freezable\n- uid: System.Windows.Media.DrawingCollection.CloneCurrentValue\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: CloneCurrentValue()\n  nameWithType: DrawingCollection.CloneCurrentValue()\n  fullName: System.Windows.Media.DrawingCollection.CloneCurrentValue()\n- uid: System.Windows.Media.DrawingCollection\n  parent: System.Windows.Media\n  isExternal: false\n  name: DrawingCollection\n  nameWithType: DrawingCollection\n  fullName: System.Windows.Media.DrawingCollection\n- uid: System.Windows.Media.DrawingCollection.CloneCurrentValueCore(System.Windows.Freezable)\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: CloneCurrentValueCore(Freezable)\n  nameWithType: DrawingCollection.CloneCurrentValueCore(Freezable)\n  fullName: System.Windows.Media.DrawingCollection.CloneCurrentValueCore(Freezable)\n- uid: System.Windows.Freezable\n  parent: System.Windows\n  isExternal: true\n  name: Freezable\n  nameWithType: Freezable\n  fullName: System.Windows.Freezable\n- uid: System.Windows.Media.DrawingCollection.Contains(System.Windows.Media.Drawing)\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: Contains(Drawing)\n  nameWithType: DrawingCollection.Contains(Drawing)\n  fullName: System.Windows.Media.DrawingCollection.Contains(Drawing)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Media.Drawing\n  parent: System.Windows.Media\n  isExternal: false\n  name: Drawing\n  nameWithType: Drawing\n  fullName: System.Windows.Media.Drawing\n- uid: System.Windows.Media.DrawingCollection.CopyTo(System.Windows.Media.Drawing[],System.Int32)\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: CopyTo(Drawing[],Int32)\n  nameWithType: DrawingCollection.CopyTo(Drawing[],Int32)\n  fullName: System.Windows.Media.DrawingCollection.CopyTo(Drawing[],Int32)\n- uid: System.Windows.Media.Drawing\n  parent: System.Windows.Media\n  isExternal: false\n  name: Drawing\n  nameWithType: Drawing\n  fullName: System.Windows.Media.Drawing[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Media.DrawingCollection.Count\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: Count\n  nameWithType: DrawingCollection.Count\n  fullName: System.Windows.Media.DrawingCollection.Count\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Media.DrawingCollection.CreateInstanceCore\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: CreateInstanceCore()\n  nameWithType: DrawingCollection.CreateInstanceCore()\n  fullName: System.Windows.Media.DrawingCollection.CreateInstanceCore()\n- uid: System.Windows.Freezable\n  parent: System.Windows\n  isExternal: true\n  name: Freezable\n  nameWithType: Freezable\n  fullName: System.Windows.Freezable\n- uid: System.Windows.Media.DrawingCollection.FreezeCore(System.Boolean)\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: FreezeCore(Boolean)\n  nameWithType: DrawingCollection.FreezeCore(Boolean)\n  fullName: System.Windows.Media.DrawingCollection.FreezeCore(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Media.DrawingCollection.GetAsFrozenCore(System.Windows.Freezable)\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: GetAsFrozenCore(Freezable)\n  nameWithType: DrawingCollection.GetAsFrozenCore(Freezable)\n  fullName: System.Windows.Media.DrawingCollection.GetAsFrozenCore(Freezable)\n- uid: System.Windows.Freezable\n  parent: System.Windows\n  isExternal: true\n  name: Freezable\n  nameWithType: Freezable\n  fullName: System.Windows.Freezable\n- uid: System.Windows.Media.DrawingCollection.GetCurrentValueAsFrozenCore(System.Windows.Freezable)\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: GetCurrentValueAsFrozenCore(Freezable)\n  nameWithType: DrawingCollection.GetCurrentValueAsFrozenCore(Freezable)\n  fullName: System.Windows.Media.DrawingCollection.GetCurrentValueAsFrozenCore(Freezable)\n- uid: System.Windows.Freezable\n  parent: System.Windows\n  isExternal: true\n  name: Freezable\n  nameWithType: Freezable\n  fullName: System.Windows.Freezable\n- uid: System.Windows.Media.DrawingCollection.GetEnumerator\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: DrawingCollection.GetEnumerator()\n  fullName: System.Windows.Media.DrawingCollection.GetEnumerator()\n- uid: System.Windows.Media.DrawingCollection.Enumerator\n  parent: System.Windows.Media\n  isExternal: false\n  name: DrawingCollection+Enumerator\n  nameWithType: DrawingCollection+Enumerator\n  fullName: System.Windows.Media.DrawingCollection+Enumerator\n- uid: System.Windows.Media.DrawingCollection.IndexOf(System.Windows.Media.Drawing)\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: IndexOf(Drawing)\n  nameWithType: DrawingCollection.IndexOf(Drawing)\n  fullName: System.Windows.Media.DrawingCollection.IndexOf(Drawing)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Media.Drawing\n  parent: System.Windows.Media\n  isExternal: false\n  name: Drawing\n  nameWithType: Drawing\n  fullName: System.Windows.Media.Drawing\n- uid: System.Windows.Media.DrawingCollection.Insert(System.Int32,System.Windows.Media.Drawing)\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: Insert(Int32,Drawing)\n  nameWithType: DrawingCollection.Insert(Int32,Drawing)\n  fullName: System.Windows.Media.DrawingCollection.Insert(Int32,Drawing)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Media.Drawing\n  parent: System.Windows.Media\n  isExternal: false\n  name: Drawing\n  nameWithType: Drawing\n  fullName: System.Windows.Media.Drawing\n- uid: System.Windows.Media.DrawingCollection.Item(System.Int32)\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: DrawingCollection.Item(Int32)\n  fullName: System.Windows.Media.DrawingCollection.Item(Int32)\n- uid: System.Windows.Media.Drawing\n  parent: System.Windows.Media\n  isExternal: false\n  name: Drawing\n  nameWithType: Drawing\n  fullName: System.Windows.Media.Drawing\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Media.DrawingCollection.Remove(System.Windows.Media.Drawing)\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: Remove(Drawing)\n  nameWithType: DrawingCollection.Remove(Drawing)\n  fullName: System.Windows.Media.DrawingCollection.Remove(Drawing)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Media.Drawing\n  parent: System.Windows.Media\n  isExternal: false\n  name: Drawing\n  nameWithType: Drawing\n  fullName: System.Windows.Media.Drawing\n- uid: System.Windows.Media.DrawingCollection.RemoveAt(System.Int32)\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: RemoveAt(Int32)\n  nameWithType: DrawingCollection.RemoveAt(Int32)\n  fullName: System.Windows.Media.DrawingCollection.RemoveAt(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Media.DrawingCollection.System#Collections#Generic#ICollection{System#Windows#Media#Drawing}#IsReadOnly\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: System.Collections.Generic.ICollection\n  nameWithType: DrawingCollection.System.Collections.Generic.ICollection\n  fullName: System.Windows.Media.DrawingCollection.System.Collections.Generic.ICollection\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Media.DrawingCollection.System#Collections#Generic#IEnumerable{System#Windows#Media#Drawing}#GetEnumerator\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: System.Collections.Generic.IEnumerable()\n  nameWithType: DrawingCollection.System.Collections.Generic.IEnumerable()\n  fullName: System.Windows.Media.DrawingCollection.System.Collections.Generic.IEnumerable()\n- uid: System.Collections.Generic.IEnumerator{System.Windows.Media.Drawing}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerator<Drawing>\n  nameWithType: IEnumerator<Drawing>\n  fullName: System.Collections.Generic.IEnumerator<System.Windows.Media.Drawing>\n- uid: System.Windows.Media.DrawingCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: DrawingCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Windows.Media.DrawingCollection.System.Collections.ICollection.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Media.DrawingCollection.System#Collections#ICollection#IsSynchronized\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: DrawingCollection.System.Collections.ICollection.IsSynchronized\n  fullName: System.Windows.Media.DrawingCollection.System.Collections.ICollection.IsSynchronized\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Media.DrawingCollection.System#Collections#ICollection#SyncRoot\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: DrawingCollection.System.Collections.ICollection.SyncRoot\n  fullName: System.Windows.Media.DrawingCollection.System.Collections.ICollection.SyncRoot\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Media.DrawingCollection.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: DrawingCollection.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Windows.Media.DrawingCollection.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Windows.Media.DrawingCollection.System#Collections#IList#Add(System.Object)\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: System.Collections.IList.Add(Object)\n  nameWithType: DrawingCollection.System.Collections.IList.Add(Object)\n  fullName: System.Windows.Media.DrawingCollection.System.Collections.IList.Add(Object)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Media.DrawingCollection.System#Collections#IList#Contains(System.Object)\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: System.Collections.IList.Contains(Object)\n  nameWithType: DrawingCollection.System.Collections.IList.Contains(Object)\n  fullName: System.Windows.Media.DrawingCollection.System.Collections.IList.Contains(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Media.DrawingCollection.System#Collections#IList#IndexOf(System.Object)\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: System.Collections.IList.IndexOf(Object)\n  nameWithType: DrawingCollection.System.Collections.IList.IndexOf(Object)\n  fullName: System.Windows.Media.DrawingCollection.System.Collections.IList.IndexOf(Object)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Media.DrawingCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: System.Collections.IList.Insert(Int32,Object)\n  nameWithType: DrawingCollection.System.Collections.IList.Insert(Int32,Object)\n  fullName: System.Windows.Media.DrawingCollection.System.Collections.IList.Insert(Int32,Object)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Media.DrawingCollection.System#Collections#IList#IsFixedSize\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: System.Collections.IList.IsFixedSize\n  nameWithType: DrawingCollection.System.Collections.IList.IsFixedSize\n  fullName: System.Windows.Media.DrawingCollection.System.Collections.IList.IsFixedSize\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Media.DrawingCollection.System#Collections#IList#IsReadOnly\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: System.Collections.IList.IsReadOnly\n  nameWithType: DrawingCollection.System.Collections.IList.IsReadOnly\n  fullName: System.Windows.Media.DrawingCollection.System.Collections.IList.IsReadOnly\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Media.DrawingCollection.System#Collections#IList#Item(System.Int32)\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: System.Collections.IList.Item(Int32)\n  nameWithType: DrawingCollection.System.Collections.IList.Item(Int32)\n  fullName: System.Windows.Media.DrawingCollection.System.Collections.IList.Item(Int32)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Media.DrawingCollection.System#Collections#IList#Remove(System.Object)\n  parent: System.Windows.Media.DrawingCollection\n  isExternal: false\n  name: System.Collections.IList.Remove(Object)\n  nameWithType: DrawingCollection.System.Collections.IList.Remove(Object)\n  fullName: System.Windows.Media.DrawingCollection.System.Collections.IList.Remove(Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n"}