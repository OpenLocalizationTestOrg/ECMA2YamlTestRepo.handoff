{"nodes":[{"pos":[752,764],"content":"CryptoConfig","needQuote":true,"needEscape":true,"nodes":[{"content":"CryptoConfig","pos":[0,12]}]},{"pos":[1519,1533],"content":"CryptoConfig()","needQuote":true,"needEscape":true,"nodes":[{"content":"CryptoConfig()","pos":[0,14]}]},{"pos":[2070,2097],"content":"AddAlgorithm(Type,String[])","needQuote":true,"needEscape":true,"nodes":[{"content":"AddAlgorithm(Type,String[])","pos":[0,27]}]},{"pos":[2489,2523],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2587,2621],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2882,2905],"content":"AddOID(String,String[])","needQuote":true,"needEscape":true,"nodes":[{"content":"AddOID(String,String[])","pos":[0,23]}]},{"pos":[3275,3309],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3373,3407],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3640,3663],"content":"AllowOnlyFipsAlgorithms","needQuote":true,"needEscape":true,"nodes":[{"content":"AllowOnlyFipsAlgorithms","pos":[0,23]}]},{"pos":[4014,4048],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4293,4315],"content":"CreateFromName(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"CreateFromName(String)","pos":[0,22]}]},{"pos":[4679,4713],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4771,4805],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5152,5183],"content":"CreateFromName(String,Object[])","needQuote":true,"needEscape":true,"nodes":[{"content":"CreateFromName(String,Object[])","pos":[0,31]}]},{"pos":[5580,5614],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5677,5711],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5769,5803],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6108,6125],"content":"EncodeOID(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"EncodeOID(String)","pos":[0,17]}]},{"pos":[6472,6506],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6564,6598],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6839,6859],"content":"MapNameToOID(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"MapNameToOID(String)","pos":[0,20]}]},{"pos":[7217,7251],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7309,7343],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7454,7467],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[7603,7617],"content":"CryptoConfig()","needQuote":true,"needEscape":true,"nodes":[{"content":"CryptoConfig()","pos":[0,14]}]},{"pos":[7902,7929],"content":"AddAlgorithm(Type,String[])","needQuote":true,"needEscape":true,"nodes":[{"content":"AddAlgorithm(Type,String[])","pos":[0,27]}]},{"pos":[8133,8137],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[8249,8255],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[8474,8497],"content":"AddOID(String,String[])","needQuote":true,"needEscape":true,"nodes":[{"content":"AddOID(String,String[])","pos":[0,23]}]},{"pos":[8695,8701],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[8817,8823],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[9028,9051],"content":"AllowOnlyFipsAlgorithms","needQuote":true,"needEscape":true,"nodes":[{"content":"AllowOnlyFipsAlgorithms","pos":[0,23]}]},{"pos":[9250,9257],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[9468,9490],"content":"CreateFromName(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"CreateFromName(String)","pos":[0,22]}]},{"pos":[9686,9692],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9808,9814],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[10039,10070],"content":"CreateFromName(String,Object[])","needQuote":true,"needEscape":true,"nodes":[{"content":"CreateFromName(String,Object[])","pos":[0,31]}]},{"pos":[10284,10290],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10406,10412],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[10528,10534],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10740,10757],"content":"EncodeOID(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"EncodeOID(String)","pos":[0,17]}]},{"pos":[10941,10945],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[11059,11065],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[11272,11292],"content":"MapNameToOID(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"MapNameToOID(String)","pos":[0,20]}]},{"pos":[11484,11490],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[11606,11612],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.CryptoConfig\n  id: CryptoConfig\n  children:\n  - System.Security.Cryptography.CryptoConfig.#ctor\n  - System.Security.Cryptography.CryptoConfig.AddAlgorithm(System.Type,System.String[])\n  - System.Security.Cryptography.CryptoConfig.AddOID(System.String,System.String[])\n  - System.Security.Cryptography.CryptoConfig.AllowOnlyFipsAlgorithms\n  - System.Security.Cryptography.CryptoConfig.CreateFromName(System.String)\n  - System.Security.Cryptography.CryptoConfig.CreateFromName(System.String,System.Object[])\n  - System.Security.Cryptography.CryptoConfig.EncodeOID(System.String)\n  - System.Security.Cryptography.CryptoConfig.MapNameToOID(System.String)\n  langs:\n  - csharp\n  name: CryptoConfig\n  nameWithType: CryptoConfig\n  fullName: System.Security.Cryptography.CryptoConfig\n  type: Class\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class CryptoConfig\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CryptoConfig.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.CryptoConfig\n  langs:\n  - csharp\n  name: CryptoConfig()\n  nameWithType: CryptoConfig.CryptoConfig()\n  fullName: System.Security.Cryptography.CryptoConfig.CryptoConfig()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public CryptoConfig ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CryptoConfig.AddAlgorithm(System.Type,System.String[])\n  id: AddAlgorithm(System.Type,System.String[])\n  parent: System.Security.Cryptography.CryptoConfig\n  langs:\n  - csharp\n  name: AddAlgorithm(Type,String[])\n  nameWithType: CryptoConfig.AddAlgorithm(Type,String[])\n  fullName: System.Security.Cryptography.CryptoConfig.AddAlgorithm(Type,String[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static void AddAlgorithm (Type algorithm, string[] names);\n    parameters:\n    - id: algorithm\n      type: System.Type\n      description: Parameter description to be filled\n    - id: names\n      type: System.String[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CryptoConfig.AddOID(System.String,System.String[])\n  id: AddOID(System.String,System.String[])\n  parent: System.Security.Cryptography.CryptoConfig\n  langs:\n  - csharp\n  name: AddOID(String,String[])\n  nameWithType: CryptoConfig.AddOID(String,String[])\n  fullName: System.Security.Cryptography.CryptoConfig.AddOID(String,String[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static void AddOID (string oid, string[] names);\n    parameters:\n    - id: oid\n      type: System.String\n      description: Parameter description to be filled\n    - id: names\n      type: System.String[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CryptoConfig.AllowOnlyFipsAlgorithms\n  id: AllowOnlyFipsAlgorithms\n  parent: System.Security.Cryptography.CryptoConfig\n  langs:\n  - csharp\n  name: AllowOnlyFipsAlgorithms\n  nameWithType: CryptoConfig.AllowOnlyFipsAlgorithms\n  fullName: System.Security.Cryptography.CryptoConfig.AllowOnlyFipsAlgorithms\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static bool AllowOnlyFipsAlgorithms { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CryptoConfig.CreateFromName(System.String)\n  id: CreateFromName(System.String)\n  parent: System.Security.Cryptography.CryptoConfig\n  langs:\n  - csharp\n  name: CreateFromName(String)\n  nameWithType: CryptoConfig.CreateFromName(String)\n  fullName: System.Security.Cryptography.CryptoConfig.CreateFromName(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static object CreateFromName (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n    return:\n      type: System.Object\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.CryptoConfig.CreateFromName*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CryptoConfig.CreateFromName(System.String,System.Object[])\n  id: CreateFromName(System.String,System.Object[])\n  parent: System.Security.Cryptography.CryptoConfig\n  langs:\n  - csharp\n  name: CreateFromName(String,Object[])\n  nameWithType: CryptoConfig.CreateFromName(String,Object[])\n  fullName: System.Security.Cryptography.CryptoConfig.CreateFromName(String,Object[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static object CreateFromName (string name, object[] args);\n    parameters:\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n    - id: args\n      type: System.Object[]\n      description: Parameter description to be filled\n    return:\n      type: System.Object\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.CryptoConfig.CreateFromName*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CryptoConfig.EncodeOID(System.String)\n  id: EncodeOID(System.String)\n  parent: System.Security.Cryptography.CryptoConfig\n  langs:\n  - csharp\n  name: EncodeOID(String)\n  nameWithType: CryptoConfig.EncodeOID(String)\n  fullName: System.Security.Cryptography.CryptoConfig.EncodeOID(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static byte[] EncodeOID (string str);\n    parameters:\n    - id: str\n      type: System.String\n      description: Parameter description to be filled\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.CryptoConfig.MapNameToOID(System.String)\n  id: MapNameToOID(System.String)\n  parent: System.Security.Cryptography.CryptoConfig\n  langs:\n  - csharp\n  name: MapNameToOID(String)\n  nameWithType: CryptoConfig.MapNameToOID(String)\n  fullName: System.Security.Cryptography.CryptoConfig.MapNameToOID(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static string MapNameToOID (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n    return:\n      type: System.String\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Security.Cryptography.CryptoConfig.#ctor\n  parent: System.Security.Cryptography.CryptoConfig\n  isExternal: false\n  name: CryptoConfig()\n  nameWithType: CryptoConfig.CryptoConfig()\n  fullName: System.Security.Cryptography.CryptoConfig.CryptoConfig()\n- uid: System.Security.Cryptography.CryptoConfig.AddAlgorithm(System.Type,System.String[])\n  parent: System.Security.Cryptography.CryptoConfig\n  isExternal: false\n  name: AddAlgorithm(Type,String[])\n  nameWithType: CryptoConfig.AddAlgorithm(Type,String[])\n  fullName: System.Security.Cryptography.CryptoConfig.AddAlgorithm(Type,String[])\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String[]\n- uid: System.Security.Cryptography.CryptoConfig.AddOID(System.String,System.String[])\n  parent: System.Security.Cryptography.CryptoConfig\n  isExternal: false\n  name: AddOID(String,String[])\n  nameWithType: CryptoConfig.AddOID(String,String[])\n  fullName: System.Security.Cryptography.CryptoConfig.AddOID(String,String[])\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String[]\n- uid: System.Security.Cryptography.CryptoConfig.AllowOnlyFipsAlgorithms\n  parent: System.Security.Cryptography.CryptoConfig\n  isExternal: false\n  name: AllowOnlyFipsAlgorithms\n  nameWithType: CryptoConfig.AllowOnlyFipsAlgorithms\n  fullName: System.Security.Cryptography.CryptoConfig.AllowOnlyFipsAlgorithms\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.CryptoConfig.CreateFromName(System.String)\n  parent: System.Security.Cryptography.CryptoConfig\n  isExternal: false\n  name: CreateFromName(String)\n  nameWithType: CryptoConfig.CreateFromName(String)\n  fullName: System.Security.Cryptography.CryptoConfig.CreateFromName(String)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.CryptoConfig.CreateFromName(System.String,System.Object[])\n  parent: System.Security.Cryptography.CryptoConfig\n  isExternal: false\n  name: CreateFromName(String,Object[])\n  nameWithType: CryptoConfig.CreateFromName(String,Object[])\n  fullName: System.Security.Cryptography.CryptoConfig.CreateFromName(String,Object[])\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object[]\n- uid: System.Security.Cryptography.CryptoConfig.EncodeOID(System.String)\n  parent: System.Security.Cryptography.CryptoConfig\n  isExternal: false\n  name: EncodeOID(String)\n  nameWithType: CryptoConfig.EncodeOID(String)\n  fullName: System.Security.Cryptography.CryptoConfig.EncodeOID(String)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.CryptoConfig.MapNameToOID(System.String)\n  parent: System.Security.Cryptography.CryptoConfig\n  isExternal: false\n  name: MapNameToOID(String)\n  nameWithType: CryptoConfig.MapNameToOID(String)\n  fullName: System.Security.Cryptography.CryptoConfig.MapNameToOID(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.CryptoConfig.CreateFromName*\n  parent: System.Security.Cryptography.CryptoConfig\n  isExternal: false\n  nameWithType: CryptoConfig.\n"}