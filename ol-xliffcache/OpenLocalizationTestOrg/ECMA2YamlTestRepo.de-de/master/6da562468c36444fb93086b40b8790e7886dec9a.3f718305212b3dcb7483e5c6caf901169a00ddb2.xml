{"nodes":[{"pos":[1567,1580],"content":"GeoCoordinate","needQuote":true,"needEscape":true,"nodes":[{"content":"GeoCoordinate","pos":[0,13]}]},{"pos":[2269,2284],"content":"GeoCoordinate()","needQuote":true,"needEscape":true,"nodes":[{"content":"GeoCoordinate()","pos":[0,15]}]},{"pos":[2797,2825],"content":"GeoCoordinate(Double,Double)","needQuote":true,"needEscape":true,"nodes":[{"content":"GeoCoordinate(Double,Double)","pos":[0,28]}]},{"pos":[3212,3246],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3312,3346],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3621,3656],"content":"GeoCoordinate(Double,Double,Double)","needQuote":true,"needEscape":true,"nodes":[{"content":"GeoCoordinate(Double,Double,Double)","pos":[0,35]}]},{"pos":[4074,4108],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4174,4208],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4273,4307],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4694,4757],"content":"GeoCoordinate(Double,Double,Double,Double,Double,Double,Double)","needQuote":true,"needEscape":true,"nodes":[{"content":"GeoCoordinate(Double,Double,Double,Double,Double,Double,Double)","pos":[0,63]}]},{"pos":[5312,5346],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5412,5446],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5511,5545],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5620,5654],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5727,5761],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5823,5857],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5920,5954],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6147,6155],"content":"Altitude","needQuote":true,"needEscape":true,"nodes":[{"content":"Altitude","pos":[0,8]}]},{"pos":[6455,6489],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6678,6684],"content":"Course","needQuote":true,"needEscape":true,"nodes":[{"content":"Course","pos":[0,6]}]},{"pos":[6978,7012],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7277,7298],"content":"Equals(GeoCoordinate)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(GeoCoordinate)","pos":[0,21]}]},{"pos":[7693,7727],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7786,7820],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8096,8110],"content":"Equals(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[8443,8477],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8536,8570],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8906,8934],"content":"GetDistanceTo(GeoCoordinate)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetDistanceTo(GeoCoordinate)","pos":[0,28]}]},{"pos":[9352,9386],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9444,9478],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9677,9690],"content":"GetHashCode()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[10015,10049],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10262,10280],"content":"HorizontalAccuracy","needQuote":true,"needEscape":true,"nodes":[{"content":"HorizontalAccuracy","pos":[0,18]}]},{"pos":[10610,10644],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10839,10848],"content":"IsUnknown","needQuote":true,"needEscape":true,"nodes":[{"content":"IsUnknown","pos":[0,9]}]},{"pos":[11145,11179],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11372,11380],"content":"Latitude","needQuote":true,"needEscape":true,"nodes":[{"content":"Latitude","pos":[0,8]}]},{"pos":[11680,11714],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11909,11918],"content":"Longitude","needQuote":true,"needEscape":true,"nodes":[{"content":"Longitude","pos":[0,9]}]},{"pos":[12221,12255],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12604,12644],"content":"op_Equality(GeoCoordinate,GeoCoordinate)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Equality(GeoCoordinate,GeoCoordinate)","pos":[0,40]}]},{"pos":[13133,13167],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13252,13286],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13345,13379],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13732,13774],"content":"op_Inequality(GeoCoordinate,GeoCoordinate)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Inequality(GeoCoordinate,GeoCoordinate)","pos":[0,42]}]},{"pos":[14269,14303],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14388,14422],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14481,14515],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14702,14707],"content":"Speed","needQuote":true,"needEscape":true,"nodes":[{"content":"Speed","pos":[0,5]}]},{"pos":[14998,15032],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15225,15235],"content":"ToString()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[15555,15589],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15780,15787],"content":"Unknown","needQuote":true,"needEscape":true,"nodes":[{"content":"Unknown","pos":[0,7]}]},{"pos":[16137,16171],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16380,16396],"content":"VerticalAccuracy","needQuote":true,"needEscape":true,"nodes":[{"content":"VerticalAccuracy","pos":[0,16]}]},{"pos":[16720,16754],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16865,16878],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[17004,17019],"content":"GeoCoordinate()","needQuote":true,"needEscape":true,"nodes":[{"content":"GeoCoordinate()","pos":[0,15]}]},{"pos":[17285,17313],"content":"GeoCoordinate(Double,Double)","needQuote":true,"needEscape":true,"nodes":[{"content":"GeoCoordinate(Double,Double)","pos":[0,28]}]},{"pos":[17517,17523],"content":"Double","needQuote":true,"needEscape":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[17639,17645],"content":"Double","needQuote":true,"needEscape":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[17863,17898],"content":"GeoCoordinate(Double,Double,Double)","needQuote":true,"needEscape":true,"nodes":[{"content":"GeoCoordinate(Double,Double,Double)","pos":[0,35]}]},{"pos":[18116,18122],"content":"Double","needQuote":true,"needEscape":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[18238,18244],"content":"Double","needQuote":true,"needEscape":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[18360,18366],"content":"Double","needQuote":true,"needEscape":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[18640,18703],"content":"GeoCoordinate(Double,Double,Double,Double,Double,Double,Double)","needQuote":true,"needEscape":true,"nodes":[{"content":"GeoCoordinate(Double,Double,Double,Double,Double,Double,Double)","pos":[0,63]}]},{"pos":[18977,18983],"content":"Double","needQuote":true,"needEscape":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[19099,19105],"content":"Double","needQuote":true,"needEscape":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[19221,19227],"content":"Double","needQuote":true,"needEscape":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[19343,19349],"content":"Double","needQuote":true,"needEscape":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[19465,19471],"content":"Double","needQuote":true,"needEscape":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[19587,19593],"content":"Double","needQuote":true,"needEscape":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[19709,19715],"content":"Double","needQuote":true,"needEscape":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[19893,19901],"content":"Altitude","needQuote":true,"needEscape":true,"nodes":[{"content":"Altitude","pos":[0,8]}]},{"pos":[20065,20071],"content":"Double","needQuote":true,"needEscape":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[20247,20253],"content":"Course","needQuote":true,"needEscape":true,"nodes":[{"content":"Course","pos":[0,6]}]},{"pos":[20413,20419],"content":"Double","needQuote":true,"needEscape":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[20633,20654],"content":"Equals(GeoCoordinate)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(GeoCoordinate)","pos":[0,21]}]},{"pos":[20845,20852],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[21009,21022],"content":"GeoCoordinate","needQuote":true,"needEscape":true,"nodes":[{"content":"GeoCoordinate","pos":[0,13]}]},{"pos":[21243,21257],"content":"Equals(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[21434,21441],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[21559,21565],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21786,21814],"content":"GetDistanceTo(GeoCoordinate)","needQuote":true,"needEscape":true,"nodes":[{"content":"GetDistanceTo(GeoCoordinate)","pos":[0,28]}]},{"pos":[22018,22024],"content":"Double","needQuote":true,"needEscape":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[22179,22192],"content":"GeoCoordinate","needQuote":true,"needEscape":true,"nodes":[{"content":"GeoCoordinate","pos":[0,13]}]},{"pos":[22403,22416],"content":"GetHashCode()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[22589,22594],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[22780,22798],"content":"HorizontalAccuracy","needQuote":true,"needEscape":true,"nodes":[{"content":"HorizontalAccuracy","pos":[0,18]}]},{"pos":[22982,22988],"content":"Double","needQuote":true,"needEscape":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[23167,23176],"content":"IsUnknown","needQuote":true,"needEscape":true,"nodes":[{"content":"IsUnknown","pos":[0,9]}]},{"pos":[23343,23350],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[23530,23538],"content":"Latitude","needQuote":true,"needEscape":true,"nodes":[{"content":"Latitude","pos":[0,8]}]},{"pos":[23702,23708],"content":"Double","needQuote":true,"needEscape":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[23887,23896],"content":"Longitude","needQuote":true,"needEscape":true,"nodes":[{"content":"Longitude","pos":[0,9]}]},{"pos":[24062,24068],"content":"Double","needQuote":true,"needEscape":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[24324,24364],"content":"op_Equality(GeoCoordinate,GeoCoordinate)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Equality(GeoCoordinate,GeoCoordinate)","pos":[0,40]}]},{"pos":[24593,24600],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[24757,24770],"content":"GeoCoordinate","needQuote":true,"needEscape":true,"nodes":[{"content":"GeoCoordinate","pos":[0,13]}]},{"pos":[24955,24968],"content":"GeoCoordinate","needQuote":true,"needEscape":true,"nodes":[{"content":"GeoCoordinate","pos":[0,13]}]},{"pos":[25256,25298],"content":"op_Inequality(GeoCoordinate,GeoCoordinate)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Inequality(GeoCoordinate,GeoCoordinate)","pos":[0,42]}]},{"pos":[25531,25538],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[25695,25708],"content":"GeoCoordinate","needQuote":true,"needEscape":true,"nodes":[{"content":"GeoCoordinate","pos":[0,13]}]},{"pos":[25893,25906],"content":"GeoCoordinate","needQuote":true,"needEscape":true,"nodes":[{"content":"GeoCoordinate","pos":[0,13]}]},{"pos":[26111,26116],"content":"Speed","needQuote":true,"needEscape":true,"nodes":[{"content":"Speed","pos":[0,5]}]},{"pos":[26274,26280],"content":"Double","needQuote":true,"needEscape":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[26458,26468],"content":"ToString()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[26636,26642],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[26819,26826],"content":"Unknown","needQuote":true,"needEscape":true,"nodes":[{"content":"Unknown","pos":[0,7]}]},{"pos":[27027,27040],"content":"GeoCoordinate","needQuote":true,"needEscape":true,"nodes":[{"content":"GeoCoordinate","pos":[0,13]}]},{"pos":[27256,27272],"content":"VerticalAccuracy","needQuote":true,"needEscape":true,"nodes":[{"content":"VerticalAccuracy","pos":[0,16]}]},{"pos":[27452,27458],"content":"Double","needQuote":true,"needEscape":true,"nodes":[{"content":"Double","pos":[0,6]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Device.Location.GeoCoordinate\n  id: GeoCoordinate\n  children:\n  - System.Device.Location.GeoCoordinate.#ctor\n  - System.Device.Location.GeoCoordinate.#ctor(System.Double,System.Double)\n  - System.Device.Location.GeoCoordinate.#ctor(System.Double,System.Double,System.Double)\n  - System.Device.Location.GeoCoordinate.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)\n  - System.Device.Location.GeoCoordinate.Altitude\n  - System.Device.Location.GeoCoordinate.Course\n  - System.Device.Location.GeoCoordinate.Equals(System.Device.Location.GeoCoordinate)\n  - System.Device.Location.GeoCoordinate.Equals(System.Object)\n  - System.Device.Location.GeoCoordinate.GetDistanceTo(System.Device.Location.GeoCoordinate)\n  - System.Device.Location.GeoCoordinate.GetHashCode\n  - System.Device.Location.GeoCoordinate.HorizontalAccuracy\n  - System.Device.Location.GeoCoordinate.IsUnknown\n  - System.Device.Location.GeoCoordinate.Latitude\n  - System.Device.Location.GeoCoordinate.Longitude\n  - System.Device.Location.GeoCoordinate.op_Equality(System.Device.Location.GeoCoordinate,System.Device.Location.GeoCoordinate)\n  - System.Device.Location.GeoCoordinate.op_Inequality(System.Device.Location.GeoCoordinate,System.Device.Location.GeoCoordinate)\n  - System.Device.Location.GeoCoordinate.Speed\n  - System.Device.Location.GeoCoordinate.ToString\n  - System.Device.Location.GeoCoordinate.Unknown\n  - System.Device.Location.GeoCoordinate.VerticalAccuracy\n  langs:\n  - csharp\n  name: GeoCoordinate\n  nameWithType: GeoCoordinate\n  fullName: System.Device.Location.GeoCoordinate\n  type: Class\n  syntax:\n    content: 'public class GeoCoordinate : IEquatable<System.Device.Location.GeoCoordinate>'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IEquatable<System.Device.Location.GeoCoordinate>\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Device.Location.GeoCoordinate.#ctor\n  id: '#ctor'\n  parent: System.Device.Location.GeoCoordinate\n  langs:\n  - csharp\n  name: GeoCoordinate()\n  nameWithType: GeoCoordinate.GeoCoordinate()\n  fullName: System.Device.Location.GeoCoordinate.GeoCoordinate()\n  type: Constructor\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  syntax:\n    content: public GeoCoordinate ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Device.Location.GeoCoordinate.#ctor(System.Double,System.Double)\n  id: '#ctor(System.Double,System.Double)'\n  parent: System.Device.Location.GeoCoordinate\n  langs:\n  - csharp\n  name: GeoCoordinate(Double,Double)\n  nameWithType: GeoCoordinate.GeoCoordinate(Double,Double)\n  fullName: System.Device.Location.GeoCoordinate.GeoCoordinate(Double,Double)\n  type: Constructor\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  syntax:\n    content: public GeoCoordinate (double latitude, double longitude);\n    parameters:\n    - id: latitude\n      type: System.Double\n      description: Parameter description to be filled\n    - id: longitude\n      type: System.Double\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Device.Location.GeoCoordinate.#ctor(System.Double,System.Double,System.Double)\n  id: '#ctor(System.Double,System.Double,System.Double)'\n  parent: System.Device.Location.GeoCoordinate\n  langs:\n  - csharp\n  name: GeoCoordinate(Double,Double,Double)\n  nameWithType: GeoCoordinate.GeoCoordinate(Double,Double,Double)\n  fullName: System.Device.Location.GeoCoordinate.GeoCoordinate(Double,Double,Double)\n  type: Constructor\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  syntax:\n    content: public GeoCoordinate (double latitude, double longitude, double altitude);\n    parameters:\n    - id: latitude\n      type: System.Double\n      description: Parameter description to be filled\n    - id: longitude\n      type: System.Double\n      description: Parameter description to be filled\n    - id: altitude\n      type: System.Double\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Device.Location.GeoCoordinate.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)\n  id: '#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)'\n  parent: System.Device.Location.GeoCoordinate\n  langs:\n  - csharp\n  name: GeoCoordinate(Double,Double,Double,Double,Double,Double,Double)\n  nameWithType: GeoCoordinate.GeoCoordinate(Double,Double,Double,Double,Double,Double,Double)\n  fullName: System.Device.Location.GeoCoordinate.GeoCoordinate(Double,Double,Double,Double,Double,Double,Double)\n  type: Constructor\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  syntax:\n    content: public GeoCoordinate (double latitude, double longitude, double altitude, double horizontalAccuracy, double verticalAccuracy, double speed, double course);\n    parameters:\n    - id: latitude\n      type: System.Double\n      description: Parameter description to be filled\n    - id: longitude\n      type: System.Double\n      description: Parameter description to be filled\n    - id: altitude\n      type: System.Double\n      description: Parameter description to be filled\n    - id: horizontalAccuracy\n      type: System.Double\n      description: Parameter description to be filled\n    - id: verticalAccuracy\n      type: System.Double\n      description: Parameter description to be filled\n    - id: speed\n      type: System.Double\n      description: Parameter description to be filled\n    - id: course\n      type: System.Double\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Device.Location.GeoCoordinate.Altitude\n  id: Altitude\n  parent: System.Device.Location.GeoCoordinate\n  langs:\n  - csharp\n  name: Altitude\n  nameWithType: GeoCoordinate.Altitude\n  fullName: System.Device.Location.GeoCoordinate.Altitude\n  type: Property\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  syntax:\n    content: public double Altitude { get; set; }\n    return:\n      type: System.Double\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Device.Location.GeoCoordinate.Course\n  id: Course\n  parent: System.Device.Location.GeoCoordinate\n  langs:\n  - csharp\n  name: Course\n  nameWithType: GeoCoordinate.Course\n  fullName: System.Device.Location.GeoCoordinate.Course\n  type: Property\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  syntax:\n    content: public double Course { get; set; }\n    return:\n      type: System.Double\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Device.Location.GeoCoordinate.Equals(System.Device.Location.GeoCoordinate)\n  id: Equals(System.Device.Location.GeoCoordinate)\n  parent: System.Device.Location.GeoCoordinate\n  langs:\n  - csharp\n  name: Equals(GeoCoordinate)\n  nameWithType: GeoCoordinate.Equals(GeoCoordinate)\n  fullName: System.Device.Location.GeoCoordinate.Equals(GeoCoordinate)\n  type: Method\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  syntax:\n    content: public bool Equals (System.Device.Location.GeoCoordinate other);\n    parameters:\n    - id: other\n      type: System.Device.Location.GeoCoordinate\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Device.Location.GeoCoordinate.Equals*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Device.Location.GeoCoordinate.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Device.Location.GeoCoordinate\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: GeoCoordinate.Equals(Object)\n  fullName: System.Device.Location.GeoCoordinate.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Device.Location.GeoCoordinate.Equals*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Device.Location.GeoCoordinate.GetDistanceTo(System.Device.Location.GeoCoordinate)\n  id: GetDistanceTo(System.Device.Location.GeoCoordinate)\n  parent: System.Device.Location.GeoCoordinate\n  langs:\n  - csharp\n  name: GetDistanceTo(GeoCoordinate)\n  nameWithType: GeoCoordinate.GetDistanceTo(GeoCoordinate)\n  fullName: System.Device.Location.GeoCoordinate.GetDistanceTo(GeoCoordinate)\n  type: Method\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  syntax:\n    content: public double GetDistanceTo (System.Device.Location.GeoCoordinate other);\n    parameters:\n    - id: other\n      type: System.Device.Location.GeoCoordinate\n      description: Parameter description to be filled\n    return:\n      type: System.Double\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Device.Location.GeoCoordinate.GetHashCode\n  id: GetHashCode\n  parent: System.Device.Location.GeoCoordinate\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: GeoCoordinate.GetHashCode()\n  fullName: System.Device.Location.GeoCoordinate.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Device.Location.GeoCoordinate.HorizontalAccuracy\n  id: HorizontalAccuracy\n  parent: System.Device.Location.GeoCoordinate\n  langs:\n  - csharp\n  name: HorizontalAccuracy\n  nameWithType: GeoCoordinate.HorizontalAccuracy\n  fullName: System.Device.Location.GeoCoordinate.HorizontalAccuracy\n  type: Property\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  syntax:\n    content: public double HorizontalAccuracy { get; set; }\n    return:\n      type: System.Double\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Device.Location.GeoCoordinate.IsUnknown\n  id: IsUnknown\n  parent: System.Device.Location.GeoCoordinate\n  langs:\n  - csharp\n  name: IsUnknown\n  nameWithType: GeoCoordinate.IsUnknown\n  fullName: System.Device.Location.GeoCoordinate.IsUnknown\n  type: Property\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  syntax:\n    content: public bool IsUnknown { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Device.Location.GeoCoordinate.Latitude\n  id: Latitude\n  parent: System.Device.Location.GeoCoordinate\n  langs:\n  - csharp\n  name: Latitude\n  nameWithType: GeoCoordinate.Latitude\n  fullName: System.Device.Location.GeoCoordinate.Latitude\n  type: Property\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  syntax:\n    content: public double Latitude { get; set; }\n    return:\n      type: System.Double\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Device.Location.GeoCoordinate.Longitude\n  id: Longitude\n  parent: System.Device.Location.GeoCoordinate\n  langs:\n  - csharp\n  name: Longitude\n  nameWithType: GeoCoordinate.Longitude\n  fullName: System.Device.Location.GeoCoordinate.Longitude\n  type: Property\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  syntax:\n    content: public double Longitude { get; set; }\n    return:\n      type: System.Double\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Device.Location.GeoCoordinate.op_Equality(System.Device.Location.GeoCoordinate,System.Device.Location.GeoCoordinate)\n  id: op_Equality(System.Device.Location.GeoCoordinate,System.Device.Location.GeoCoordinate)\n  parent: System.Device.Location.GeoCoordinate\n  langs:\n  - csharp\n  name: op_Equality(GeoCoordinate,GeoCoordinate)\n  nameWithType: GeoCoordinate.op_Equality(GeoCoordinate,GeoCoordinate)\n  fullName: System.Device.Location.GeoCoordinate.op_Equality(GeoCoordinate,GeoCoordinate)\n  type: Operator\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  syntax:\n    content: public static bool op_Equality (System.Device.Location.GeoCoordinate left, System.Device.Location.GeoCoordinate right);\n    parameters:\n    - id: left\n      type: System.Device.Location.GeoCoordinate\n      description: Parameter description to be filled\n    - id: right\n      type: System.Device.Location.GeoCoordinate\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Device.Location.GeoCoordinate.op_Inequality(System.Device.Location.GeoCoordinate,System.Device.Location.GeoCoordinate)\n  id: op_Inequality(System.Device.Location.GeoCoordinate,System.Device.Location.GeoCoordinate)\n  parent: System.Device.Location.GeoCoordinate\n  langs:\n  - csharp\n  name: op_Inequality(GeoCoordinate,GeoCoordinate)\n  nameWithType: GeoCoordinate.op_Inequality(GeoCoordinate,GeoCoordinate)\n  fullName: System.Device.Location.GeoCoordinate.op_Inequality(GeoCoordinate,GeoCoordinate)\n  type: Operator\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  syntax:\n    content: public static bool op_Inequality (System.Device.Location.GeoCoordinate left, System.Device.Location.GeoCoordinate right);\n    parameters:\n    - id: left\n      type: System.Device.Location.GeoCoordinate\n      description: Parameter description to be filled\n    - id: right\n      type: System.Device.Location.GeoCoordinate\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Device.Location.GeoCoordinate.Speed\n  id: Speed\n  parent: System.Device.Location.GeoCoordinate\n  langs:\n  - csharp\n  name: Speed\n  nameWithType: GeoCoordinate.Speed\n  fullName: System.Device.Location.GeoCoordinate.Speed\n  type: Property\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  syntax:\n    content: public double Speed { get; set; }\n    return:\n      type: System.Double\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Device.Location.GeoCoordinate.ToString\n  id: ToString\n  parent: System.Device.Location.GeoCoordinate\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: GeoCoordinate.ToString()\n  fullName: System.Device.Location.GeoCoordinate.ToString()\n  type: Method\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Device.Location.GeoCoordinate.Unknown\n  id: Unknown\n  parent: System.Device.Location.GeoCoordinate\n  langs:\n  - csharp\n  name: Unknown\n  nameWithType: GeoCoordinate.Unknown\n  fullName: System.Device.Location.GeoCoordinate.Unknown\n  type: Field\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  syntax:\n    content: public static readonly System.Device.Location.GeoCoordinate Unknown;\n    return:\n      type: System.Device.Location.GeoCoordinate\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Device.Location.GeoCoordinate.VerticalAccuracy\n  id: VerticalAccuracy\n  parent: System.Device.Location.GeoCoordinate\n  langs:\n  - csharp\n  name: VerticalAccuracy\n  nameWithType: GeoCoordinate.VerticalAccuracy\n  fullName: System.Device.Location.GeoCoordinate.VerticalAccuracy\n  type: Property\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  syntax:\n    content: public double VerticalAccuracy { get; set; }\n    return:\n      type: System.Double\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Device.Location.GeoCoordinate.#ctor\n  parent: System.Device.Location.GeoCoordinate\n  isExternal: false\n  name: GeoCoordinate()\n  nameWithType: GeoCoordinate.GeoCoordinate()\n  fullName: System.Device.Location.GeoCoordinate.GeoCoordinate()\n- uid: System.Device.Location.GeoCoordinate.#ctor(System.Double,System.Double)\n  parent: System.Device.Location.GeoCoordinate\n  isExternal: false\n  name: GeoCoordinate(Double,Double)\n  nameWithType: GeoCoordinate.GeoCoordinate(Double,Double)\n  fullName: System.Device.Location.GeoCoordinate.GeoCoordinate(Double,Double)\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Device.Location.GeoCoordinate.#ctor(System.Double,System.Double,System.Double)\n  parent: System.Device.Location.GeoCoordinate\n  isExternal: false\n  name: GeoCoordinate(Double,Double,Double)\n  nameWithType: GeoCoordinate.GeoCoordinate(Double,Double,Double)\n  fullName: System.Device.Location.GeoCoordinate.GeoCoordinate(Double,Double,Double)\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Device.Location.GeoCoordinate.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)\n  parent: System.Device.Location.GeoCoordinate\n  isExternal: false\n  name: GeoCoordinate(Double,Double,Double,Double,Double,Double,Double)\n  nameWithType: GeoCoordinate.GeoCoordinate(Double,Double,Double,Double,Double,Double,Double)\n  fullName: System.Device.Location.GeoCoordinate.GeoCoordinate(Double,Double,Double,Double,Double,Double,Double)\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Device.Location.GeoCoordinate.Altitude\n  parent: System.Device.Location.GeoCoordinate\n  isExternal: false\n  name: Altitude\n  nameWithType: GeoCoordinate.Altitude\n  fullName: System.Device.Location.GeoCoordinate.Altitude\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Device.Location.GeoCoordinate.Course\n  parent: System.Device.Location.GeoCoordinate\n  isExternal: false\n  name: Course\n  nameWithType: GeoCoordinate.Course\n  fullName: System.Device.Location.GeoCoordinate.Course\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Device.Location.GeoCoordinate.Equals(System.Device.Location.GeoCoordinate)\n  parent: System.Device.Location.GeoCoordinate\n  isExternal: false\n  name: Equals(GeoCoordinate)\n  nameWithType: GeoCoordinate.Equals(GeoCoordinate)\n  fullName: System.Device.Location.GeoCoordinate.Equals(GeoCoordinate)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Device.Location.GeoCoordinate\n  parent: System.Device.Location\n  isExternal: false\n  name: GeoCoordinate\n  nameWithType: GeoCoordinate\n  fullName: System.Device.Location.GeoCoordinate\n- uid: System.Device.Location.GeoCoordinate.Equals(System.Object)\n  parent: System.Device.Location.GeoCoordinate\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: GeoCoordinate.Equals(Object)\n  fullName: System.Device.Location.GeoCoordinate.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Device.Location.GeoCoordinate.GetDistanceTo(System.Device.Location.GeoCoordinate)\n  parent: System.Device.Location.GeoCoordinate\n  isExternal: false\n  name: GetDistanceTo(GeoCoordinate)\n  nameWithType: GeoCoordinate.GetDistanceTo(GeoCoordinate)\n  fullName: System.Device.Location.GeoCoordinate.GetDistanceTo(GeoCoordinate)\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Device.Location.GeoCoordinate\n  parent: System.Device.Location\n  isExternal: false\n  name: GeoCoordinate\n  nameWithType: GeoCoordinate\n  fullName: System.Device.Location.GeoCoordinate\n- uid: System.Device.Location.GeoCoordinate.GetHashCode\n  parent: System.Device.Location.GeoCoordinate\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: GeoCoordinate.GetHashCode()\n  fullName: System.Device.Location.GeoCoordinate.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Device.Location.GeoCoordinate.HorizontalAccuracy\n  parent: System.Device.Location.GeoCoordinate\n  isExternal: false\n  name: HorizontalAccuracy\n  nameWithType: GeoCoordinate.HorizontalAccuracy\n  fullName: System.Device.Location.GeoCoordinate.HorizontalAccuracy\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Device.Location.GeoCoordinate.IsUnknown\n  parent: System.Device.Location.GeoCoordinate\n  isExternal: false\n  name: IsUnknown\n  nameWithType: GeoCoordinate.IsUnknown\n  fullName: System.Device.Location.GeoCoordinate.IsUnknown\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Device.Location.GeoCoordinate.Latitude\n  parent: System.Device.Location.GeoCoordinate\n  isExternal: false\n  name: Latitude\n  nameWithType: GeoCoordinate.Latitude\n  fullName: System.Device.Location.GeoCoordinate.Latitude\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Device.Location.GeoCoordinate.Longitude\n  parent: System.Device.Location.GeoCoordinate\n  isExternal: false\n  name: Longitude\n  nameWithType: GeoCoordinate.Longitude\n  fullName: System.Device.Location.GeoCoordinate.Longitude\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Device.Location.GeoCoordinate.op_Equality(System.Device.Location.GeoCoordinate,System.Device.Location.GeoCoordinate)\n  parent: System.Device.Location.GeoCoordinate\n  isExternal: false\n  name: op_Equality(GeoCoordinate,GeoCoordinate)\n  nameWithType: GeoCoordinate.op_Equality(GeoCoordinate,GeoCoordinate)\n  fullName: System.Device.Location.GeoCoordinate.op_Equality(GeoCoordinate,GeoCoordinate)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Device.Location.GeoCoordinate\n  parent: System.Device.Location\n  isExternal: false\n  name: GeoCoordinate\n  nameWithType: GeoCoordinate\n  fullName: System.Device.Location.GeoCoordinate\n- uid: System.Device.Location.GeoCoordinate\n  parent: System.Device.Location\n  isExternal: false\n  name: GeoCoordinate\n  nameWithType: GeoCoordinate\n  fullName: System.Device.Location.GeoCoordinate\n- uid: System.Device.Location.GeoCoordinate.op_Inequality(System.Device.Location.GeoCoordinate,System.Device.Location.GeoCoordinate)\n  parent: System.Device.Location.GeoCoordinate\n  isExternal: false\n  name: op_Inequality(GeoCoordinate,GeoCoordinate)\n  nameWithType: GeoCoordinate.op_Inequality(GeoCoordinate,GeoCoordinate)\n  fullName: System.Device.Location.GeoCoordinate.op_Inequality(GeoCoordinate,GeoCoordinate)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Device.Location.GeoCoordinate\n  parent: System.Device.Location\n  isExternal: false\n  name: GeoCoordinate\n  nameWithType: GeoCoordinate\n  fullName: System.Device.Location.GeoCoordinate\n- uid: System.Device.Location.GeoCoordinate\n  parent: System.Device.Location\n  isExternal: false\n  name: GeoCoordinate\n  nameWithType: GeoCoordinate\n  fullName: System.Device.Location.GeoCoordinate\n- uid: System.Device.Location.GeoCoordinate.Speed\n  parent: System.Device.Location.GeoCoordinate\n  isExternal: false\n  name: Speed\n  nameWithType: GeoCoordinate.Speed\n  fullName: System.Device.Location.GeoCoordinate.Speed\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Device.Location.GeoCoordinate.ToString\n  parent: System.Device.Location.GeoCoordinate\n  isExternal: false\n  name: ToString()\n  nameWithType: GeoCoordinate.ToString()\n  fullName: System.Device.Location.GeoCoordinate.ToString()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Device.Location.GeoCoordinate.Unknown\n  parent: System.Device.Location.GeoCoordinate\n  isExternal: false\n  name: Unknown\n  nameWithType: GeoCoordinate.Unknown\n  fullName: System.Device.Location.GeoCoordinate.Unknown\n- uid: System.Device.Location.GeoCoordinate\n  parent: System.Device.Location\n  isExternal: false\n  name: GeoCoordinate\n  nameWithType: GeoCoordinate\n  fullName: System.Device.Location.GeoCoordinate\n- uid: System.Device.Location.GeoCoordinate.VerticalAccuracy\n  parent: System.Device.Location.GeoCoordinate\n  isExternal: false\n  name: VerticalAccuracy\n  nameWithType: GeoCoordinate.VerticalAccuracy\n  fullName: System.Device.Location.GeoCoordinate.VerticalAccuracy\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Device.Location.GeoCoordinate.Equals*\n  parent: System.Device.Location.GeoCoordinate\n  isExternal: false\n  nameWithType: GeoCoordinate.\n"}