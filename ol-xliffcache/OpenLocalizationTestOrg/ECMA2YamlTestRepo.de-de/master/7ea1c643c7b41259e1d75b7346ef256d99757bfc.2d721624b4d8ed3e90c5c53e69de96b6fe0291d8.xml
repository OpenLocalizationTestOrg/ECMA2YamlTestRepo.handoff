{"nodes":[{"pos":[502,519],"content":"ParallelLoopState","needQuote":true,"needEscape":true,"nodes":[{"content":"ParallelLoopState","pos":[0,17]}]},{"pos":[1327,1334],"content":"Break()","needQuote":true,"needEscape":true,"nodes":[{"content":"Break()","pos":[0,7]}]},{"pos":[1790,1803],"content":"IsExceptional","needQuote":true,"needEscape":true,"nodes":[{"content":"IsExceptional","pos":[0,13]}]},{"pos":[2115,2149],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2352,2361],"content":"IsStopped","needQuote":true,"needEscape":true,"nodes":[{"content":"IsStopped","pos":[0,9]}]},{"pos":[2661,2695],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2920,2940],"content":"LowestBreakIteration","needQuote":true,"needEscape":true,"nodes":[{"content":"LowestBreakIteration","pos":[0,20]}]},{"pos":[3298,3332],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3569,3595],"content":"ShouldExitCurrentIteration","needQuote":true,"needEscape":true,"nodes":[{"content":"ShouldExitCurrentIteration","pos":[0,26]}]},{"pos":[3946,3980],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4173,4179],"content":"Stop()","needQuote":true,"needEscape":true,"nodes":[{"content":"Stop()","pos":[0,6]}]},{"pos":[4532,4545],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[4679,4686],"content":"Break()","needQuote":true,"needEscape":true,"nodes":[{"content":"Break()","pos":[0,7]}]},{"pos":[4931,4944],"content":"IsExceptional","needQuote":true,"needEscape":true,"nodes":[{"content":"IsExceptional","pos":[0,13]}]},{"pos":[5127,5134],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[5323,5332],"content":"IsStopped","needQuote":true,"needEscape":true,"nodes":[{"content":"IsStopped","pos":[0,9]}]},{"pos":[5507,5514],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[5714,5734],"content":"LowestBreakIteration","needQuote":true,"needEscape":true,"nodes":[{"content":"LowestBreakIteration","pos":[0,20]}]},{"pos":[5946,5961],"content":"Nullable<ph id=\"ph1\">&lt;Int64&gt;</ph>","needQuote":true,"needEscape":true,"source":"Nullable<Int64>"},{"pos":[6190,6216],"content":"ShouldExitCurrentIteration","needQuote":true,"needEscape":true,"nodes":[{"content":"ShouldExitCurrentIteration","pos":[0,26]}]},{"pos":[6425,6432],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[6616,6622],"content":"Stop()","needQuote":true,"needEscape":true,"nodes":[{"content":"Stop()","pos":[0,6]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.Tasks.ParallelLoopState\n  id: ParallelLoopState\n  children:\n  - System.Threading.Tasks.ParallelLoopState.Break\n  - System.Threading.Tasks.ParallelLoopState.IsExceptional\n  - System.Threading.Tasks.ParallelLoopState.IsStopped\n  - System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\n  - System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration\n  - System.Threading.Tasks.ParallelLoopState.Stop\n  langs:\n  - csharp\n  name: ParallelLoopState\n  nameWithType: ParallelLoopState\n  fullName: System.Threading.Tasks.ParallelLoopState\n  type: Class\n  syntax:\n    content: >-\n      [System.Diagnostics.DebuggerDisplay(\"ShouldExitCurrentIteration = {ShouldExitCurrentIteration}\")]\n\n      public class ParallelLoopState\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.Tasks.ParallelLoopState.Break\n  id: Break\n  parent: System.Threading.Tasks.ParallelLoopState\n  langs:\n  - csharp\n  name: Break()\n  nameWithType: ParallelLoopState.Break()\n  fullName: System.Threading.Tasks.ParallelLoopState.Break()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading.Tasks\n  syntax:\n    content: public void Break ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.Tasks.ParallelLoopState.IsExceptional\n  id: IsExceptional\n  parent: System.Threading.Tasks.ParallelLoopState\n  langs:\n  - csharp\n  name: IsExceptional\n  nameWithType: ParallelLoopState.IsExceptional\n  fullName: System.Threading.Tasks.ParallelLoopState.IsExceptional\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Threading.Tasks\n  syntax:\n    content: public bool IsExceptional { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.Tasks.ParallelLoopState.IsStopped\n  id: IsStopped\n  parent: System.Threading.Tasks.ParallelLoopState\n  langs:\n  - csharp\n  name: IsStopped\n  nameWithType: ParallelLoopState.IsStopped\n  fullName: System.Threading.Tasks.ParallelLoopState.IsStopped\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Threading.Tasks\n  syntax:\n    content: public bool IsStopped { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\n  id: LowestBreakIteration\n  parent: System.Threading.Tasks.ParallelLoopState\n  langs:\n  - csharp\n  name: LowestBreakIteration\n  nameWithType: ParallelLoopState.LowestBreakIteration\n  fullName: System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Threading.Tasks\n  syntax:\n    content: public Nullable<long> LowestBreakIteration { get; }\n    return:\n      type: System.Nullable{System.Int64}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration\n  id: ShouldExitCurrentIteration\n  parent: System.Threading.Tasks.ParallelLoopState\n  langs:\n  - csharp\n  name: ShouldExitCurrentIteration\n  nameWithType: ParallelLoopState.ShouldExitCurrentIteration\n  fullName: System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Threading.Tasks\n  syntax:\n    content: public bool ShouldExitCurrentIteration { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Threading.Tasks.ParallelLoopState.Stop\n  id: Stop\n  parent: System.Threading.Tasks.ParallelLoopState\n  langs:\n  - csharp\n  name: Stop()\n  nameWithType: ParallelLoopState.Stop()\n  fullName: System.Threading.Tasks.ParallelLoopState.Stop()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Threading.Tasks\n  syntax:\n    content: public void Stop ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Threading.Tasks.ParallelLoopState.Break\n  parent: System.Threading.Tasks.ParallelLoopState\n  isExternal: false\n  name: Break()\n  nameWithType: ParallelLoopState.Break()\n  fullName: System.Threading.Tasks.ParallelLoopState.Break()\n- uid: System.Threading.Tasks.ParallelLoopState.IsExceptional\n  parent: System.Threading.Tasks.ParallelLoopState\n  isExternal: false\n  name: IsExceptional\n  nameWithType: ParallelLoopState.IsExceptional\n  fullName: System.Threading.Tasks.ParallelLoopState.IsExceptional\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.Tasks.ParallelLoopState.IsStopped\n  parent: System.Threading.Tasks.ParallelLoopState\n  isExternal: false\n  name: IsStopped\n  nameWithType: ParallelLoopState.IsStopped\n  fullName: System.Threading.Tasks.ParallelLoopState.IsStopped\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\n  parent: System.Threading.Tasks.ParallelLoopState\n  isExternal: false\n  name: LowestBreakIteration\n  nameWithType: ParallelLoopState.LowestBreakIteration\n  fullName: System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\n- uid: System.Nullable{System.Int64}\n  parent: System\n  isExternal: false\n  name: Nullable<Int64>\n  nameWithType: Nullable<Int64>\n  fullName: System.Nullable<System.Int64>\n- uid: System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration\n  parent: System.Threading.Tasks.ParallelLoopState\n  isExternal: false\n  name: ShouldExitCurrentIteration\n  nameWithType: ParallelLoopState.ShouldExitCurrentIteration\n  fullName: System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.Tasks.ParallelLoopState.Stop\n  parent: System.Threading.Tasks.ParallelLoopState\n  isExternal: false\n  name: Stop()\n  nameWithType: ParallelLoopState.Stop()\n  fullName: System.Threading.Tasks.ParallelLoopState.Stop()\n"}