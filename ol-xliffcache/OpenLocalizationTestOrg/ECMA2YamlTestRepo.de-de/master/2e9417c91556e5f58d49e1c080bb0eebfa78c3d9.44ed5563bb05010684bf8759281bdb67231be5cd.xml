{"nodes":[{"pos":[1721,1724],"content":"DSA","needQuote":true,"needEscape":true,"nodes":[{"content":"DSA","pos":[0,3]}]},{"pos":[3156,3161],"content":"DSA()","needQuote":true,"needEscape":true,"nodes":[{"content":"DSA()","pos":[0,5]}]},{"pos":[3568,3576],"content":"Create()","needQuote":true,"needEscape":true,"nodes":[{"content":"Create()","pos":[0,8]}]},{"pos":[3920,3954],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4218,4232],"content":"Create(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Create(String)","pos":[0,14]}]},{"pos":[4586,4620],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4697,4731],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5013,5036],"content":"CreateSignature(Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"CreateSignature(Byte[])","pos":[0,23]}]},{"pos":[5393,5427],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5485,5519],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5752,5777],"content":"ExportParameters(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"ExportParameters(Boolean)","pos":[0,25]}]},{"pos":[6208,6242],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6329,6363],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6588,6609],"content":"FromXmlString(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"FromXmlString(String)","pos":[0,21]}]},{"pos":[6962,6996],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7311,7345],"content":"HashData(Stream,HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"HashData(Stream,HashAlgorithmName)","pos":[0,34]}]},{"pos":[7788,7822],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7925,7959],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8017,8051],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8467,8513],"content":"HashData(Byte[],Int32,Int32,HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"HashData(Byte[],Int32,Int32,HashAlgorithmName)","pos":[0,46]}]},{"pos":[8990,9024],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9086,9120],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9181,9215],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9318,9352],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9410,9444],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9788,9819],"content":"ImportParameters(DSAParameters)","needQuote":true,"needEscape":true,"nodes":[{"content":"ImportParameters(DSAParameters)","pos":[0,31]}]},{"pos":[10262,10296],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10605,10639],"content":"SignData(Byte[],HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"SignData(Byte[],HashAlgorithmName)","pos":[0,34]}]},{"pos":[11058,11092],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11195,11229],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11287,11321],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11691,11725],"content":"SignData(Stream,HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"SignData(Stream,HashAlgorithmName)","pos":[0,34]}]},{"pos":[12165,12199],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12302,12336],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12394,12428],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12844,12890],"content":"SignData(Byte[],Int32,Int32,HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"SignData(Byte[],Int32,Int32,HashAlgorithmName)","pos":[0,46]}]},{"pos":[13364,13398],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13460,13494],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13555,13589],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13692,13726],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13784,13818],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14096,14116],"content":"ToXmlString(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"ToXmlString(Boolean)","pos":[0,20]}]},{"pos":[14496,14530],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14588,14622],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14963,15006],"content":"VerifyData(Byte[],Byte[],HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"VerifyData(Byte[],Byte[],HashAlgorithmName)","pos":[0,43]}]},{"pos":[15461,15495],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15561,15595],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15698,15732],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15791,15825],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16229,16272],"content":"VerifyData(Stream,Byte[],HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"VerifyData(Stream,Byte[],HashAlgorithmName)","pos":[0,43]}]},{"pos":[16748,16782],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16848,16882],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16985,17019],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17078,17112],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17562,17617],"content":"VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)","pos":[0,55]}]},{"pos":[18127,18161],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18223,18257],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18318,18352],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18418,18452],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18555,18589],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18648,18682],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18996,19026],"content":"VerifySignature(Byte[],Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"VerifySignature(Byte[],Byte[])","pos":[0,30]}]},{"pos":[19416,19450],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19519,19553],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19612,19646],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19792,19840],"content":"System.Security.Cryptography.AsymmetricAlgorithm","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Security.Cryptography.AsymmetricAlgorithm","pos":[0,48]}]},{"pos":[19958,19963],"content":"DSA()","needQuote":true,"needEscape":true,"nodes":[{"content":"DSA()","pos":[0,5]}]},{"pos":[20159,20167],"content":"Create()","needQuote":true,"needEscape":true,"nodes":[{"content":"Create()","pos":[0,8]}]},{"pos":[20358,20361],"content":"DSA","needQuote":true,"needEscape":true,"nodes":[{"content":"DSA","pos":[0,3]}]},{"pos":[20560,20574],"content":"Create(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Create(String)","pos":[0,14]}]},{"pos":[20777,20780],"content":"DSA","needQuote":true,"needEscape":true,"nodes":[{"content":"DSA","pos":[0,3]}]},{"pos":[20912,20918],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[21110,21133],"content":"CreateSignature(Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"CreateSignature(Byte[])","pos":[0,23]}]},{"pos":[21311,21315],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[21427,21431],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[21623,21648],"content":"ExportParameters(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"ExportParameters(Boolean)","pos":[0,25]}]},{"pos":[21883,21896],"content":"DSAParameters","needQuote":true,"needEscape":true,"nodes":[{"content":"DSAParameters","pos":[0,13]}]},{"pos":[22049,22056],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[22248,22269],"content":"FromXmlString(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"FromXmlString(String)","pos":[0,21]}]},{"pos":[22445,22451],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[22686,22720],"content":"HashData(Stream,HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"HashData(Stream,HashAlgorithmName)","pos":[0,34]}]},{"pos":[22920,22924],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[23044,23050],"content":"Stream","needQuote":true,"needEscape":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[23224,23241],"content":"HashAlgorithmName","needQuote":true,"needEscape":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[23543,23589],"content":"HashData(Byte[],Int32,Int32,HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"HashData(Byte[],Int32,Int32,HashAlgorithmName)","pos":[0,46]}]},{"pos":[23813,23817],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[23929,23933],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[24046,24051],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[24164,24169],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[24338,24355],"content":"HashAlgorithmName","needQuote":true,"needEscape":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[24621,24652],"content":"ImportParameters(DSAParameters)","needQuote":true,"needEscape":true,"nodes":[{"content":"ImportParameters(DSAParameters)","pos":[0,31]}]},{"pos":[24899,24912],"content":"DSAParameters","needQuote":true,"needEscape":true,"nodes":[{"content":"DSAParameters","pos":[0,13]}]},{"pos":[25180,25214],"content":"SignData(Byte[],HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"SignData(Byte[],HashAlgorithmName)","pos":[0,34]}]},{"pos":[25414,25418],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[25530,25534],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[25703,25720],"content":"HashAlgorithmName","needQuote":true,"needEscape":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[25999,26033],"content":"SignData(Stream,HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"SignData(Stream,HashAlgorithmName)","pos":[0,34]}]},{"pos":[26233,26237],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[26357,26363],"content":"Stream","needQuote":true,"needEscape":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[26537,26554],"content":"HashAlgorithmName","needQuote":true,"needEscape":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[26856,26902],"content":"SignData(Byte[],Int32,Int32,HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"SignData(Byte[],Int32,Int32,HashAlgorithmName)","pos":[0,46]}]},{"pos":[27126,27130],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[27242,27246],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[27359,27364],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[27477,27482],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[27651,27668],"content":"HashAlgorithmName","needQuote":true,"needEscape":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[27901,27921],"content":"ToXmlString(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"ToXmlString(Boolean)","pos":[0,20]}]},{"pos":[28095,28101],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[28218,28225],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[28475,28518],"content":"VerifyData(Byte[],Byte[],HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"VerifyData(Byte[],Byte[],HashAlgorithmName)","pos":[0,43]}]},{"pos":[28739,28746],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[28862,28866],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[28978,28982],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[29151,29168],"content":"HashAlgorithmName","needQuote":true,"needEscape":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[29463,29506],"content":"VerifyData(Stream,Byte[],HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"VerifyData(Stream,Byte[],HashAlgorithmName)","pos":[0,43]}]},{"pos":[29727,29734],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[29858,29864],"content":"Stream","needQuote":true,"needEscape":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[29981,29985],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[30154,30171],"content":"HashAlgorithmName","needQuote":true,"needEscape":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[30489,30544],"content":"VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)","pos":[0,55]}]},{"pos":[30789,30796],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[30912,30916],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[31029,31034],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[31147,31152],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[31264,31268],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[31437,31454],"content":"HashAlgorithmName","needQuote":true,"needEscape":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[31704,31734],"content":"VerifySignature(Byte[],Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"VerifySignature(Byte[],Byte[])","pos":[0,30]}]},{"pos":[31929,31936],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[32052,32056],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[32168,32172],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.DSA\n  id: DSA\n  children:\n  - System.Security.Cryptography.DSA.#ctor\n  - System.Security.Cryptography.DSA.Create\n  - System.Security.Cryptography.DSA.Create(System.String)\n  - System.Security.Cryptography.DSA.CreateSignature(System.Byte[])\n  - System.Security.Cryptography.DSA.ExportParameters(System.Boolean)\n  - System.Security.Cryptography.DSA.FromXmlString(System.String)\n  - System.Security.Cryptography.DSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.ImportParameters(System.Security.Cryptography.DSAParameters)\n  - System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.ToXmlString(System.Boolean)\n  - System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])\n  langs:\n  - csharp\n  name: DSA\n  nameWithType: DSA\n  fullName: System.Security.Cryptography.DSA\n  type: Class\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class DSA : System.Security.Cryptography.AsymmetricAlgorithm\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.AsymmetricAlgorithm\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSA.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: DSA()\n  nameWithType: DSA.DSA()\n  fullName: System.Security.Cryptography.DSA.DSA()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected DSA ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSA.Create\n  id: Create\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: Create()\n  nameWithType: DSA.Create()\n  fullName: System.Security.Cryptography.DSA.Create()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static System.Security.Cryptography.DSA Create ();\n    parameters: []\n    return:\n      type: System.Security.Cryptography.DSA\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.DSA.Create*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSA.Create(System.String)\n  id: Create(System.String)\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: Create(String)\n  nameWithType: DSA.Create(String)\n  fullName: System.Security.Cryptography.DSA.Create(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static System.Security.Cryptography.DSA Create (string algName);\n    parameters:\n    - id: algName\n      type: System.String\n      description: Parameter description to be filled\n    return:\n      type: System.Security.Cryptography.DSA\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.DSA.Create*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSA.CreateSignature(System.Byte[])\n  id: CreateSignature(System.Byte[])\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: CreateSignature(Byte[])\n  nameWithType: DSA.CreateSignature(Byte[])\n  fullName: System.Security.Cryptography.DSA.CreateSignature(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public abstract byte[] CreateSignature (byte[] rgbHash);\n    parameters:\n    - id: rgbHash\n      type: System.Byte[]\n      description: Parameter description to be filled\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSA.ExportParameters(System.Boolean)\n  id: ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: ExportParameters(Boolean)\n  nameWithType: DSA.ExportParameters(Boolean)\n  fullName: System.Security.Cryptography.DSA.ExportParameters(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public abstract System.Security.Cryptography.DSAParameters ExportParameters (bool includePrivateParameters);\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: Parameter description to be filled\n    return:\n      type: System.Security.Cryptography.DSAParameters\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSA.FromXmlString(System.String)\n  id: FromXmlString(System.String)\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: FromXmlString(String)\n  nameWithType: DSA.FromXmlString(String)\n  fullName: System.Security.Cryptography.DSA.FromXmlString(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override void FromXmlString (string xmlString);\n    parameters:\n    - id: xmlString\n      type: System.String\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: HashData(Stream,HashAlgorithmName)\n  nameWithType: DSA.HashData(Stream,HashAlgorithmName)\n  fullName: System.Security.Cryptography.DSA.HashData(Stream,HashAlgorithmName)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected virtual byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: Parameter description to be filled\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: Parameter description to be filled\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.DSA.HashData*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  nameWithType: DSA.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  fullName: System.Security.Cryptography.DSA.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected virtual byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: offset\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: Parameter description to be filled\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.DSA.HashData*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSA.ImportParameters(System.Security.Cryptography.DSAParameters)\n  id: ImportParameters(System.Security.Cryptography.DSAParameters)\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: ImportParameters(DSAParameters)\n  nameWithType: DSA.ImportParameters(DSAParameters)\n  fullName: System.Security.Cryptography.DSA.ImportParameters(DSAParameters)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public abstract void ImportParameters (System.Security.Cryptography.DSAParameters parameters);\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.DSAParameters\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  id: SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: SignData(Byte[],HashAlgorithmName)\n  nameWithType: DSA.SignData(Byte[],HashAlgorithmName)\n  fullName: System.Security.Cryptography.DSA.SignData(Byte[],HashAlgorithmName)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public byte[] SignData (byte[] data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: Parameter description to be filled\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.DSA.SignData*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  id: SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: SignData(Stream,HashAlgorithmName)\n  nameWithType: DSA.SignData(Stream,HashAlgorithmName)\n  fullName: System.Security.Cryptography.DSA.SignData(Stream,HashAlgorithmName)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual byte[] SignData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: Parameter description to be filled\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: Parameter description to be filled\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.DSA.SignData*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  id: SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: SignData(Byte[],Int32,Int32,HashAlgorithmName)\n  nameWithType: DSA.SignData(Byte[],Int32,Int32,HashAlgorithmName)\n  fullName: System.Security.Cryptography.DSA.SignData(Byte[],Int32,Int32,HashAlgorithmName)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual byte[] SignData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: offset\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: Parameter description to be filled\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.DSA.SignData*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSA.ToXmlString(System.Boolean)\n  id: ToXmlString(System.Boolean)\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: ToXmlString(Boolean)\n  nameWithType: DSA.ToXmlString(Boolean)\n  fullName: System.Security.Cryptography.DSA.ToXmlString(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override string ToXmlString (bool includePrivateParameters);\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: Parameter description to be filled\n    return:\n      type: System.String\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  id: VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: VerifyData(Byte[],Byte[],HashAlgorithmName)\n  nameWithType: DSA.VerifyData(Byte[],Byte[],HashAlgorithmName)\n  fullName: System.Security.Cryptography.DSA.VerifyData(Byte[],Byte[],HashAlgorithmName)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public bool VerifyData (byte[] data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: signature\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.DSA.VerifyData*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  id: VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: VerifyData(Stream,Byte[],HashAlgorithmName)\n  nameWithType: DSA.VerifyData(Stream,Byte[],HashAlgorithmName)\n  fullName: System.Security.Cryptography.DSA.VerifyData(Stream,Byte[],HashAlgorithmName)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual bool VerifyData (System.IO.Stream data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: Parameter description to be filled\n    - id: signature\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.DSA.VerifyData*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  id: VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)\n  nameWithType: DSA.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)\n  fullName: System.Security.Cryptography.DSA.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual bool VerifyData (byte[] data, int offset, int count, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: offset\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: signature\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.DSA.VerifyData*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])\n  id: VerifySignature(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.DSA\n  langs:\n  - csharp\n  name: VerifySignature(Byte[],Byte[])\n  nameWithType: DSA.VerifySignature(Byte[],Byte[])\n  fullName: System.Security.Cryptography.DSA.VerifySignature(Byte[],Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public abstract bool VerifySignature (byte[] rgbHash, byte[] rgbSignature);\n    parameters:\n    - id: rgbHash\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: rgbSignature\n      type: System.Byte[]\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: System.Security.Cryptography.AsymmetricAlgorithm\n- uid: System.Security.Cryptography.DSA.#ctor\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: DSA()\n  nameWithType: DSA.DSA()\n  fullName: System.Security.Cryptography.DSA.DSA()\n- uid: System.Security.Cryptography.DSA.Create\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: Create()\n  nameWithType: DSA.Create()\n  fullName: System.Security.Cryptography.DSA.Create()\n- uid: System.Security.Cryptography.DSA\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: DSA\n  nameWithType: DSA\n  fullName: System.Security.Cryptography.DSA\n- uid: System.Security.Cryptography.DSA.Create(System.String)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: Create(String)\n  nameWithType: DSA.Create(String)\n  fullName: System.Security.Cryptography.DSA.Create(String)\n- uid: System.Security.Cryptography.DSA\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: DSA\n  nameWithType: DSA\n  fullName: System.Security.Cryptography.DSA\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.DSA.CreateSignature(System.Byte[])\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: CreateSignature(Byte[])\n  nameWithType: DSA.CreateSignature(Byte[])\n  fullName: System.Security.Cryptography.DSA.CreateSignature(Byte[])\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.DSA.ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: ExportParameters(Boolean)\n  nameWithType: DSA.ExportParameters(Boolean)\n  fullName: System.Security.Cryptography.DSA.ExportParameters(Boolean)\n- uid: System.Security.Cryptography.DSAParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: DSAParameters\n  nameWithType: DSAParameters\n  fullName: System.Security.Cryptography.DSAParameters\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.DSA.FromXmlString(System.String)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: FromXmlString(String)\n  nameWithType: DSA.FromXmlString(String)\n  fullName: System.Security.Cryptography.DSA.FromXmlString(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.DSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: HashData(Stream,HashAlgorithmName)\n  nameWithType: DSA.HashData(Stream,HashAlgorithmName)\n  fullName: System.Security.Cryptography.DSA.HashData(Stream,HashAlgorithmName)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.DSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  nameWithType: DSA.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  fullName: System.Security.Cryptography.DSA.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.DSA.ImportParameters(System.Security.Cryptography.DSAParameters)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: ImportParameters(DSAParameters)\n  nameWithType: DSA.ImportParameters(DSAParameters)\n  fullName: System.Security.Cryptography.DSA.ImportParameters(DSAParameters)\n- uid: System.Security.Cryptography.DSAParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: DSAParameters\n  nameWithType: DSAParameters\n  fullName: System.Security.Cryptography.DSAParameters\n- uid: System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: SignData(Byte[],HashAlgorithmName)\n  nameWithType: DSA.SignData(Byte[],HashAlgorithmName)\n  fullName: System.Security.Cryptography.DSA.SignData(Byte[],HashAlgorithmName)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: SignData(Stream,HashAlgorithmName)\n  nameWithType: DSA.SignData(Stream,HashAlgorithmName)\n  fullName: System.Security.Cryptography.DSA.SignData(Stream,HashAlgorithmName)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: SignData(Byte[],Int32,Int32,HashAlgorithmName)\n  nameWithType: DSA.SignData(Byte[],Int32,Int32,HashAlgorithmName)\n  fullName: System.Security.Cryptography.DSA.SignData(Byte[],Int32,Int32,HashAlgorithmName)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.DSA.ToXmlString(System.Boolean)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: ToXmlString(Boolean)\n  nameWithType: DSA.ToXmlString(Boolean)\n  fullName: System.Security.Cryptography.DSA.ToXmlString(Boolean)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: VerifyData(Byte[],Byte[],HashAlgorithmName)\n  nameWithType: DSA.VerifyData(Byte[],Byte[],HashAlgorithmName)\n  fullName: System.Security.Cryptography.DSA.VerifyData(Byte[],Byte[],HashAlgorithmName)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: VerifyData(Stream,Byte[],HashAlgorithmName)\n  nameWithType: DSA.VerifyData(Stream,Byte[],HashAlgorithmName)\n  fullName: System.Security.Cryptography.DSA.VerifyData(Stream,Byte[],HashAlgorithmName)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)\n  nameWithType: DSA.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)\n  fullName: System.Security.Cryptography.DSA.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: VerifySignature(Byte[],Byte[])\n  nameWithType: DSA.VerifySignature(Byte[],Byte[])\n  fullName: System.Security.Cryptography.DSA.VerifySignature(Byte[],Byte[])\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.DSA.Create*\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  nameWithType: DSA.\n- uid: System.Security.Cryptography.DSA.HashData*\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  nameWithType: DSA.\n- uid: System.Security.Cryptography.DSA.SignData*\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  nameWithType: DSA.\n- uid: System.Security.Cryptography.DSA.VerifyData*\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  nameWithType: DSA.\n"}