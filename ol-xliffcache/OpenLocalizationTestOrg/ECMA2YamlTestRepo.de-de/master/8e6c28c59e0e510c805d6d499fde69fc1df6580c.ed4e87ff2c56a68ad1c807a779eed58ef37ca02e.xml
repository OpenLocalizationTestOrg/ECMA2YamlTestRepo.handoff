{"nodes":[{"pos":[2071,2076],"content":"ECDsa","needQuote":true,"needEscape":true,"nodes":[{"content":"ECDsa","pos":[0,5]}]},{"pos":[3471,3478],"content":"ECDsa()","needQuote":true,"needEscape":true,"nodes":[{"content":"ECDsa()","pos":[0,7]}]},{"pos":[3902,3910],"content":"Create()","needQuote":true,"needEscape":true,"nodes":[{"content":"Create()","pos":[0,8]}]},{"pos":[4265,4299],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4615,4630],"content":"Create(ECCurve)","needQuote":true,"needEscape":true,"nodes":[{"content":"Create(ECCurve)","pos":[0,15]}]},{"pos":[5044,5078],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5157,5191],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5517,5537],"content":"Create(ECParameters)","needQuote":true,"needEscape":true,"nodes":[{"content":"Create(ECParameters)","pos":[0,20]}]},{"pos":[5981,6015],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6094,6128],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6398,6412],"content":"Create(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Create(String)","pos":[0,14]}]},{"pos":[6779,6813],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6892,6926],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7234,7267],"content":"ExportExplicitParameters(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"ExportExplicitParameters(Boolean)","pos":[0,33]}]},{"pos":[7727,7761],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7847,7881],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8118,8143],"content":"ExportParameters(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"ExportParameters(Boolean)","pos":[0,25]}]},{"pos":[8579,8613],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8699,8733],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9004,9024],"content":"GenerateKey(ECCurve)","needQuote":true,"needEscape":true,"nodes":[{"content":"GenerateKey(ECCurve)","pos":[0,20]}]},{"pos":[9424,9458],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9777,9811],"content":"HashData(Stream,HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"HashData(Stream,HashAlgorithmName)","pos":[0,34]}]},{"pos":[10261,10295],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10398,10432],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10490,10524],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10946,10992],"content":"HashData(Byte[],Int32,Int32,HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"HashData(Byte[],Int32,Int32,HashAlgorithmName)","pos":[0,46]}]},{"pos":[11476,11510],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11572,11606],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11667,11701],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11804,11838],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11896,11930],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12278,12308],"content":"ImportParameters(ECParameters)","needQuote":true,"needEscape":true,"nodes":[{"content":"ImportParameters(ECParameters)","pos":[0,30]}]},{"pos":[12753,12787],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13000,13020],"content":"KeyExchangeAlgorithm","needQuote":true,"needEscape":true,"nodes":[{"content":"KeyExchangeAlgorithm","pos":[0,20]}]},{"pos":[13354,13388],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13597,13615],"content":"SignatureAlgorithm","needQuote":true,"needEscape":true,"nodes":[{"content":"SignatureAlgorithm","pos":[0,18]}]},{"pos":[13943,13977],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14290,14324],"content":"SignData(Byte[],HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"SignData(Byte[],HashAlgorithmName)","pos":[0,34]}]},{"pos":[14758,14792],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14895,14929],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14987,15021],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15397,15431],"content":"SignData(Stream,HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"SignData(Stream,HashAlgorithmName)","pos":[0,34]}]},{"pos":[15878,15912],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16015,16049],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16107,16141],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16563,16609],"content":"SignData(Byte[],Int32,Int32,HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"SignData(Byte[],Int32,Int32,HashAlgorithmName)","pos":[0,46]}]},{"pos":[17090,17124],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17186,17220],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17281,17315],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17418,17452],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17510,17544],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17820,17836],"content":"SignHash(Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"SignHash(Byte[])","pos":[0,16]}]},{"pos":[18173,18207],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18265,18299],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18644,18687],"content":"VerifyData(Byte[],Byte[],HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"VerifyData(Byte[],Byte[],HashAlgorithmName)","pos":[0,43]}]},{"pos":[19149,19183],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19249,19283],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19386,19420],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19479,19513],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19923,19966],"content":"VerifyData(Stream,Byte[],HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"VerifyData(Stream,Byte[],HashAlgorithmName)","pos":[0,43]}]},{"pos":[20441,20475],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20541,20575],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20678,20712],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20771,20805],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21261,21316],"content":"VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)","pos":[0,55]}]},{"pos":[21833,21867],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21929,21963],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22024,22058],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22124,22158],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22261,22295],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22354,22388],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22698,22723],"content":"VerifyHash(Byte[],Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"VerifyHash(Byte[],Byte[])","pos":[0,25]}]},{"pos":[23096,23130],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[23196,23230],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[23289,23323],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[23469,23517],"content":"System.Security.Cryptography.AsymmetricAlgorithm","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Security.Cryptography.AsymmetricAlgorithm","pos":[0,48]}]},{"pos":[23639,23646],"content":"ECDsa()","needQuote":true,"needEscape":true,"nodes":[{"content":"ECDsa()","pos":[0,7]}]},{"pos":[23854,23862],"content":"Create()","needQuote":true,"needEscape":true,"nodes":[{"content":"Create()","pos":[0,8]}]},{"pos":[24059,24064],"content":"ECDsa","needQuote":true,"needEscape":true,"nodes":[{"content":"ECDsa","pos":[0,5]}]},{"pos":[24294,24309],"content":"Create(ECCurve)","needQuote":true,"needEscape":true,"nodes":[{"content":"Create(ECCurve)","pos":[0,15]}]},{"pos":[24520,24525],"content":"ECDsa","needQuote":true,"needEscape":true,"nodes":[{"content":"ECDsa","pos":[0,5]}]},{"pos":[24706,24713],"content":"ECCurve","needQuote":true,"needEscape":true,"nodes":[{"content":"ECCurve","pos":[0,7]}]},{"pos":[24952,24972],"content":"Create(ECParameters)","needQuote":true,"needEscape":true,"nodes":[{"content":"Create(ECParameters)","pos":[0,20]}]},{"pos":[25193,25198],"content":"ECDsa","needQuote":true,"needEscape":true,"nodes":[{"content":"ECDsa","pos":[0,5]}]},{"pos":[25384,25396],"content":"ECParameters","needQuote":true,"needEscape":true,"nodes":[{"content":"ECParameters","pos":[0,12]}]},{"pos":[25617,25631],"content":"Create(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Create(String)","pos":[0,14]}]},{"pos":[25840,25845],"content":"ECDsa","needQuote":true,"needEscape":true,"nodes":[{"content":"ECDsa","pos":[0,5]}]},{"pos":[25981,25987],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[26193,26226],"content":"ExportExplicitParameters(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"ExportExplicitParameters(Boolean)","pos":[0,33]}]},{"pos":[26480,26492],"content":"ECParameters","needQuote":true,"needEscape":true,"nodes":[{"content":"ECParameters","pos":[0,12]}]},{"pos":[26643,26650],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[26850,26875],"content":"ExportParameters(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"ExportParameters(Boolean)","pos":[0,25]}]},{"pos":[27113,27125],"content":"ECParameters","needQuote":true,"needEscape":true,"nodes":[{"content":"ECParameters","pos":[0,12]}]},{"pos":[27276,27283],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[27500,27520],"content":"GenerateKey(ECCurve)","needQuote":true,"needEscape":true,"nodes":[{"content":"GenerateKey(ECCurve)","pos":[0,20]}]},{"pos":[27743,27750],"content":"ECCurve","needQuote":true,"needEscape":true,"nodes":[{"content":"ECCurve","pos":[0,7]}]},{"pos":[28013,28047],"content":"HashData(Stream,HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"HashData(Stream,HashAlgorithmName)","pos":[0,34]}]},{"pos":[28251,28255],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[28375,28381],"content":"Stream","needQuote":true,"needEscape":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[28555,28572],"content":"HashAlgorithmName","needQuote":true,"needEscape":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[28878,28924],"content":"HashData(Byte[],Int32,Int32,HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"HashData(Byte[],Int32,Int32,HashAlgorithmName)","pos":[0,46]}]},{"pos":[29152,29156],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[29268,29272],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[29385,29390],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[29503,29508],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[29677,29694],"content":"HashAlgorithmName","needQuote":true,"needEscape":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[29963,29993],"content":"ImportParameters(ECParameters)","needQuote":true,"needEscape":true,"nodes":[{"content":"ImportParameters(ECParameters)","pos":[0,30]}]},{"pos":[30241,30253],"content":"ECParameters","needQuote":true,"needEscape":true,"nodes":[{"content":"ECParameters","pos":[0,12]}]},{"pos":[30473,30493],"content":"KeyExchangeAlgorithm","needQuote":true,"needEscape":true,"nodes":[{"content":"KeyExchangeAlgorithm","pos":[0,20]}]},{"pos":[30671,30677],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[30861,30879],"content":"SignatureAlgorithm","needQuote":true,"needEscape":true,"nodes":[{"content":"SignatureAlgorithm","pos":[0,18]}]},{"pos":[31053,31059],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[31295,31329],"content":"SignData(Byte[],HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"SignData(Byte[],HashAlgorithmName)","pos":[0,34]}]},{"pos":[31533,31537],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[31649,31653],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[31822,31839],"content":"HashAlgorithmName","needQuote":true,"needEscape":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[32122,32156],"content":"SignData(Stream,HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"SignData(Stream,HashAlgorithmName)","pos":[0,34]}]},{"pos":[32360,32364],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[32484,32490],"content":"Stream","needQuote":true,"needEscape":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[32664,32681],"content":"HashAlgorithmName","needQuote":true,"needEscape":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[32987,33033],"content":"SignData(Byte[],Int32,Int32,HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"SignData(Byte[],Int32,Int32,HashAlgorithmName)","pos":[0,46]}]},{"pos":[33261,33265],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[33377,33381],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[33494,33499],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[33612,33617],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[33786,33803],"content":"HashAlgorithmName","needQuote":true,"needEscape":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[34036,34052],"content":"SignHash(Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"SignHash(Byte[])","pos":[0,16]}]},{"pos":[34220,34224],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[34336,34340],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[34590,34633],"content":"VerifyData(Byte[],Byte[],HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"VerifyData(Byte[],Byte[],HashAlgorithmName)","pos":[0,43]}]},{"pos":[34858,34865],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[34981,34985],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[35097,35101],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[35270,35287],"content":"HashAlgorithmName","needQuote":true,"needEscape":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[35586,35629],"content":"VerifyData(Stream,Byte[],HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"VerifyData(Stream,Byte[],HashAlgorithmName)","pos":[0,43]}]},{"pos":[35854,35861],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[35985,35991],"content":"Stream","needQuote":true,"needEscape":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[36108,36112],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[36281,36298],"content":"HashAlgorithmName","needQuote":true,"needEscape":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[36620,36675],"content":"VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)","needQuote":true,"needEscape":true,"nodes":[{"content":"VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)","pos":[0,55]}]},{"pos":[36924,36931],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[37047,37051],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[37164,37169],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[37282,37287],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[37399,37403],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[37572,37589],"content":"HashAlgorithmName","needQuote":true,"needEscape":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[37838,37863],"content":"VerifyHash(Byte[],Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"VerifyHash(Byte[],Byte[])","pos":[0,25]}]},{"pos":[38052,38059],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[38175,38179],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[38291,38295],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.ECDsa\n  id: ECDsa\n  children:\n  - System.Security.Cryptography.ECDsa.#ctor\n  - System.Security.Cryptography.ECDsa.Create\n  - System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)\n  - System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)\n  - System.Security.Cryptography.ECDsa.Create(System.String)\n  - System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)\n  - System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)\n  - System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)\n  - System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)\n  - System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm\n  - System.Security.Cryptography.ECDsa.SignatureAlgorithm\n  - System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.SignHash(System.Byte[])\n  - System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])\n  langs:\n  - csharp\n  name: ECDsa\n  nameWithType: ECDsa\n  fullName: System.Security.Cryptography.ECDsa\n  type: Class\n  syntax:\n    content: 'public abstract class ECDsa : System.Security.Cryptography.AsymmetricAlgorithm'\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.AsymmetricAlgorithm\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  - System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.ECDsa.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: ECDsa()\n  nameWithType: ECDsa.ECDsa()\n  fullName: System.Security.Cryptography.ECDsa.ECDsa()\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected ECDsa ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.ECDsa.Create\n  id: Create\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: Create()\n  nameWithType: ECDsa.Create()\n  fullName: System.Security.Cryptography.ECDsa.Create()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static System.Security.Cryptography.ECDsa Create ();\n    parameters: []\n    return:\n      type: System.Security.Cryptography.ECDsa\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.ECDsa.Create*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)\n  id: Create(System.Security.Cryptography.ECCurve)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: Create(ECCurve)\n  nameWithType: ECDsa.Create(ECCurve)\n  fullName: System.Security.Cryptography.ECDsa.Create(ECCurve)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static System.Security.Cryptography.ECDsa Create (System.Security.Cryptography.ECCurve curve);\n    parameters:\n    - id: curve\n      type: System.Security.Cryptography.ECCurve\n      description: Parameter description to be filled\n    return:\n      type: System.Security.Cryptography.ECDsa\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.ECDsa.Create*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)\n  id: Create(System.Security.Cryptography.ECParameters)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: Create(ECParameters)\n  nameWithType: ECDsa.Create(ECParameters)\n  fullName: System.Security.Cryptography.ECDsa.Create(ECParameters)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static System.Security.Cryptography.ECDsa Create (System.Security.Cryptography.ECParameters parameters);\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.ECParameters\n      description: Parameter description to be filled\n    return:\n      type: System.Security.Cryptography.ECDsa\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.ECDsa.Create*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.ECDsa.Create(System.String)\n  id: Create(System.String)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: Create(String)\n  nameWithType: ECDsa.Create(String)\n  fullName: System.Security.Cryptography.ECDsa.Create(String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static System.Security.Cryptography.ECDsa Create (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: Parameter description to be filled\n    return:\n      type: System.Security.Cryptography.ECDsa\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.ECDsa.Create*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)\n  id: ExportExplicitParameters(System.Boolean)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: ExportExplicitParameters(Boolean)\n  nameWithType: ECDsa.ExportExplicitParameters(Boolean)\n  fullName: System.Security.Cryptography.ECDsa.ExportExplicitParameters(Boolean)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual System.Security.Cryptography.ECParameters ExportExplicitParameters (bool includePrivateParameters);\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: Parameter description to be filled\n    return:\n      type: System.Security.Cryptography.ECParameters\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)\n  id: ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: ExportParameters(Boolean)\n  nameWithType: ECDsa.ExportParameters(Boolean)\n  fullName: System.Security.Cryptography.ECDsa.ExportParameters(Boolean)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual System.Security.Cryptography.ECParameters ExportParameters (bool includePrivateParameters);\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: Parameter description to be filled\n    return:\n      type: System.Security.Cryptography.ECParameters\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)\n  id: GenerateKey(System.Security.Cryptography.ECCurve)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: GenerateKey(ECCurve)\n  nameWithType: ECDsa.GenerateKey(ECCurve)\n  fullName: System.Security.Cryptography.ECDsa.GenerateKey(ECCurve)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual void GenerateKey (System.Security.Cryptography.ECCurve curve);\n    parameters:\n    - id: curve\n      type: System.Security.Cryptography.ECCurve\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: HashData(Stream,HashAlgorithmName)\n  nameWithType: ECDsa.HashData(Stream,HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.HashData(Stream,HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected virtual byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: Parameter description to be filled\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: Parameter description to be filled\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.ECDsa.HashData*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  nameWithType: ECDsa.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected virtual byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: offset\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: Parameter description to be filled\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.ECDsa.HashData*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)\n  id: ImportParameters(System.Security.Cryptography.ECParameters)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: ImportParameters(ECParameters)\n  nameWithType: ECDsa.ImportParameters(ECParameters)\n  fullName: System.Security.Cryptography.ECDsa.ImportParameters(ECParameters)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual void ImportParameters (System.Security.Cryptography.ECParameters parameters);\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.ECParameters\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm\n  id: KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: KeyExchangeAlgorithm\n  nameWithType: ECDsa.KeyExchangeAlgorithm\n  fullName: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override string KeyExchangeAlgorithm { get; }\n    return:\n      type: System.String\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.ECDsa.SignatureAlgorithm\n  id: SignatureAlgorithm\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: SignatureAlgorithm\n  nameWithType: ECDsa.SignatureAlgorithm\n  fullName: System.Security.Cryptography.ECDsa.SignatureAlgorithm\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override string SignatureAlgorithm { get; }\n    return:\n      type: System.String\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  id: SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: SignData(Byte[],HashAlgorithmName)\n  nameWithType: ECDsa.SignData(Byte[],HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.SignData(Byte[],HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual byte[] SignData (byte[] data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: Parameter description to be filled\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.ECDsa.SignData*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  id: SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: SignData(Stream,HashAlgorithmName)\n  nameWithType: ECDsa.SignData(Stream,HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.SignData(Stream,HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual byte[] SignData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: Parameter description to be filled\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: Parameter description to be filled\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.ECDsa.SignData*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  id: SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: SignData(Byte[],Int32,Int32,HashAlgorithmName)\n  nameWithType: ECDsa.SignData(Byte[],Int32,Int32,HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.SignData(Byte[],Int32,Int32,HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual byte[] SignData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: offset\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: Parameter description to be filled\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.ECDsa.SignData*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.ECDsa.SignHash(System.Byte[])\n  id: SignHash(System.Byte[])\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: SignHash(Byte[])\n  nameWithType: ECDsa.SignHash(Byte[])\n  fullName: System.Security.Cryptography.ECDsa.SignHash(Byte[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public abstract byte[] SignHash (byte[] hash);\n    parameters:\n    - id: hash\n      type: System.Byte[]\n      description: Parameter description to be filled\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  id: VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: VerifyData(Byte[],Byte[],HashAlgorithmName)\n  nameWithType: ECDsa.VerifyData(Byte[],Byte[],HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.VerifyData(Byte[],Byte[],HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public bool VerifyData (byte[] data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: signature\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.ECDsa.VerifyData*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  id: VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: VerifyData(Stream,Byte[],HashAlgorithmName)\n  nameWithType: ECDsa.VerifyData(Stream,Byte[],HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.VerifyData(Stream,Byte[],HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public bool VerifyData (System.IO.Stream data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: Parameter description to be filled\n    - id: signature\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.ECDsa.VerifyData*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  id: VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)\n  nameWithType: ECDsa.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual bool VerifyData (byte[] data, int offset, int count, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: offset\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: signature\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.ECDsa.VerifyData*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])\n  id: VerifyHash(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  name: VerifyHash(Byte[],Byte[])\n  nameWithType: ECDsa.VerifyHash(Byte[],Byte[])\n  fullName: System.Security.Cryptography.ECDsa.VerifyHash(Byte[],Byte[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public abstract bool VerifyHash (byte[] hash, byte[] signature);\n    parameters:\n    - id: hash\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: signature\n      type: System.Byte[]\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: System.Security.Cryptography.AsymmetricAlgorithm\n- uid: System.Security.Cryptography.ECDsa.#ctor\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: ECDsa()\n  nameWithType: ECDsa.ECDsa()\n  fullName: System.Security.Cryptography.ECDsa.ECDsa()\n- uid: System.Security.Cryptography.ECDsa.Create\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: Create()\n  nameWithType: ECDsa.Create()\n  fullName: System.Security.Cryptography.ECDsa.Create()\n- uid: System.Security.Cryptography.ECDsa\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECDsa\n  nameWithType: ECDsa\n  fullName: System.Security.Cryptography.ECDsa\n- uid: System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: Create(ECCurve)\n  nameWithType: ECDsa.Create(ECCurve)\n  fullName: System.Security.Cryptography.ECDsa.Create(ECCurve)\n- uid: System.Security.Cryptography.ECDsa\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECDsa\n  nameWithType: ECDsa\n  fullName: System.Security.Cryptography.ECDsa\n- uid: System.Security.Cryptography.ECCurve\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECCurve\n  nameWithType: ECCurve\n  fullName: System.Security.Cryptography.ECCurve\n- uid: System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: Create(ECParameters)\n  nameWithType: ECDsa.Create(ECParameters)\n  fullName: System.Security.Cryptography.ECDsa.Create(ECParameters)\n- uid: System.Security.Cryptography.ECDsa\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECDsa\n  nameWithType: ECDsa\n  fullName: System.Security.Cryptography.ECDsa\n- uid: System.Security.Cryptography.ECParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECParameters\n  nameWithType: ECParameters\n  fullName: System.Security.Cryptography.ECParameters\n- uid: System.Security.Cryptography.ECDsa.Create(System.String)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: Create(String)\n  nameWithType: ECDsa.Create(String)\n  fullName: System.Security.Cryptography.ECDsa.Create(String)\n- uid: System.Security.Cryptography.ECDsa\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECDsa\n  nameWithType: ECDsa\n  fullName: System.Security.Cryptography.ECDsa\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: ExportExplicitParameters(Boolean)\n  nameWithType: ECDsa.ExportExplicitParameters(Boolean)\n  fullName: System.Security.Cryptography.ECDsa.ExportExplicitParameters(Boolean)\n- uid: System.Security.Cryptography.ECParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECParameters\n  nameWithType: ECParameters\n  fullName: System.Security.Cryptography.ECParameters\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: ExportParameters(Boolean)\n  nameWithType: ECDsa.ExportParameters(Boolean)\n  fullName: System.Security.Cryptography.ECDsa.ExportParameters(Boolean)\n- uid: System.Security.Cryptography.ECParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECParameters\n  nameWithType: ECParameters\n  fullName: System.Security.Cryptography.ECParameters\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: GenerateKey(ECCurve)\n  nameWithType: ECDsa.GenerateKey(ECCurve)\n  fullName: System.Security.Cryptography.ECDsa.GenerateKey(ECCurve)\n- uid: System.Security.Cryptography.ECCurve\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECCurve\n  nameWithType: ECCurve\n  fullName: System.Security.Cryptography.ECCurve\n- uid: System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: HashData(Stream,HashAlgorithmName)\n  nameWithType: ECDsa.HashData(Stream,HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.HashData(Stream,HashAlgorithmName)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  nameWithType: ECDsa.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.HashData(Byte[],Int32,Int32,HashAlgorithmName)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: ImportParameters(ECParameters)\n  nameWithType: ECDsa.ImportParameters(ECParameters)\n  fullName: System.Security.Cryptography.ECDsa.ImportParameters(ECParameters)\n- uid: System.Security.Cryptography.ECParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECParameters\n  nameWithType: ECParameters\n  fullName: System.Security.Cryptography.ECParameters\n- uid: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: KeyExchangeAlgorithm\n  nameWithType: ECDsa.KeyExchangeAlgorithm\n  fullName: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.ECDsa.SignatureAlgorithm\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: SignatureAlgorithm\n  nameWithType: ECDsa.SignatureAlgorithm\n  fullName: System.Security.Cryptography.ECDsa.SignatureAlgorithm\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: SignData(Byte[],HashAlgorithmName)\n  nameWithType: ECDsa.SignData(Byte[],HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.SignData(Byte[],HashAlgorithmName)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: SignData(Stream,HashAlgorithmName)\n  nameWithType: ECDsa.SignData(Stream,HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.SignData(Stream,HashAlgorithmName)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: SignData(Byte[],Int32,Int32,HashAlgorithmName)\n  nameWithType: ECDsa.SignData(Byte[],Int32,Int32,HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.SignData(Byte[],Int32,Int32,HashAlgorithmName)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.ECDsa.SignHash(System.Byte[])\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: SignHash(Byte[])\n  nameWithType: ECDsa.SignHash(Byte[])\n  fullName: System.Security.Cryptography.ECDsa.SignHash(Byte[])\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: VerifyData(Byte[],Byte[],HashAlgorithmName)\n  nameWithType: ECDsa.VerifyData(Byte[],Byte[],HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.VerifyData(Byte[],Byte[],HashAlgorithmName)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: VerifyData(Stream,Byte[],HashAlgorithmName)\n  nameWithType: ECDsa.VerifyData(Stream,Byte[],HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.VerifyData(Stream,Byte[],HashAlgorithmName)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)\n  nameWithType: ECDsa.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  name: VerifyHash(Byte[],Byte[])\n  nameWithType: ECDsa.VerifyHash(Byte[],Byte[])\n  fullName: System.Security.Cryptography.ECDsa.VerifyHash(Byte[],Byte[])\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.ECDsa.Create*\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  nameWithType: ECDsa.\n- uid: System.Security.Cryptography.ECDsa.HashData*\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  nameWithType: ECDsa.\n- uid: System.Security.Cryptography.ECDsa.SignData*\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  nameWithType: ECDsa.\n- uid: System.Security.Cryptography.ECDsa.VerifyData*\n  parent: System.Security.Cryptography.ECDsa\n  isExternal: false\n  nameWithType: ECDsa.\n"}