{"nodes":[{"pos":[1208,1224],"content":"ExceptionHandler","needQuote":true,"needEscape":true,"nodes":[{"content":"ExceptionHandler","pos":[0,16]}]},{"pos":[2081,2165],"content":"ExceptionHandler(Int32,Int32,Int32,Int32,Int32,ExceptionHandlingClauseOptions,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"ExceptionHandler(Int32,Int32,Int32,Int32,Int32,ExceptionHandlingClauseOptions,Int32)","pos":[0,84]}]},{"pos":[2798,2832],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2897,2931],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2999,3033],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3102,3136],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3205,3239],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3335,3369],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3443,3477],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3702,3716],"content":"Equals(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[4050,4084],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4143,4177],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4514,4538],"content":"Equals(ExceptionHandler)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(ExceptionHandler)","pos":[0,24]}]},{"pos":[4946,4980],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5039,5073],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5352,5370],"content":"ExceptionTypeToken","needQuote":true,"needEscape":true,"nodes":[{"content":"ExceptionTypeToken","pos":[0,18]}]},{"pos":[5692,5726],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5933,5945],"content":"FilterOffset","needQuote":true,"needEscape":true,"nodes":[{"content":"FilterOffset","pos":[0,12]}]},{"pos":[6249,6283],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6488,6501],"content":"GetHashCode()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[6827,6861],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7070,7083],"content":"HandlerLength","needQuote":true,"needEscape":true,"nodes":[{"content":"HandlerLength","pos":[0,13]}]},{"pos":[7390,7424],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7633,7646],"content":"HandlerOffset","needQuote":true,"needEscape":true,"nodes":[{"content":"HandlerOffset","pos":[0,13]}]},{"pos":[7953,7987],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8178,8182],"content":"Kind","needQuote":true,"needEscape":true,"nodes":[{"content":"Kind","pos":[0,4]}]},{"pos":[8543,8577],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8944,8990],"content":"op_Equality(ExceptionHandler,ExceptionHandler)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Equality(ExceptionHandler,ExceptionHandler)","pos":[0,46]}]},{"pos":[9501,9535],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9623,9657],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9716,9750],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10121,10169],"content":"op_Inequality(ExceptionHandler,ExceptionHandler)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Inequality(ExceptionHandler,ExceptionHandler)","pos":[0,48]}]},{"pos":[10686,10720],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10808,10842],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10901,10935],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11136,11145],"content":"TryLength","needQuote":true,"needEscape":true,"nodes":[{"content":"TryLength","pos":[0,9]}]},{"pos":[11440,11474],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11675,11684],"content":"TryOffset","needQuote":true,"needEscape":true,"nodes":[{"content":"TryOffset","pos":[0,9]}]},{"pos":[11979,12013],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12127,12143],"content":"System.ValueType","needQuote":true,"needEscape":true,"nodes":[{"content":"System.ValueType","pos":[0,16]}]},{"pos":[12403,12487],"content":"ExceptionHandler(Int32,Int32,Int32,Int32,Int32,ExceptionHandlingClauseOptions,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"ExceptionHandler(Int32,Int32,Int32,Int32,Int32,ExceptionHandlingClauseOptions,Int32)","pos":[0,84]}]},{"pos":[12808,12813],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[12926,12931],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[13044,13049],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[13162,13167],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[13280,13285],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[13445,13475],"content":"ExceptionHandlingClauseOptions","needQuote":true,"needEscape":true,"nodes":[{"content":"ExceptionHandlingClauseOptions","pos":[0,30]}]},{"pos":[13649,13654],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[13849,13863],"content":"Equals(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[14046,14053],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[14171,14177],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14400,14424],"content":"Equals(ExceptionHandler)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(ExceptionHandler)","pos":[0,24]}]},{"pos":[14627,14634],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[14794,14810],"content":"ExceptionHandler","needQuote":true,"needEscape":true,"nodes":[{"content":"ExceptionHandler","pos":[0,16]}]},{"pos":[15040,15058],"content":"ExceptionTypeToken","needQuote":true,"needEscape":true,"nodes":[{"content":"ExceptionTypeToken","pos":[0,18]}]},{"pos":[15247,15252],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[15438,15450],"content":"FilterOffset","needQuote":true,"needEscape":true,"nodes":[{"content":"FilterOffset","pos":[0,12]}]},{"pos":[15627,15632],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[15817,15830],"content":"GetHashCode()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[16009,16014],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[16201,16214],"content":"HandlerLength","needQuote":true,"needEscape":true,"nodes":[{"content":"HandlerLength","pos":[0,13]}]},{"pos":[16393,16398],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[16585,16598],"content":"HandlerOffset","needQuote":true,"needEscape":true,"nodes":[{"content":"HandlerOffset","pos":[0,13]}]},{"pos":[16777,16782],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[16960,16964],"content":"Kind","needQuote":true,"needEscape":true,"nodes":[{"content":"Kind","pos":[0,4]}]},{"pos":[17172,17202],"content":"ExceptionHandlingClauseOptions","needQuote":true,"needEscape":true,"nodes":[{"content":"ExceptionHandlingClauseOptions","pos":[0,30]}]},{"pos":[17529,17575],"content":"op_Equality(ExceptionHandler,ExceptionHandler)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Equality(ExceptionHandler,ExceptionHandler)","pos":[0,46]}]},{"pos":[17822,17829],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[17989,18005],"content":"ExceptionHandler","needQuote":true,"needEscape":true,"nodes":[{"content":"ExceptionHandler","pos":[0,16]}]},{"pos":[18199,18215],"content":"ExceptionHandler","needQuote":true,"needEscape":true,"nodes":[{"content":"ExceptionHandler","pos":[0,16]}]},{"pos":[18521,18569],"content":"op_Inequality(ExceptionHandler,ExceptionHandler)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Inequality(ExceptionHandler,ExceptionHandler)","pos":[0,48]}]},{"pos":[18820,18827],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[18987,19003],"content":"ExceptionHandler","needQuote":true,"needEscape":true,"nodes":[{"content":"ExceptionHandler","pos":[0,16]}]},{"pos":[19197,19213],"content":"ExceptionHandler","needQuote":true,"needEscape":true,"nodes":[{"content":"ExceptionHandler","pos":[0,16]}]},{"pos":[19434,19443],"content":"TryLength","needQuote":true,"needEscape":true,"nodes":[{"content":"TryLength","pos":[0,9]}]},{"pos":[19614,19619],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[19802,19811],"content":"TryOffset","needQuote":true,"needEscape":true,"nodes":[{"content":"TryOffset","pos":[0,9]}]},{"pos":[19982,19987],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.Emit.ExceptionHandler\n  id: ExceptionHandler\n  children:\n  - System.Reflection.Emit.ExceptionHandler.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Reflection.ExceptionHandlingClauseOptions,System.Int32)\n  - System.Reflection.Emit.ExceptionHandler.Equals(System.Object)\n  - System.Reflection.Emit.ExceptionHandler.Equals(System.Reflection.Emit.ExceptionHandler)\n  - System.Reflection.Emit.ExceptionHandler.ExceptionTypeToken\n  - System.Reflection.Emit.ExceptionHandler.FilterOffset\n  - System.Reflection.Emit.ExceptionHandler.GetHashCode\n  - System.Reflection.Emit.ExceptionHandler.HandlerLength\n  - System.Reflection.Emit.ExceptionHandler.HandlerOffset\n  - System.Reflection.Emit.ExceptionHandler.Kind\n  - System.Reflection.Emit.ExceptionHandler.op_Equality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)\n  - System.Reflection.Emit.ExceptionHandler.op_Inequality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)\n  - System.Reflection.Emit.ExceptionHandler.TryLength\n  - System.Reflection.Emit.ExceptionHandler.TryOffset\n  langs:\n  - csharp\n  name: ExceptionHandler\n  nameWithType: ExceptionHandler\n  fullName: System.Reflection.Emit.ExceptionHandler\n  type: Struct\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public struct ExceptionHandler : IEquatable<System.Reflection.Emit.ExceptionHandler>\n  inheritance:\n  - System.Object\n  - System.ValueType\n  implements:\n  - System.IEquatable<System.Reflection.Emit.ExceptionHandler>\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Reflection.Emit.ExceptionHandler.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Reflection.ExceptionHandlingClauseOptions,System.Int32)\n  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Reflection.ExceptionHandlingClauseOptions,System.Int32)'\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: ExceptionHandler(Int32,Int32,Int32,Int32,Int32,ExceptionHandlingClauseOptions,Int32)\n  nameWithType: ExceptionHandler.ExceptionHandler(Int32,Int32,Int32,Int32,Int32,ExceptionHandlingClauseOptions,Int32)\n  fullName: System.Reflection.Emit.ExceptionHandler.ExceptionHandler(Int32,Int32,Int32,Int32,Int32,ExceptionHandlingClauseOptions,Int32)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public ExceptionHandler (int tryOffset, int tryLength, int filterOffset, int handlerOffset, int handlerLength, System.Reflection.ExceptionHandlingClauseOptions kind, int exceptionTypeToken);\n    parameters:\n    - id: tryOffset\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: tryLength\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: filterOffset\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: handlerOffset\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: handlerLength\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: kind\n      type: System.Reflection.ExceptionHandlingClauseOptions\n      description: Parameter description to be filled\n    - id: exceptionTypeToken\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Reflection.Emit.ExceptionHandler.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: ExceptionHandler.Equals(Object)\n  fullName: System.Reflection.Emit.ExceptionHandler.Equals(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Reflection.Emit.ExceptionHandler.Equals*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Reflection.Emit.ExceptionHandler.Equals(System.Reflection.Emit.ExceptionHandler)\n  id: Equals(System.Reflection.Emit.ExceptionHandler)\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: Equals(ExceptionHandler)\n  nameWithType: ExceptionHandler.Equals(ExceptionHandler)\n  fullName: System.Reflection.Emit.ExceptionHandler.Equals(ExceptionHandler)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public bool Equals (System.Reflection.Emit.ExceptionHandler other);\n    parameters:\n    - id: other\n      type: System.Reflection.Emit.ExceptionHandler\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Reflection.Emit.ExceptionHandler.Equals*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Reflection.Emit.ExceptionHandler.ExceptionTypeToken\n  id: ExceptionTypeToken\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: ExceptionTypeToken\n  nameWithType: ExceptionHandler.ExceptionTypeToken\n  fullName: System.Reflection.Emit.ExceptionHandler.ExceptionTypeToken\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public int ExceptionTypeToken { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Reflection.Emit.ExceptionHandler.FilterOffset\n  id: FilterOffset\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: FilterOffset\n  nameWithType: ExceptionHandler.FilterOffset\n  fullName: System.Reflection.Emit.ExceptionHandler.FilterOffset\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public int FilterOffset { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Reflection.Emit.ExceptionHandler.GetHashCode\n  id: GetHashCode\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: ExceptionHandler.GetHashCode()\n  fullName: System.Reflection.Emit.ExceptionHandler.GetHashCode()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Reflection.Emit.ExceptionHandler.HandlerLength\n  id: HandlerLength\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: HandlerLength\n  nameWithType: ExceptionHandler.HandlerLength\n  fullName: System.Reflection.Emit.ExceptionHandler.HandlerLength\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public int HandlerLength { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Reflection.Emit.ExceptionHandler.HandlerOffset\n  id: HandlerOffset\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: HandlerOffset\n  nameWithType: ExceptionHandler.HandlerOffset\n  fullName: System.Reflection.Emit.ExceptionHandler.HandlerOffset\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public int HandlerOffset { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Reflection.Emit.ExceptionHandler.Kind\n  id: Kind\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: Kind\n  nameWithType: ExceptionHandler.Kind\n  fullName: System.Reflection.Emit.ExceptionHandler.Kind\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public System.Reflection.ExceptionHandlingClauseOptions Kind { get; }\n    return:\n      type: System.Reflection.ExceptionHandlingClauseOptions\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Reflection.Emit.ExceptionHandler.op_Equality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)\n  id: op_Equality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: op_Equality(ExceptionHandler,ExceptionHandler)\n  nameWithType: ExceptionHandler.op_Equality(ExceptionHandler,ExceptionHandler)\n  fullName: System.Reflection.Emit.ExceptionHandler.op_Equality(ExceptionHandler,ExceptionHandler)\n  type: Operator\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public static bool op_Equality (System.Reflection.Emit.ExceptionHandler left, System.Reflection.Emit.ExceptionHandler right);\n    parameters:\n    - id: left\n      type: System.Reflection.Emit.ExceptionHandler\n      description: Parameter description to be filled\n    - id: right\n      type: System.Reflection.Emit.ExceptionHandler\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Reflection.Emit.ExceptionHandler.op_Inequality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)\n  id: op_Inequality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: op_Inequality(ExceptionHandler,ExceptionHandler)\n  nameWithType: ExceptionHandler.op_Inequality(ExceptionHandler,ExceptionHandler)\n  fullName: System.Reflection.Emit.ExceptionHandler.op_Inequality(ExceptionHandler,ExceptionHandler)\n  type: Operator\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public static bool op_Inequality (System.Reflection.Emit.ExceptionHandler left, System.Reflection.Emit.ExceptionHandler right);\n    parameters:\n    - id: left\n      type: System.Reflection.Emit.ExceptionHandler\n      description: Parameter description to be filled\n    - id: right\n      type: System.Reflection.Emit.ExceptionHandler\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Reflection.Emit.ExceptionHandler.TryLength\n  id: TryLength\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: TryLength\n  nameWithType: ExceptionHandler.TryLength\n  fullName: System.Reflection.Emit.ExceptionHandler.TryLength\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public int TryLength { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Reflection.Emit.ExceptionHandler.TryOffset\n  id: TryOffset\n  parent: System.Reflection.Emit.ExceptionHandler\n  langs:\n  - csharp\n  name: TryOffset\n  nameWithType: ExceptionHandler.TryOffset\n  fullName: System.Reflection.Emit.ExceptionHandler.TryOffset\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public int TryOffset { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.ValueType\n  isExternal: false\n  name: System.ValueType\n- uid: System.Reflection.Emit.ExceptionHandler.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Reflection.ExceptionHandlingClauseOptions,System.Int32)\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: ExceptionHandler(Int32,Int32,Int32,Int32,Int32,ExceptionHandlingClauseOptions,Int32)\n  nameWithType: ExceptionHandler.ExceptionHandler(Int32,Int32,Int32,Int32,Int32,ExceptionHandlingClauseOptions,Int32)\n  fullName: System.Reflection.Emit.ExceptionHandler.ExceptionHandler(Int32,Int32,Int32,Int32,Int32,ExceptionHandlingClauseOptions,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.ExceptionHandlingClauseOptions\n  parent: System.Reflection\n  isExternal: false\n  name: ExceptionHandlingClauseOptions\n  nameWithType: ExceptionHandlingClauseOptions\n  fullName: System.Reflection.ExceptionHandlingClauseOptions\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.Emit.ExceptionHandler.Equals(System.Object)\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: ExceptionHandler.Equals(Object)\n  fullName: System.Reflection.Emit.ExceptionHandler.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Reflection.Emit.ExceptionHandler.Equals(System.Reflection.Emit.ExceptionHandler)\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: Equals(ExceptionHandler)\n  nameWithType: ExceptionHandler.Equals(ExceptionHandler)\n  fullName: System.Reflection.Emit.ExceptionHandler.Equals(ExceptionHandler)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.Emit.ExceptionHandler\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: ExceptionHandler\n  nameWithType: ExceptionHandler\n  fullName: System.Reflection.Emit.ExceptionHandler\n- uid: System.Reflection.Emit.ExceptionHandler.ExceptionTypeToken\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: ExceptionTypeToken\n  nameWithType: ExceptionHandler.ExceptionTypeToken\n  fullName: System.Reflection.Emit.ExceptionHandler.ExceptionTypeToken\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.Emit.ExceptionHandler.FilterOffset\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: FilterOffset\n  nameWithType: ExceptionHandler.FilterOffset\n  fullName: System.Reflection.Emit.ExceptionHandler.FilterOffset\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.Emit.ExceptionHandler.GetHashCode\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: ExceptionHandler.GetHashCode()\n  fullName: System.Reflection.Emit.ExceptionHandler.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.Emit.ExceptionHandler.HandlerLength\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: HandlerLength\n  nameWithType: ExceptionHandler.HandlerLength\n  fullName: System.Reflection.Emit.ExceptionHandler.HandlerLength\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.Emit.ExceptionHandler.HandlerOffset\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: HandlerOffset\n  nameWithType: ExceptionHandler.HandlerOffset\n  fullName: System.Reflection.Emit.ExceptionHandler.HandlerOffset\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.Emit.ExceptionHandler.Kind\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: Kind\n  nameWithType: ExceptionHandler.Kind\n  fullName: System.Reflection.Emit.ExceptionHandler.Kind\n- uid: System.Reflection.ExceptionHandlingClauseOptions\n  parent: System.Reflection\n  isExternal: false\n  name: ExceptionHandlingClauseOptions\n  nameWithType: ExceptionHandlingClauseOptions\n  fullName: System.Reflection.ExceptionHandlingClauseOptions\n- uid: System.Reflection.Emit.ExceptionHandler.op_Equality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: op_Equality(ExceptionHandler,ExceptionHandler)\n  nameWithType: ExceptionHandler.op_Equality(ExceptionHandler,ExceptionHandler)\n  fullName: System.Reflection.Emit.ExceptionHandler.op_Equality(ExceptionHandler,ExceptionHandler)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.Emit.ExceptionHandler\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: ExceptionHandler\n  nameWithType: ExceptionHandler\n  fullName: System.Reflection.Emit.ExceptionHandler\n- uid: System.Reflection.Emit.ExceptionHandler\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: ExceptionHandler\n  nameWithType: ExceptionHandler\n  fullName: System.Reflection.Emit.ExceptionHandler\n- uid: System.Reflection.Emit.ExceptionHandler.op_Inequality(System.Reflection.Emit.ExceptionHandler,System.Reflection.Emit.ExceptionHandler)\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: op_Inequality(ExceptionHandler,ExceptionHandler)\n  nameWithType: ExceptionHandler.op_Inequality(ExceptionHandler,ExceptionHandler)\n  fullName: System.Reflection.Emit.ExceptionHandler.op_Inequality(ExceptionHandler,ExceptionHandler)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.Emit.ExceptionHandler\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: ExceptionHandler\n  nameWithType: ExceptionHandler\n  fullName: System.Reflection.Emit.ExceptionHandler\n- uid: System.Reflection.Emit.ExceptionHandler\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: ExceptionHandler\n  nameWithType: ExceptionHandler\n  fullName: System.Reflection.Emit.ExceptionHandler\n- uid: System.Reflection.Emit.ExceptionHandler.TryLength\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: TryLength\n  nameWithType: ExceptionHandler.TryLength\n  fullName: System.Reflection.Emit.ExceptionHandler.TryLength\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.Emit.ExceptionHandler.TryOffset\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  name: TryOffset\n  nameWithType: ExceptionHandler.TryOffset\n  fullName: System.Reflection.Emit.ExceptionHandler.TryOffset\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.Emit.ExceptionHandler.Equals*\n  parent: System.Reflection.Emit.ExceptionHandler\n  isExternal: false\n  nameWithType: ExceptionHandler.\n"}