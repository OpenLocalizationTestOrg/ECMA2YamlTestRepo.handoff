{"nodes":[{"pos":[42619,42629],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[43275,43287],"content":"Expression()","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression()","pos":[0,12]}]},{"pos":[43830,43861],"content":"Expression(ExpressionType,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression(ExpressionType,Type)","pos":[0,31]}]},{"pos":[44298,44332],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[44391,44425],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[44696,44721],"content":"Accept(ExpressionVisitor)","needQuote":true,"needEscape":true,"nodes":[{"content":"Accept(ExpressionVisitor)","pos":[0,25]}]},{"pos":[45173,45207],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[45286,45320],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[45641,45667],"content":"Add(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Add(Expression,Expression)","pos":[0,26]}]},{"pos":[46142,46176],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[46259,46293],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[46378,46412],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[46843,46880],"content":"Add(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Add(Expression,Expression,MethodInfo)","pos":[0,37]}]},{"pos":[47414,47448],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[47531,47565],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[47643,47677],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[47762,47796],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[48181,48213],"content":"AddAssign(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"AddAssign(Expression,Expression)","pos":[0,32]}]},{"pos":[48706,48740],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[48823,48857],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[48942,48976],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[49425,49468],"content":"AddAssign(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"AddAssign(Expression,Expression,MethodInfo)","pos":[0,43]}]},{"pos":[50020,50054],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[50137,50171],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[50249,50283],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[50368,50402],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[50933,50993],"content":"AddAssign(Expression,Expression,MethodInfo,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"AddAssign(Expression,Expression,MethodInfo,LambdaExpression)","pos":[0,60]}]},{"pos":[51632,51666],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[51749,51783],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[51861,51895],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[51989,52023],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[52108,52142],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[52547,52586],"content":"AddAssignChecked(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"AddAssignChecked(Expression,Expression)","pos":[0,39]}]},{"pos":[53100,53134],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[53217,53251],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[53336,53370],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[53840,53890],"content":"AddAssignChecked(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"AddAssignChecked(Expression,Expression,MethodInfo)","pos":[0,50]}]},{"pos":[54463,54497],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[54580,54614],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[54692,54726],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[54811,54845],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[55397,55464],"content":"AddAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"AddAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)","pos":[0,67]}]},{"pos":[56124,56158],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[56241,56275],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[56353,56387],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[56481,56515],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[56600,56634],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[57034,57067],"content":"AddChecked(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"AddChecked(Expression,Expression)","pos":[0,33]}]},{"pos":[57563,57597],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[57680,57714],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[57799,57833],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[58285,58329],"content":"AddChecked(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"AddChecked(Expression,Expression,MethodInfo)","pos":[0,44]}]},{"pos":[58884,58918],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[59001,59035],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[59113,59147],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[59232,59266],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[59646,59672],"content":"And(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"And(Expression,Expression)","pos":[0,26]}]},{"pos":[60147,60181],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[60264,60298],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[60383,60417],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[60848,60885],"content":"And(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"And(Expression,Expression,MethodInfo)","pos":[0,37]}]},{"pos":[61419,61453],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[61536,61570],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[61648,61682],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[61767,61801],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[62182,62212],"content":"AndAlso(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"AndAlso(Expression,Expression)","pos":[0,30]}]},{"pos":[62699,62733],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[62816,62850],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[62935,62969],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[63412,63453],"content":"AndAlso(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"AndAlso(Expression,Expression,MethodInfo)","pos":[0,41]}]},{"pos":[63999,64033],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[64116,64150],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[64228,64262],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[64347,64381],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[64770,64802],"content":"AndAssign(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"AndAssign(Expression,Expression)","pos":[0,32]}]},{"pos":[65295,65329],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[65412,65446],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[65531,65565],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[66014,66057],"content":"AndAssign(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"AndAssign(Expression,Expression,MethodInfo)","pos":[0,43]}]},{"pos":[66609,66643],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[66726,66760],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[66838,66872],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[66957,66991],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[67522,67582],"content":"AndAssign(Expression,Expression,MethodInfo,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"AndAssign(Expression,Expression,MethodInfo,LambdaExpression)","pos":[0,60]}]},{"pos":[68221,68255],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[68338,68372],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[68450,68484],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[68578,68612],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[68697,68731],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[69206,69253],"content":"ArrayAccess(Expression,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ArrayAccess(Expression,IEnumerable<Expression>)"},{"pos":[69821,69855],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[69980,70014],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[70098,70132],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[70533,70569],"content":"ArrayAccess(Expression,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"ArrayAccess(Expression,Expression[])","pos":[0,36]}]},{"pos":[71077,71111],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[71198,71232],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[71316,71350],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[71825,71871],"content":"ArrayIndex(Expression,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ArrayIndex(Expression,IEnumerable<Expression>)"},{"pos":[72441,72475],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[72600,72634],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[72723,72757],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[73151,73184],"content":"ArrayIndex(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"ArrayIndex(Expression,Expression)","pos":[0,33]}]},{"pos":[73682,73716],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[73799,73833],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[73918,73952],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[74350,74385],"content":"ArrayIndex(Expression,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"ArrayIndex(Expression,Expression[])","pos":[0,35]}]},{"pos":[74895,74929],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[75016,75050],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[75139,75173],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[75499,75522],"content":"ArrayLength(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"ArrayLength(Expression)","pos":[0,23]}]},{"pos":[75958,75992],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[76076,76110],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[76437,76466],"content":"Assign(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Assign(Expression,Expression)","pos":[0,29]}]},{"pos":[76950,76984],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[77067,77101],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[77186,77220],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[77531,77558],"content":"Bind(MemberInfo,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Bind(MemberInfo,Expression)","pos":[0,27]}]},{"pos":[78033,78067],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[78155,78189],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[78274,78308],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[78672,78699],"content":"Bind(MethodInfo,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Bind(MethodInfo,Expression)","pos":[0,27]}]},{"pos":[79194,79228],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[79316,79350],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[79435,79469],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[79857,79887],"content":"Block(IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Block(IEnumerable<Expression>)"},{"pos":[80423,80457],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[80541,80575],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[80888,80907],"content":"Block(Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Block(Expression[])","pos":[0,19]}]},{"pos":[81345,81379],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[81463,81497],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[82054,82117],"content":"Block(IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>,IEnumerable<ph id=\"ph2\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Block(IEnumerable<ParameterExpression>,IEnumerable<Expression>)"},{"pos":[82821,82855],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[82984,83018],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[83102,83136],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[83617,83669],"content":"Block(IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>,Expression[])","needQuote":true,"needEscape":true,"source":"Block(IEnumerable<ParameterExpression>,Expression[])"},{"pos":[84313,84347],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[84438,84472],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[84556,84590],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[84969,84997],"content":"Block(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Block(Expression,Expression)","pos":[0,28]}]},{"pos":[85476,85510],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[85592,85626],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[85710,85744],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[86157,86192],"content":"Block(Type,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Block(Type,IEnumerable<Expression>)"},{"pos":[86679,86713],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[86842,86876],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[86960,86994],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[87331,87355],"content":"Block(Type,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Block(Type,Expression[])","pos":[0,24]}]},{"pos":[87782,87816],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[87907,87941],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[88025,88059],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[88508,88547],"content":"Block(Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Block(Expression,Expression,Expression)","pos":[0,39]}]},{"pos":[89089,89123],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[89205,89239],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[89321,89355],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[89439,89473],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[90054,90122],"content":"Block(Type,IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>,IEnumerable<ph id=\"ph2\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Block(Type,IEnumerable<ParameterExpression>,IEnumerable<Expression>)"},{"pos":[90770,90804],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[90940,90974],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[91103,91137],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[91221,91255],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[91760,91817],"content":"Block(Type,IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>,Expression[])","needQuote":true,"needEscape":true,"source":"Block(Type,IEnumerable<ParameterExpression>,Expression[])"},{"pos":[92405,92439],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[92575,92609],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[92700,92734],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[92818,92852],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[93371,93421],"content":"Block(Expression,Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Block(Expression,Expression,Expression,Expression)","pos":[0,50]}]},{"pos":[94026,94060],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[94142,94176],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[94258,94292],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[94374,94408],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[94492,94526],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[95115,95176],"content":"Block(Expression,Expression,Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Block(Expression,Expression,Expression,Expression,Expression)","pos":[0,61]}]},{"pos":[95844,95878],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[95960,95994],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[96076,96110],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[96192,96226],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[96308,96342],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[96426,96460],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[96771,96789],"content":"Break(LabelTarget)","needQuote":true,"needEscape":true,"nodes":[{"content":"Break(LabelTarget)","pos":[0,18]}]},{"pos":[97212,97246],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[97329,97363],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[97744,97773],"content":"Break(LabelTarget,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Break(LabelTarget,Expression)","pos":[0,29]}]},{"pos":[98260,98294],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[98377,98411],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[98494,98528],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[98863,98886],"content":"Break(LabelTarget,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Break(LabelTarget,Type)","pos":[0,23]}]},{"pos":[99330,99364],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[99423,99457],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[99540,99574],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[99979,100013],"content":"Break(LabelTarget,Expression,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Break(LabelTarget,Expression,Type)","pos":[0,34]}]},{"pos":[100521,100555],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[100638,100672],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[100731,100765],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[100848,100882],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[101247,101274],"content":"Call(Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Call(Expression,MethodInfo)","pos":[0,27]}]},{"pos":[101759,101793],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[101871,101905],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[101994,102028],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[102472,102512],"content":"Call(MethodInfo,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Call(MethodInfo,IEnumerable<Expression>)"},{"pos":[103056,103090],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[103217,103251],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[103340,103374],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[103738,103765],"content":"Call(MethodInfo,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Call(MethodInfo,Expression)","pos":[0,27]}]},{"pos":[104238,104272],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[104354,104388],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[104477,104511],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[104879,104908],"content":"Call(MethodInfo,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Call(MethodInfo,Expression[])","pos":[0,29]}]},{"pos":[105392,105426],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[105515,105549],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[105638,105672],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[106186,106237],"content":"Call(Expression,MethodInfo,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Call(Expression,MethodInfo,IEnumerable<Expression>)"},{"pos":[106856,106890],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[106968,107002],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[107129,107163],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[107252,107286],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[107724,107764],"content":"Call(Expression,MethodInfo,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Call(Expression,MethodInfo,Expression[])","pos":[0,40]}]},{"pos":[108323,108357],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[108435,108469],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[108558,108592],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[108681,108715],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[109149,109187],"content":"Call(MethodInfo,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Call(MethodInfo,Expression,Expression)","pos":[0,38]}]},{"pos":[109723,109757],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[109839,109873],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[109955,109989],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[110078,110112],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[110616,110665],"content":"Call(Expression,MethodInfo,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Call(Expression,MethodInfo,Expression,Expression)","pos":[0,49]}]},{"pos":[111276,111310],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[111388,111422],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[111504,111538],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[111620,111654],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[111743,111777],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[112213,112256],"content":"Call(Expression,String,Type[],Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Call(Expression,String,Type[],Expression[])","pos":[0,43]}]},{"pos":[112825,112859],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[112926,112960],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[113030,113064],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[113153,113187],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[113276,113310],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[113814,113863],"content":"Call(MethodInfo,Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Call(MethodInfo,Expression,Expression,Expression)","pos":[0,49]}]},{"pos":[114462,114496],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[114578,114612],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[114694,114728],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[114810,114844],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[114933,114967],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[115357,115394],"content":"Call(Type,String,Type[],Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Call(Type,String,Type[],Expression[])","pos":[0,37]}]},{"pos":[115890,115924],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[115991,116025],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[116095,116129],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[116218,116252],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[116341,116375],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[116949,117009],"content":"Call(Expression,MethodInfo,Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Call(Expression,MethodInfo,Expression,Expression,Expression)","pos":[0,60]}]},{"pos":[117683,117717],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[117795,117829],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[117911,117945],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[118027,118061],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[118143,118177],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[118266,118300],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[118874,118934],"content":"Call(MethodInfo,Expression,Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Call(MethodInfo,Expression,Expression,Expression,Expression)","pos":[0,60]}]},{"pos":[119596,119630],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[119712,119746],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[119828,119862],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[119944,119978],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[120060,120094],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[120183,120217],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[120861,120932],"content":"Call(MethodInfo,Expression,Expression,Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Call(MethodInfo,Expression,Expression,Expression,Expression,Expression)","pos":[0,71]}]},{"pos":[121657,121691],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[121773,121807],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[121889,121923],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[122005,122039],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[122121,122155],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[122237,122271],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[122360,122394],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[122638,122647],"content":"CanReduce","needQuote":true,"needEscape":true,"nodes":[{"content":"CanReduce","pos":[0,9]}]},{"pos":[122946,122980],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[123323,123360],"content":"Catch(ParameterExpression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Catch(ParameterExpression,Expression)","pos":[0,37]}]},{"pos":[123878,123912],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[123994,124028],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[124107,124141],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[124474,124496],"content":"Catch(Type,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Catch(Type,Expression)","pos":[0,22]}]},{"pos":[124905,124939],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[125021,125055],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[125134,125168],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[125635,125683],"content":"Catch(ParameterExpression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Catch(ParameterExpression,Expression,Expression)","pos":[0,48]}]},{"pos":[126266,126300],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[126382,126416],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[126500,126534],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[126613,126647],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[127050,127083],"content":"Catch(Type,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Catch(Type,Expression,Expression)","pos":[0,33]}]},{"pos":[127557,127591],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[127673,127707],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[127791,127825],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[127904,127938],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[128281,128315],"content":"ClearDebugInfo(SymbolDocumentInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"ClearDebugInfo(SymbolDocumentInfo)","pos":[0,34]}]},{"pos":[128802,128836],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[128924,128958],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[129289,129320],"content":"Coalesce(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Coalesce(Expression,Expression)","pos":[0,31]}]},{"pos":[129810,129844],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[129927,129961],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[130046,130080],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[130550,130598],"content":"Coalesce(Expression,Expression,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Coalesce(Expression,Expression,LambdaExpression)","pos":[0,48]}]},{"pos":[131175,131209],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[131292,131326],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[131420,131454],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[131539,131573],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[132033,132076],"content":"Condition(Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Condition(Expression,Expression,Expression)","pos":[0,43]}]},{"pos":[132641,132675],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[132759,132793],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[132878,132912],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[133002,133036],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[133521,133569],"content":"Condition(Expression,Expression,Expression,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Condition(Expression,Expression,Expression,Type)","pos":[0,48]}]},{"pos":[134155,134189],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[134273,134307],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[134392,134426],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[134485,134519],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[134609,134643],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[134920,134936],"content":"Constant(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Constant(Object)","pos":[0,16]}]},{"pos":[135309,135343],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[135430,135464],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[135764,135785],"content":"Constant(Object,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Constant(Object,Type)","pos":[0,21]}]},{"pos":[136179,136213],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[136272,136306],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[136393,136427],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[136747,136768],"content":"Continue(LabelTarget)","needQuote":true,"needEscape":true,"nodes":[{"content":"Continue(LabelTarget)","pos":[0,21]}]},{"pos":[137200,137234],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[137317,137351],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[137695,137721],"content":"Continue(LabelTarget,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Continue(LabelTarget,Type)","pos":[0,26]}]},{"pos":[138174,138208],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[138267,138301],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[138384,138418],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[138758,138782],"content":"Convert(Expression,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Convert(Expression,Type)","pos":[0,24]}]},{"pos":[139237,139271],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[139330,139364],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[139448,139482],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[139879,139914],"content":"Convert(Expression,Type,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Convert(Expression,Type,MethodInfo)","pos":[0,35]}]},{"pos":[140428,140462],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[140521,140555],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[140633,140667],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[140751,140785],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[141138,141169],"content":"ConvertChecked(Expression,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"ConvertChecked(Expression,Type)","pos":[0,31]}]},{"pos":[141645,141679],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[141738,141772],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[141856,141890],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[142308,142350],"content":"ConvertChecked(Expression,Type,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"ConvertChecked(Expression,Type,MethodInfo)","pos":[0,42]}]},{"pos":[142885,142919],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[142978,143012],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[143090,143124],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[143208,143242],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[143688,143741],"content":"DebugInfo(SymbolDocumentInfo,Int32,Int32,Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"DebugInfo(SymbolDocumentInfo,Int32,Int32,Int32,Int32)","pos":[0,53]}]},{"pos":[144321,144355],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[144420,144454],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[144521,144555],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[144618,144652],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[144717,144751],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[144839,144873],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[145136,145157],"content":"Decrement(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Decrement(Expression)","pos":[0,21]}]},{"pos":[145597,145631],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[145715,145749],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[146128,146160],"content":"Decrement(Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Decrement(Expression,MethodInfo)","pos":[0,32]}]},{"pos":[146659,146693],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[146771,146805],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[146889,146923],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[147194,147207],"content":"Default(Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Default(Type)","pos":[0,13]}]},{"pos":[147566,147600],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[147686,147720],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[148047,148076],"content":"Divide(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Divide(Expression,Expression)","pos":[0,29]}]},{"pos":[148560,148594],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[148677,148711],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[148796,148830],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[149270,149310],"content":"Divide(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Divide(Expression,Expression,MethodInfo)","pos":[0,40]}]},{"pos":[149853,149887],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[149970,150004],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[150082,150116],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[150201,150235],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[150629,150664],"content":"DivideAssign(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"DivideAssign(Expression,Expression)","pos":[0,35]}]},{"pos":[151166,151200],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[151283,151317],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[151402,151436],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[151894,151940],"content":"DivideAssign(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"DivideAssign(Expression,Expression,MethodInfo)","pos":[0,46]}]},{"pos":[152501,152535],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[152618,152652],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[152730,152764],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[152849,152883],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[153423,153486],"content":"DivideAssign(Expression,Expression,MethodInfo,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"DivideAssign(Expression,Expression,MethodInfo,LambdaExpression)","pos":[0,63]}]},{"pos":[154134,154168],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[154251,154285],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[154363,154397],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[154491,154525],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[154610,154644],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[155162,155214],"content":"Dynamic(CallSiteBinder,Type,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Dynamic(CallSiteBinder,Type,IEnumerable<Expression>)"},{"pos":[155835,155869],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[155934,155968],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[156095,156129],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[156215,156249],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[156682,156721],"content":"Dynamic(CallSiteBinder,Type,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Dynamic(CallSiteBinder,Type,Expression)","pos":[0,39]}]},{"pos":[157271,157305],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[157370,157404],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[157486,157520],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[157606,157640],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[158077,158118],"content":"Dynamic(CallSiteBinder,Type,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Dynamic(CallSiteBinder,Type,Expression[])","pos":[0,41]}]},{"pos":[158679,158713],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[158778,158812],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[158901,158935],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[159021,159055],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[159558,159608],"content":"Dynamic(CallSiteBinder,Type,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Dynamic(CallSiteBinder,Type,Expression,Expression)","pos":[0,50]}]},{"pos":[160221,160255],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[160320,160354],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[160436,160470],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[160552,160586],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[160672,160706],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[161279,161340],"content":"Dynamic(CallSiteBinder,Type,Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Dynamic(CallSiteBinder,Type,Expression,Expression,Expression)","pos":[0,61]}]},{"pos":[162016,162050],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[162115,162149],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[162231,162265],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[162347,162381],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[162463,162497],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[162583,162617],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[163260,163332],"content":"Dynamic(CallSiteBinder,Type,Expression,Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Dynamic(CallSiteBinder,Type,Expression,Expression,Expression,Expression)","pos":[0,72]}]},{"pos":[164071,164105],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[164170,164204],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[164286,164320],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[164402,164436],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[164518,164552],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[164634,164668],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[164754,164788],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[165249,165296],"content":"ElementInit(MethodInfo,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ElementInit(MethodInfo,IEnumerable<Expression>)"},{"pos":[165858,165892],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[166019,166053],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[166133,166167],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[166556,166592],"content":"ElementInit(MethodInfo,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"ElementInit(MethodInfo,Expression[])","pos":[0,36]}]},{"pos":[167094,167128],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[167217,167251],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[167331,167365],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[167608,167615],"content":"Empty()","needQuote":true,"needEscape":true,"nodes":[{"content":"Empty()","pos":[0,7]}]},{"pos":[167981,168015],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[168340,168368],"content":"Equal(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equal(Expression,Expression)","pos":[0,28]}]},{"pos":[168849,168883],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[168966,169000],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[169085,169119],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[169586,169633],"content":"Equal(Expression,Expression,Boolean,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equal(Expression,Expression,Boolean,MethodInfo)","pos":[0,47]}]},{"pos":[170206,170240],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[170323,170357],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[170425,170459],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[170537,170571],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[170656,170690],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[171081,171115],"content":"ExclusiveOr(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"ExclusiveOr(Expression,Expression)","pos":[0,34]}]},{"pos":[171614,171648],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[171731,171765],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[171850,171884],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[172339,172384],"content":"ExclusiveOr(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"ExclusiveOr(Expression,Expression,MethodInfo)","pos":[0,45]}]},{"pos":[172942,172976],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[173059,173093],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[173171,173205],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[173290,173324],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[173733,173773],"content":"ExclusiveOrAssign(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"ExclusiveOrAssign(Expression,Expression)","pos":[0,40]}]},{"pos":[174290,174324],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[174407,174441],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[174526,174560],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[175033,175084],"content":"ExclusiveOrAssign(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"ExclusiveOrAssign(Expression,Expression,MethodInfo)","pos":[0,51]}]},{"pos":[175660,175694],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[175777,175811],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[175889,175923],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[176008,176042],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[176597,176665],"content":"ExclusiveOrAssign(Expression,Expression,MethodInfo,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"ExclusiveOrAssign(Expression,Expression,MethodInfo,LambdaExpression)","pos":[0,68]}]},{"pos":[177328,177362],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[177445,177479],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[177557,177591],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[177685,177719],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[177804,177838],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[178215,178242],"content":"Field(Expression,FieldInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Field(Expression,FieldInfo)","pos":[0,27]}]},{"pos":[178726,178760],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[178836,178870],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[178955,178989],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[179326,179350],"content":"Field(Expression,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Field(Expression,String)","pos":[0,24]}]},{"pos":[179811,179845],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[179911,179945],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[180030,180064],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[180425,180454],"content":"Field(Expression,Type,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Field(Expression,Type,String)","pos":[0,29]}]},{"pos":[180936,180970],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[181029,181063],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[181129,181163],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[181248,181282],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[181565,181586],"content":"GetActionType(Type[])","needQuote":true,"needEscape":true,"nodes":[{"content":"GetActionType(Type[])","pos":[0,21]}]},{"pos":[181942,181976],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[182032,182066],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[182299,182322],"content":"GetDelegateType(Type[])","needQuote":true,"needEscape":true,"nodes":[{"content":"GetDelegateType(Type[])","pos":[0,23]}]},{"pos":[182684,182718],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[182774,182808],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[183033,183052],"content":"GetFuncType(Type[])","needQuote":true,"needEscape":true,"nodes":[{"content":"GetFuncType(Type[])","pos":[0,19]}]},{"pos":[183402,183436],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[183492,183526],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[183781,183798],"content":"Goto(LabelTarget)","needQuote":true,"needEscape":true,"nodes":[{"content":"Goto(LabelTarget)","pos":[0,17]}]},{"pos":[184218,184252],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[184335,184369],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[184747,184775],"content":"Goto(LabelTarget,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Goto(LabelTarget,Expression)","pos":[0,28]}]},{"pos":[185259,185293],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[185376,185410],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[185493,185527],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[185859,185881],"content":"Goto(LabelTarget,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Goto(LabelTarget,Type)","pos":[0,22]}]},{"pos":[186322,186356],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[186415,186449],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[186532,186566],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[186968,187001],"content":"Goto(LabelTarget,Expression,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Goto(LabelTarget,Expression,Type)","pos":[0,33]}]},{"pos":[187506,187540],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[187623,187657],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[187716,187750],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[187833,187867],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[188257,188291],"content":"GreaterThan(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"GreaterThan(Expression,Expression)","pos":[0,34]}]},{"pos":[188790,188824],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[188907,188941],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[189026,189060],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[189545,189598],"content":"GreaterThan(Expression,Expression,Boolean,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"GreaterThan(Expression,Expression,Boolean,MethodInfo)","pos":[0,53]}]},{"pos":[190189,190223],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[190306,190340],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[190408,190442],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[190520,190554],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[190639,190673],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[191084,191125],"content":"GreaterThanOrEqual(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"GreaterThanOrEqual(Expression,Expression)","pos":[0,41]}]},{"pos":[191645,191679],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[191762,191796],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[191881,191915],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[192421,192481],"content":"GreaterThanOrEqual(Expression,Expression,Boolean,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"GreaterThanOrEqual(Expression,Expression,Boolean,MethodInfo)","pos":[0,60]}]},{"pos":[193093,193127],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[193210,193244],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[193312,193346],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[193424,193458],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[193543,193577],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[193971,194000],"content":"IfThen(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"IfThen(Expression,Expression)","pos":[0,29]}]},{"pos":[194490,194524],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[194608,194642],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[194732,194766],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[195171,195215],"content":"IfThenElse(Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"IfThenElse(Expression,Expression,Expression)","pos":[0,44]}]},{"pos":[195783,195817],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[195901,195935],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[196020,196054],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[196144,196178],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[196441,196462],"content":"Increment(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Increment(Expression)","pos":[0,21]}]},{"pos":[196902,196936],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[197020,197054],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[197433,197465],"content":"Increment(Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Increment(Expression,MethodInfo)","pos":[0,32]}]},{"pos":[197964,197998],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[198076,198110],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[198194,198228],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[198693,198735],"content":"Invoke(Expression,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Invoke(Expression,IEnumerable<Expression>)"},{"pos":[199305,199339],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[199466,199500],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[199589,199623],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[200009,200040],"content":"Invoke(Expression,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Invoke(Expression,Expression[])","pos":[0,31]}]},{"pos":[200550,200584],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[200673,200707],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[200796,200830],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[201144,201163],"content":"IsFalse(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"IsFalse(Expression)","pos":[0,19]}]},{"pos":[201597,201631],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[201715,201749],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[202122,202152],"content":"IsFalse(Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"IsFalse(Expression,MethodInfo)","pos":[0,30]}]},{"pos":[202645,202679],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[202757,202791],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[202875,202909],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[203222,203240],"content":"IsTrue(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"IsTrue(Expression)","pos":[0,18]}]},{"pos":[203671,203705],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[203789,203823],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[204193,204222],"content":"IsTrue(Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"IsTrue(Expression,MethodInfo)","pos":[0,29]}]},{"pos":[204712,204746],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[204824,204858],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[204942,204976],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[205214,205221],"content":"Label()","needQuote":true,"needEscape":true,"nodes":[{"content":"Label()","pos":[0,7]}]},{"pos":[205575,205609],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[205920,205938],"content":"Label(LabelTarget)","needQuote":true,"needEscape":true,"nodes":[{"content":"Label(LabelTarget)","pos":[0,18]}]},{"pos":[206362,206396],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[206480,206514],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[206781,206794],"content":"Label(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Label(String)","pos":[0,13]}]},{"pos":[207149,207183],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[207263,207297],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[207560,207571],"content":"Label(Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Label(Type)","pos":[0,11]}]},{"pos":[207918,207952],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[208032,208066],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[208447,208476],"content":"Label(LabelTarget,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Label(LabelTarget,Expression)","pos":[0,29]}]},{"pos":[208971,209005],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[209095,209129],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[209213,209247],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[209538,209556],"content":"Label(Type,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Label(Type,String)","pos":[0,18]}]},{"pos":[209930,209964],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[210025,210059],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[210139,210173],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[210652,210703],"content":"Lambda(Expression,IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Lambda(Expression,IEnumerable<ParameterExpression>)"},{"pos":[211285,211319],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[211456,211490],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[211575,211609],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[212013,212053],"content":"Lambda(Expression,ParameterExpression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Lambda(Expression,ParameterExpression[])","pos":[0,40]}]},{"pos":[212575,212609],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[212708,212742],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[212827,212861],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[213371,213430],"content":"Lambda(Expression,Boolean,IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Lambda(Expression,Boolean,IEnumerable<ParameterExpression>)"},{"pos":[214043,214077],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[214143,214177],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[214314,214348],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[214433,214467],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[214901,214949],"content":"Lambda(Expression,Boolean,ParameterExpression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Lambda(Expression,Boolean,ParameterExpression[])","pos":[0,48]}]},{"pos":[215502,215536],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[215602,215636],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[215735,215769],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[215854,215888],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[216396,216454],"content":"Lambda(Expression,String,IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Lambda(Expression,String,IEnumerable<ParameterExpression>)"},{"pos":[217063,217097],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[217158,217192],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[217329,217363],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[217448,217482],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[217986,218042],"content":"Lambda(Type,Expression,IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Lambda(Type,Expression,IEnumerable<ParameterExpression>)"},{"pos":[218638,218672],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[218754,218788],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[218925,218959],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[219044,219078],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[219506,219551],"content":"Lambda(Type,Expression,ParameterExpression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Lambda(Type,Expression,ParameterExpression[])","pos":[0,45]}]},{"pos":[220087,220121],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[220203,220237],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[220336,220370],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[220455,220489],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[221027,221093],"content":"Lambda(Expression,String,Boolean,IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Lambda(Expression,String,Boolean,IEnumerable<ParameterExpression>)"},{"pos":[221733,221767],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[221828,221862],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[221928,221962],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[222099,222133],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[222218,222252],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[222786,222850],"content":"Lambda(Type,Expression,Boolean,IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Lambda(Type,Expression,Boolean,IEnumerable<ParameterExpression>)"},{"pos":[223477,223511],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[223593,223627],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[223693,223727],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[223864,223898],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[223983,224017],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[224475,224528],"content":"Lambda(Type,Expression,Boolean,ParameterExpression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Lambda(Type,Expression,Boolean,ParameterExpression[])","pos":[0,53]}]},{"pos":[225095,225129],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[225211,225245],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[225311,225345],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[225444,225478],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[225563,225597],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[226129,226192],"content":"Lambda(Type,Expression,String,IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Lambda(Type,Expression,String,IEnumerable<ParameterExpression>)"},{"pos":[226815,226849],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[226931,226965],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[227026,227060],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[227197,227231],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[227316,227350],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[227912,227983],"content":"Lambda(Type,Expression,String,Boolean,IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Lambda(Type,Expression,String,Boolean,IEnumerable<ParameterExpression>)"},{"pos":[228637,228671],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[228753,228787],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[228848,228882],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[228948,228982],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[229119,229153],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[229238,229272],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[229758,229809],"content":"Lambda(Expression,IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Lambda(Expression,IEnumerable<ParameterExpression>)"},{"pos":[230407,230441],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[230578,230612],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[230693,230727],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[231148,231188],"content":"Lambda(Expression,ParameterExpression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Lambda(Expression,ParameterExpression[])","pos":[0,40]}]},{"pos":[231726,231760],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[231859,231893],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[231974,232008],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[232535,232594],"content":"Lambda(Expression,Boolean,IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Lambda(Expression,Boolean,IEnumerable<ParameterExpression>)"},{"pos":[233223,233257],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[233323,233357],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[233494,233528],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[233609,233643],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[234094,234142],"content":"Lambda(Expression,Boolean,ParameterExpression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Lambda(Expression,Boolean,ParameterExpression[])","pos":[0,48]}]},{"pos":[234711,234745],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[234811,234845],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[234944,234978],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[235059,235093],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[235618,235676],"content":"Lambda(Expression,String,IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Lambda(Expression,String,IEnumerable<ParameterExpression>)"},{"pos":[236301,236335],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[236396,236430],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[236567,236601],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[236682,236716],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[237271,237337],"content":"Lambda(Expression,String,Boolean,IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Lambda(Expression,String,Boolean,IEnumerable<ParameterExpression>)"},{"pos":[237993,238027],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[238088,238122],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[238188,238222],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[238359,238393],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[238474,238508],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[238907,238939],"content":"LeftShift(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"LeftShift(Expression,Expression)","pos":[0,32]}]},{"pos":[239432,239466],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[239549,239583],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[239668,239702],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[240151,240194],"content":"LeftShift(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"LeftShift(Expression,Expression,MethodInfo)","pos":[0,43]}]},{"pos":[240746,240780],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[240863,240897],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[240975,241009],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[241094,241128],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[241531,241569],"content":"LeftShiftAssign(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"LeftShiftAssign(Expression,Expression)","pos":[0,38]}]},{"pos":[242080,242114],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[242197,242231],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[242316,242350],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[242817,242866],"content":"LeftShiftAssign(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"LeftShiftAssign(Expression,Expression,MethodInfo)","pos":[0,49]}]},{"pos":[243436,243470],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[243553,243587],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[243665,243699],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[243784,243818],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[244367,244433],"content":"LeftShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"LeftShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)","pos":[0,66]}]},{"pos":[245090,245124],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[245207,245241],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[245319,245353],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[245447,245481],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[245566,245600],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[245995,246026],"content":"LessThan(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"LessThan(Expression,Expression)","pos":[0,31]}]},{"pos":[246516,246550],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[246633,246667],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[246752,246786],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[247262,247312],"content":"LessThan(Expression,Expression,Boolean,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"LessThan(Expression,Expression,Boolean,MethodInfo)","pos":[0,50]}]},{"pos":[247894,247928],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[248011,248045],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[248113,248147],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[248225,248259],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[248344,248378],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[248780,248818],"content":"LessThanOrEqual(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"LessThanOrEqual(Expression,Expression)","pos":[0,38]}]},{"pos":[249329,249363],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[249446,249480],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[249565,249599],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[250096,250153],"content":"LessThanOrEqual(Expression,Expression,Boolean,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"LessThanOrEqual(Expression,Expression,Boolean,MethodInfo)","pos":[0,57]}]},{"pos":[250756,250790],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[250873,250907],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[250975,251009],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[251087,251121],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[251206,251240],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[251705,251750],"content":"ListBind(MemberInfo,IEnumerable<ph id=\"ph1\">&lt;ElementInit&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ListBind(MemberInfo,IEnumerable<ElementInit>)"},{"pos":[252309,252343],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[252474,252508],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[252594,252628],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[253010,253044],"content":"ListBind(MemberInfo,ElementInit[])","needQuote":true,"needEscape":true,"nodes":[{"content":"ListBind(MemberInfo,ElementInit[])","pos":[0,34]}]},{"pos":[253543,253577],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[253670,253704],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[253790,253824],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[254282,254327],"content":"ListBind(MethodInfo,IEnumerable<ph id=\"ph1\">&lt;ElementInit&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ListBind(MethodInfo,IEnumerable<ElementInit>)"},{"pos":[254906,254940],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[255071,255105],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[255191,255225],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[255607,255641],"content":"ListBind(MethodInfo,ElementInit[])","needQuote":true,"needEscape":true,"nodes":[{"content":"ListBind(MethodInfo,ElementInit[])","pos":[0,34]}]},{"pos":[256160,256194],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[256287,256321],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[256407,256441],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[256917,256965],"content":"ListInit(NewExpression,IEnumerable<ph id=\"ph1\">&lt;ElementInit&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ListInit(NewExpression,IEnumerable<ElementInit>)"},{"pos":[257563,257597],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[257728,257762],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[257849,257883],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[258357,258404],"content":"ListInit(NewExpression,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ListInit(NewExpression,IEnumerable<Expression>)"},{"pos":[258999,259033],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[259163,259197],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[259284,259318],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[259718,259755],"content":"ListInit(NewExpression,ElementInit[])","needQuote":true,"needEscape":true,"nodes":[{"content":"ListInit(NewExpression,ElementInit[])","pos":[0,37]}]},{"pos":[260293,260327],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[260420,260454],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[260541,260575],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[260973,261009],"content":"ListInit(NewExpression,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"ListInit(NewExpression,Expression[])","pos":[0,36]}]},{"pos":[261544,261578],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[261670,261704],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[261791,261825],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[262357,262415],"content":"ListInit(NewExpression,MethodInfo,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ListInit(NewExpression,MethodInfo,IEnumerable<Expression>)"},{"pos":[263072,263106],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[263187,263221],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[263351,263385],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[263472,263506],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[263962,264009],"content":"ListInit(NewExpression,MethodInfo,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"ListInit(NewExpression,MethodInfo,Expression[])","pos":[0,47]}]},{"pos":[264606,264640],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[264721,264755],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[264847,264881],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[264968,265002],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[265312,265328],"content":"Loop(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Loop(Expression)","pos":[0,16]}]},{"pos":[265740,265774],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[265857,265891],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[266269,266297],"content":"Loop(Expression,LabelTarget)","needQuote":true,"needEscape":true,"nodes":[{"content":"Loop(Expression,LabelTarget)","pos":[0,28]}]},{"pos":[266776,266810],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[266894,266928],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[267011,267045],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[267495,267535],"content":"Loop(Expression,LabelTarget,LabelTarget)","needQuote":true,"needEscape":true,"nodes":[{"content":"Loop(Expression,LabelTarget,LabelTarget)","pos":[0,40]}]},{"pos":[268084,268118],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[268202,268236],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[268323,268357],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[268440,268474],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[268940,268988],"content":"MakeBinary(ExpressionType,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeBinary(ExpressionType,Expression,Expression)","pos":[0,48]}]},{"pos":[269575,269609],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[269691,269725],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[269808,269842],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[269927,269961],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[270521,270588],"content":"MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo)","pos":[0,67]}]},{"pos":[271267,271301],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[271383,271417],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[271500,271534],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[271602,271636],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[271714,271748],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[271833,271867],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[272509,272593],"content":"MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo,LambdaExpression)","pos":[0,84]}]},{"pos":[273359,273393],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[273475,273509],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[273592,273626],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[273694,273728],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[273806,273840],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[273934,273968],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[274053,274087],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[274601,274663],"content":"MakeCatchBlock(Type,ParameterExpression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeCatchBlock(Type,ParameterExpression,Expression,Expression)","pos":[0,62]}]},{"pos":[275258,275292],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[275387,275421],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[275503,275537],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[275621,275655],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[275734,275768],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[276233,276289],"content":"MakeDynamic(Type,CallSiteBinder,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"MakeDynamic(Type,CallSiteBinder,IEnumerable<Expression>)"},{"pos":[276895,276929],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[277025,277059],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[277186,277220],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[277306,277340],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[277785,277828],"content":"MakeDynamic(Type,CallSiteBinder,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeDynamic(Type,CallSiteBinder,Expression)","pos":[0,43]}]},{"pos":[278363,278397],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[278493,278527],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[278609,278643],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[278729,278763],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[279212,279257],"content":"MakeDynamic(Type,CallSiteBinder,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeDynamic(Type,CallSiteBinder,Expression[])","pos":[0,45]}]},{"pos":[279803,279837],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[279933,279967],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[280056,280090],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[280176,280210],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[280725,280779],"content":"MakeDynamic(Type,CallSiteBinder,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeDynamic(Type,CallSiteBinder,Expression,Expression)","pos":[0,54]}]},{"pos":[281377,281411],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[281507,281541],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[281623,281657],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[281739,281773],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[281859,281893],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[282478,282543],"content":"MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression)","pos":[0,65]}]},{"pos":[283204,283238],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[283334,283368],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[283450,283484],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[283566,283600],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[283682,283716],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[283802,283836],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[284491,284567],"content":"MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression,Expression)","pos":[0,76]}]},{"pos":[285291,285325],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[285421,285455],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[285537,285571],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[285653,285687],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[285769,285803],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[285885,285919],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[286005,286039],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[286542,286598],"content":"MakeGoto(GotoExpressionKind,LabelTarget,Expression,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeGoto(GotoExpressionKind,LabelTarget,Expression,Type)","pos":[0,56]}]},{"pos":[287207,287241],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[287326,287360],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[287443,287477],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[287536,287570],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[287653,287687],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[288162,288220],"content":"MakeIndex(Expression,PropertyInfo,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"MakeIndex(Expression,PropertyInfo,IEnumerable<Expression>)"},{"pos":[288856,288890],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[288971,289005],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[289132,289166],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[289250,289284],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[289619,289658],"content":"MakeMemberAccess(Expression,MemberInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeMemberAccess(Expression,MemberInfo)","pos":[0,39]}]},{"pos":[290179,290213],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[290291,290325],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[290410,290444],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[291017,291087],"content":"MakeTry(Type,Expression,Expression,Expression,IEnumerable<ph id=\"ph1\">&lt;CatchBlock&gt;</ph>)","needQuote":true,"needEscape":true,"source":"MakeTry(Type,Expression,Expression,Expression,IEnumerable<CatchBlock>)"},{"pos":[291768,291802],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[291884,291918],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[292003,292037],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[292120,292154],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[292280,292314],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[292396,292430],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[292795,292836],"content":"MakeUnary(ExpressionType,Expression,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeUnary(ExpressionType,Expression,Type)","pos":[0,41]}]},{"pos":[293377,293411],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[293496,293530],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[293589,293623],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[293707,293741],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[294222,294274],"content":"MakeUnary(ExpressionType,Expression,Type,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeUnary(ExpressionType,Expression,Type,MethodInfo)","pos":[0,52]}]},{"pos":[294874,294908],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[294993,295027],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[295086,295120],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[295198,295232],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[295316,295350],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[295817,295866],"content":"MemberBind(MemberInfo,IEnumerable<ph id=\"ph1\">&lt;MemberBinding&gt;</ph>)","needQuote":true,"needEscape":true,"source":"MemberBind(MemberInfo,IEnumerable<MemberBinding>)"},{"pos":[296435,296469],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[296598,296632],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[296720,296754],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[297146,297184],"content":"MemberBind(MemberInfo,MemberBinding[])","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberBind(MemberInfo,MemberBinding[])","pos":[0,38]}]},{"pos":[297693,297727],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[297818,297852],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[297940,297974],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[298442,298491],"content":"MemberBind(MethodInfo,IEnumerable<ph id=\"ph1\">&lt;MemberBinding&gt;</ph>)","needQuote":true,"needEscape":true,"source":"MemberBind(MethodInfo,IEnumerable<MemberBinding>)"},{"pos":[299080,299114],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[299243,299277],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[299365,299399],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[299791,299829],"content":"MemberBind(MethodInfo,MemberBinding[])","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberBind(MethodInfo,MemberBinding[])","pos":[0,38]}]},{"pos":[300358,300392],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[300483,300517],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[300605,300639],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[301125,301177],"content":"MemberInit(NewExpression,IEnumerable<ph id=\"ph1\">&lt;MemberBinding&gt;</ph>)","needQuote":true,"needEscape":true,"source":"MemberInit(NewExpression,IEnumerable<MemberBinding>)"},{"pos":[301785,301819],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[301948,301982],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[302071,302105],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[302515,302556],"content":"MemberInit(NewExpression,MemberBinding[])","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberInit(NewExpression,MemberBinding[])","pos":[0,41]}]},{"pos":[303104,303138],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[303229,303263],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[303352,303386],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[303772,303801],"content":"Modulo(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Modulo(Expression,Expression)","pos":[0,29]}]},{"pos":[304285,304319],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[304402,304436],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[304521,304555],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[304995,305035],"content":"Modulo(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Modulo(Expression,Expression,MethodInfo)","pos":[0,40]}]},{"pos":[305578,305612],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[305695,305729],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[305807,305841],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[305926,305960],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[306354,306389],"content":"ModuloAssign(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"ModuloAssign(Expression,Expression)","pos":[0,35]}]},{"pos":[306891,306925],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[307008,307042],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[307127,307161],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[307619,307665],"content":"ModuloAssign(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"ModuloAssign(Expression,Expression,MethodInfo)","pos":[0,46]}]},{"pos":[308226,308260],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[308343,308377],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[308455,308489],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[308574,308608],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[309148,309211],"content":"ModuloAssign(Expression,Expression,MethodInfo,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"ModuloAssign(Expression,Expression,MethodInfo,LambdaExpression)","pos":[0,63]}]},{"pos":[309859,309893],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[309976,310010],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[310088,310122],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[310216,310250],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[310335,310369],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[310761,310792],"content":"Multiply(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Multiply(Expression,Expression)","pos":[0,31]}]},{"pos":[311282,311316],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[311399,311433],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[311518,311552],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[311998,312040],"content":"Multiply(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Multiply(Expression,Expression,MethodInfo)","pos":[0,42]}]},{"pos":[312589,312623],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[312706,312740],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[312818,312852],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[312937,312971],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[313371,313408],"content":"MultiplyAssign(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MultiplyAssign(Expression,Expression)","pos":[0,37]}]},{"pos":[313916,313950],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[314033,314067],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[314152,314186],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[314650,314698],"content":"MultiplyAssign(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"MultiplyAssign(Expression,Expression,MethodInfo)","pos":[0,48]}]},{"pos":[315265,315299],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[315382,315416],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[315494,315528],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[315613,315647],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[316193,316258],"content":"MultiplyAssign(Expression,Expression,MethodInfo,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MultiplyAssign(Expression,Expression,MethodInfo,LambdaExpression)","pos":[0,65]}]},{"pos":[316912,316946],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[317029,317063],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[317141,317175],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[317269,317303],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[317388,317422],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[317842,317886],"content":"MultiplyAssignChecked(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MultiplyAssignChecked(Expression,Expression)","pos":[0,44]}]},{"pos":[318415,318449],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[318532,318566],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[318651,318685],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[319170,319225],"content":"MultiplyAssignChecked(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"MultiplyAssignChecked(Expression,Expression,MethodInfo)","pos":[0,55]}]},{"pos":[319813,319847],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[319930,319964],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[320042,320076],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[320161,320195],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[320762,320834],"content":"MultiplyAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MultiplyAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)","pos":[0,72]}]},{"pos":[321509,321543],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[321626,321660],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[321738,321772],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[321866,321900],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[321985,322019],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[322434,322472],"content":"MultiplyChecked(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MultiplyChecked(Expression,Expression)","pos":[0,38]}]},{"pos":[322983,323017],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[323100,323134],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[323219,323253],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[323720,323769],"content":"MultiplyChecked(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"MultiplyChecked(Expression,Expression,MethodInfo)","pos":[0,49]}]},{"pos":[324339,324373],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[324456,324490],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[324568,324602],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[324687,324721],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[325042,325060],"content":"Negate(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Negate(Expression)","pos":[0,18]}]},{"pos":[325491,325525],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[325609,325643],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[326013,326042],"content":"Negate(Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Negate(Expression,MethodInfo)","pos":[0,29]}]},{"pos":[326532,326566],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[326644,326678],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[326762,326796],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[327122,327147],"content":"NegateChecked(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"NegateChecked(Expression)","pos":[0,25]}]},{"pos":[327599,327633],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[327717,327751],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[328142,328178],"content":"NegateChecked(Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"NegateChecked(Expression,MethodInfo)","pos":[0,36]}]},{"pos":[328689,328723],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[328801,328835],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[328919,328953],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[329264,329284],"content":"New(ConstructorInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"New(ConstructorInfo)","pos":[0,20]}]},{"pos":[329714,329748],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[329830,329864],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[330121,330130],"content":"New(Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"New(Type)","pos":[0,9]}]},{"pos":[330473,330507],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[330589,330623],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[331074,331118],"content":"New(ConstructorInfo,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"New(ConstructorInfo,IEnumerable<Expression>)"},{"pos":[331682,331716],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[331843,331877],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[331959,331993],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[332368,332401],"content":"New(ConstructorInfo,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"New(ConstructorInfo,Expression[])","pos":[0,33]}]},{"pos":[332905,332939],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[333028,333062],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[333144,333178],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[333767,333835],"content":"New(ConstructorInfo,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>,IEnumerable<ph id=\"ph2\">&lt;MemberInfo&gt;</ph>)","needQuote":true,"needEscape":true,"source":"New(ConstructorInfo,IEnumerable<Expression>,IEnumerable<MemberInfo>)"},{"pos":[334525,334559],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[334686,334720],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[334839,334873],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[334955,334989],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[335502,335559],"content":"New(ConstructorInfo,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>,MemberInfo[])","needQuote":true,"needEscape":true,"source":"New(ConstructorInfo,IEnumerable<Expression>,MemberInfo[])"},{"pos":[336189,336223],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[336350,336384],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[336465,336499],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[336581,336615],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[337044,337088],"content":"NewArrayBounds(Type,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"NewArrayBounds(Type,IEnumerable<Expression>)"},{"pos":[337600,337634],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[337758,337792],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[337879,337913],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[338277,338310],"content":"NewArrayBounds(Type,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"NewArrayBounds(Type,Expression[])","pos":[0,33]}]},{"pos":[338762,338796],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[338882,338916],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[339003,339037],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[339473,339515],"content":"NewArrayInit(Type,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"NewArrayInit(Type,IEnumerable<Expression>)"},{"pos":[340027,340061],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[340191,340225],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[340312,340346],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[340704,340735],"content":"NewArrayInit(Type,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"NewArrayInit(Type,Expression[])","pos":[0,31]}]},{"pos":[341187,341221],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[341313,341347],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[341434,341468],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[341718,341726],"content":"NodeType","needQuote":true,"needEscape":true,"nodes":[{"content":"NodeType","pos":[0,8]}]},{"pos":[342080,342114],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[342365,342380],"content":"Not(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Not(Expression)","pos":[0,15]}]},{"pos":[342802,342836],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[342920,342954],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[343315,343341],"content":"Not(Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Not(Expression,MethodInfo)","pos":[0,26]}]},{"pos":[343822,343856],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[343934,343968],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[344052,344086],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[344469,344500],"content":"NotEqual(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"NotEqual(Expression,Expression)","pos":[0,31]}]},{"pos":[344990,345024],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[345107,345141],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[345226,345260],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[345736,345786],"content":"NotEqual(Expression,Expression,Boolean,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"NotEqual(Expression,Expression,Boolean,MethodInfo)","pos":[0,50]}]},{"pos":[346368,346402],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[346485,346519],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[346587,346621],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[346699,346733],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[346818,346852],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[347182,347208],"content":"OnesComplement(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"OnesComplement(Expression)","pos":[0,26]}]},{"pos":[347663,347697],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[347781,347815],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[348209,348246],"content":"OnesComplement(Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"OnesComplement(Expression,MethodInfo)","pos":[0,37]}]},{"pos":[348760,348794],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[348872,348906],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[348990,349024],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[349406,349431],"content":"Or(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Or(Expression,Expression)","pos":[0,25]}]},{"pos":[349903,349937],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[350020,350054],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[350139,350173],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[350601,350637],"content":"Or(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Or(Expression,Expression,MethodInfo)","pos":[0,36]}]},{"pos":[351168,351202],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[351285,351319],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[351397,351431],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[351516,351550],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[351932,351963],"content":"OrAssign(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"OrAssign(Expression,Expression)","pos":[0,31]}]},{"pos":[352453,352487],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[352570,352604],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[352689,352723],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[353169,353211],"content":"OrAssign(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"OrAssign(Expression,Expression,MethodInfo)","pos":[0,42]}]},{"pos":[353760,353794],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[353877,353911],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[353989,354023],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[354108,354142],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[354670,354729],"content":"OrAssign(Expression,Expression,MethodInfo,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"OrAssign(Expression,Expression,MethodInfo,LambdaExpression)","pos":[0,59]}]},{"pos":[355365,355399],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[355482,355516],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[355594,355628],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[355722,355756],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[355841,355875],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[356259,356288],"content":"OrElse(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"OrElse(Expression,Expression)","pos":[0,29]}]},{"pos":[356772,356806],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[356889,356923],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[357008,357042],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[357482,357522],"content":"OrElse(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"OrElse(Expression,Expression,MethodInfo)","pos":[0,40]}]},{"pos":[358065,358099],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[358182,358216],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[358294,358328],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[358413,358447],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[358719,358734],"content":"Parameter(Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter(Type)","pos":[0,15]}]},{"pos":[359101,359135],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[359223,359257],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[359560,359582],"content":"Parameter(Type,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter(Type,String)","pos":[0,22]}]},{"pos":[359976,360010],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[360071,360105],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[360193,360227],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[360568,360599],"content":"PostDecrementAssign(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"PostDecrementAssign(Expression)","pos":[0,31]}]},{"pos":[361069,361103],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[361187,361221],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[361630,361672],"content":"PostDecrementAssign(Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"PostDecrementAssign(Expression,MethodInfo)","pos":[0,42]}]},{"pos":[362201,362235],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[362313,362347],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[362431,362465],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[362816,362847],"content":"PostIncrementAssign(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"PostIncrementAssign(Expression)","pos":[0,31]}]},{"pos":[363317,363351],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[363435,363469],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[363878,363920],"content":"PostIncrementAssign(Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"PostIncrementAssign(Expression,MethodInfo)","pos":[0,42]}]},{"pos":[364449,364483],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[364561,364595],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[364679,364713],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[365106,365134],"content":"Power(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Power(Expression,Expression)","pos":[0,28]}]},{"pos":[365615,365649],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[365732,365766],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[365851,365885],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[366322,366361],"content":"Power(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Power(Expression,Expression,MethodInfo)","pos":[0,39]}]},{"pos":[366901,366935],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[367018,367052],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[367130,367164],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[367249,367283],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[367674,367708],"content":"PowerAssign(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"PowerAssign(Expression,Expression)","pos":[0,34]}]},{"pos":[368207,368241],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[368324,368358],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[368443,368477],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[368932,368977],"content":"PowerAssign(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"PowerAssign(Expression,Expression,MethodInfo)","pos":[0,45]}]},{"pos":[369535,369569],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[369652,369686],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[369764,369798],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[369883,369917],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[370454,370516],"content":"PowerAssign(Expression,Expression,MethodInfo,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"PowerAssign(Expression,Expression,MethodInfo,LambdaExpression)","pos":[0,62]}]},{"pos":[371161,371195],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[371278,371312],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[371390,371424],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[371518,371552],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[371637,371671],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[372012,372042],"content":"PreDecrementAssign(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"PreDecrementAssign(Expression)","pos":[0,30]}]},{"pos":[372509,372543],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[372627,372661],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[373067,373108],"content":"PreDecrementAssign(Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"PreDecrementAssign(Expression,MethodInfo)","pos":[0,41]}]},{"pos":[373634,373668],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[373746,373780],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[373864,373898],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[374246,374276],"content":"PreIncrementAssign(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"PreIncrementAssign(Expression)","pos":[0,30]}]},{"pos":[374743,374777],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[374861,374895],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[375301,375342],"content":"PreIncrementAssign(Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"PreIncrementAssign(Expression,MethodInfo)","pos":[0,41]}]},{"pos":[375868,375902],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[375980,376014],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[376098,376132],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[376518,376549],"content":"Property(Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Property(Expression,MethodInfo)","pos":[0,31]}]},{"pos":[377056,377090],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[377178,377212],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[377297,377331],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[377711,377744],"content":"Property(Expression,PropertyInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Property(Expression,PropertyInfo)","pos":[0,33]}]},{"pos":[378249,378283],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[378365,378399],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[378484,378518],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[378864,378891],"content":"Property(Expression,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Property(Expression,String)","pos":[0,27]}]},{"pos":[379364,379398],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[379467,379501],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[379586,379620],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[380150,380207],"content":"Property(Expression,PropertyInfo,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Property(Expression,PropertyInfo,IEnumerable<Expression>)"},{"pos":[380840,380874],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[380955,380989],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[381116,381150],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[381234,381268],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[381722,381768],"content":"Property(Expression,PropertyInfo,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Property(Expression,PropertyInfo,Expression[])","pos":[0,46]}]},{"pos":[382341,382375],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[382456,382490],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[382579,382613],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[382697,382731],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[383151,383191],"content":"Property(Expression,String,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Property(Expression,String,Expression[])","pos":[0,40]}]},{"pos":[383733,383767],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[383836,383870],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[383959,383993],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[384077,384111],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[384481,384513],"content":"Property(Expression,Type,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Property(Expression,Type,String)","pos":[0,32]}]},{"pos":[385007,385041],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[385100,385134],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[385203,385237],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[385322,385356],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[385716,385750],"content":"PropertyOrField(Expression,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"PropertyOrField(Expression,String)","pos":[0,34]}]},{"pos":[386251,386285],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[386361,386395],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[386480,386514],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[386769,386786],"content":"Quote(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Quote(Expression)","pos":[0,17]}]},{"pos":[387214,387248],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[387332,387366],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[387551,387559],"content":"Reduce()","needQuote":true,"needEscape":true,"nodes":[{"content":"Reduce()","pos":[0,8]}]},{"pos":[387915,387949],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[388150,388166],"content":"ReduceAndCheck()","needQuote":true,"needEscape":true,"nodes":[{"content":"ReduceAndCheck()","pos":[0,16]}]},{"pos":[388538,388572],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[388777,388795],"content":"ReduceExtensions()","needQuote":true,"needEscape":true,"nodes":[{"content":"ReduceExtensions()","pos":[0,18]}]},{"pos":[389173,389207],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[389550,389587],"content":"ReferenceEqual(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"ReferenceEqual(Expression,Expression)","pos":[0,37]}]},{"pos":[390095,390129],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[390212,390246],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[390331,390365],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[390714,390754],"content":"ReferenceNotEqual(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"ReferenceNotEqual(Expression,Expression)","pos":[0,40]}]},{"pos":[391271,391305],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[391388,391422],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[391507,391541],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[391728,391737],"content":"Rethrow()","needQuote":true,"needEscape":true,"nodes":[{"content":"Rethrow()","pos":[0,9]}]},{"pos":[392105,392139],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[392408,392421],"content":"Rethrow(Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Rethrow(Type)","pos":[0,13]}]},{"pos":[392778,392812],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[392896,392930],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[393245,393264],"content":"Return(LabelTarget)","needQuote":true,"needEscape":true,"nodes":[{"content":"Return(LabelTarget)","pos":[0,19]}]},{"pos":[393690,393724],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[393807,393841],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[394225,394255],"content":"Return(LabelTarget,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Return(LabelTarget,Expression)","pos":[0,30]}]},{"pos":[394745,394779],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[394862,394896],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[394979,395013],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[395351,395375],"content":"Return(LabelTarget,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Return(LabelTarget,Type)","pos":[0,24]}]},{"pos":[395822,395856],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[395915,395949],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[396032,396066],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[396474,396509],"content":"Return(LabelTarget,Expression,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Return(LabelTarget,Expression,Type)","pos":[0,35]}]},{"pos":[397020,397054],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[397137,397171],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[397230,397264],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[397347,397381],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[397771,397804],"content":"RightShift(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"RightShift(Expression,Expression)","pos":[0,33]}]},{"pos":[398300,398334],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[398417,398451],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[398536,398570],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[399022,399066],"content":"RightShift(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"RightShift(Expression,Expression,MethodInfo)","pos":[0,44]}]},{"pos":[399621,399655],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[399738,399772],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[399850,399884],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[399969,400003],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[400409,400448],"content":"RightShiftAssign(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"RightShiftAssign(Expression,Expression)","pos":[0,39]}]},{"pos":[400962,400996],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[401079,401113],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[401198,401232],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[401702,401752],"content":"RightShiftAssign(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"RightShiftAssign(Expression,Expression,MethodInfo)","pos":[0,50]}]},{"pos":[402325,402359],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[402442,402476],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[402554,402588],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[402673,402707],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[403259,403326],"content":"RightShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"RightShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)","pos":[0,67]}]},{"pos":[403986,404020],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[404103,404137],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[404215,404249],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[404343,404377],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[404462,404496],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[404936,404986],"content":"RuntimeVariables(IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"RuntimeVariables(IEnumerable<ParameterExpression>)"},{"pos":[405598,405632],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[405727,405761],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[406125,406164],"content":"RuntimeVariables(ParameterExpression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"RuntimeVariables(ParameterExpression[])","pos":[0,39]}]},{"pos":[406678,406712],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[406807,406841],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[407237,407268],"content":"Subtract(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Subtract(Expression,Expression)","pos":[0,31]}]},{"pos":[407758,407792],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[407875,407909],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[407994,408028],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[408474,408516],"content":"Subtract(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Subtract(Expression,Expression,MethodInfo)","pos":[0,42]}]},{"pos":[409065,409099],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[409182,409216],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[409294,409328],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[409413,409447],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[409847,409884],"content":"SubtractAssign(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"SubtractAssign(Expression,Expression)","pos":[0,37]}]},{"pos":[410392,410426],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[410509,410543],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[410628,410662],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[411126,411174],"content":"SubtractAssign(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"SubtractAssign(Expression,Expression,MethodInfo)","pos":[0,48]}]},{"pos":[411741,411775],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[411858,411892],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[411970,412004],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[412089,412123],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[412669,412734],"content":"SubtractAssign(Expression,Expression,MethodInfo,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"SubtractAssign(Expression,Expression,MethodInfo,LambdaExpression)","pos":[0,65]}]},{"pos":[413388,413422],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[413505,413539],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[413617,413651],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[413745,413779],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[413864,413898],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[414318,414362],"content":"SubtractAssignChecked(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"SubtractAssignChecked(Expression,Expression)","pos":[0,44]}]},{"pos":[414891,414925],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[415008,415042],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[415127,415161],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[415646,415701],"content":"SubtractAssignChecked(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"SubtractAssignChecked(Expression,Expression,MethodInfo)","pos":[0,55]}]},{"pos":[416289,416323],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[416406,416440],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[416518,416552],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[416637,416671],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[417238,417310],"content":"SubtractAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"SubtractAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)","pos":[0,72]}]},{"pos":[417985,418019],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[418102,418136],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[418214,418248],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[418342,418376],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[418461,418495],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[418910,418948],"content":"SubtractChecked(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"SubtractChecked(Expression,Expression)","pos":[0,38]}]},{"pos":[419459,419493],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[419576,419610],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[419695,419729],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[420196,420245],"content":"SubtractChecked(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"SubtractChecked(Expression,Expression,MethodInfo)","pos":[0,49]}]},{"pos":[420815,420849],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[420932,420966],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[421044,421078],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[421163,421197],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[421592,421623],"content":"Switch(Expression,SwitchCase[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Switch(Expression,SwitchCase[])","pos":[0,31]}]},{"pos":[422127,422161],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[422246,422280],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[422365,422399],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[422855,422897],"content":"Switch(Expression,Expression,SwitchCase[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Switch(Expression,Expression,SwitchCase[])","pos":[0,42]}]},{"pos":[423471,423505],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[423594,423628],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[423713,423747],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[423832,423866],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[424456,424520],"content":"Switch(Expression,Expression,MethodInfo,IEnumerable<ph id=\"ph1\">&lt;SwitchCase&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Switch(Expression,Expression,MethodInfo,IEnumerable<SwitchCase>)"},{"pos":[425217,425251],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[425340,425374],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[425456,425490],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[425613,425647],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[425732,425766],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[426280,426333],"content":"Switch(Expression,Expression,MethodInfo,SwitchCase[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Switch(Expression,Expression,MethodInfo,SwitchCase[])","pos":[0,53]}]},{"pos":[426970,427004],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[427093,427127],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[427209,427243],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[427328,427362],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[427447,427481],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[428095,428164],"content":"Switch(Type,Expression,Expression,MethodInfo,IEnumerable<ph id=\"ph1\">&lt;SwitchCase&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Switch(Type,Expression,Expression,MethodInfo,IEnumerable<SwitchCase>)"},{"pos":[428852,428886],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[428975,429009],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[429098,429132],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[429214,429248],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[429371,429405],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[429490,429524],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[430062,430120],"content":"Switch(Type,Expression,Expression,MethodInfo,SwitchCase[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Switch(Type,Expression,Expression,MethodInfo,SwitchCase[])","pos":[0,58]}]},{"pos":[430748,430782],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[430871,430905],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[430994,431028],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[431110,431144],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[431229,431263],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[431348,431382],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[431852,431898],"content":"SwitchCase(Expression,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"SwitchCase(Expression,IEnumerable<Expression>)"},{"pos":[432459,432493],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[432621,432655],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[432734,432768],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[433166,433201],"content":"SwitchCase(Expression,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"SwitchCase(Expression,Expression[])","pos":[0,35]}]},{"pos":[433702,433736],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[433826,433860],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[433939,433973],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[434263,434285],"content":"SymbolDocument(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"SymbolDocument(String)","pos":[0,22]}]},{"pos":[434682,434716],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[434803,434837],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[435155,435182],"content":"SymbolDocument(String,Guid)","needQuote":true,"needEscape":true,"nodes":[{"content":"SymbolDocument(String,Guid)","pos":[0,27]}]},{"pos":[435604,435638],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[435701,435735],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[435822,435856],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[436198,436230],"content":"SymbolDocument(String,Guid,Guid)","needQuote":true,"needEscape":true,"nodes":[{"content":"SymbolDocument(String,Guid,Guid)","pos":[0,32]}]},{"pos":[436683,436717],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[436780,436814],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[436883,436917],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[437004,437038],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[437404,437441],"content":"SymbolDocument(String,Guid,Guid,Guid)","needQuote":true,"needEscape":true,"nodes":[{"content":"SymbolDocument(String,Guid,Guid,Guid)","pos":[0,37]}]},{"pos":[437923,437957],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[438020,438054],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[438123,438157],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[438224,438258],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[438345,438379],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[438697,438714],"content":"Throw(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Throw(Expression)","pos":[0,17]}]},{"pos":[439132,439166],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[439250,439284],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[439617,439639],"content":"Throw(Expression,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Throw(Expression,Type)","pos":[0,22]}]},{"pos":[440078,440112],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[440171,440205],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[440289,440323],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[440566,440576],"content":"ToString()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[440890,440924],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[441259,441292],"content":"TryCatch(Expression,CatchBlock[])","needQuote":true,"needEscape":true,"nodes":[{"content":"TryCatch(Expression,CatchBlock[])","pos":[0,33]}]},{"pos":[441788,441822],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[441910,441944],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[442026,442060],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[442479,442530],"content":"TryCatchFinally(Expression,Expression,CatchBlock[])","needQuote":true,"needEscape":true,"nodes":[{"content":"TryCatchFinally(Expression,Expression,CatchBlock[])","pos":[0,51]}]},{"pos":[443113,443147],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[443232,443266],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[443354,443388],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[443470,443504],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[443835,443866],"content":"TryFault(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryFault(Expression,Expression)","pos":[0,31]}]},{"pos":[444353,444387],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[444470,444504],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[444586,444620],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[444955,444988],"content":"TryFinally(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryFinally(Expression,Expression)","pos":[0,33]}]},{"pos":[445483,445517],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[445602,445636],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[445718,445752],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[446013,446042],"content":"TryGetActionType(Type[],Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryGetActionType(Type[],Type)","pos":[0,29]}]},{"pos":[446438,446472],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[446537,446571],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[446630,446664],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[446921,446948],"content":"TryGetFuncType(Type[],Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryGetFuncType(Type[],Type)","pos":[0,27]}]},{"pos":[447336,447370],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[447433,447467],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[447526,447560],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[447741,447745],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[448026,448060],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[448341,448364],"content":"TypeAs(Expression,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"TypeAs(Expression,Type)","pos":[0,23]}]},{"pos":[448816,448850],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[448909,448943],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[449027,449061],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[449348,449374],"content":"TypeEqual(Expression,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"TypeEqual(Expression,Type)","pos":[0,26]}]},{"pos":[449840,449874],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[449933,449967],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[450056,450090],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[450371,450394],"content":"TypeIs(Expression,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"TypeIs(Expression,Type)","pos":[0,23]}]},{"pos":[450851,450885],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[450944,450978],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[451067,451101],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[451364,451385],"content":"UnaryPlus(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryPlus(Expression)","pos":[0,21]}]},{"pos":[451825,451859],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[451943,451977],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[452356,452388],"content":"UnaryPlus(Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryPlus(Expression,MethodInfo)","pos":[0,32]}]},{"pos":[452887,452921],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[452999,453033],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[453117,453151],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[453488,453510],"content":"Unbox(Expression,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Unbox(Expression,Type)","pos":[0,22]}]},{"pos":[453959,453993],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[454052,454086],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[454170,454204],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[454419,454433],"content":"Variable(Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Variable(Type)","pos":[0,14]}]},{"pos":[454797,454831],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[454919,454953],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[455253,455274],"content":"Variable(Type,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Variable(Type,String)","pos":[0,21]}]},{"pos":[455665,455699],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[455760,455794],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[455882,455916],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[456258,456290],"content":"VisitChildren(ExpressionVisitor)","needQuote":true,"needEscape":true,"nodes":[{"content":"VisitChildren(ExpressionVisitor)","pos":[0,32]}]},{"pos":[456763,456797],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[456876,456910],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[457021,457034],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[457156,457168],"content":"Expression()","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression()","pos":[0,12]}]},{"pos":[457442,457473],"content":"Expression(ExpressionType,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression(ExpressionType,Type)","pos":[0,31]}]},{"pos":[457720,457734],"content":"ExpressionType","needQuote":true,"needEscape":true,"nodes":[{"content":"ExpressionType","pos":[0,14]}]},{"pos":[457881,457885],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[458096,458121],"content":"Accept(ExpressionVisitor)","needQuote":true,"needEscape":true,"nodes":[{"content":"Accept(ExpressionVisitor)","pos":[0,25]}]},{"pos":[458352,458362],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[458548,458565],"content":"ExpressionVisitor","needQuote":true,"needEscape":true,"nodes":[{"content":"ExpressionVisitor","pos":[0,17]}]},{"pos":[458844,458870],"content":"Add(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Add(Expression,Expression)","pos":[0,26]}]},{"pos":[459109,459125],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[459316,459326],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[459505,459515],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[459809,459846],"content":"Add(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Add(Expression,Expression,MethodInfo)","pos":[0,37]}]},{"pos":[460107,460123],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[460314,460324],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[460503,460513],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[460680,460690],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[460955,460987],"content":"AddAssign(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"AddAssign(Expression,Expression)","pos":[0,32]}]},{"pos":[461238,461254],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[461445,461455],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[461634,461644],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[461944,461987],"content":"AddAssign(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"AddAssign(Expression,Expression,MethodInfo)","pos":[0,43]}]},{"pos":[462260,462276],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[462467,462477],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[462656,462666],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[462833,462843],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[463178,463238],"content":"AddAssign(Expression,Expression,MethodInfo,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"AddAssign(Expression,Expression,MethodInfo,LambdaExpression)","pos":[0,60]}]},{"pos":[463545,463561],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[463752,463762],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[463941,463951],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[464118,464128],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[464307,464323],"content":"LambdaExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[464613,464652],"content":"AddAssignChecked(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"AddAssignChecked(Expression,Expression)","pos":[0,39]}]},{"pos":[464917,464933],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[465124,465134],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[465313,465323],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[465630,465680],"content":"AddAssignChecked(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"AddAssignChecked(Expression,Expression,MethodInfo)","pos":[0,50]}]},{"pos":[465967,465983],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[466174,466184],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[466363,466373],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[466540,466550],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[466892,466959],"content":"AddAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"AddAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)","pos":[0,67]}]},{"pos":[467280,467296],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[467487,467497],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[467676,467686],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[467853,467863],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[468042,468058],"content":"LambdaExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[468342,468375],"content":"AddChecked(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"AddChecked(Expression,Expression)","pos":[0,33]}]},{"pos":[468628,468644],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[468835,468845],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[469024,469034],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[469335,469379],"content":"AddChecked(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"AddChecked(Expression,Expression,MethodInfo)","pos":[0,44]}]},{"pos":[469654,469670],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[469861,469871],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[470050,470060],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[470227,470237],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[470496,470522],"content":"And(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"And(Expression,Expression)","pos":[0,26]}]},{"pos":[470761,470777],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[470968,470978],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[471157,471167],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[471461,471498],"content":"And(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"And(Expression,Expression,MethodInfo)","pos":[0,37]}]},{"pos":[471759,471775],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[471966,471976],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[472155,472165],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[472332,472342],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[472605,472635],"content":"AndAlso(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"AndAlso(Expression,Expression)","pos":[0,30]}]},{"pos":[472882,472898],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[473089,473099],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[473278,473288],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[473586,473627],"content":"AndAlso(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"AndAlso(Expression,Expression,MethodInfo)","pos":[0,41]}]},{"pos":[473896,473912],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[474103,474113],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[474292,474302],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[474469,474479],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[474744,474776],"content":"AndAssign(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"AndAssign(Expression,Expression)","pos":[0,32]}]},{"pos":[475027,475043],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[475234,475244],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[475423,475433],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[475733,475776],"content":"AndAssign(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"AndAssign(Expression,Expression,MethodInfo)","pos":[0,43]}]},{"pos":[476049,476065],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[476256,476266],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[476445,476455],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[476622,476632],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[476967,477027],"content":"AndAssign(Expression,Expression,MethodInfo,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"AndAssign(Expression,Expression,MethodInfo,LambdaExpression)","pos":[0,60]}]},{"pos":[477334,477350],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[477541,477551],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[477730,477740],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[477907,477917],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[478096,478112],"content":"LambdaExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[478437,478484],"content":"ArrayAccess(Expression,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ArrayAccess(Expression,IEnumerable<Expression>)"},{"pos":[478764,478779],"content":"IndexExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"IndexExpression","pos":[0,15]}]},{"pos":[478968,478978],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[479200,479223],"content":"IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<Expression>"},{"pos":[479551,479587],"content":"ArrayAccess(Expression,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"ArrayAccess(Expression,Expression[])","pos":[0,36]}]},{"pos":[479845,479860],"content":"IndexExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"IndexExpression","pos":[0,15]}]},{"pos":[480049,480059],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[480238,480248],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[480562,480608],"content":"ArrayIndex(Expression,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ArrayIndex(Expression,IEnumerable<Expression>)"},{"pos":[480891,480911],"content":"MethodCallExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodCallExpression","pos":[0,20]}]},{"pos":[481110,481120],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[481342,481365],"content":"IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<Expression>"},{"pos":[481690,481723],"content":"ArrayIndex(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"ArrayIndex(Expression,Expression)","pos":[0,33]}]},{"pos":[481976,481992],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[482183,482193],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[482372,482382],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[482656,482691],"content":"ArrayIndex(Expression,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"ArrayIndex(Expression,Expression[])","pos":[0,35]}]},{"pos":[482952,482972],"content":"MethodCallExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodCallExpression","pos":[0,20]}]},{"pos":[483171,483181],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[483360,483370],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[483610,483633],"content":"ArrayLength(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"ArrayLength(Expression)","pos":[0,23]}]},{"pos":[483865,483880],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[484069,484079],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[484347,484376],"content":"Assign(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Assign(Expression,Expression)","pos":[0,29]}]},{"pos":[484621,484637],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[484828,484838],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[485017,485027],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[485287,485314],"content":"Bind(MemberInfo,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Bind(MemberInfo,Expression)","pos":[0,27]}]},{"pos":[485555,485571],"content":"MemberAssignment","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberAssignment","pos":[0,16]}]},{"pos":[485750,485760],"content":"MemberInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberInfo","pos":[0,10]}]},{"pos":[485933,485943],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[486203,486230],"content":"Bind(MethodInfo,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Bind(MethodInfo,Expression)","pos":[0,27]}]},{"pos":[486471,486487],"content":"MemberAssignment","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberAssignment","pos":[0,16]}]},{"pos":[486666,486676],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[486849,486859],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[487131,487161],"content":"Block(IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Block(IEnumerable<Expression>)"},{"pos":[487407,487422],"content":"BlockExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BlockExpression","pos":[0,15]}]},{"pos":[487654,487677],"content":"IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<Expression>"},{"pos":[487964,487983],"content":"Block(Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Block(Expression[])","pos":[0,19]}]},{"pos":[488207,488222],"content":"BlockExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BlockExpression","pos":[0,15]}]},{"pos":[488411,488421],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[488779,488842],"content":"Block(IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>,IEnumerable<ph id=\"ph2\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Block(IEnumerable<ParameterExpression>,IEnumerable<Expression>)"},{"pos":[489154,489169],"content":"BlockExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BlockExpression","pos":[0,15]}]},{"pos":[489410,489442],"content":"IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<ParameterExpression>"},{"pos":[489735,489758],"content":"IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<Expression>"},{"pos":[490129,490181],"content":"Block(IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>,Expression[])","needQuote":true,"needEscape":true,"source":"Block(IEnumerable<ParameterExpression>,Expression[])"},{"pos":[490471,490486],"content":"BlockExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BlockExpression","pos":[0,15]}]},{"pos":[490727,490759],"content":"IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<ParameterExpression>"},{"pos":[491009,491019],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[491288,491316],"content":"Block(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Block(Expression,Expression)","pos":[0,28]}]},{"pos":[491558,491573],"content":"BlockExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BlockExpression","pos":[0,15]}]},{"pos":[491762,491772],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[491951,491961],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[492245,492280],"content":"Block(Type,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Block(Type,IEnumerable<Expression>)"},{"pos":[492536,492551],"content":"BlockExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BlockExpression","pos":[0,15]}]},{"pos":[492700,492704],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[492897,492920],"content":"IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<Expression>"},{"pos":[493219,493243],"content":"Block(Type,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Block(Type,Expression[])","pos":[0,24]}]},{"pos":[493477,493492],"content":"BlockExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BlockExpression","pos":[0,15]}]},{"pos":[493641,493645],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[493795,493805],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[494109,494148],"content":"Block(Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Block(Expression,Expression,Expression)","pos":[0,39]}]},{"pos":[494412,494427],"content":"BlockExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BlockExpression","pos":[0,15]}]},{"pos":[494616,494626],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[494805,494815],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[494994,495004],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[495372,495440],"content":"Block(Type,IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>,IEnumerable<ph id=\"ph2\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Block(Type,IEnumerable<ParameterExpression>,IEnumerable<Expression>)"},{"pos":[495762,495777],"content":"BlockExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BlockExpression","pos":[0,15]}]},{"pos":[495926,495930],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[496132,496164],"content":"IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<ParameterExpression>"},{"pos":[496457,496480],"content":"IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<Expression>"},{"pos":[496863,496920],"content":"Block(Type,IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>,Expression[])","needQuote":true,"needEscape":true,"source":"Block(Type,IEnumerable<ParameterExpression>,Expression[])"},{"pos":[497220,497235],"content":"BlockExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BlockExpression","pos":[0,15]}]},{"pos":[497384,497388],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[497590,497622],"content":"IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<ParameterExpression>"},{"pos":[497872,497882],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[498221,498271],"content":"Block(Expression,Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Block(Expression,Expression,Expression,Expression)","pos":[0,50]}]},{"pos":[498557,498572],"content":"BlockExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BlockExpression","pos":[0,15]}]},{"pos":[498761,498771],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[498950,498960],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[499139,499149],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[499328,499338],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[499710,499771],"content":"Block(Expression,Expression,Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Block(Expression,Expression,Expression,Expression,Expression)","pos":[0,61]}]},{"pos":[500079,500094],"content":"BlockExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BlockExpression","pos":[0,15]}]},{"pos":[500283,500293],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[500472,500482],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[500661,500671],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[500850,500860],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[501039,501049],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[501282,501300],"content":"Break(LabelTarget)","needQuote":true,"needEscape":true,"nodes":[{"content":"Break(LabelTarget)","pos":[0,18]}]},{"pos":[501521,501535],"content":"GotoExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"GotoExpression","pos":[0,14]}]},{"pos":[501723,501734],"content":"LabelTarget","needQuote":true,"needEscape":true,"nodes":[{"content":"LabelTarget","pos":[0,11]}]},{"pos":[502004,502033],"content":"Break(LabelTarget,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Break(LabelTarget,Expression)","pos":[0,29]}]},{"pos":[502276,502290],"content":"GotoExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"GotoExpression","pos":[0,14]}]},{"pos":[502478,502489],"content":"LabelTarget","needQuote":true,"needEscape":true,"nodes":[{"content":"LabelTarget","pos":[0,11]}]},{"pos":[502670,502680],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[502925,502948],"content":"Break(LabelTarget,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Break(LabelTarget,Type)","pos":[0,23]}]},{"pos":[503179,503193],"content":"GotoExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"GotoExpression","pos":[0,14]}]},{"pos":[503381,503392],"content":"LabelTarget","needQuote":true,"needEscape":true,"nodes":[{"content":"LabelTarget","pos":[0,11]}]},{"pos":[503533,503537],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[503788,503822],"content":"Break(LabelTarget,Expression,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Break(LabelTarget,Expression,Type)","pos":[0,34]}]},{"pos":[504075,504089],"content":"GotoExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"GotoExpression","pos":[0,14]}]},{"pos":[504277,504288],"content":"LabelTarget","needQuote":true,"needEscape":true,"nodes":[{"content":"LabelTarget","pos":[0,11]}]},{"pos":[504469,504479],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[504618,504622],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[504853,504880],"content":"Call(Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Call(Expression,MethodInfo)","pos":[0,27]}]},{"pos":[505125,505145],"content":"MethodCallExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodCallExpression","pos":[0,20]}]},{"pos":[505344,505354],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[505521,505531],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[505825,505865],"content":"Call(MethodInfo,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Call(MethodInfo,IEnumerable<Expression>)"},{"pos":[506136,506156],"content":"MethodCallExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodCallExpression","pos":[0,20]}]},{"pos":[506343,506353],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[506569,506592],"content":"IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<Expression>"},{"pos":[506905,506932],"content":"Call(MethodInfo,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Call(MethodInfo,Expression)","pos":[0,27]}]},{"pos":[507177,507197],"content":"MethodCallExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodCallExpression","pos":[0,20]}]},{"pos":[507384,507394],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[507567,507577],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[507839,507868],"content":"Call(MethodInfo,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Call(MethodInfo,Expression[])","pos":[0,29]}]},{"pos":[508117,508137],"content":"MethodCallExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodCallExpression","pos":[0,20]}]},{"pos":[508324,508334],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[508507,508517],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[508854,508905],"content":"Call(Expression,MethodInfo,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Call(Expression,MethodInfo,IEnumerable<Expression>)"},{"pos":[509198,509218],"content":"MethodCallExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodCallExpression","pos":[0,20]}]},{"pos":[509417,509427],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[509594,509604],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[509820,509843],"content":"IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<Expression>"},{"pos":[510193,510233],"content":"Call(Expression,MethodInfo,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Call(Expression,MethodInfo,Expression[])","pos":[0,40]}]},{"pos":[510504,510524],"content":"MethodCallExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodCallExpression","pos":[0,20]}]},{"pos":[510723,510733],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[510900,510910],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[511083,511093],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[511390,511428],"content":"Call(MethodInfo,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Call(MethodInfo,Expression,Expression)","pos":[0,38]}]},{"pos":[511695,511715],"content":"MethodCallExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodCallExpression","pos":[0,20]}]},{"pos":[511902,511912],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[512085,512095],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[512274,512284],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[512614,512663],"content":"Call(Expression,MethodInfo,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Call(Expression,MethodInfo,Expression,Expression)","pos":[0,49]}]},{"pos":[512952,512972],"content":"MethodCallExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodCallExpression","pos":[0,20]}]},{"pos":[513171,513181],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[513348,513358],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[513531,513541],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[513720,513730],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[514026,514069],"content":"Call(Expression,String,Type[],Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Call(Expression,String,Type[],Expression[])","pos":[0,43]}]},{"pos":[514346,514366],"content":"MethodCallExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodCallExpression","pos":[0,20]}]},{"pos":[514565,514575],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[514716,514722],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[514836,514840],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[514992,515002],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[515334,515383],"content":"Call(MethodInfo,Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Call(MethodInfo,Expression,Expression,Expression)","pos":[0,49]}]},{"pos":[515672,515692],"content":"MethodCallExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodCallExpression","pos":[0,20]}]},{"pos":[515879,515889],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[516062,516072],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[516251,516261],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[516440,516450],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[516723,516760],"content":"Call(Type,String,Type[],Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Call(Type,String,Type[],Expression[])","pos":[0,37]}]},{"pos":[517025,517045],"content":"MethodCallExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodCallExpression","pos":[0,20]}]},{"pos":[517204,517208],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[517320,517326],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[517440,517444],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[517596,517606],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[517973,518033],"content":"Call(Expression,MethodInfo,Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Call(Expression,MethodInfo,Expression,Expression,Expression)","pos":[0,60]}]},{"pos":[518344,518364],"content":"MethodCallExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodCallExpression","pos":[0,20]}]},{"pos":[518563,518573],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[518740,518750],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[518923,518933],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[519112,519122],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[519301,519311],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[519676,519736],"content":"Call(MethodInfo,Expression,Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Call(MethodInfo,Expression,Expression,Expression,Expression)","pos":[0,60]}]},{"pos":[520047,520067],"content":"MethodCallExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodCallExpression","pos":[0,20]}]},{"pos":[520254,520264],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[520437,520447],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[520626,520636],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[520815,520825],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[521004,521014],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[521414,521485],"content":"Call(MethodInfo,Expression,Expression,Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Call(MethodInfo,Expression,Expression,Expression,Expression,Expression)","pos":[0,71]}]},{"pos":[521818,521838],"content":"MethodCallExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodCallExpression","pos":[0,20]}]},{"pos":[522025,522035],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[522208,522218],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[522397,522407],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[522586,522596],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[522775,522785],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[522964,522974],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[523174,523183],"content":"CanReduce","needQuote":true,"needEscape":true,"nodes":[{"content":"CanReduce","pos":[0,9]}]},{"pos":[523345,523352],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[523605,523642],"content":"Catch(ParameterExpression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Catch(ParameterExpression,Expression)","pos":[0,37]}]},{"pos":[523897,523907],"content":"CatchBlock","needQuote":true,"needEscape":true,"nodes":[{"content":"CatchBlock","pos":[0,10]}]},{"pos":[524095,524114],"content":"ParameterExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"ParameterExpression","pos":[0,19]}]},{"pos":[524311,524321],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[524565,524587],"content":"Catch(Type,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Catch(Type,Expression)","pos":[0,22]}]},{"pos":[524812,524822],"content":"CatchBlock","needQuote":true,"needEscape":true,"nodes":[{"content":"CatchBlock","pos":[0,10]}]},{"pos":[524961,524965],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[525115,525125],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[525436,525484],"content":"Catch(ParameterExpression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Catch(ParameterExpression,Expression,Expression)","pos":[0,48]}]},{"pos":[525761,525771],"content":"CatchBlock","needQuote":true,"needEscape":true,"nodes":[{"content":"CatchBlock","pos":[0,10]}]},{"pos":[525959,525978],"content":"ParameterExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"ParameterExpression","pos":[0,19]}]},{"pos":[526175,526185],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[526364,526374],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[526653,526686],"content":"Catch(Type,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Catch(Type,Expression,Expression)","pos":[0,33]}]},{"pos":[526933,526943],"content":"CatchBlock","needQuote":true,"needEscape":true,"nodes":[{"content":"CatchBlock","pos":[0,10]}]},{"pos":[527082,527086],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[527236,527246],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[527425,527435],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[527684,527718],"content":"ClearDebugInfo(SymbolDocumentInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"ClearDebugInfo(SymbolDocumentInfo)","pos":[0,34]}]},{"pos":[527976,527995],"content":"DebugInfoExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"DebugInfoExpression","pos":[0,19]}]},{"pos":[528200,528218],"content":"SymbolDocumentInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"SymbolDocumentInfo","pos":[0,18]}]},{"pos":[528504,528535],"content":"Coalesce(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Coalesce(Expression,Expression)","pos":[0,31]}]},{"pos":[528784,528800],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[528991,529001],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[529180,529190],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[529501,529549],"content":"Coalesce(Expression,Expression,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Coalesce(Expression,Expression,LambdaExpression)","pos":[0,48]}]},{"pos":[529832,529848],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[530039,530049],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[530228,530238],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[530423,530439],"content":"LambdaExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[530757,530800],"content":"Condition(Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Condition(Expression,Expression,Expression)","pos":[0,43]}]},{"pos":[531078,531099],"content":"ConditionalExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"ConditionalExpression","pos":[0,21]}]},{"pos":[531300,531310],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[531489,531499],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[531678,531688],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[532006,532054],"content":"Condition(Expression,Expression,Expression,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Condition(Expression,Expression,Expression,Type)","pos":[0,48]}]},{"pos":[532342,532363],"content":"ConditionalExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"ConditionalExpression","pos":[0,21]}]},{"pos":[532564,532574],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[532753,532763],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[532942,532952],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[533091,533095],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[533280,533296],"content":"Constant(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Constant(Object)","pos":[0,16]}]},{"pos":[533517,533535],"content":"ConstantExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"ConstantExpression","pos":[0,18]}]},{"pos":[533692,533698],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[533899,533920],"content":"Constant(Object,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Constant(Object,Type)","pos":[0,21]}]},{"pos":[534151,534169],"content":"ConstantExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"ConstantExpression","pos":[0,18]}]},{"pos":[534326,534332],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[534446,534450],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[534657,534678],"content":"Continue(LabelTarget)","needQuote":true,"needEscape":true,"nodes":[{"content":"Continue(LabelTarget)","pos":[0,21]}]},{"pos":[534905,534919],"content":"GotoExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"GotoExpression","pos":[0,14]}]},{"pos":[535107,535118],"content":"LabelTarget","needQuote":true,"needEscape":true,"nodes":[{"content":"LabelTarget","pos":[0,11]}]},{"pos":[535368,535394],"content":"Continue(LabelTarget,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Continue(LabelTarget,Type)","pos":[0,26]}]},{"pos":[535631,535645],"content":"GotoExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"GotoExpression","pos":[0,14]}]},{"pos":[535833,535844],"content":"LabelTarget","needQuote":true,"needEscape":true,"nodes":[{"content":"LabelTarget","pos":[0,11]}]},{"pos":[535985,535989],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[536206,536230],"content":"Convert(Expression,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Convert(Expression,Type)","pos":[0,24]}]},{"pos":[536464,536479],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[536668,536678],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[536817,536821],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[537067,537102],"content":"Convert(Expression,Type,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Convert(Expression,Type,MethodInfo)","pos":[0,35]}]},{"pos":[537358,537373],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[537562,537572],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[537711,537715],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[537853,537863],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[538110,538141],"content":"ConvertChecked(Expression,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"ConvertChecked(Expression,Type)","pos":[0,31]}]},{"pos":[538389,538404],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[538593,538603],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[538742,538746],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[538999,539041],"content":"ConvertChecked(Expression,Type,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"ConvertChecked(Expression,Type,MethodInfo)","pos":[0,42]}]},{"pos":[539311,539326],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[539515,539525],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[539664,539668],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[539806,539816],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[540106,540159],"content":"DebugInfo(SymbolDocumentInfo,Int32,Int32,Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"DebugInfo(SymbolDocumentInfo,Int32,Int32,Int32,Int32)","pos":[0,53]}]},{"pos":[540455,540474],"content":"DebugInfoExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"DebugInfoExpression","pos":[0,19]}]},{"pos":[540679,540697],"content":"SymbolDocumentInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"SymbolDocumentInfo","pos":[0,18]}]},{"pos":[540853,540858],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[540971,540976],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[541089,541094],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[541207,541212],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[541421,541442],"content":"Decrement(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Decrement(Expression)","pos":[0,21]}]},{"pos":[541670,541685],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[541874,541884],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[542149,542181],"content":"Decrement(Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Decrement(Expression,MethodInfo)","pos":[0,32]}]},{"pos":[542431,542446],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[542635,542645],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[542812,542822],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[543027,543040],"content":"Default(Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Default(Type)","pos":[0,13]}]},{"pos":[543254,543271],"content":"DefaultExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"DefaultExpression","pos":[0,17]}]},{"pos":[543424,543428],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[543667,543696],"content":"Divide(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Divide(Expression,Expression)","pos":[0,29]}]},{"pos":[543941,543957],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[544148,544158],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[544337,544347],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[544644,544684],"content":"Divide(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Divide(Expression,Expression,MethodInfo)","pos":[0,40]}]},{"pos":[544951,544967],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[545158,545168],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[545347,545357],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[545524,545534],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[545802,545837],"content":"DivideAssign(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"DivideAssign(Expression,Expression)","pos":[0,35]}]},{"pos":[546094,546110],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[546301,546311],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[546490,546500],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[546803,546849],"content":"DivideAssign(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"DivideAssign(Expression,Expression,MethodInfo)","pos":[0,46]}]},{"pos":[547128,547144],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[547335,547345],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[547524,547534],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[547701,547711],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[548049,548112],"content":"DivideAssign(Expression,Expression,MethodInfo,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"DivideAssign(Expression,Expression,MethodInfo,LambdaExpression)","pos":[0,63]}]},{"pos":[548425,548441],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[548632,548642],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[548821,548831],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[548998,549008],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[549187,549203],"content":"LambdaExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[549548,549600],"content":"Dynamic(CallSiteBinder,Type,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Dynamic(CallSiteBinder,Type,IEnumerable<Expression>)"},{"pos":[549892,549909],"content":"DynamicExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"DynamicExpression","pos":[0,17]}]},{"pos":[550122,550136],"content":"CallSiteBinder","needQuote":true,"needEscape":true,"nodes":[{"content":"CallSiteBinder","pos":[0,14]}]},{"pos":[550291,550295],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[550488,550511],"content":"IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<Expression>"},{"pos":[550857,550896],"content":"Dynamic(CallSiteBinder,Type,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Dynamic(CallSiteBinder,Type,Expression)","pos":[0,39]}]},{"pos":[551162,551179],"content":"DynamicExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"DynamicExpression","pos":[0,17]}]},{"pos":[551392,551406],"content":"CallSiteBinder","needQuote":true,"needEscape":true,"nodes":[{"content":"CallSiteBinder","pos":[0,14]}]},{"pos":[551561,551565],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[551715,551725],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[552020,552061],"content":"Dynamic(CallSiteBinder,Type,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Dynamic(CallSiteBinder,Type,Expression[])","pos":[0,41]}]},{"pos":[552331,552348],"content":"DynamicExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"DynamicExpression","pos":[0,17]}]},{"pos":[552561,552575],"content":"CallSiteBinder","needQuote":true,"needEscape":true,"nodes":[{"content":"CallSiteBinder","pos":[0,14]}]},{"pos":[552730,552734],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[552884,552894],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[553224,553274],"content":"Dynamic(CallSiteBinder,Type,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Dynamic(CallSiteBinder,Type,Expression,Expression)","pos":[0,50]}]},{"pos":[553562,553579],"content":"DynamicExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"DynamicExpression","pos":[0,17]}]},{"pos":[553792,553806],"content":"CallSiteBinder","needQuote":true,"needEscape":true,"nodes":[{"content":"CallSiteBinder","pos":[0,14]}]},{"pos":[553961,553965],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[554115,554125],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[554304,554314],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[554677,554738],"content":"Dynamic(CallSiteBinder,Type,Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Dynamic(CallSiteBinder,Type,Expression,Expression,Expression)","pos":[0,61]}]},{"pos":[555048,555065],"content":"DynamicExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"DynamicExpression","pos":[0,17]}]},{"pos":[555278,555292],"content":"CallSiteBinder","needQuote":true,"needEscape":true,"nodes":[{"content":"CallSiteBinder","pos":[0,14]}]},{"pos":[555447,555451],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[555601,555611],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[555790,555800],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[555979,555989],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[556387,556459],"content":"Dynamic(CallSiteBinder,Type,Expression,Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Dynamic(CallSiteBinder,Type,Expression,Expression,Expression,Expression)","pos":[0,72]}]},{"pos":[556791,556808],"content":"DynamicExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"DynamicExpression","pos":[0,17]}]},{"pos":[557021,557035],"content":"CallSiteBinder","needQuote":true,"needEscape":true,"nodes":[{"content":"CallSiteBinder","pos":[0,14]}]},{"pos":[557190,557194],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[557344,557354],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[557533,557543],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[557722,557732],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[557911,557921],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[558228,558275],"content":"ElementInit(MethodInfo,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ElementInit(MethodInfo,IEnumerable<Expression>)"},{"pos":[558551,558562],"content":"ElementInit","needQuote":true,"needEscape":true,"nodes":[{"content":"ElementInit","pos":[0,11]}]},{"pos":[558731,558741],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[558957,558980],"content":"IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<Expression>"},{"pos":[559302,559338],"content":"ElementInit(MethodInfo,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"ElementInit(MethodInfo,Expression[])","pos":[0,36]}]},{"pos":[559592,559603],"content":"ElementInit","needQuote":true,"needEscape":true,"nodes":[{"content":"ElementInit","pos":[0,11]}]},{"pos":[559772,559782],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[559955,559965],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[560163,560170],"content":"Empty()","needQuote":true,"needEscape":true,"nodes":[{"content":"Empty()","pos":[0,7]}]},{"pos":[560372,560389],"content":"DefaultExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"DefaultExpression","pos":[0,17]}]},{"pos":[560670,560698],"content":"Equal(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equal(Expression,Expression)","pos":[0,28]}]},{"pos":[560941,560957],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[561148,561158],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[561337,561347],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[561658,561705],"content":"Equal(Expression,Expression,Boolean,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equal(Expression,Expression,Boolean,MethodInfo)","pos":[0,47]}]},{"pos":[561986,562002],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[562193,562203],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[562382,562392],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[562534,562541],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[562685,562695],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[562962,562996],"content":"ExclusiveOr(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"ExclusiveOr(Expression,Expression)","pos":[0,34]}]},{"pos":[563251,563267],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[563458,563468],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[563647,563657],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[563959,564004],"content":"ExclusiveOr(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"ExclusiveOr(Expression,Expression,MethodInfo)","pos":[0,45]}]},{"pos":[564281,564297],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[564488,564498],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[564677,564687],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[564854,564864],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[565137,565177],"content":"ExclusiveOrAssign(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"ExclusiveOrAssign(Expression,Expression)","pos":[0,40]}]},{"pos":[565444,565460],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[565651,565661],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[565840,565850],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[566158,566209],"content":"ExclusiveOrAssign(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"ExclusiveOrAssign(Expression,Expression,MethodInfo)","pos":[0,51]}]},{"pos":[566498,566514],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[566705,566715],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[566894,566904],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[567071,567081],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[567424,567492],"content":"ExclusiveOrAssign(Expression,Expression,MethodInfo,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"ExclusiveOrAssign(Expression,Expression,MethodInfo,LambdaExpression)","pos":[0,68]}]},{"pos":[567815,567831],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[568022,568032],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[568211,568221],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[568388,568398],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[568577,568593],"content":"LambdaExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[568865,568892],"content":"Field(Expression,FieldInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Field(Expression,FieldInfo)","pos":[0,27]}]},{"pos":[569133,569149],"content":"MemberExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberExpression","pos":[0,16]}]},{"pos":[569340,569350],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[569516,569525],"content":"FieldInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"FieldInfo","pos":[0,9]}]},{"pos":[569763,569787],"content":"Field(Expression,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Field(Expression,String)","pos":[0,24]}]},{"pos":[570022,570038],"content":"MemberExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberExpression","pos":[0,16]}]},{"pos":[570229,570239],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[570380,570386],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[570619,570648],"content":"Field(Expression,Type,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Field(Expression,Type,String)","pos":[0,29]}]},{"pos":[570893,570909],"content":"MemberExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberExpression","pos":[0,16]}]},{"pos":[571100,571110],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[571249,571253],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[571365,571371],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[571565,571586],"content":"GetActionType(Type[])","needQuote":true,"needEscape":true,"nodes":[{"content":"GetActionType(Type[])","pos":[0,21]}]},{"pos":[571769,571773],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[571883,571887],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[572081,572104],"content":"GetDelegateType(Type[])","needQuote":true,"needEscape":true,"nodes":[{"content":"GetDelegateType(Type[])","pos":[0,23]}]},{"pos":[572291,572295],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[572405,572409],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[572599,572618],"content":"GetFuncType(Type[])","needQuote":true,"needEscape":true,"nodes":[{"content":"GetFuncType(Type[])","pos":[0,19]}]},{"pos":[572797,572801],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[572911,572915],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[573120,573137],"content":"Goto(LabelTarget)","needQuote":true,"needEscape":true,"nodes":[{"content":"Goto(LabelTarget)","pos":[0,17]}]},{"pos":[573356,573370],"content":"GotoExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"GotoExpression","pos":[0,14]}]},{"pos":[573558,573569],"content":"LabelTarget","needQuote":true,"needEscape":true,"nodes":[{"content":"LabelTarget","pos":[0,11]}]},{"pos":[573838,573866],"content":"Goto(LabelTarget,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Goto(LabelTarget,Expression)","pos":[0,28]}]},{"pos":[574107,574121],"content":"GotoExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"GotoExpression","pos":[0,14]}]},{"pos":[574309,574320],"content":"LabelTarget","needQuote":true,"needEscape":true,"nodes":[{"content":"LabelTarget","pos":[0,11]}]},{"pos":[574501,574511],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[574755,574777],"content":"Goto(LabelTarget,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Goto(LabelTarget,Type)","pos":[0,22]}]},{"pos":[575006,575020],"content":"GotoExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"GotoExpression","pos":[0,14]}]},{"pos":[575208,575219],"content":"LabelTarget","needQuote":true,"needEscape":true,"nodes":[{"content":"LabelTarget","pos":[0,11]}]},{"pos":[575360,575364],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[575614,575647],"content":"Goto(LabelTarget,Expression,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Goto(LabelTarget,Expression,Type)","pos":[0,33]}]},{"pos":[575898,575912],"content":"GotoExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"GotoExpression","pos":[0,14]}]},{"pos":[576100,576111],"content":"LabelTarget","needQuote":true,"needEscape":true,"nodes":[{"content":"LabelTarget","pos":[0,11]}]},{"pos":[576292,576302],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[576441,576445],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[576689,576723],"content":"GreaterThan(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"GreaterThan(Expression,Expression)","pos":[0,34]}]},{"pos":[576978,576994],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[577185,577195],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[577374,577384],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[577701,577754],"content":"GreaterThan(Expression,Expression,Boolean,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"GreaterThan(Expression,Expression,Boolean,MethodInfo)","pos":[0,53]}]},{"pos":[578047,578063],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[578254,578264],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[578443,578453],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[578595,578602],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[578746,578756],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[579030,579071],"content":"GreaterThanOrEqual(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"GreaterThanOrEqual(Expression,Expression)","pos":[0,41]}]},{"pos":[579340,579356],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[579547,579557],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[579736,579746],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[580070,580130],"content":"GreaterThanOrEqual(Expression,Expression,Boolean,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"GreaterThanOrEqual(Expression,Expression,Boolean,MethodInfo)","pos":[0,60]}]},{"pos":[580437,580453],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[580644,580654],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[580833,580843],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[580985,580992],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[581136,581146],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[581408,581437],"content":"IfThen(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"IfThen(Expression,Expression)","pos":[0,29]}]},{"pos":[581687,581708],"content":"ConditionalExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"ConditionalExpression","pos":[0,21]}]},{"pos":[581909,581919],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[582098,582108],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[582415,582459],"content":"IfThenElse(Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"IfThenElse(Expression,Expression,Expression)","pos":[0,44]}]},{"pos":[582739,582760],"content":"ConditionalExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"ConditionalExpression","pos":[0,21]}]},{"pos":[582961,582971],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[583150,583160],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[583339,583349],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[583585,583606],"content":"Increment(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Increment(Expression)","pos":[0,21]}]},{"pos":[583834,583849],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[584038,584048],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[584313,584345],"content":"Increment(Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Increment(Expression,MethodInfo)","pos":[0,32]}]},{"pos":[584595,584610],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[584799,584809],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[584976,584986],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[585288,585330],"content":"Invoke(Expression,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Invoke(Expression,IEnumerable<Expression>)"},{"pos":[585605,585625],"content":"InvocationExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"InvocationExpression","pos":[0,20]}]},{"pos":[585824,585834],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[586056,586079],"content":"IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<Expression>"},{"pos":[586402,586433],"content":"Invoke(Expression,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Invoke(Expression,Expression[])","pos":[0,31]}]},{"pos":[586686,586706],"content":"InvocationExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"InvocationExpression","pos":[0,20]}]},{"pos":[586905,586915],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[587094,587104],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[587340,587359],"content":"IsFalse(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"IsFalse(Expression)","pos":[0,19]}]},{"pos":[587583,587598],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[587787,587797],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[588060,588090],"content":"IsFalse(Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"IsFalse(Expression,MethodInfo)","pos":[0,30]}]},{"pos":[588336,588351],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[588540,588550],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[588717,588727],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[588954,588972],"content":"IsTrue(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"IsTrue(Expression)","pos":[0,18]}]},{"pos":[589194,589209],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[589398,589408],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[589670,589699],"content":"IsTrue(Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"IsTrue(Expression,MethodInfo)","pos":[0,29]}]},{"pos":[589943,589958],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[590147,590157],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[590324,590334],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[590524,590531],"content":"Label()","needQuote":true,"needEscape":true,"nodes":[{"content":"Label()","pos":[0,7]}]},{"pos":[590727,590738],"content":"LabelTarget","needQuote":true,"needEscape":true,"nodes":[{"content":"LabelTarget","pos":[0,11]}]},{"pos":[590973,590991],"content":"Label(LabelTarget)","needQuote":true,"needEscape":true,"nodes":[{"content":"Label(LabelTarget)","pos":[0,18]}]},{"pos":[591213,591228],"content":"LabelExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LabelExpression","pos":[0,15]}]},{"pos":[591418,591429],"content":"LabelTarget","needQuote":true,"needEscape":true,"nodes":[{"content":"LabelTarget","pos":[0,11]}]},{"pos":[591642,591655],"content":"Label(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Label(String)","pos":[0,13]}]},{"pos":[591863,591874],"content":"LabelTarget","needQuote":true,"needEscape":true,"nodes":[{"content":"LabelTarget","pos":[0,11]}]},{"pos":[592017,592023],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[592207,592218],"content":"Label(Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Label(Type)","pos":[0,11]}]},{"pos":[592422,592433],"content":"LabelTarget","needQuote":true,"needEscape":true,"nodes":[{"content":"LabelTarget","pos":[0,11]}]},{"pos":[592574,592578],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[592817,592846],"content":"Label(LabelTarget,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Label(LabelTarget,Expression)","pos":[0,29]}]},{"pos":[593090,593105],"content":"LabelExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LabelExpression","pos":[0,15]}]},{"pos":[593295,593306],"content":"LabelTarget","needQuote":true,"needEscape":true,"nodes":[{"content":"LabelTarget","pos":[0,11]}]},{"pos":[593487,593497],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[593720,593738],"content":"Label(Type,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Label(Type,String)","pos":[0,18]}]},{"pos":[593956,593967],"content":"LabelTarget","needQuote":true,"needEscape":true,"nodes":[{"content":"LabelTarget","pos":[0,11]}]},{"pos":[594108,594112],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[594224,594230],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[594522,594573],"content":"Lambda(Expression,IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Lambda(Expression,IEnumerable<ParameterExpression>)"},{"pos":[594862,594878],"content":"LambdaExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[595069,595079],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[595310,595342],"content":"IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<ParameterExpression>"},{"pos":[595692,595732],"content":"Lambda(Expression,ParameterExpression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Lambda(Expression,ParameterExpression[])","pos":[0,40]}]},{"pos":[595999,596015],"content":"LambdaExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[596206,596216],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[596404,596423],"content":"ParameterExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"ParameterExpression","pos":[0,19]}]},{"pos":[596775,596834],"content":"Lambda(Expression,Boolean,IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Lambda(Expression,Boolean,IEnumerable<ParameterExpression>)"},{"pos":[597139,597155],"content":"LambdaExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[597346,597356],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[597498,597505],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[597713,597745],"content":"IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<ParameterExpression>"},{"pos":[598110,598158],"content":"Lambda(Expression,Boolean,ParameterExpression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Lambda(Expression,Boolean,ParameterExpression[])","pos":[0,48]}]},{"pos":[598441,598457],"content":"LambdaExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[598648,598658],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[598800,598807],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[598972,598991],"content":"ParameterExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"ParameterExpression","pos":[0,19]}]},{"pos":[599342,599400],"content":"Lambda(Expression,String,IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Lambda(Expression,String,IEnumerable<ParameterExpression>)"},{"pos":[599703,599719],"content":"LambdaExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[599910,599920],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[600061,600067],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[600273,600305],"content":"IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<ParameterExpression>"},{"pos":[600705,600761],"content":"Lambda(Type,Expression,IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Lambda(Type,Expression,IEnumerable<ParameterExpression>)"},{"pos":[601060,601076],"content":"LambdaExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[601227,601231],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[601381,601391],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[601622,601654],"content":"IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<ParameterExpression>"},{"pos":[602016,602061],"content":"Lambda(Type,Expression,ParameterExpression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Lambda(Type,Expression,ParameterExpression[])","pos":[0,45]}]},{"pos":[602338,602354],"content":"LambdaExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[602505,602509],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[602659,602669],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[602857,602876],"content":"ParameterExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"ParameterExpression","pos":[0,19]}]},{"pos":[603242,603308],"content":"Lambda(Expression,String,Boolean,IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Lambda(Expression,String,Boolean,IEnumerable<ParameterExpression>)"},{"pos":[603627,603643],"content":"LambdaExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[603834,603844],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[603985,603991],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[604108,604115],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[604323,604355],"content":"IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<ParameterExpression>"},{"pos":[604770,604834],"content":"Lambda(Type,Expression,Boolean,IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Lambda(Type,Expression,Boolean,IEnumerable<ParameterExpression>)"},{"pos":[605149,605165],"content":"LambdaExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[605316,605320],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[605470,605480],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[605622,605629],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[605837,605869],"content":"IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<ParameterExpression>"},{"pos":[606246,606299],"content":"Lambda(Type,Expression,Boolean,ParameterExpression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Lambda(Type,Expression,Boolean,ParameterExpression[])","pos":[0,53]}]},{"pos":[606592,606608],"content":"LambdaExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[606759,606763],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[606913,606923],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[607065,607072],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[607237,607256],"content":"ParameterExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"ParameterExpression","pos":[0,19]}]},{"pos":[607619,607682],"content":"Lambda(Type,Expression,String,IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Lambda(Type,Expression,String,IEnumerable<ParameterExpression>)"},{"pos":[607995,608011],"content":"LambdaExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[608162,608166],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[608316,608326],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[608467,608473],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[608679,608711],"content":"IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<ParameterExpression>"},{"pos":[609140,609211],"content":"Lambda(Type,Expression,String,Boolean,IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Lambda(Type,Expression,String,Boolean,IEnumerable<ParameterExpression>)"},{"pos":[609540,609556],"content":"LambdaExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[609707,609711],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[609861,609871],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[610012,610018],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[610135,610142],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[610350,610382],"content":"IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<ParameterExpression>"},{"pos":[610773,610824],"content":"Lambda(Expression,IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Lambda(Expression,IEnumerable<ParameterExpression>)"},{"pos":[611109,611130],"content":"Expression<ph id=\"ph1\">&lt;TDelegate&gt;</ph>","needQuote":true,"needEscape":true,"source":"Expression<TDelegate>"},{"pos":[611331,611341],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[611572,611604],"content":"IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<ParameterExpression>"},{"pos":[611957,611997],"content":"Lambda(Expression,ParameterExpression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Lambda(Expression,ParameterExpression[])","pos":[0,40]}]},{"pos":[612260,612281],"content":"Expression<ph id=\"ph1\">&lt;TDelegate&gt;</ph>","needQuote":true,"needEscape":true,"source":"Expression<TDelegate>"},{"pos":[612482,612492],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[612680,612699],"content":"ParameterExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"ParameterExpression","pos":[0,19]}]},{"pos":[613054,613113],"content":"Lambda(Expression,Boolean,IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Lambda(Expression,Boolean,IEnumerable<ParameterExpression>)"},{"pos":[613414,613435],"content":"Expression<ph id=\"ph1\">&lt;TDelegate&gt;</ph>","needQuote":true,"needEscape":true,"source":"Expression<TDelegate>"},{"pos":[613636,613646],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[613788,613795],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[614003,614035],"content":"IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<ParameterExpression>"},{"pos":[614403,614451],"content":"Lambda(Expression,Boolean,ParameterExpression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Lambda(Expression,Boolean,ParameterExpression[])","pos":[0,48]}]},{"pos":[614730,614751],"content":"Expression<ph id=\"ph1\">&lt;TDelegate&gt;</ph>","needQuote":true,"needEscape":true,"source":"Expression<TDelegate>"},{"pos":[614952,614962],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[615104,615111],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[615276,615295],"content":"ParameterExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"ParameterExpression","pos":[0,19]}]},{"pos":[615649,615707],"content":"Lambda(Expression,String,IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Lambda(Expression,String,IEnumerable<ParameterExpression>)"},{"pos":[616006,616027],"content":"Expression<ph id=\"ph1\">&lt;TDelegate&gt;</ph>","needQuote":true,"needEscape":true,"source":"Expression<TDelegate>"},{"pos":[616228,616238],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[616379,616385],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[616591,616623],"content":"IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<ParameterExpression>"},{"pos":[617043,617109],"content":"Lambda(Expression,String,Boolean,IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Lambda(Expression,String,Boolean,IEnumerable<ParameterExpression>)"},{"pos":[617424,617445],"content":"Expression<ph id=\"ph1\">&lt;TDelegate&gt;</ph>","needQuote":true,"needEscape":true,"source":"Expression<TDelegate>"},{"pos":[617646,617656],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[617797,617803],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[617920,617927],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[618135,618167],"content":"IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<ParameterExpression>"},{"pos":[618509,618541],"content":"LeftShift(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"LeftShift(Expression,Expression)","pos":[0,32]}]},{"pos":[618792,618808],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[618999,619009],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[619188,619198],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[619498,619541],"content":"LeftShift(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"LeftShift(Expression,Expression,MethodInfo)","pos":[0,43]}]},{"pos":[619814,619830],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[620021,620031],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[620210,620220],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[620387,620397],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[620668,620706],"content":"LeftShiftAssign(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"LeftShiftAssign(Expression,Expression)","pos":[0,38]}]},{"pos":[620969,620985],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[621176,621186],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[621365,621375],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[621681,621730],"content":"LeftShiftAssign(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"LeftShiftAssign(Expression,Expression,MethodInfo)","pos":[0,49]}]},{"pos":[622015,622031],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[622222,622232],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[622411,622421],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[622588,622598],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[622939,623005],"content":"LeftShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"LeftShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)","pos":[0,66]}]},{"pos":[623324,623340],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[623531,623541],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[623720,623730],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[623897,623907],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[624086,624102],"content":"LambdaExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[624384,624415],"content":"LessThan(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"LessThan(Expression,Expression)","pos":[0,31]}]},{"pos":[624664,624680],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[624871,624881],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[625060,625070],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[625384,625434],"content":"LessThan(Expression,Expression,Boolean,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"LessThan(Expression,Expression,Boolean,MethodInfo)","pos":[0,50]}]},{"pos":[625721,625737],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[625928,625938],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[626117,626127],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[626269,626276],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[626420,626430],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[626701,626739],"content":"LessThanOrEqual(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"LessThanOrEqual(Expression,Expression)","pos":[0,38]}]},{"pos":[627002,627018],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[627209,627219],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[627398,627408],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[627729,627786],"content":"LessThanOrEqual(Expression,Expression,Boolean,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"LessThanOrEqual(Expression,Expression,Boolean,MethodInfo)","pos":[0,57]}]},{"pos":[628087,628103],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[628294,628304],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[628483,628493],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[628635,628642],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[628786,628796],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[629095,629140],"content":"ListBind(MemberInfo,IEnumerable<ph id=\"ph1\">&lt;ElementInit&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ListBind(MemberInfo,IEnumerable<ElementInit>)"},{"pos":[629418,629435],"content":"MemberListBinding","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberListBinding","pos":[0,17]}]},{"pos":[629616,629626],"content":"MemberInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberInfo","pos":[0,10]}]},{"pos":[629843,629867],"content":"IEnumerable<ph id=\"ph1\">&lt;ElementInit&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<ElementInit>"},{"pos":[630189,630223],"content":"ListBind(MemberInfo,ElementInit[])","needQuote":true,"needEscape":true,"nodes":[{"content":"ListBind(MemberInfo,ElementInit[])","pos":[0,34]}]},{"pos":[630479,630496],"content":"MemberListBinding","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberListBinding","pos":[0,17]}]},{"pos":[630677,630687],"content":"MemberInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberInfo","pos":[0,10]}]},{"pos":[630861,630872],"content":"ElementInit","needQuote":true,"needEscape":true,"nodes":[{"content":"ElementInit","pos":[0,11]}]},{"pos":[631181,631226],"content":"ListBind(MethodInfo,IEnumerable<ph id=\"ph1\">&lt;ElementInit&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ListBind(MethodInfo,IEnumerable<ElementInit>)"},{"pos":[631504,631521],"content":"MemberListBinding","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberListBinding","pos":[0,17]}]},{"pos":[631702,631712],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[631929,631953],"content":"IEnumerable<ph id=\"ph1\">&lt;ElementInit&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<ElementInit>"},{"pos":[632275,632309],"content":"ListBind(MethodInfo,ElementInit[])","needQuote":true,"needEscape":true,"nodes":[{"content":"ListBind(MethodInfo,ElementInit[])","pos":[0,34]}]},{"pos":[632565,632582],"content":"MemberListBinding","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberListBinding","pos":[0,17]}]},{"pos":[632763,632773],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[632947,632958],"content":"ElementInit","needQuote":true,"needEscape":true,"nodes":[{"content":"ElementInit","pos":[0,11]}]},{"pos":[633276,633324],"content":"ListInit(NewExpression,IEnumerable<ph id=\"ph1\">&lt;ElementInit&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ListInit(NewExpression,IEnumerable<ElementInit>)"},{"pos":[633609,633627],"content":"ListInitExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"ListInitExpression","pos":[0,18]}]},{"pos":[633825,633838],"content":"NewExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"NewExpression","pos":[0,13]}]},{"pos":[634067,634091],"content":"IEnumerable<ph id=\"ph1\">&lt;ElementInit&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<ElementInit>"},{"pos":[634459,634506],"content":"ListInit(NewExpression,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ListInit(NewExpression,IEnumerable<Expression>)"},{"pos":[634789,634807],"content":"ListInitExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"ListInitExpression","pos":[0,18]}]},{"pos":[635005,635018],"content":"NewExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"NewExpression","pos":[0,13]}]},{"pos":[635246,635269],"content":"IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<Expression>"},{"pos":[635598,635635],"content":"ListInit(NewExpression,ElementInit[])","needQuote":true,"needEscape":true,"nodes":[{"content":"ListInit(NewExpression,ElementInit[])","pos":[0,37]}]},{"pos":[635898,635916],"content":"ListInitExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"ListInitExpression","pos":[0,18]}]},{"pos":[636114,636127],"content":"NewExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"NewExpression","pos":[0,13]}]},{"pos":[636313,636324],"content":"ElementInit","needQuote":true,"needEscape":true,"nodes":[{"content":"ElementInit","pos":[0,11]}]},{"pos":[636603,636639],"content":"ListInit(NewExpression,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"ListInit(NewExpression,Expression[])","pos":[0,36]}]},{"pos":[636900,636918],"content":"ListInitExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"ListInitExpression","pos":[0,18]}]},{"pos":[637116,637129],"content":"NewExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"NewExpression","pos":[0,13]}]},{"pos":[637314,637324],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[637668,637726],"content":"ListInit(NewExpression,MethodInfo,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ListInit(NewExpression,MethodInfo,IEnumerable<Expression>)"},{"pos":[638031,638049],"content":"ListInitExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"ListInitExpression","pos":[0,18]}]},{"pos":[638247,638260],"content":"NewExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"NewExpression","pos":[0,13]}]},{"pos":[638433,638443],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[638659,638682],"content":"IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<Expression>"},{"pos":[639039,639086],"content":"ListInit(NewExpression,MethodInfo,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"ListInit(NewExpression,MethodInfo,Expression[])","pos":[0,47]}]},{"pos":[639369,639387],"content":"ListInitExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"ListInitExpression","pos":[0,18]}]},{"pos":[639585,639598],"content":"NewExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"NewExpression","pos":[0,13]}]},{"pos":[639771,639781],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[639954,639964],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[640197,640213],"content":"Loop(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Loop(Expression)","pos":[0,16]}]},{"pos":[640430,640444],"content":"LoopExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LoopExpression","pos":[0,14]}]},{"pos":[640631,640641],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[640908,640936],"content":"Loop(Expression,LabelTarget)","needQuote":true,"needEscape":true,"nodes":[{"content":"Loop(Expression,LabelTarget)","pos":[0,28]}]},{"pos":[641177,641191],"content":"LoopExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LoopExpression","pos":[0,14]}]},{"pos":[641378,641388],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[641568,641579],"content":"LabelTarget","needQuote":true,"needEscape":true,"nodes":[{"content":"LabelTarget","pos":[0,11]}]},{"pos":[641884,641924],"content":"Loop(Expression,LabelTarget,LabelTarget)","needQuote":true,"needEscape":true,"nodes":[{"content":"Loop(Expression,LabelTarget,LabelTarget)","pos":[0,40]}]},{"pos":[642189,642203],"content":"LoopExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LoopExpression","pos":[0,14]}]},{"pos":[642390,642400],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[642580,642591],"content":"LabelTarget","needQuote":true,"needEscape":true,"nodes":[{"content":"LabelTarget","pos":[0,11]}]},{"pos":[642773,642784],"content":"LabelTarget","needQuote":true,"needEscape":true,"nodes":[{"content":"LabelTarget","pos":[0,11]}]},{"pos":[643097,643145],"content":"MakeBinary(ExpressionType,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeBinary(ExpressionType,Expression,Expression)","pos":[0,48]}]},{"pos":[643428,643444],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[643639,643653],"content":"ExpressionType","needQuote":true,"needEscape":true,"nodes":[{"content":"ExpressionType","pos":[0,14]}]},{"pos":[643840,643850],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[644029,644039],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[644394,644461],"content":"MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo)","pos":[0,67]}]},{"pos":[644782,644798],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[644993,645007],"content":"ExpressionType","needQuote":true,"needEscape":true,"nodes":[{"content":"ExpressionType","pos":[0,14]}]},{"pos":[645194,645204],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[645383,645393],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[645535,645542],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[645686,645696],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[646086,646170],"content":"MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo,LambdaExpression)","pos":[0,84]}]},{"pos":[646525,646541],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[646736,646750],"content":"ExpressionType","needQuote":true,"needEscape":true,"nodes":[{"content":"ExpressionType","pos":[0,14]}]},{"pos":[646937,646947],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[647126,647136],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[647278,647285],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[647429,647439],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[647618,647634],"content":"LambdaExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[647978,648040],"content":"MakeCatchBlock(Type,ParameterExpression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeCatchBlock(Type,ParameterExpression,Expression,Expression)","pos":[0,62]}]},{"pos":[648345,648355],"content":"CatchBlock","needQuote":true,"needEscape":true,"nodes":[{"content":"CatchBlock","pos":[0,10]}]},{"pos":[648494,648498],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[648657,648676],"content":"ParameterExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"ParameterExpression","pos":[0,19]}]},{"pos":[648873,648883],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[649062,649072],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[649409,649465],"content":"MakeDynamic(Type,CallSiteBinder,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"MakeDynamic(Type,CallSiteBinder,IEnumerable<Expression>)"},{"pos":[649765,649782],"content":"DynamicExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"DynamicExpression","pos":[0,17]}]},{"pos":[649935,649939],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[650109,650123],"content":"CallSiteBinder","needQuote":true,"needEscape":true,"nodes":[{"content":"CallSiteBinder","pos":[0,14]}]},{"pos":[650361,650384],"content":"IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<Expression>"},{"pos":[650734,650777],"content":"MakeDynamic(Type,CallSiteBinder,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeDynamic(Type,CallSiteBinder,Expression)","pos":[0,43]}]},{"pos":[651051,651068],"content":"DynamicExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"DynamicExpression","pos":[0,17]}]},{"pos":[651221,651225],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[651395,651409],"content":"CallSiteBinder","needQuote":true,"needEscape":true,"nodes":[{"content":"CallSiteBinder","pos":[0,14]}]},{"pos":[651604,651614],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[651913,651958],"content":"MakeDynamic(Type,CallSiteBinder,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeDynamic(Type,CallSiteBinder,Expression[])","pos":[0,45]}]},{"pos":[652236,652253],"content":"DynamicExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"DynamicExpression","pos":[0,17]}]},{"pos":[652406,652410],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[652580,652594],"content":"CallSiteBinder","needQuote":true,"needEscape":true,"nodes":[{"content":"CallSiteBinder","pos":[0,14]}]},{"pos":[652789,652799],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[653133,653187],"content":"MakeDynamic(Type,CallSiteBinder,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeDynamic(Type,CallSiteBinder,Expression,Expression)","pos":[0,54]}]},{"pos":[653483,653500],"content":"DynamicExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"DynamicExpression","pos":[0,17]}]},{"pos":[653653,653657],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[653827,653841],"content":"CallSiteBinder","needQuote":true,"needEscape":true,"nodes":[{"content":"CallSiteBinder","pos":[0,14]}]},{"pos":[654036,654046],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[654225,654235],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[654602,654667],"content":"MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression)","pos":[0,65]}]},{"pos":[654985,655002],"content":"DynamicExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"DynamicExpression","pos":[0,17]}]},{"pos":[655155,655159],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[655329,655343],"content":"CallSiteBinder","needQuote":true,"needEscape":true,"nodes":[{"content":"CallSiteBinder","pos":[0,14]}]},{"pos":[655538,655548],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[655727,655737],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[655916,655926],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[656328,656404],"content":"MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression,Expression)","pos":[0,76]}]},{"pos":[656744,656761],"content":"DynamicExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"DynamicExpression","pos":[0,17]}]},{"pos":[656914,656918],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[657088,657102],"content":"CallSiteBinder","needQuote":true,"needEscape":true,"nodes":[{"content":"CallSiteBinder","pos":[0,14]}]},{"pos":[657297,657307],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[657486,657496],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[657675,657685],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[657864,657874],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[658200,658256],"content":"MakeGoto(GotoExpressionKind,LabelTarget,Expression,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeGoto(GotoExpressionKind,LabelTarget,Expression,Type)","pos":[0,56]}]},{"pos":[658553,658567],"content":"GotoExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"GotoExpression","pos":[0,14]}]},{"pos":[658762,658780],"content":"GotoExpressionKind","needQuote":true,"needEscape":true,"nodes":[{"content":"GotoExpressionKind","pos":[0,18]}]},{"pos":[658976,658987],"content":"LabelTarget","needQuote":true,"needEscape":true,"nodes":[{"content":"LabelTarget","pos":[0,11]}]},{"pos":[659168,659178],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[659317,659321],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[659634,659692],"content":"MakeIndex(Expression,PropertyInfo,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"MakeIndex(Expression,PropertyInfo,IEnumerable<Expression>)"},{"pos":[659994,660009],"content":"IndexExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"IndexExpression","pos":[0,15]}]},{"pos":[660198,660208],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[660377,660389],"content":"PropertyInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"PropertyInfo","pos":[0,12]}]},{"pos":[660609,660632],"content":"IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<Expression>"},{"pos":[660957,660996],"content":"MakeMemberAccess(Expression,MemberInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeMemberAccess(Expression,MemberInfo)","pos":[0,39]}]},{"pos":[661261,661277],"content":"MemberExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberExpression","pos":[0,16]}]},{"pos":[661468,661478],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[661645,661655],"content":"MemberInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberInfo","pos":[0,10]}]},{"pos":[662040,662110],"content":"MakeTry(Type,Expression,Expression,Expression,IEnumerable<ph id=\"ph1\">&lt;CatchBlock&gt;</ph>)","needQuote":true,"needEscape":true,"source":"MakeTry(Type,Expression,Expression,Expression,IEnumerable<CatchBlock>)"},{"pos":[662434,662447],"content":"TryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"TryExpression","pos":[0,13]}]},{"pos":[662592,662596],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[662746,662756],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[662935,662945],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[663124,663134],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[663356,663379],"content":"IEnumerable<ph id=\"ph1\">&lt;CatchBlock&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<CatchBlock>"},{"pos":[663719,663760],"content":"MakeUnary(ExpressionType,Expression,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeUnary(ExpressionType,Expression,Type)","pos":[0,41]}]},{"pos":[664028,664043],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[664236,664250],"content":"ExpressionType","needQuote":true,"needEscape":true,"nodes":[{"content":"ExpressionType","pos":[0,14]}]},{"pos":[664437,664447],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[664586,664590],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[664877,664929],"content":"MakeUnary(ExpressionType,Expression,Type,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"MakeUnary(ExpressionType,Expression,Type,MethodInfo)","pos":[0,52]}]},{"pos":[665219,665234],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[665427,665441],"content":"ExpressionType","needQuote":true,"needEscape":true,"nodes":[{"content":"ExpressionType","pos":[0,14]}]},{"pos":[665628,665638],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[665777,665781],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[665919,665929],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[666232,666281],"content":"MemberBind(MemberInfo,IEnumerable<ph id=\"ph1\">&lt;MemberBinding&gt;</ph>)","needQuote":true,"needEscape":true,"source":"MemberBind(MemberInfo,IEnumerable<MemberBinding>)"},{"pos":[666569,666588],"content":"MemberMemberBinding","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberMemberBinding","pos":[0,19]}]},{"pos":[666773,666783],"content":"MemberInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberInfo","pos":[0,10]}]},{"pos":[667002,667028],"content":"IEnumerable<ph id=\"ph1\">&lt;MemberBinding&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<MemberBinding>"},{"pos":[667358,667396],"content":"MemberBind(MemberInfo,MemberBinding[])","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberBind(MemberInfo,MemberBinding[])","pos":[0,38]}]},{"pos":[667662,667681],"content":"MemberMemberBinding","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberMemberBinding","pos":[0,19]}]},{"pos":[667866,667876],"content":"MemberInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberInfo","pos":[0,10]}]},{"pos":[668052,668065],"content":"MemberBinding","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberBinding","pos":[0,13]}]},{"pos":[668382,668431],"content":"MemberBind(MethodInfo,IEnumerable<ph id=\"ph1\">&lt;MemberBinding&gt;</ph>)","needQuote":true,"needEscape":true,"source":"MemberBind(MethodInfo,IEnumerable<MemberBinding>)"},{"pos":[668719,668738],"content":"MemberMemberBinding","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberMemberBinding","pos":[0,19]}]},{"pos":[668923,668933],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[669152,669178],"content":"IEnumerable<ph id=\"ph1\">&lt;MemberBinding&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<MemberBinding>"},{"pos":[669508,669546],"content":"MemberBind(MethodInfo,MemberBinding[])","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberBind(MethodInfo,MemberBinding[])","pos":[0,38]}]},{"pos":[669812,669831],"content":"MemberMemberBinding","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberMemberBinding","pos":[0,19]}]},{"pos":[670016,670026],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[670202,670215],"content":"MemberBinding","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberBinding","pos":[0,13]}]},{"pos":[670541,670593],"content":"MemberInit(NewExpression,IEnumerable<ph id=\"ph1\">&lt;MemberBinding&gt;</ph>)","needQuote":true,"needEscape":true,"source":"MemberInit(NewExpression,IEnumerable<MemberBinding>)"},{"pos":[670888,670908],"content":"MemberInitExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberInitExpression","pos":[0,20]}]},{"pos":[671110,671123],"content":"NewExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"NewExpression","pos":[0,13]}]},{"pos":[671354,671380],"content":"IEnumerable<ph id=\"ph1\">&lt;MemberBinding&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<MemberBinding>"},{"pos":[671719,671760],"content":"MemberInit(NewExpression,MemberBinding[])","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberInit(NewExpression,MemberBinding[])","pos":[0,41]}]},{"pos":[672033,672053],"content":"MemberInitExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberInitExpression","pos":[0,20]}]},{"pos":[672255,672268],"content":"NewExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"NewExpression","pos":[0,13]}]},{"pos":[672456,672469],"content":"MemberBinding","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberBinding","pos":[0,13]}]},{"pos":[672745,672774],"content":"Modulo(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Modulo(Expression,Expression)","pos":[0,29]}]},{"pos":[673019,673035],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[673226,673236],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[673415,673425],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[673722,673762],"content":"Modulo(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Modulo(Expression,Expression,MethodInfo)","pos":[0,40]}]},{"pos":[674029,674045],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[674236,674246],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[674425,674435],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[674602,674612],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[674880,674915],"content":"ModuloAssign(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"ModuloAssign(Expression,Expression)","pos":[0,35]}]},{"pos":[675172,675188],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[675379,675389],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[675568,675578],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[675881,675927],"content":"ModuloAssign(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"ModuloAssign(Expression,Expression,MethodInfo)","pos":[0,46]}]},{"pos":[676206,676222],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[676413,676423],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[676602,676612],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[676779,676789],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[677127,677190],"content":"ModuloAssign(Expression,Expression,MethodInfo,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"ModuloAssign(Expression,Expression,MethodInfo,LambdaExpression)","pos":[0,63]}]},{"pos":[677503,677519],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[677710,677720],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[677899,677909],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[678076,678086],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[678265,678281],"content":"LambdaExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[678563,678594],"content":"Multiply(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Multiply(Expression,Expression)","pos":[0,31]}]},{"pos":[678843,678859],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[679050,679060],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[679239,679249],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[679548,679590],"content":"Multiply(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Multiply(Expression,Expression,MethodInfo)","pos":[0,42]}]},{"pos":[679861,679877],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[680068,680078],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[680257,680267],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[680434,680444],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[680714,680751],"content":"MultiplyAssign(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MultiplyAssign(Expression,Expression)","pos":[0,37]}]},{"pos":[681012,681028],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[681219,681229],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[681408,681418],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[681723,681771],"content":"MultiplyAssign(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"MultiplyAssign(Expression,Expression,MethodInfo)","pos":[0,48]}]},{"pos":[682054,682070],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[682261,682271],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[682450,682460],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[682627,682637],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[682977,683042],"content":"MultiplyAssign(Expression,Expression,MethodInfo,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MultiplyAssign(Expression,Expression,MethodInfo,LambdaExpression)","pos":[0,65]}]},{"pos":[683359,683375],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[683566,683576],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[683755,683765],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[683932,683942],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[684121,684137],"content":"LambdaExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[684432,684476],"content":"MultiplyAssignChecked(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MultiplyAssignChecked(Expression,Expression)","pos":[0,44]}]},{"pos":[684751,684767],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[684958,684968],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[685147,685157],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[685469,685524],"content":"MultiplyAssignChecked(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"MultiplyAssignChecked(Expression,Expression,MethodInfo)","pos":[0,55]}]},{"pos":[685821,685837],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[686028,686038],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[686217,686227],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[686394,686404],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[686751,686823],"content":"MultiplyAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MultiplyAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)","pos":[0,72]}]},{"pos":[687154,687170],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[687361,687371],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[687550,687560],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[687727,687737],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[687916,687932],"content":"LambdaExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[688221,688259],"content":"MultiplyChecked(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"MultiplyChecked(Expression,Expression)","pos":[0,38]}]},{"pos":[688522,688538],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[688729,688739],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[688918,688928],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[689234,689283],"content":"MultiplyChecked(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"MultiplyChecked(Expression,Expression,MethodInfo)","pos":[0,49]}]},{"pos":[689568,689584],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[689775,689785],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[689964,689974],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[690141,690151],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[690378,690396],"content":"Negate(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Negate(Expression)","pos":[0,18]}]},{"pos":[690618,690633],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[690822,690832],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[691094,691123],"content":"Negate(Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Negate(Expression,MethodInfo)","pos":[0,29]}]},{"pos":[691367,691382],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[691571,691581],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[691748,691758],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[691992,692017],"content":"NegateChecked(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"NegateChecked(Expression)","pos":[0,25]}]},{"pos":[692253,692268],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[692457,692467],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[692736,692772],"content":"NegateChecked(Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"NegateChecked(Expression,MethodInfo)","pos":[0,36]}]},{"pos":[693030,693045],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[693234,693244],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[693411,693421],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[693644,693664],"content":"New(ConstructorInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"New(ConstructorInfo)","pos":[0,20]}]},{"pos":[693888,693901],"content":"NewExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"NewExpression","pos":[0,13]}]},{"pos":[694079,694094],"content":"ConstructorInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"ConstructorInfo","pos":[0,15]}]},{"pos":[694305,694314],"content":"New(Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"New(Type)","pos":[0,9]}]},{"pos":[694516,694529],"content":"NewExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"NewExpression","pos":[0,13]}]},{"pos":[694674,694678],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[694953,694997],"content":"New(ConstructorInfo,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"New(ConstructorInfo,IEnumerable<Expression>)"},{"pos":[695269,695282],"content":"NewExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"NewExpression","pos":[0,13]}]},{"pos":[695460,695475],"content":"ConstructorInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"ConstructorInfo","pos":[0,15]}]},{"pos":[695701,695724],"content":"IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<Expression>"},{"pos":[696043,696076],"content":"New(ConstructorInfo,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"New(ConstructorInfo,Expression[])","pos":[0,33]}]},{"pos":[696326,696339],"content":"NewExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"NewExpression","pos":[0,13]}]},{"pos":[696517,696532],"content":"ConstructorInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"ConstructorInfo","pos":[0,15]}]},{"pos":[696715,696725],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[697100,697168],"content":"New(ConstructorInfo,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>,IEnumerable<ph id=\"ph2\">&lt;MemberInfo&gt;</ph>)","needQuote":true,"needEscape":true,"source":"New(ConstructorInfo,IEnumerable<Expression>,IEnumerable<MemberInfo>)"},{"pos":[697488,697501],"content":"NewExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"NewExpression","pos":[0,13]}]},{"pos":[697679,697694],"content":"ConstructorInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"ConstructorInfo","pos":[0,15]}]},{"pos":[697920,697943],"content":"IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<Expression>"},{"pos":[698212,698235],"content":"IEnumerable<ph id=\"ph1\">&lt;MemberInfo&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<MemberInfo>"},{"pos":[698617,698674],"content":"New(ConstructorInfo,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>,MemberInfo[])","needQuote":true,"needEscape":true,"source":"New(ConstructorInfo,IEnumerable<Expression>,MemberInfo[])"},{"pos":[698972,698985],"content":"NewExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"NewExpression","pos":[0,13]}]},{"pos":[699163,699178],"content":"ConstructorInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"ConstructorInfo","pos":[0,15]}]},{"pos":[699404,699427],"content":"IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<Expression>"},{"pos":[699647,699657],"content":"MemberInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberInfo","pos":[0,10]}]},{"pos":[699946,699990],"content":"NewArrayBounds(Type,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"NewArrayBounds(Type,IEnumerable<Expression>)"},{"pos":[700267,700285],"content":"NewArrayExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"NewArrayExpression","pos":[0,18]}]},{"pos":[700440,700444],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[700637,700660],"content":"IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<Expression>"},{"pos":[700968,701001],"content":"NewArrayBounds(Type,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"NewArrayBounds(Type,Expression[])","pos":[0,33]}]},{"pos":[701256,701274],"content":"NewArrayExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"NewArrayExpression","pos":[0,18]}]},{"pos":[701429,701433],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[701583,701593],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[701886,701928],"content":"NewArrayInit(Type,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"NewArrayInit(Type,IEnumerable<Expression>)"},{"pos":[702201,702219],"content":"NewArrayExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"NewArrayExpression","pos":[0,18]}]},{"pos":[702374,702378],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[702571,702594],"content":"IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<Expression>"},{"pos":[702900,702931],"content":"NewArrayInit(Type,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"NewArrayInit(Type,Expression[])","pos":[0,31]}]},{"pos":[703182,703200],"content":"NewArrayExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"NewArrayExpression","pos":[0,18]}]},{"pos":[703355,703359],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[703509,703519],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[703720,703728],"content":"NodeType","needQuote":true,"needEscape":true,"nodes":[{"content":"NodeType","pos":[0,8]}]},{"pos":[703929,703943],"content":"ExpressionType","needQuote":true,"needEscape":true,"nodes":[{"content":"ExpressionType","pos":[0,14]}]},{"pos":[704181,704196],"content":"Not(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Not(Expression)","pos":[0,15]}]},{"pos":[704412,704427],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[704616,704626],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[704885,704911],"content":"Not(Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Not(Expression,MethodInfo)","pos":[0,26]}]},{"pos":[705149,705164],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[705353,705363],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[705530,705540],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[705804,705835],"content":"NotEqual(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"NotEqual(Expression,Expression)","pos":[0,31]}]},{"pos":[706084,706100],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[706291,706301],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[706480,706490],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[706804,706854],"content":"NotEqual(Expression,Expression,Boolean,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"NotEqual(Expression,Expression,Boolean,MethodInfo)","pos":[0,50]}]},{"pos":[707141,707157],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[707348,707358],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[707537,707547],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[707689,707696],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[707840,707850],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[708085,708111],"content":"OnesComplement(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"OnesComplement(Expression)","pos":[0,26]}]},{"pos":[708349,708364],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[708553,708563],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[708833,708870],"content":"OnesComplement(Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"OnesComplement(Expression,MethodInfo)","pos":[0,37]}]},{"pos":[709130,709145],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[709334,709344],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[709511,709521],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[709779,709804],"content":"Or(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Or(Expression,Expression)","pos":[0,25]}]},{"pos":[710041,710057],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[710248,710258],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[710437,710447],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[710740,710776],"content":"Or(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Or(Expression,Expression,MethodInfo)","pos":[0,36]}]},{"pos":[711035,711051],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[711242,711252],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[711431,711441],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[711608,711618],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[711882,711913],"content":"OrAssign(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"OrAssign(Expression,Expression)","pos":[0,31]}]},{"pos":[712162,712178],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[712369,712379],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[712558,712568],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[712867,712909],"content":"OrAssign(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"OrAssign(Expression,Expression,MethodInfo)","pos":[0,42]}]},{"pos":[713180,713196],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[713387,713397],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[713576,713586],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[713753,713763],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[714097,714156],"content":"OrAssign(Expression,Expression,MethodInfo,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"OrAssign(Expression,Expression,MethodInfo,LambdaExpression)","pos":[0,59]}]},{"pos":[714461,714477],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[714668,714678],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[714857,714867],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[715034,715044],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[715223,715239],"content":"LambdaExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[715519,715548],"content":"OrElse(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"OrElse(Expression,Expression)","pos":[0,29]}]},{"pos":[715793,715809],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[716000,716010],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[716189,716199],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[716496,716536],"content":"OrElse(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"OrElse(Expression,Expression,MethodInfo)","pos":[0,40]}]},{"pos":[716803,716819],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[717010,717020],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[717199,717209],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[717376,717386],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[717593,717608],"content":"Parameter(Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter(Type)","pos":[0,15]}]},{"pos":[717828,717847],"content":"ParameterExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"ParameterExpression","pos":[0,19]}]},{"pos":[718004,718008],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[718206,718228],"content":"Parameter(Type,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter(Type,String)","pos":[0,22]}]},{"pos":[718462,718481],"content":"ParameterExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"ParameterExpression","pos":[0,19]}]},{"pos":[718638,718642],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[718754,718760],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[718981,719012],"content":"PostDecrementAssign(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"PostDecrementAssign(Expression)","pos":[0,31]}]},{"pos":[719260,719275],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[719464,719474],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[719749,719791],"content":"PostDecrementAssign(Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"PostDecrementAssign(Expression,MethodInfo)","pos":[0,42]}]},{"pos":[720061,720076],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[720265,720275],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[720442,720452],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[720692,720723],"content":"PostIncrementAssign(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"PostIncrementAssign(Expression)","pos":[0,31]}]},{"pos":[720971,720986],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[721175,721185],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[721460,721502],"content":"PostIncrementAssign(Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"PostIncrementAssign(Expression,MethodInfo)","pos":[0,42]}]},{"pos":[721772,721787],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[721976,721986],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[722153,722163],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[722424,722452],"content":"Power(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Power(Expression,Expression)","pos":[0,28]}]},{"pos":[722695,722711],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[722902,722912],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[723091,723101],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[723397,723436],"content":"Power(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Power(Expression,Expression,MethodInfo)","pos":[0,39]}]},{"pos":[723701,723717],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[723908,723918],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[724097,724107],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[724274,724284],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[724551,724585],"content":"PowerAssign(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"PowerAssign(Expression,Expression)","pos":[0,34]}]},{"pos":[724840,724856],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[725047,725057],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[725236,725246],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[725548,725593],"content":"PowerAssign(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"PowerAssign(Expression,Expression,MethodInfo)","pos":[0,45]}]},{"pos":[725870,725886],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[726077,726087],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[726266,726276],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[726443,726453],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[726790,726852],"content":"PowerAssign(Expression,Expression,MethodInfo,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"PowerAssign(Expression,Expression,MethodInfo,LambdaExpression)","pos":[0,62]}]},{"pos":[727163,727179],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[727370,727380],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[727559,727569],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[727736,727746],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[727925,727941],"content":"LambdaExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[728198,728228],"content":"PreDecrementAssign(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"PreDecrementAssign(Expression)","pos":[0,30]}]},{"pos":[728474,728489],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[728678,728688],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[728962,729003],"content":"PreDecrementAssign(Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"PreDecrementAssign(Expression,MethodInfo)","pos":[0,41]}]},{"pos":[729271,729286],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[729475,729485],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[729652,729662],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[729901,729931],"content":"PreIncrementAssign(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"PreIncrementAssign(Expression)","pos":[0,30]}]},{"pos":[730177,730192],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[730381,730391],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[730665,730706],"content":"PreIncrementAssign(Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"PreIncrementAssign(Expression,MethodInfo)","pos":[0,41]}]},{"pos":[730974,730989],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[731178,731188],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[731355,731365],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[731623,731654],"content":"Property(Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Property(Expression,MethodInfo)","pos":[0,31]}]},{"pos":[731903,731919],"content":"MemberExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberExpression","pos":[0,16]}]},{"pos":[732110,732120],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[732287,732297],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[732557,732590],"content":"Property(Expression,PropertyInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Property(Expression,PropertyInfo)","pos":[0,33]}]},{"pos":[732843,732859],"content":"MemberExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberExpression","pos":[0,16]}]},{"pos":[733050,733060],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[733229,733241],"content":"PropertyInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"PropertyInfo","pos":[0,12]}]},{"pos":[733488,733515],"content":"Property(Expression,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Property(Expression,String)","pos":[0,27]}]},{"pos":[733756,733772],"content":"MemberExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberExpression","pos":[0,16]}]},{"pos":[733963,733973],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[734114,734120],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[734436,734493],"content":"Property(Expression,PropertyInfo,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Property(Expression,PropertyInfo,IEnumerable<Expression>)"},{"pos":[734793,734808],"content":"IndexExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"IndexExpression","pos":[0,15]}]},{"pos":[734997,735007],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[735176,735188],"content":"PropertyInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"PropertyInfo","pos":[0,12]}]},{"pos":[735408,735431],"content":"IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<Expression>"},{"pos":[735787,735833],"content":"Property(Expression,PropertyInfo,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Property(Expression,PropertyInfo,Expression[])","pos":[0,46]}]},{"pos":[736111,736126],"content":"IndexExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"IndexExpression","pos":[0,15]}]},{"pos":[736315,736325],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[736494,736506],"content":"PropertyInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"PropertyInfo","pos":[0,12]}]},{"pos":[736683,736693],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[736981,737021],"content":"Property(Expression,String,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Property(Expression,String,Expression[])","pos":[0,40]}]},{"pos":[737287,737302],"content":"IndexExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"IndexExpression","pos":[0,15]}]},{"pos":[737491,737501],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[737642,737648],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[737802,737812],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[738075,738107],"content":"Property(Expression,Type,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Property(Expression,Type,String)","pos":[0,32]}]},{"pos":[738358,738374],"content":"MemberExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberExpression","pos":[0,16]}]},{"pos":[738565,738575],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[738714,738718],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[738830,738836],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[739067,739101],"content":"PropertyOrField(Expression,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"PropertyOrField(Expression,String)","pos":[0,34]}]},{"pos":[739356,739372],"content":"MemberExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"MemberExpression","pos":[0,16]}]},{"pos":[739563,739573],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[739714,739720],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[739927,739944],"content":"Quote(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Quote(Expression)","pos":[0,17]}]},{"pos":[740164,740179],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[740368,740378],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[740575,740583],"content":"Reduce()","needQuote":true,"needEscape":true,"nodes":[{"content":"Reduce()","pos":[0,8]}]},{"pos":[740780,740790],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[740995,741011],"content":"ReduceAndCheck()","needQuote":true,"needEscape":true,"nodes":[{"content":"ReduceAndCheck()","pos":[0,16]}]},{"pos":[741224,741234],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[741441,741459],"content":"ReduceExtensions()","needQuote":true,"needEscape":true,"nodes":[{"content":"ReduceExtensions()","pos":[0,18]}]},{"pos":[741676,741686],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[741962,741999],"content":"ReferenceEqual(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"ReferenceEqual(Expression,Expression)","pos":[0,37]}]},{"pos":[742260,742276],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[742467,742477],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[742656,742666],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[742945,742985],"content":"ReferenceNotEqual(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"ReferenceNotEqual(Expression,Expression)","pos":[0,40]}]},{"pos":[743252,743268],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[743459,743469],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[743648,743658],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[743856,743865],"content":"Rethrow()","needQuote":true,"needEscape":true,"nodes":[{"content":"Rethrow()","pos":[0,9]}]},{"pos":[744069,744084],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[744305,744318],"content":"Rethrow(Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Rethrow(Type)","pos":[0,13]}]},{"pos":[744530,744545],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[744694,744698],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[744903,744922],"content":"Return(LabelTarget)","needQuote":true,"needEscape":true,"nodes":[{"content":"Return(LabelTarget)","pos":[0,19]}]},{"pos":[745145,745159],"content":"GotoExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"GotoExpression","pos":[0,14]}]},{"pos":[745347,745358],"content":"LabelTarget","needQuote":true,"needEscape":true,"nodes":[{"content":"LabelTarget","pos":[0,11]}]},{"pos":[745629,745659],"content":"Return(LabelTarget,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Return(LabelTarget,Expression)","pos":[0,30]}]},{"pos":[745904,745918],"content":"GotoExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"GotoExpression","pos":[0,14]}]},{"pos":[746106,746117],"content":"LabelTarget","needQuote":true,"needEscape":true,"nodes":[{"content":"LabelTarget","pos":[0,11]}]},{"pos":[746298,746308],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[746554,746578],"content":"Return(LabelTarget,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Return(LabelTarget,Type)","pos":[0,24]}]},{"pos":[746811,746825],"content":"GotoExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"GotoExpression","pos":[0,14]}]},{"pos":[747013,747024],"content":"LabelTarget","needQuote":true,"needEscape":true,"nodes":[{"content":"LabelTarget","pos":[0,11]}]},{"pos":[747165,747169],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[747421,747456],"content":"Return(LabelTarget,Expression,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Return(LabelTarget,Expression,Type)","pos":[0,35]}]},{"pos":[747711,747725],"content":"GotoExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"GotoExpression","pos":[0,14]}]},{"pos":[747913,747924],"content":"LabelTarget","needQuote":true,"needEscape":true,"nodes":[{"content":"LabelTarget","pos":[0,11]}]},{"pos":[748105,748115],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[748254,748258],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[748501,748534],"content":"RightShift(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"RightShift(Expression,Expression)","pos":[0,33]}]},{"pos":[748787,748803],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[748994,749004],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[749183,749193],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[749494,749538],"content":"RightShift(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"RightShift(Expression,Expression,MethodInfo)","pos":[0,44]}]},{"pos":[749813,749829],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[750020,750030],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[750209,750219],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[750386,750396],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[750668,750707],"content":"RightShiftAssign(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"RightShiftAssign(Expression,Expression)","pos":[0,39]}]},{"pos":[750972,750988],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[751179,751189],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[751368,751378],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[751685,751735],"content":"RightShiftAssign(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"RightShiftAssign(Expression,Expression,MethodInfo)","pos":[0,50]}]},{"pos":[752022,752038],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[752229,752239],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[752418,752428],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[752595,752605],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[752947,753014],"content":"RightShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"RightShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)","pos":[0,67]}]},{"pos":[753335,753351],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[753542,753552],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[753731,753741],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[753908,753918],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[754097,754113],"content":"LambdaExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[754417,754467],"content":"RuntimeVariables(IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"RuntimeVariables(IEnumerable<ParameterExpression>)"},{"pos":[754764,754790],"content":"RuntimeVariablesExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"RuntimeVariablesExpression","pos":[0,26]}]},{"pos":[755053,755085],"content":"IEnumerable<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<ParameterExpression>"},{"pos":[755410,755449],"content":"RuntimeVariables(ParameterExpression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"RuntimeVariables(ParameterExpression[])","pos":[0,39]}]},{"pos":[755724,755750],"content":"RuntimeVariablesExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"RuntimeVariablesExpression","pos":[0,26]}]},{"pos":[755970,755989],"content":"ParameterExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"ParameterExpression","pos":[0,19]}]},{"pos":[756279,756310],"content":"Subtract(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Subtract(Expression,Expression)","pos":[0,31]}]},{"pos":[756559,756575],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[756766,756776],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[756955,756965],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[757264,757306],"content":"Subtract(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"Subtract(Expression,Expression,MethodInfo)","pos":[0,42]}]},{"pos":[757577,757593],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[757784,757794],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[757973,757983],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[758150,758160],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[758430,758467],"content":"SubtractAssign(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"SubtractAssign(Expression,Expression)","pos":[0,37]}]},{"pos":[758728,758744],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[758935,758945],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[759124,759134],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[759439,759487],"content":"SubtractAssign(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"SubtractAssign(Expression,Expression,MethodInfo)","pos":[0,48]}]},{"pos":[759770,759786],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[759977,759987],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[760166,760176],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[760343,760353],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[760693,760758],"content":"SubtractAssign(Expression,Expression,MethodInfo,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"SubtractAssign(Expression,Expression,MethodInfo,LambdaExpression)","pos":[0,65]}]},{"pos":[761075,761091],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[761282,761292],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[761471,761481],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[761648,761658],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[761837,761853],"content":"LambdaExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[762148,762192],"content":"SubtractAssignChecked(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"SubtractAssignChecked(Expression,Expression)","pos":[0,44]}]},{"pos":[762467,762483],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[762674,762684],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[762863,762873],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[763185,763240],"content":"SubtractAssignChecked(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"SubtractAssignChecked(Expression,Expression,MethodInfo)","pos":[0,55]}]},{"pos":[763537,763553],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[763744,763754],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[763933,763943],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[764110,764120],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[764467,764539],"content":"SubtractAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)","needQuote":true,"needEscape":true,"nodes":[{"content":"SubtractAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)","pos":[0,72]}]},{"pos":[764870,764886],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[765077,765087],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[765266,765276],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[765443,765453],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[765632,765648],"content":"LambdaExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[765937,765975],"content":"SubtractChecked(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"SubtractChecked(Expression,Expression)","pos":[0,38]}]},{"pos":[766238,766254],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[766445,766455],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[766634,766644],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[766950,766999],"content":"SubtractChecked(Expression,Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"SubtractChecked(Expression,Expression,MethodInfo)","pos":[0,49]}]},{"pos":[767284,767300],"content":"BinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[767491,767501],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[767680,767690],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[767857,767867],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[768131,768162],"content":"Switch(Expression,SwitchCase[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Switch(Expression,SwitchCase[])","pos":[0,31]}]},{"pos":[768411,768427],"content":"SwitchExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"SwitchExpression","pos":[0,16]}]},{"pos":[768618,768628],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[768807,768817],"content":"SwitchCase","needQuote":true,"needEscape":true,"nodes":[{"content":"SwitchCase","pos":[0,10]}]},{"pos":[769124,769166],"content":"Switch(Expression,Expression,SwitchCase[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Switch(Expression,Expression,SwitchCase[])","pos":[0,42]}]},{"pos":[769437,769453],"content":"SwitchExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"SwitchExpression","pos":[0,16]}]},{"pos":[769644,769654],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[769833,769843],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[770022,770032],"content":"SwitchCase","needQuote":true,"needEscape":true,"nodes":[{"content":"SwitchCase","pos":[0,10]}]},{"pos":[770406,770470],"content":"Switch(Expression,Expression,MethodInfo,IEnumerable<ph id=\"ph1\">&lt;SwitchCase&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Switch(Expression,Expression,MethodInfo,IEnumerable<SwitchCase>)"},{"pos":[770785,770801],"content":"SwitchExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"SwitchExpression","pos":[0,16]}]},{"pos":[770992,771002],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[771181,771191],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[771358,771368],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[771584,771607],"content":"IEnumerable<ph id=\"ph1\">&lt;SwitchCase&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<SwitchCase>"},{"pos":[771994,772047],"content":"Switch(Expression,Expression,MethodInfo,SwitchCase[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Switch(Expression,Expression,MethodInfo,SwitchCase[])","pos":[0,53]}]},{"pos":[772340,772356],"content":"SwitchExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"SwitchExpression","pos":[0,16]}]},{"pos":[772547,772557],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[772736,772746],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[772913,772923],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[773096,773106],"content":"SwitchCase","needQuote":true,"needEscape":true,"nodes":[{"content":"SwitchCase","pos":[0,10]}]},{"pos":[773492,773561],"content":"Switch(Type,Expression,Expression,MethodInfo,IEnumerable<ph id=\"ph1\">&lt;SwitchCase&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Switch(Type,Expression,Expression,MethodInfo,IEnumerable<SwitchCase>)"},{"pos":[773886,773902],"content":"SwitchExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"SwitchExpression","pos":[0,16]}]},{"pos":[774053,774057],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[774207,774217],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[774396,774406],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[774573,774583],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[774799,774822],"content":"IEnumerable<ph id=\"ph1\">&lt;SwitchCase&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<SwitchCase>"},{"pos":[775221,775279],"content":"Switch(Type,Expression,Expression,MethodInfo,SwitchCase[])","needQuote":true,"needEscape":true,"nodes":[{"content":"Switch(Type,Expression,Expression,MethodInfo,SwitchCase[])","pos":[0,58]}]},{"pos":[775582,775598],"content":"SwitchExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"SwitchExpression","pos":[0,16]}]},{"pos":[775749,775753],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[775903,775913],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[776092,776102],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[776269,776279],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[776452,776462],"content":"SwitchCase","needQuote":true,"needEscape":true,"nodes":[{"content":"SwitchCase","pos":[0,10]}]},{"pos":[776776,776822],"content":"SwitchCase(Expression,IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>)","needQuote":true,"needEscape":true,"source":"SwitchCase(Expression,IEnumerable<Expression>)"},{"pos":[777095,777105],"content":"SwitchCase","needQuote":true,"needEscape":true,"nodes":[{"content":"SwitchCase","pos":[0,10]}]},{"pos":[777284,777294],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[777516,777539],"content":"IEnumerable<ph id=\"ph1\">&lt;Expression&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<Expression>"},{"pos":[777866,777901],"content":"SwitchCase(Expression,Expression[])","needQuote":true,"needEscape":true,"nodes":[{"content":"SwitchCase(Expression,Expression[])","pos":[0,35]}]},{"pos":[778152,778162],"content":"SwitchCase","needQuote":true,"needEscape":true,"nodes":[{"content":"SwitchCase","pos":[0,10]}]},{"pos":[778341,778351],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[778530,778540],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[778762,778784],"content":"SymbolDocument(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"SymbolDocument(String)","pos":[0,22]}]},{"pos":[779017,779035],"content":"SymbolDocumentInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"SymbolDocumentInfo","pos":[0,18]}]},{"pos":[779192,779198],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[779405,779432],"content":"SymbolDocument(String,Guid)","needQuote":true,"needEscape":true,"nodes":[{"content":"SymbolDocument(String,Guid)","pos":[0,27]}]},{"pos":[779675,779693],"content":"SymbolDocumentInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"SymbolDocumentInfo","pos":[0,18]}]},{"pos":[779850,779856],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[779970,779974],"content":"Guid","needQuote":true,"needEscape":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[780189,780221],"content":"SymbolDocument(String,Guid,Guid)","needQuote":true,"needEscape":true,"nodes":[{"content":"SymbolDocument(String,Guid,Guid)","pos":[0,32]}]},{"pos":[780474,780492],"content":"SymbolDocumentInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"SymbolDocumentInfo","pos":[0,18]}]},{"pos":[780649,780655],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[780769,780773],"content":"Guid","needQuote":true,"needEscape":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[780883,780887],"content":"Guid","needQuote":true,"needEscape":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[781114,781151],"content":"SymbolDocument(String,Guid,Guid,Guid)","needQuote":true,"needEscape":true,"nodes":[{"content":"SymbolDocument(String,Guid,Guid,Guid)","pos":[0,37]}]},{"pos":[781414,781432],"content":"SymbolDocumentInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"SymbolDocumentInfo","pos":[0,18]}]},{"pos":[781589,781595],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[781709,781713],"content":"Guid","needQuote":true,"needEscape":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[781823,781827],"content":"Guid","needQuote":true,"needEscape":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[781937,781941],"content":"Guid","needQuote":true,"needEscape":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[782144,782161],"content":"Throw(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"Throw(Expression)","pos":[0,17]}]},{"pos":[782381,782396],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[782585,782595],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[782839,782861],"content":"Throw(Expression,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Throw(Expression,Type)","pos":[0,22]}]},{"pos":[783091,783106],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[783295,783305],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[783444,783448],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[783618,783628],"content":"ToString()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[783791,783797],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[784044,784077],"content":"TryCatch(Expression,CatchBlock[])","needQuote":true,"needEscape":true,"nodes":[{"content":"TryCatch(Expression,CatchBlock[])","pos":[0,33]}]},{"pos":[784327,784340],"content":"TryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"TryExpression","pos":[0,13]}]},{"pos":[784525,784535],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[784714,784724],"content":"CatchBlock","needQuote":true,"needEscape":true,"nodes":[{"content":"CatchBlock","pos":[0,10]}]},{"pos":[785040,785091],"content":"TryCatchFinally(Expression,Expression,CatchBlock[])","needQuote":true,"needEscape":true,"nodes":[{"content":"TryCatchFinally(Expression,Expression,CatchBlock[])","pos":[0,51]}]},{"pos":[785377,785390],"content":"TryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"TryExpression","pos":[0,13]}]},{"pos":[785575,785585],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[785764,785774],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[785953,785963],"content":"CatchBlock","needQuote":true,"needEscape":true,"nodes":[{"content":"CatchBlock","pos":[0,10]}]},{"pos":[786235,786266],"content":"TryFault(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryFault(Expression,Expression)","pos":[0,31]}]},{"pos":[786512,786525],"content":"TryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"TryExpression","pos":[0,13]}]},{"pos":[786710,786720],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[786899,786909],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[787181,787214],"content":"TryFinally(Expression,Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryFinally(Expression,Expression)","pos":[0,33]}]},{"pos":[787464,787477],"content":"TryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"TryExpression","pos":[0,13]}]},{"pos":[787662,787672],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[787851,787861],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[788096,788125],"content":"TryGetActionType(Type[],Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryGetActionType(Type[],Type)","pos":[0,29]}]},{"pos":[788327,788334],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[788450,788454],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[788566,788570],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[788774,788801],"content":"TryGetFuncType(Type[],Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryGetFuncType(Type[],Type)","pos":[0,27]}]},{"pos":[788999,789006],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[789122,789126],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[789238,789242],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[789408,789412],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[789561,789565],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[789781,789804],"content":"TypeAs(Expression,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"TypeAs(Expression,Type)","pos":[0,23]}]},{"pos":[790036,790051],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[790240,790250],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[790389,790393],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[790612,790638],"content":"TypeEqual(Expression,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"TypeEqual(Expression,Type)","pos":[0,26]}]},{"pos":[790881,790901],"content":"TypeBinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"TypeBinaryExpression","pos":[0,20]}]},{"pos":[791100,791110],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[791249,791253],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[791469,791492],"content":"TypeIs(Expression,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"TypeIs(Expression,Type)","pos":[0,23]}]},{"pos":[791729,791749],"content":"TypeBinaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"TypeBinaryExpression","pos":[0,20]}]},{"pos":[791948,791958],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[792097,792101],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[792308,792329],"content":"UnaryPlus(Expression)","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryPlus(Expression)","pos":[0,21]}]},{"pos":[792557,792572],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[792761,792771],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[793036,793068],"content":"UnaryPlus(Expression,MethodInfo)","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryPlus(Expression,MethodInfo)","pos":[0,32]}]},{"pos":[793318,793333],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[793522,793532],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[793699,793709],"content":"MethodInfo","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[793947,793969],"content":"Unbox(Expression,Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Unbox(Expression,Type)","pos":[0,22]}]},{"pos":[794199,794214],"content":"UnaryExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[794403,794413],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[794552,794556],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[794739,794753],"content":"Variable(Type)","needQuote":true,"needEscape":true,"nodes":[{"content":"Variable(Type)","pos":[0,14]}]},{"pos":[794971,794990],"content":"ParameterExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"ParameterExpression","pos":[0,19]}]},{"pos":[795147,795151],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[795348,795369],"content":"Variable(Type,String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Variable(Type,String)","pos":[0,21]}]},{"pos":[795601,795620],"content":"ParameterExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"ParameterExpression","pos":[0,19]}]},{"pos":[795777,795781],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[795893,795899],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[796121,796153],"content":"VisitChildren(ExpressionVisitor)","needQuote":true,"needEscape":true,"nodes":[{"content":"VisitChildren(ExpressionVisitor)","pos":[0,32]}]},{"pos":[796398,796408],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[796594,796611],"content":"ExpressionVisitor","needQuote":true,"needEscape":true,"nodes":[{"content":"ExpressionVisitor","pos":[0,17]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Linq.Expressions.Expression\n  id: Expression\n  children:\n  - System.Linq.Expressions.Expression.#ctor\n  - System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)\n  - System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)\n  - System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)\n  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.CanReduce\n  - System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)\n  - System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Constant(System.Object)\n  - System.Linq.Expressions.Expression.Constant(System.Object,System.Type)\n  - System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)\n  - System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Default(System.Type)\n  - System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Empty\n  - System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)\n  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)\n  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)\n  - System.Linq.Expressions.Expression.GetActionType(System.Type[])\n  - System.Linq.Expressions.Expression.GetDelegateType(System.Type[])\n  - System.Linq.Expressions.Expression.GetFuncType(System.Type[])\n  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)\n  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Label\n  - System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Label(System.String)\n  - System.Linq.Expressions.Expression.Label(System.Type)\n  - System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Label(System.Type,System.String)\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])\n  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)\n  - System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})\n  - System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])\n  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])\n  - System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  - System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])\n  - System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)\n  - System.Linq.Expressions.Expression.New(System.Type)\n  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})\n  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])\n  - System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.NodeType\n  - System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Parameter(System.Type)\n  - System.Linq.Expressions.Expression.Parameter(System.Type,System.String)\n  - System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)\n  - System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)\n  - System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Reduce\n  - System.Linq.Expressions.Expression.ReduceAndCheck\n  - System.Linq.Expressions.Expression.ReduceExtensions\n  - System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Rethrow\n  - System.Linq.Expressions.Expression.Rethrow(System.Type)\n  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)\n  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  - System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  - System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  - System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.SymbolDocument(System.String)\n  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)\n  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)\n  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)\n  - System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.ToString\n  - System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  - System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  - System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)\n  - System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)\n  - System.Linq.Expressions.Expression.Type\n  - System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Variable(System.Type)\n  - System.Linq.Expressions.Expression.Variable(System.Type,System.String)\n  - System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)\n  langs:\n  - csharp\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n  type: Class\n  syntax:\n    content: public abstract class Expression\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.#ctor\n  id: '#ctor'\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Expression()\n  nameWithType: Expression.Expression()\n  fullName: System.Linq.Expressions.Expression.Expression()\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: protected Expression ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)\n  id: '#ctor(System.Linq.Expressions.ExpressionType,System.Type)'\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Expression(ExpressionType,Type)\n  nameWithType: Expression.Expression(ExpressionType,Type)\n  fullName: System.Linq.Expressions.Expression.Expression(ExpressionType,Type)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: protected Expression (System.Linq.Expressions.ExpressionType nodeType, Type type);\n    parameters:\n    - id: nodeType\n      type: System.Linq.Expressions.ExpressionType\n      description: Parameter description to be filled\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)\n  id: Accept(System.Linq.Expressions.ExpressionVisitor)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Accept(ExpressionVisitor)\n  nameWithType: Expression.Accept(ExpressionVisitor)\n  fullName: System.Linq.Expressions.Expression.Accept(ExpressionVisitor)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: protected virtual System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);\n    parameters:\n    - id: visitor\n      type: System.Linq.Expressions.ExpressionVisitor\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Add(Expression,Expression)\n  nameWithType: Expression.Add(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Add(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Add (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Add*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Add(Expression,Expression,MethodInfo)\n  nameWithType: Expression.Add(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Add(Expression,Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Add (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Add*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: AddAssign(Expression,Expression)\n  nameWithType: Expression.AddAssign(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.AddAssign(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.AddAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: AddAssign(Expression,Expression,MethodInfo)\n  nameWithType: Expression.AddAssign(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.AddAssign(Expression,Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.AddAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: AddAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  nameWithType: Expression.AddAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.AddAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.AddAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: AddAssignChecked(Expression,Expression)\n  nameWithType: Expression.AddAssignChecked(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.AddAssignChecked(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.AddAssignChecked*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: AddAssignChecked(Expression,Expression,MethodInfo)\n  nameWithType: Expression.AddAssignChecked(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.AddAssignChecked(Expression,Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.AddAssignChecked*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: AddAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)\n  nameWithType: Expression.AddAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.AddAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.AddAssignChecked*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: AddChecked(Expression,Expression)\n  nameWithType: Expression.AddChecked(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.AddChecked(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression AddChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.AddChecked*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: AddChecked(Expression,Expression,MethodInfo)\n  nameWithType: Expression.AddChecked(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.AddChecked(Expression,Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression AddChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.AddChecked*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: And(Expression,Expression)\n  nameWithType: Expression.And(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.And(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression And (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.And*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: And(Expression,Expression,MethodInfo)\n  nameWithType: Expression.And(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.And(Expression,Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression And (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.And*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: AndAlso(Expression,Expression)\n  nameWithType: Expression.AndAlso(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.AndAlso(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression AndAlso (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.AndAlso*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: AndAlso(Expression,Expression,MethodInfo)\n  nameWithType: Expression.AndAlso(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.AndAlso(Expression,Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression AndAlso (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.AndAlso*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: AndAssign(Expression,Expression)\n  nameWithType: Expression.AndAssign(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.AndAssign(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.AndAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: AndAssign(Expression,Expression,MethodInfo)\n  nameWithType: Expression.AndAssign(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.AndAssign(Expression,Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.AndAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: AndAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  nameWithType: Expression.AndAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.AndAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.AndAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ArrayAccess(Expression,IEnumerable<Expression>)\n  nameWithType: Expression.ArrayAccess(Expression,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.ArrayAccess(Expression,IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.IndexExpression ArrayAccess (System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> indexes);\n    parameters:\n    - id: array\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: indexes\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.IndexExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.ArrayAccess*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  id: ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ArrayAccess(Expression,Expression[])\n  nameWithType: Expression.ArrayAccess(Expression,Expression[])\n  fullName: System.Linq.Expressions.Expression.ArrayAccess(Expression,Expression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.IndexExpression ArrayAccess (System.Linq.Expressions.Expression array, System.Linq.Expressions.Expression[] indexes);\n    parameters:\n    - id: array\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: indexes\n      type: System.Linq.Expressions.Expression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.IndexExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.ArrayAccess*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ArrayIndex(Expression,IEnumerable<Expression>)\n  nameWithType: Expression.ArrayIndex(Expression,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.ArrayIndex(Expression,IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> indexes);\n    parameters:\n    - id: array\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: indexes\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.ArrayIndex*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ArrayIndex(Expression,Expression)\n  nameWithType: Expression.ArrayIndex(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.ArrayIndex(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Linq.Expressions.Expression index);\n    parameters:\n    - id: array\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: index\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.ArrayIndex*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  id: ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ArrayIndex(Expression,Expression[])\n  nameWithType: Expression.ArrayIndex(Expression,Expression[])\n  fullName: System.Linq.Expressions.Expression.ArrayIndex(Expression,Expression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Linq.Expressions.Expression[] indexes);\n    parameters:\n    - id: array\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: indexes\n      type: System.Linq.Expressions.Expression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.ArrayIndex*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)\n  id: ArrayLength(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ArrayLength(Expression)\n  nameWithType: Expression.ArrayLength(Expression)\n  fullName: System.Linq.Expressions.Expression.ArrayLength(Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression ArrayLength (System.Linq.Expressions.Expression array);\n    parameters:\n    - id: array\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Assign(Expression,Expression)\n  nameWithType: Expression.Assign(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Assign(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Assign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)\n  id: Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Bind(MemberInfo,Expression)\n  nameWithType: Expression.Bind(MemberInfo,Expression)\n  fullName: System.Linq.Expressions.Expression.Bind(MemberInfo,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MemberAssignment Bind (System.Reflection.MemberInfo member, System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: member\n      type: System.Reflection.MemberInfo\n      description: Parameter description to be filled\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MemberAssignment\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Bind*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  id: Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Bind(MethodInfo,Expression)\n  nameWithType: Expression.Bind(MethodInfo,Expression)\n  fullName: System.Linq.Expressions.Expression.Bind(MethodInfo,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MemberAssignment Bind (System.Reflection.MethodInfo propertyAccessor, System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: propertyAccessor\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MemberAssignment\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Bind*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Block(IEnumerable<Expression>)\n  nameWithType: Expression.Block(IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.Block(IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> expressions);\n    parameters:\n    - id: expressions\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Block*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])\n  id: Block(System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Block(Expression[])\n  nameWithType: Expression.Block(Expression[])\n  fullName: System.Linq.Expressions.Expression.Block(Expression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression[] expressions);\n    parameters:\n    - id: expressions\n      type: System.Linq.Expressions.Expression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Block*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Block(IEnumerable<ParameterExpression>,IEnumerable<Expression>)\n  nameWithType: Expression.Block(IEnumerable<ParameterExpression>,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.Block(IEnumerable<ParameterExpression>,IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> expressions);\n    parameters:\n    - id: variables\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: Parameter description to be filled\n    - id: expressions\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Block*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  id: Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Block(IEnumerable<ParameterExpression>,Expression[])\n  nameWithType: Expression.Block(IEnumerable<ParameterExpression>,Expression[])\n  fullName: System.Linq.Expressions.Expression.Block(IEnumerable<ParameterExpression>,Expression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables, System.Linq.Expressions.Expression[] expressions);\n    parameters:\n    - id: variables\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: Parameter description to be filled\n    - id: expressions\n      type: System.Linq.Expressions.Expression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Block*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Block(Expression,Expression)\n  nameWithType: Expression.Block(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Block(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);\n    parameters:\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Block*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Block(Type,IEnumerable<Expression>)\n  nameWithType: Expression.Block(Type,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.Block(Type,IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> expressions);\n    parameters:\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    - id: expressions\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Block*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])\n  id: Block(System.Type,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Block(Type,Expression[])\n  nameWithType: Expression.Block(Type,Expression[])\n  fullName: System.Linq.Expressions.Expression.Block(Type,Expression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BlockExpression Block (Type type, System.Linq.Expressions.Expression[] expressions);\n    parameters:\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    - id: expressions\n      type: System.Linq.Expressions.Expression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Block*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Block(Expression,Expression,Expression)\n  nameWithType: Expression.Block(Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Block(Expression,Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);\n    parameters:\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Block*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Block(Type,IEnumerable<ParameterExpression>,IEnumerable<Expression>)\n  nameWithType: Expression.Block(Type,IEnumerable<ParameterExpression>,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.Block(Type,IEnumerable<ParameterExpression>,IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> expressions);\n    parameters:\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    - id: variables\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: Parameter description to be filled\n    - id: expressions\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Block*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  id: Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Block(Type,IEnumerable<ParameterExpression>,Expression[])\n  nameWithType: Expression.Block(Type,IEnumerable<ParameterExpression>,Expression[])\n  fullName: System.Linq.Expressions.Expression.Block(Type,IEnumerable<ParameterExpression>,Expression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables, System.Linq.Expressions.Expression[] expressions);\n    parameters:\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    - id: variables\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: Parameter description to be filled\n    - id: expressions\n      type: System.Linq.Expressions.Expression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Block*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Block(Expression,Expression,Expression,Expression)\n  nameWithType: Expression.Block(Expression,Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Block(Expression,Expression,Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);\n    parameters:\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg3\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Block*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Block(Expression,Expression,Expression,Expression,Expression)\n  nameWithType: Expression.Block(Expression,Expression,Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Block(Expression,Expression,Expression,Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4);\n    parameters:\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg3\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg4\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BlockExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Block*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)\n  id: Break(System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Break(LabelTarget)\n  nameWithType: Expression.Break(LabelTarget)\n  fullName: System.Linq.Expressions.Expression.Break(LabelTarget)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Break*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  id: Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Break(LabelTarget,Expression)\n  nameWithType: Expression.Break(LabelTarget,Expression)\n  fullName: System.Linq.Expressions.Expression.Break(LabelTarget,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: Parameter description to be filled\n    - id: value\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Break*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)\n  id: Break(System.Linq.Expressions.LabelTarget,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Break(LabelTarget,Type)\n  nameWithType: Expression.Break(LabelTarget,Type)\n  fullName: System.Linq.Expressions.Expression.Break(LabelTarget,Type)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, Type type);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: Parameter description to be filled\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Break*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  id: Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Break(LabelTarget,Expression,Type)\n  nameWithType: Expression.Break(LabelTarget,Expression,Type)\n  fullName: System.Linq.Expressions.Expression.Break(LabelTarget,Expression,Type)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: Parameter description to be filled\n    - id: value\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Break*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Call(Expression,MethodInfo)\n  nameWithType: Expression.Call(Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Call(Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method);\n    parameters:\n    - id: instance\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Call*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Call(MethodInfo,IEnumerable<Expression>)\n  nameWithType: Expression.Call(MethodInfo,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.Call(MethodInfo,IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);\n    parameters:\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Call*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Call(MethodInfo,Expression)\n  nameWithType: Expression.Call(MethodInfo,Expression)\n  fullName: System.Linq.Expressions.Expression.Call(MethodInfo,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0);\n    parameters:\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Call*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Call(MethodInfo,Expression[])\n  nameWithType: Expression.Call(MethodInfo,Expression[])\n  fullName: System.Linq.Expressions.Expression.Call(MethodInfo,Expression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression[] arguments);\n    parameters:\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Call*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Call(Expression,MethodInfo,IEnumerable<Expression>)\n  nameWithType: Expression.Call(Expression,MethodInfo,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.Call(Expression,MethodInfo,IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);\n    parameters:\n    - id: instance\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Call*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Call(Expression,MethodInfo,Expression[])\n  nameWithType: Expression.Call(Expression,MethodInfo,Expression[])\n  fullName: System.Linq.Expressions.Expression.Call(Expression,MethodInfo,Expression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression[] arguments);\n    parameters:\n    - id: instance\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Call*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Call(MethodInfo,Expression,Expression)\n  nameWithType: Expression.Call(MethodInfo,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Call(MethodInfo,Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);\n    parameters:\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Call*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Call(Expression,MethodInfo,Expression,Expression)\n  nameWithType: Expression.Call(Expression,MethodInfo,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Call(Expression,MethodInfo,Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);\n    parameters:\n    - id: instance\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Call*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  id: Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Call(Expression,String,Type[],Expression[])\n  nameWithType: Expression.Call(Expression,String,Type[],Expression[])\n  fullName: System.Linq.Expressions.Expression.Call(Expression,String,Type[],Expression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, string methodName, Type[] typeArguments, System.Linq.Expressions.Expression[] arguments);\n    parameters:\n    - id: instance\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: methodName\n      type: System.String\n      description: Parameter description to be filled\n    - id: typeArguments\n      type: System.Type[]\n      description: Parameter description to be filled\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Call*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Call(MethodInfo,Expression,Expression,Expression)\n  nameWithType: Expression.Call(MethodInfo,Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Call(MethodInfo,Expression,Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);\n    parameters:\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Call*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  id: Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Call(Type,String,Type[],Expression[])\n  nameWithType: Expression.Call(Type,String,Type[],Expression[])\n  fullName: System.Linq.Expressions.Expression.Call(Type,String,Type[],Expression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression Call (Type type, string methodName, Type[] typeArguments, System.Linq.Expressions.Expression[] arguments);\n    parameters:\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    - id: methodName\n      type: System.String\n      description: Parameter description to be filled\n    - id: typeArguments\n      type: System.Type[]\n      description: Parameter description to be filled\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Call*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Call(Expression,MethodInfo,Expression,Expression,Expression)\n  nameWithType: Expression.Call(Expression,MethodInfo,Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Call(Expression,MethodInfo,Expression,Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);\n    parameters:\n    - id: instance\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Call*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Call(MethodInfo,Expression,Expression,Expression,Expression)\n  nameWithType: Expression.Call(MethodInfo,Expression,Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Call(MethodInfo,Expression,Expression,Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);\n    parameters:\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg3\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Call*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Call(MethodInfo,Expression,Expression,Expression,Expression,Expression)\n  nameWithType: Expression.Call(MethodInfo,Expression,Expression,Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Call(MethodInfo,Expression,Expression,Expression,Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4);\n    parameters:\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg3\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg4\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MethodCallExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Call*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.CanReduce\n  id: CanReduce\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: CanReduce\n  nameWithType: Expression.CanReduce\n  fullName: System.Linq.Expressions.Expression.CanReduce\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public virtual bool CanReduce { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)\n  id: Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Catch(ParameterExpression,Expression)\n  nameWithType: Expression.Catch(ParameterExpression,Expression)\n  fullName: System.Linq.Expressions.Expression.Catch(ParameterExpression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.CatchBlock Catch (System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body);\n    parameters:\n    - id: variable\n      type: System.Linq.Expressions.ParameterExpression\n      description: Parameter description to be filled\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.CatchBlock\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Catch*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)\n  id: Catch(System.Type,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Catch(Type,Expression)\n  nameWithType: Expression.Catch(Type,Expression)\n  fullName: System.Linq.Expressions.Expression.Catch(Type,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.CatchBlock Catch (Type type, System.Linq.Expressions.Expression body);\n    parameters:\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.CatchBlock\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Catch*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Catch(ParameterExpression,Expression,Expression)\n  nameWithType: Expression.Catch(ParameterExpression,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Catch(ParameterExpression,Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.CatchBlock Catch (System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);\n    parameters:\n    - id: variable\n      type: System.Linq.Expressions.ParameterExpression\n      description: Parameter description to be filled\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: filter\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.CatchBlock\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Catch*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Catch(Type,Expression,Expression)\n  nameWithType: Expression.Catch(Type,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Catch(Type,Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.CatchBlock Catch (Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);\n    parameters:\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: filter\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.CatchBlock\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Catch*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)\n  id: ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ClearDebugInfo(SymbolDocumentInfo)\n  nameWithType: Expression.ClearDebugInfo(SymbolDocumentInfo)\n  fullName: System.Linq.Expressions.Expression.ClearDebugInfo(SymbolDocumentInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.DebugInfoExpression ClearDebugInfo (System.Linq.Expressions.SymbolDocumentInfo document);\n    parameters:\n    - id: document\n      type: System.Linq.Expressions.SymbolDocumentInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.DebugInfoExpression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Coalesce(Expression,Expression)\n  nameWithType: Expression.Coalesce(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Coalesce(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Coalesce (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Coalesce*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)\n  id: Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Coalesce(Expression,Expression,LambdaExpression)\n  nameWithType: Expression.Coalesce(Expression,Expression,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.Coalesce(Expression,Expression,LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Coalesce (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Coalesce*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Condition(Expression,Expression,Expression)\n  nameWithType: Expression.Condition(Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Condition(Expression,Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.ConditionalExpression Condition (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse);\n    parameters:\n    - id: test\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: ifTrue\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: ifFalse\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.ConditionalExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Condition*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)\n  id: Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Condition(Expression,Expression,Expression,Type)\n  nameWithType: Expression.Condition(Expression,Expression,Expression,Type)\n  fullName: System.Linq.Expressions.Expression.Condition(Expression,Expression,Expression,Type)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.ConditionalExpression Condition (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse, Type type);\n    parameters:\n    - id: test\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: ifTrue\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: ifFalse\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.ConditionalExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Condition*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Constant(System.Object)\n  id: Constant(System.Object)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Constant(Object)\n  nameWithType: Expression.Constant(Object)\n  fullName: System.Linq.Expressions.Expression.Constant(Object)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.ConstantExpression Constant (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.ConstantExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Constant*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Constant(System.Object,System.Type)\n  id: Constant(System.Object,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Constant(Object,Type)\n  nameWithType: Expression.Constant(Object,Type)\n  fullName: System.Linq.Expressions.Expression.Constant(Object,Type)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.ConstantExpression Constant (object value, Type type);\n    parameters:\n    - id: value\n      type: System.Object\n      description: Parameter description to be filled\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.ConstantExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Constant*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)\n  id: Continue(System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Continue(LabelTarget)\n  nameWithType: Expression.Continue(LabelTarget)\n  fullName: System.Linq.Expressions.Expression.Continue(LabelTarget)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.GotoExpression Continue (System.Linq.Expressions.LabelTarget target);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Continue*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)\n  id: Continue(System.Linq.Expressions.LabelTarget,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Continue(LabelTarget,Type)\n  nameWithType: Expression.Continue(LabelTarget,Type)\n  fullName: System.Linq.Expressions.Expression.Continue(LabelTarget,Type)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.GotoExpression Continue (System.Linq.Expressions.LabelTarget target, Type type);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: Parameter description to be filled\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Continue*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)\n  id: Convert(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Convert(Expression,Type)\n  nameWithType: Expression.Convert(Expression,Type)\n  fullName: System.Linq.Expressions.Expression.Convert(Expression,Type)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Convert (System.Linq.Expressions.Expression expression, Type type);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Convert*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  id: Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Convert(Expression,Type,MethodInfo)\n  nameWithType: Expression.Convert(Expression,Type,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Convert(Expression,Type,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Convert (System.Linq.Expressions.Expression expression, Type type, System.Reflection.MethodInfo method);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Convert*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)\n  id: ConvertChecked(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ConvertChecked(Expression,Type)\n  nameWithType: Expression.ConvertChecked(Expression,Type)\n  fullName: System.Linq.Expressions.Expression.ConvertChecked(Expression,Type)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression ConvertChecked (System.Linq.Expressions.Expression expression, Type type);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.ConvertChecked*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  id: ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ConvertChecked(Expression,Type,MethodInfo)\n  nameWithType: Expression.ConvertChecked(Expression,Type,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.ConvertChecked(Expression,Type,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression ConvertChecked (System.Linq.Expressions.Expression expression, Type type, System.Reflection.MethodInfo method);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.ConvertChecked*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)\n  id: DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: DebugInfo(SymbolDocumentInfo,Int32,Int32,Int32,Int32)\n  nameWithType: Expression.DebugInfo(SymbolDocumentInfo,Int32,Int32,Int32,Int32)\n  fullName: System.Linq.Expressions.Expression.DebugInfo(SymbolDocumentInfo,Int32,Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.DebugInfoExpression DebugInfo (System.Linq.Expressions.SymbolDocumentInfo document, int startLine, int startColumn, int endLine, int endColumn);\n    parameters:\n    - id: document\n      type: System.Linq.Expressions.SymbolDocumentInfo\n      description: Parameter description to be filled\n    - id: startLine\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: startColumn\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: endLine\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: endColumn\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.DebugInfoExpression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)\n  id: Decrement(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Decrement(Expression)\n  nameWithType: Expression.Decrement(Expression)\n  fullName: System.Linq.Expressions.Expression.Decrement(Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Decrement (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Decrement*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Decrement(Expression,MethodInfo)\n  nameWithType: Expression.Decrement(Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Decrement(Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Decrement (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Decrement*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Default(System.Type)\n  id: Default(System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Default(Type)\n  nameWithType: Expression.Default(Type)\n  fullName: System.Linq.Expressions.Expression.Default(Type)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.DefaultExpression Default (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.DefaultExpression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Divide(Expression,Expression)\n  nameWithType: Expression.Divide(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Divide(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Divide (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Divide*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Divide(Expression,Expression,MethodInfo)\n  nameWithType: Expression.Divide(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Divide(Expression,Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Divide (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Divide*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: DivideAssign(Expression,Expression)\n  nameWithType: Expression.DivideAssign(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.DivideAssign(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.DivideAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: DivideAssign(Expression,Expression,MethodInfo)\n  nameWithType: Expression.DivideAssign(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.DivideAssign(Expression,Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.DivideAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: DivideAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  nameWithType: Expression.DivideAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.DivideAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.DivideAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Dynamic(CallSiteBinder,Type,IEnumerable<Expression>)\n  nameWithType: Expression.Dynamic(CallSiteBinder,Type,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.Dynamic(CallSiteBinder,Type,IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);\n    parameters:\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: Parameter description to be filled\n    - id: returnType\n      type: System.Type\n      description: Parameter description to be filled\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Dynamic*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)\n  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Dynamic(CallSiteBinder,Type,Expression)\n  nameWithType: Expression.Dynamic(CallSiteBinder,Type,Expression)\n  fullName: System.Linq.Expressions.Expression.Dynamic(CallSiteBinder,Type,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0);\n    parameters:\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: Parameter description to be filled\n    - id: returnType\n      type: System.Type\n      description: Parameter description to be filled\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Dynamic*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])\n  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Dynamic(CallSiteBinder,Type,Expression[])\n  nameWithType: Expression.Dynamic(CallSiteBinder,Type,Expression[])\n  fullName: System.Linq.Expressions.Expression.Dynamic(CallSiteBinder,Type,Expression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression[] arguments);\n    parameters:\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: Parameter description to be filled\n    - id: returnType\n      type: System.Type\n      description: Parameter description to be filled\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Dynamic*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Dynamic(CallSiteBinder,Type,Expression,Expression)\n  nameWithType: Expression.Dynamic(CallSiteBinder,Type,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Dynamic(CallSiteBinder,Type,Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);\n    parameters:\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: Parameter description to be filled\n    - id: returnType\n      type: System.Type\n      description: Parameter description to be filled\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Dynamic*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Dynamic(CallSiteBinder,Type,Expression,Expression,Expression)\n  nameWithType: Expression.Dynamic(CallSiteBinder,Type,Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Dynamic(CallSiteBinder,Type,Expression,Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);\n    parameters:\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: Parameter description to be filled\n    - id: returnType\n      type: System.Type\n      description: Parameter description to be filled\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Dynamic*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Dynamic(CallSiteBinder,Type,Expression,Expression,Expression,Expression)\n  nameWithType: Expression.Dynamic(CallSiteBinder,Type,Expression,Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Dynamic(CallSiteBinder,Type,Expression,Expression,Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);\n    parameters:\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: Parameter description to be filled\n    - id: returnType\n      type: System.Type\n      description: Parameter description to be filled\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg3\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Dynamic*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ElementInit(MethodInfo,IEnumerable<Expression>)\n  nameWithType: Expression.ElementInit(MethodInfo,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.ElementInit(MethodInfo,IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.ElementInit ElementInit (System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);\n    parameters:\n    - id: addMethod\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.ElementInit\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.ElementInit*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  id: ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ElementInit(MethodInfo,Expression[])\n  nameWithType: Expression.ElementInit(MethodInfo,Expression[])\n  fullName: System.Linq.Expressions.Expression.ElementInit(MethodInfo,Expression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.ElementInit ElementInit (System.Reflection.MethodInfo addMethod, System.Linq.Expressions.Expression[] arguments);\n    parameters:\n    - id: addMethod\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.ElementInit\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.ElementInit*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Empty\n  id: Empty\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Empty()\n  nameWithType: Expression.Empty()\n  fullName: System.Linq.Expressions.Expression.Empty()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.DefaultExpression Empty ();\n    parameters: []\n    return:\n      type: System.Linq.Expressions.DefaultExpression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Equal(Expression,Expression)\n  nameWithType: Expression.Equal(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Equal(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Equal (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Equal*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  id: Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Equal(Expression,Expression,Boolean,MethodInfo)\n  nameWithType: Expression.Equal(Expression,Expression,Boolean,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Equal(Expression,Expression,Boolean,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Equal (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: liftToNull\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Equal*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ExclusiveOr(Expression,Expression)\n  nameWithType: Expression.ExclusiveOr(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.ExclusiveOr(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression ExclusiveOr (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.ExclusiveOr*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ExclusiveOr(Expression,Expression,MethodInfo)\n  nameWithType: Expression.ExclusiveOr(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.ExclusiveOr(Expression,Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression ExclusiveOr (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.ExclusiveOr*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ExclusiveOrAssign(Expression,Expression)\n  nameWithType: Expression.ExclusiveOrAssign(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.ExclusiveOrAssign(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.ExclusiveOrAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ExclusiveOrAssign(Expression,Expression,MethodInfo)\n  nameWithType: Expression.ExclusiveOrAssign(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.ExclusiveOrAssign(Expression,Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.ExclusiveOrAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ExclusiveOrAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  nameWithType: Expression.ExclusiveOrAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.ExclusiveOrAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.ExclusiveOrAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)\n  id: Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Field(Expression,FieldInfo)\n  nameWithType: Expression.Field(Expression,FieldInfo)\n  fullName: System.Linq.Expressions.Expression.Field(Expression,FieldInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, System.Reflection.FieldInfo field);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: field\n      type: System.Reflection.FieldInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MemberExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Field*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)\n  id: Field(System.Linq.Expressions.Expression,System.String)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Field(Expression,String)\n  nameWithType: Expression.Field(Expression,String)\n  fullName: System.Linq.Expressions.Expression.Field(Expression,String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, string fieldName);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: fieldName\n      type: System.String\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MemberExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Field*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)\n  id: Field(System.Linq.Expressions.Expression,System.Type,System.String)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Field(Expression,Type,String)\n  nameWithType: Expression.Field(Expression,Type,String)\n  fullName: System.Linq.Expressions.Expression.Field(Expression,Type,String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, Type type, string fieldName);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    - id: fieldName\n      type: System.String\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MemberExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Field*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.GetActionType(System.Type[])\n  id: GetActionType(System.Type[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: GetActionType(Type[])\n  nameWithType: Expression.GetActionType(Type[])\n  fullName: System.Linq.Expressions.Expression.GetActionType(Type[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static Type GetActionType (Type[] typeArgs);\n    parameters:\n    - id: typeArgs\n      type: System.Type[]\n      description: Parameter description to be filled\n    return:\n      type: System.Type\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.GetDelegateType(System.Type[])\n  id: GetDelegateType(System.Type[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: GetDelegateType(Type[])\n  nameWithType: Expression.GetDelegateType(Type[])\n  fullName: System.Linq.Expressions.Expression.GetDelegateType(Type[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static Type GetDelegateType (Type[] typeArgs);\n    parameters:\n    - id: typeArgs\n      type: System.Type[]\n      description: Parameter description to be filled\n    return:\n      type: System.Type\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.GetFuncType(System.Type[])\n  id: GetFuncType(System.Type[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: GetFuncType(Type[])\n  nameWithType: Expression.GetFuncType(Type[])\n  fullName: System.Linq.Expressions.Expression.GetFuncType(Type[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static Type GetFuncType (Type[] typeArgs);\n    parameters:\n    - id: typeArgs\n      type: System.Type[]\n      description: Parameter description to be filled\n    return:\n      type: System.Type\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)\n  id: Goto(System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Goto(LabelTarget)\n  nameWithType: Expression.Goto(LabelTarget)\n  fullName: System.Linq.Expressions.Expression.Goto(LabelTarget)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Goto*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  id: Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Goto(LabelTarget,Expression)\n  nameWithType: Expression.Goto(LabelTarget,Expression)\n  fullName: System.Linq.Expressions.Expression.Goto(LabelTarget,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: Parameter description to be filled\n    - id: value\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Goto*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)\n  id: Goto(System.Linq.Expressions.LabelTarget,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Goto(LabelTarget,Type)\n  nameWithType: Expression.Goto(LabelTarget,Type)\n  fullName: System.Linq.Expressions.Expression.Goto(LabelTarget,Type)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, Type type);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: Parameter description to be filled\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Goto*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  id: Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Goto(LabelTarget,Expression,Type)\n  nameWithType: Expression.Goto(LabelTarget,Expression,Type)\n  fullName: System.Linq.Expressions.Expression.Goto(LabelTarget,Expression,Type)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: Parameter description to be filled\n    - id: value\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Goto*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: GreaterThan(Expression,Expression)\n  nameWithType: Expression.GreaterThan(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.GreaterThan(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression GreaterThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.GreaterThan*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  id: GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: GreaterThan(Expression,Expression,Boolean,MethodInfo)\n  nameWithType: Expression.GreaterThan(Expression,Expression,Boolean,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.GreaterThan(Expression,Expression,Boolean,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression GreaterThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: liftToNull\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.GreaterThan*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: GreaterThanOrEqual(Expression,Expression)\n  nameWithType: Expression.GreaterThanOrEqual(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.GreaterThanOrEqual(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.GreaterThanOrEqual*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  id: GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: GreaterThanOrEqual(Expression,Expression,Boolean,MethodInfo)\n  nameWithType: Expression.GreaterThanOrEqual(Expression,Expression,Boolean,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.GreaterThanOrEqual(Expression,Expression,Boolean,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: liftToNull\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.GreaterThanOrEqual*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: IfThen(Expression,Expression)\n  nameWithType: Expression.IfThen(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.IfThen(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.ConditionalExpression IfThen (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue);\n    parameters:\n    - id: test\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: ifTrue\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.ConditionalExpression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: IfThenElse(Expression,Expression,Expression)\n  nameWithType: Expression.IfThenElse(Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.IfThenElse(Expression,Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.ConditionalExpression IfThenElse (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse);\n    parameters:\n    - id: test\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: ifTrue\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: ifFalse\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.ConditionalExpression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)\n  id: Increment(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Increment(Expression)\n  nameWithType: Expression.Increment(Expression)\n  fullName: System.Linq.Expressions.Expression.Increment(Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Increment (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Increment*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Increment(Expression,MethodInfo)\n  nameWithType: Expression.Increment(Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Increment(Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Increment (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Increment*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Invoke(Expression,IEnumerable<Expression>)\n  nameWithType: Expression.Invoke(Expression,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.Invoke(Expression,IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.InvocationExpression Invoke (System.Linq.Expressions.Expression expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.InvocationExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Invoke*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  id: Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Invoke(Expression,Expression[])\n  nameWithType: Expression.Invoke(Expression,Expression[])\n  fullName: System.Linq.Expressions.Expression.Invoke(Expression,Expression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.InvocationExpression Invoke (System.Linq.Expressions.Expression expression, System.Linq.Expressions.Expression[] arguments);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.InvocationExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Invoke*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)\n  id: IsFalse(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: IsFalse(Expression)\n  nameWithType: Expression.IsFalse(Expression)\n  fullName: System.Linq.Expressions.Expression.IsFalse(Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression IsFalse (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.IsFalse*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: IsFalse(Expression,MethodInfo)\n  nameWithType: Expression.IsFalse(Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.IsFalse(Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression IsFalse (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.IsFalse*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)\n  id: IsTrue(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: IsTrue(Expression)\n  nameWithType: Expression.IsTrue(Expression)\n  fullName: System.Linq.Expressions.Expression.IsTrue(Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression IsTrue (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.IsTrue*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: IsTrue(Expression,MethodInfo)\n  nameWithType: Expression.IsTrue(Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.IsTrue(Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression IsTrue (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.IsTrue*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Label\n  id: Label\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Label()\n  nameWithType: Expression.Label()\n  fullName: System.Linq.Expressions.Expression.Label()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.LabelTarget Label ();\n    parameters: []\n    return:\n      type: System.Linq.Expressions.LabelTarget\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Label*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)\n  id: Label(System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Label(LabelTarget)\n  nameWithType: Expression.Label(LabelTarget)\n  fullName: System.Linq.Expressions.Expression.Label(LabelTarget)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.LabelExpression Label (System.Linq.Expressions.LabelTarget target);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.LabelExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Label*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Label(System.String)\n  id: Label(System.String)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Label(String)\n  nameWithType: Expression.Label(String)\n  fullName: System.Linq.Expressions.Expression.Label(String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.LabelTarget Label (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.LabelTarget\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Label*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Label(System.Type)\n  id: Label(System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Label(Type)\n  nameWithType: Expression.Label(Type)\n  fullName: System.Linq.Expressions.Expression.Label(Type)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.LabelTarget Label (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.LabelTarget\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Label*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  id: Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Label(LabelTarget,Expression)\n  nameWithType: Expression.Label(LabelTarget,Expression)\n  fullName: System.Linq.Expressions.Expression.Label(LabelTarget,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.LabelExpression Label (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression defaultValue);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: Parameter description to be filled\n    - id: defaultValue\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.LabelExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Label*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Label(System.Type,System.String)\n  id: Label(System.Type,System.String)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Label(Type,String)\n  nameWithType: Expression.Label(Type,String)\n  fullName: System.Linq.Expressions.Expression.Label(Type,String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.LabelTarget Label (Type type, string name);\n    parameters:\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.LabelTarget\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Label*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda(Expression,IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Expression,IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(Expression,IEnumerable<ParameterExpression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Lambda*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  id: Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda(Expression,ParameterExpression[])\n  nameWithType: Expression.Lambda(Expression,ParameterExpression[])\n  fullName: System.Linq.Expressions.Expression.Lambda(Expression,ParameterExpression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, System.Linq.Expressions.ParameterExpression[] parameters);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: parameters\n      type: System.Linq.Expressions.ParameterExpression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Lambda*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda(Expression,Boolean,IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Expression,Boolean,IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(Expression,Boolean,IEnumerable<ParameterExpression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: tailCall\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Lambda*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  id: Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda(Expression,Boolean,ParameterExpression[])\n  nameWithType: Expression.Lambda(Expression,Boolean,ParameterExpression[])\n  fullName: System.Linq.Expressions.Expression.Lambda(Expression,Boolean,ParameterExpression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, bool tailCall, System.Linq.Expressions.ParameterExpression[] parameters);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: tailCall\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: parameters\n      type: System.Linq.Expressions.ParameterExpression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Lambda*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda(Expression,String,IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Expression,String,IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(Expression,String,IEnumerable<ParameterExpression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Lambda*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda(Type,Expression,IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Type,Expression,IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(Type,Expression,IEnumerable<ParameterExpression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: Parameter description to be filled\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Lambda*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda(Type,Expression,ParameterExpression[])\n  nameWithType: Expression.Lambda(Type,Expression,ParameterExpression[])\n  fullName: System.Linq.Expressions.Expression.Lambda(Type,Expression,ParameterExpression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, System.Linq.Expressions.ParameterExpression[] parameters);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: Parameter description to be filled\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: parameters\n      type: System.Linq.Expressions.ParameterExpression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Lambda*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda(Expression,String,Boolean,IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Expression,String,Boolean,IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(Expression,String,Boolean,IEnumerable<ParameterExpression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n    - id: tailCall\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Lambda*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda(Type,Expression,Boolean,IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Type,Expression,Boolean,IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(Type,Expression,Boolean,IEnumerable<ParameterExpression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: Parameter description to be filled\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: tailCall\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Lambda*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda(Type,Expression,Boolean,ParameterExpression[])\n  nameWithType: Expression.Lambda(Type,Expression,Boolean,ParameterExpression[])\n  fullName: System.Linq.Expressions.Expression.Lambda(Type,Expression,Boolean,ParameterExpression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, System.Linq.Expressions.ParameterExpression[] parameters);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: Parameter description to be filled\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: tailCall\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: parameters\n      type: System.Linq.Expressions.ParameterExpression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Lambda*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda(Type,Expression,String,IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Type,Expression,String,IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(Type,Expression,String,IEnumerable<ParameterExpression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: Parameter description to be filled\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Lambda*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda(Type,Expression,String,Boolean,IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Type,Expression,String,Boolean,IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(Type,Expression,String,Boolean,IEnumerable<ParameterExpression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: Parameter description to be filled\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n    - id: tailCall\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.LambdaExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Lambda*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda(Expression,IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Expression,IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(Expression,IEnumerable<ParameterExpression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate> (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.Expression`1\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Lambda<TDelegate>*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  id: Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda(Expression,ParameterExpression[])\n  nameWithType: Expression.Lambda(Expression,ParameterExpression[])\n  fullName: System.Linq.Expressions.Expression.Lambda(Expression,ParameterExpression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate> (System.Linq.Expressions.Expression body, System.Linq.Expressions.ParameterExpression[] parameters);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: parameters\n      type: System.Linq.Expressions.ParameterExpression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.Expression`1\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Lambda<TDelegate>*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda(Expression,Boolean,IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Expression,Boolean,IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(Expression,Boolean,IEnumerable<ParameterExpression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate> (System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: tailCall\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.Expression`1\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Lambda<TDelegate>*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  id: Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda(Expression,Boolean,ParameterExpression[])\n  nameWithType: Expression.Lambda(Expression,Boolean,ParameterExpression[])\n  fullName: System.Linq.Expressions.Expression.Lambda(Expression,Boolean,ParameterExpression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate> (System.Linq.Expressions.Expression body, bool tailCall, System.Linq.Expressions.ParameterExpression[] parameters);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: tailCall\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: parameters\n      type: System.Linq.Expressions.ParameterExpression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.Expression`1\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Lambda<TDelegate>*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda(Expression,String,IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Expression,String,IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(Expression,String,IEnumerable<ParameterExpression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate> (System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.Expression`1\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Lambda<TDelegate>*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Lambda(Expression,String,Boolean,IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Expression,String,Boolean,IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(Expression,String,Boolean,IEnumerable<ParameterExpression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate> (System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n    - id: tailCall\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: parameters\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.Expression`1\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Lambda<TDelegate>*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: LeftShift(Expression,Expression)\n  nameWithType: Expression.LeftShift(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.LeftShift(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression LeftShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.LeftShift*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: LeftShift(Expression,Expression,MethodInfo)\n  nameWithType: Expression.LeftShift(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.LeftShift(Expression,Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression LeftShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.LeftShift*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: LeftShiftAssign(Expression,Expression)\n  nameWithType: Expression.LeftShiftAssign(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.LeftShiftAssign(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.LeftShiftAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: LeftShiftAssign(Expression,Expression,MethodInfo)\n  nameWithType: Expression.LeftShiftAssign(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.LeftShiftAssign(Expression,Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.LeftShiftAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: LeftShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  nameWithType: Expression.LeftShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.LeftShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.LeftShiftAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: LessThan(Expression,Expression)\n  nameWithType: Expression.LessThan(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.LessThan(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression LessThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.LessThan*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  id: LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: LessThan(Expression,Expression,Boolean,MethodInfo)\n  nameWithType: Expression.LessThan(Expression,Expression,Boolean,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.LessThan(Expression,Expression,Boolean,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression LessThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: liftToNull\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.LessThan*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: LessThanOrEqual(Expression,Expression)\n  nameWithType: Expression.LessThanOrEqual(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.LessThanOrEqual(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression LessThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.LessThanOrEqual*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  id: LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: LessThanOrEqual(Expression,Expression,Boolean,MethodInfo)\n  nameWithType: Expression.LessThanOrEqual(Expression,Expression,Boolean,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.LessThanOrEqual(Expression,Expression,Boolean,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression LessThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: liftToNull\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.LessThanOrEqual*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  id: ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ListBind(MemberInfo,IEnumerable<ElementInit>)\n  nameWithType: Expression.ListBind(MemberInfo,IEnumerable<ElementInit>)\n  fullName: System.Linq.Expressions.Expression.ListBind(MemberInfo,IEnumerable<ElementInit>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit> initializers);\n    parameters:\n    - id: member\n      type: System.Reflection.MemberInfo\n      description: Parameter description to be filled\n    - id: initializers\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MemberListBinding\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.ListBind*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])\n  id: ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ListBind(MemberInfo,ElementInit[])\n  nameWithType: Expression.ListBind(MemberInfo,ElementInit[])\n  fullName: System.Linq.Expressions.Expression.ListBind(MemberInfo,ElementInit[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MemberInfo member, System.Linq.Expressions.ElementInit[] initializers);\n    parameters:\n    - id: member\n      type: System.Reflection.MemberInfo\n      description: Parameter description to be filled\n    - id: initializers\n      type: System.Linq.Expressions.ElementInit[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MemberListBinding\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.ListBind*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  id: ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ListBind(MethodInfo,IEnumerable<ElementInit>)\n  nameWithType: Expression.ListBind(MethodInfo,IEnumerable<ElementInit>)\n  fullName: System.Linq.Expressions.Expression.ListBind(MethodInfo,IEnumerable<ElementInit>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit> initializers);\n    parameters:\n    - id: propertyAccessor\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: initializers\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MemberListBinding\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.ListBind*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])\n  id: ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ListBind(MethodInfo,ElementInit[])\n  nameWithType: Expression.ListBind(MethodInfo,ElementInit[])\n  fullName: System.Linq.Expressions.Expression.ListBind(MethodInfo,ElementInit[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MethodInfo propertyAccessor, System.Linq.Expressions.ElementInit[] initializers);\n    parameters:\n    - id: propertyAccessor\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: initializers\n      type: System.Linq.Expressions.ElementInit[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MemberListBinding\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.ListBind*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  id: ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ListInit(NewExpression,IEnumerable<ElementInit>)\n  nameWithType: Expression.ListInit(NewExpression,IEnumerable<ElementInit>)\n  fullName: System.Linq.Expressions.Expression.ListInit(NewExpression,IEnumerable<ElementInit>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit> initializers);\n    parameters:\n    - id: newExpression\n      type: System.Linq.Expressions.NewExpression\n      description: Parameter description to be filled\n    - id: initializers\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.ListInitExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.ListInit*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ListInit(NewExpression,IEnumerable<Expression>)\n  nameWithType: Expression.ListInit(NewExpression,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.ListInit(NewExpression,IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> initializers);\n    parameters:\n    - id: newExpression\n      type: System.Linq.Expressions.NewExpression\n      description: Parameter description to be filled\n    - id: initializers\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.ListInitExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.ListInit*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])\n  id: ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ListInit(NewExpression,ElementInit[])\n  nameWithType: Expression.ListInit(NewExpression,ElementInit[])\n  fullName: System.Linq.Expressions.Expression.ListInit(NewExpression,ElementInit[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Linq.Expressions.ElementInit[] initializers);\n    parameters:\n    - id: newExpression\n      type: System.Linq.Expressions.NewExpression\n      description: Parameter description to be filled\n    - id: initializers\n      type: System.Linq.Expressions.ElementInit[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.ListInitExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.ListInit*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])\n  id: ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ListInit(NewExpression,Expression[])\n  nameWithType: Expression.ListInit(NewExpression,Expression[])\n  fullName: System.Linq.Expressions.Expression.ListInit(NewExpression,Expression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Linq.Expressions.Expression[] initializers);\n    parameters:\n    - id: newExpression\n      type: System.Linq.Expressions.NewExpression\n      description: Parameter description to be filled\n    - id: initializers\n      type: System.Linq.Expressions.Expression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.ListInitExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.ListInit*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ListInit(NewExpression,MethodInfo,IEnumerable<Expression>)\n  nameWithType: Expression.ListInit(NewExpression,MethodInfo,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.ListInit(NewExpression,MethodInfo,IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> initializers);\n    parameters:\n    - id: newExpression\n      type: System.Linq.Expressions.NewExpression\n      description: Parameter description to be filled\n    - id: addMethod\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: initializers\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.ListInitExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.ListInit*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  id: ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ListInit(NewExpression,MethodInfo,Expression[])\n  nameWithType: Expression.ListInit(NewExpression,MethodInfo,Expression[])\n  fullName: System.Linq.Expressions.Expression.ListInit(NewExpression,MethodInfo,Expression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, System.Linq.Expressions.Expression[] initializers);\n    parameters:\n    - id: newExpression\n      type: System.Linq.Expressions.NewExpression\n      description: Parameter description to be filled\n    - id: addMethod\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: initializers\n      type: System.Linq.Expressions.Expression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.ListInitExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.ListInit*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)\n  id: Loop(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Loop(Expression)\n  nameWithType: Expression.Loop(Expression)\n  fullName: System.Linq.Expressions.Expression.Loop(Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.LoopExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Loop*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)\n  id: Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Loop(Expression,LabelTarget)\n  nameWithType: Expression.Loop(Expression,LabelTarget)\n  fullName: System.Linq.Expressions.Expression.Loop(Expression,LabelTarget)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget break);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: break\n      type: System.Linq.Expressions.LabelTarget\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.LoopExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Loop*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)\n  id: Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Loop(Expression,LabelTarget,LabelTarget)\n  nameWithType: Expression.Loop(Expression,LabelTarget,LabelTarget)\n  fullName: System.Linq.Expressions.Expression.Loop(Expression,LabelTarget,LabelTarget)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget break, System.Linq.Expressions.LabelTarget continue);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: break\n      type: System.Linq.Expressions.LabelTarget\n      description: Parameter description to be filled\n    - id: continue\n      type: System.Linq.Expressions.LabelTarget\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.LoopExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Loop*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeBinary(ExpressionType,Expression,Expression)\n  nameWithType: Expression.MakeBinary(ExpressionType,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.MakeBinary(ExpressionType,Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: binaryType\n      type: System.Linq.Expressions.ExpressionType\n      description: Parameter description to be filled\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.MakeBinary*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  id: MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo)\n  nameWithType: Expression.MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);\n    parameters:\n    - id: binaryType\n      type: System.Linq.Expressions.ExpressionType\n      description: Parameter description to be filled\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: liftToNull\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.MakeBinary*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo,LambdaExpression)\n  nameWithType: Expression.MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo,LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: binaryType\n      type: System.Linq.Expressions.ExpressionType\n      description: Parameter description to be filled\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: liftToNull\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.MakeBinary*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeCatchBlock(Type,ParameterExpression,Expression,Expression)\n  nameWithType: Expression.MakeCatchBlock(Type,ParameterExpression,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.MakeCatchBlock(Type,ParameterExpression,Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.CatchBlock MakeCatchBlock (Type type, System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);\n    parameters:\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    - id: variable\n      type: System.Linq.Expressions.ParameterExpression\n      description: Parameter description to be filled\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: filter\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.CatchBlock\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeDynamic(Type,CallSiteBinder,IEnumerable<Expression>)\n  nameWithType: Expression.MakeDynamic(Type,CallSiteBinder,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.MakeDynamic(Type,CallSiteBinder,IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: Parameter description to be filled\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: Parameter description to be filled\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.MakeDynamic*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)\n  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeDynamic(Type,CallSiteBinder,Expression)\n  nameWithType: Expression.MakeDynamic(Type,CallSiteBinder,Expression)\n  fullName: System.Linq.Expressions.Expression.MakeDynamic(Type,CallSiteBinder,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: Parameter description to be filled\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: Parameter description to be filled\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.MakeDynamic*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])\n  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeDynamic(Type,CallSiteBinder,Expression[])\n  nameWithType: Expression.MakeDynamic(Type,CallSiteBinder,Expression[])\n  fullName: System.Linq.Expressions.Expression.MakeDynamic(Type,CallSiteBinder,Expression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression[] arguments);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: Parameter description to be filled\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: Parameter description to be filled\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.MakeDynamic*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeDynamic(Type,CallSiteBinder,Expression,Expression)\n  nameWithType: Expression.MakeDynamic(Type,CallSiteBinder,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.MakeDynamic(Type,CallSiteBinder,Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: Parameter description to be filled\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: Parameter description to be filled\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.MakeDynamic*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression)\n  nameWithType: Expression.MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: Parameter description to be filled\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: Parameter description to be filled\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.MakeDynamic*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression,Expression)\n  nameWithType: Expression.MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: Parameter description to be filled\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: Parameter description to be filled\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: arg3\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.MakeDynamic*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  id: MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeGoto(GotoExpressionKind,LabelTarget,Expression,Type)\n  nameWithType: Expression.MakeGoto(GotoExpressionKind,LabelTarget,Expression,Type)\n  fullName: System.Linq.Expressions.Expression.MakeGoto(GotoExpressionKind,LabelTarget,Expression,Type)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.GotoExpression MakeGoto (System.Linq.Expressions.GotoExpressionKind kind, System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);\n    parameters:\n    - id: kind\n      type: System.Linq.Expressions.GotoExpressionKind\n      description: Parameter description to be filled\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: Parameter description to be filled\n    - id: value\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeIndex(Expression,PropertyInfo,IEnumerable<Expression>)\n  nameWithType: Expression.MakeIndex(Expression,PropertyInfo,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.MakeIndex(Expression,PropertyInfo,IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.IndexExpression MakeIndex (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);\n    parameters:\n    - id: instance\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: indexer\n      type: System.Reflection.PropertyInfo\n      description: Parameter description to be filled\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.IndexExpression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)\n  id: MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeMemberAccess(Expression,MemberInfo)\n  nameWithType: Expression.MakeMemberAccess(Expression,MemberInfo)\n  fullName: System.Linq.Expressions.Expression.MakeMemberAccess(Expression,MemberInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MemberExpression MakeMemberAccess (System.Linq.Expressions.Expression expression, System.Reflection.MemberInfo member);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: member\n      type: System.Reflection.MemberInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MemberExpression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})\n  id: MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeTry(Type,Expression,Expression,Expression,IEnumerable<CatchBlock>)\n  nameWithType: Expression.MakeTry(Type,Expression,Expression,Expression,IEnumerable<CatchBlock>)\n  fullName: System.Linq.Expressions.Expression.MakeTry(Type,Expression,Expression,Expression,IEnumerable<CatchBlock>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.TryExpression MakeTry (Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally, System.Linq.Expressions.Expression fault, System.Collections.Generic.IEnumerable<System.Linq.Expressions.CatchBlock> handlers);\n    parameters:\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: finally\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: fault\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: handlers\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.TryExpression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)\n  id: MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeUnary(ExpressionType,Expression,Type)\n  nameWithType: Expression.MakeUnary(ExpressionType,Expression,Type)\n  fullName: System.Linq.Expressions.Expression.MakeUnary(ExpressionType,Expression,Type)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression MakeUnary (System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, Type type);\n    parameters:\n    - id: unaryType\n      type: System.Linq.Expressions.ExpressionType\n      description: Parameter description to be filled\n    - id: operand\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.MakeUnary*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  id: MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MakeUnary(ExpressionType,Expression,Type,MethodInfo)\n  nameWithType: Expression.MakeUnary(ExpressionType,Expression,Type,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.MakeUnary(ExpressionType,Expression,Type,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression MakeUnary (System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, Type type, System.Reflection.MethodInfo method);\n    parameters:\n    - id: unaryType\n      type: System.Linq.Expressions.ExpressionType\n      description: Parameter description to be filled\n    - id: operand\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.MakeUnary*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  id: MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MemberBind(MemberInfo,IEnumerable<MemberBinding>)\n  nameWithType: Expression.MemberBind(MemberInfo,IEnumerable<MemberBinding>)\n  fullName: System.Linq.Expressions.Expression.MemberBind(MemberInfo,IEnumerable<MemberBinding>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding> bindings);\n    parameters:\n    - id: member\n      type: System.Reflection.MemberInfo\n      description: Parameter description to be filled\n    - id: bindings\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MemberMemberBinding\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.MemberBind*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])\n  id: MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MemberBind(MemberInfo,MemberBinding[])\n  nameWithType: Expression.MemberBind(MemberInfo,MemberBinding[])\n  fullName: System.Linq.Expressions.Expression.MemberBind(MemberInfo,MemberBinding[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MemberInfo member, System.Linq.Expressions.MemberBinding[] bindings);\n    parameters:\n    - id: member\n      type: System.Reflection.MemberInfo\n      description: Parameter description to be filled\n    - id: bindings\n      type: System.Linq.Expressions.MemberBinding[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MemberMemberBinding\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.MemberBind*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  id: MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MemberBind(MethodInfo,IEnumerable<MemberBinding>)\n  nameWithType: Expression.MemberBind(MethodInfo,IEnumerable<MemberBinding>)\n  fullName: System.Linq.Expressions.Expression.MemberBind(MethodInfo,IEnumerable<MemberBinding>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding> bindings);\n    parameters:\n    - id: propertyAccessor\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: bindings\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MemberMemberBinding\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.MemberBind*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])\n  id: MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MemberBind(MethodInfo,MemberBinding[])\n  nameWithType: Expression.MemberBind(MethodInfo,MemberBinding[])\n  fullName: System.Linq.Expressions.Expression.MemberBind(MethodInfo,MemberBinding[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MethodInfo propertyAccessor, System.Linq.Expressions.MemberBinding[] bindings);\n    parameters:\n    - id: propertyAccessor\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: bindings\n      type: System.Linq.Expressions.MemberBinding[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MemberMemberBinding\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.MemberBind*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  id: MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MemberInit(NewExpression,IEnumerable<MemberBinding>)\n  nameWithType: Expression.MemberInit(NewExpression,IEnumerable<MemberBinding>)\n  fullName: System.Linq.Expressions.Expression.MemberInit(NewExpression,IEnumerable<MemberBinding>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MemberInitExpression MemberInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding> bindings);\n    parameters:\n    - id: newExpression\n      type: System.Linq.Expressions.NewExpression\n      description: Parameter description to be filled\n    - id: bindings\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MemberInitExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.MemberInit*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])\n  id: MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MemberInit(NewExpression,MemberBinding[])\n  nameWithType: Expression.MemberInit(NewExpression,MemberBinding[])\n  fullName: System.Linq.Expressions.Expression.MemberInit(NewExpression,MemberBinding[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MemberInitExpression MemberInit (System.Linq.Expressions.NewExpression newExpression, System.Linq.Expressions.MemberBinding[] bindings);\n    parameters:\n    - id: newExpression\n      type: System.Linq.Expressions.NewExpression\n      description: Parameter description to be filled\n    - id: bindings\n      type: System.Linq.Expressions.MemberBinding[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MemberInitExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.MemberInit*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Modulo(Expression,Expression)\n  nameWithType: Expression.Modulo(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Modulo(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Modulo (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Modulo*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Modulo(Expression,Expression,MethodInfo)\n  nameWithType: Expression.Modulo(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Modulo(Expression,Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Modulo (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Modulo*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ModuloAssign(Expression,Expression)\n  nameWithType: Expression.ModuloAssign(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.ModuloAssign(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.ModuloAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ModuloAssign(Expression,Expression,MethodInfo)\n  nameWithType: Expression.ModuloAssign(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.ModuloAssign(Expression,Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.ModuloAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ModuloAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  nameWithType: Expression.ModuloAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.ModuloAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.ModuloAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Multiply(Expression,Expression)\n  nameWithType: Expression.Multiply(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Multiply(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Multiply (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Multiply*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Multiply(Expression,Expression,MethodInfo)\n  nameWithType: Expression.Multiply(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Multiply(Expression,Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Multiply (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Multiply*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MultiplyAssign(Expression,Expression)\n  nameWithType: Expression.MultiplyAssign(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.MultiplyAssign(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.MultiplyAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MultiplyAssign(Expression,Expression,MethodInfo)\n  nameWithType: Expression.MultiplyAssign(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.MultiplyAssign(Expression,Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.MultiplyAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MultiplyAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  nameWithType: Expression.MultiplyAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.MultiplyAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.MultiplyAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MultiplyAssignChecked(Expression,Expression)\n  nameWithType: Expression.MultiplyAssignChecked(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.MultiplyAssignChecked(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.MultiplyAssignChecked*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MultiplyAssignChecked(Expression,Expression,MethodInfo)\n  nameWithType: Expression.MultiplyAssignChecked(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.MultiplyAssignChecked(Expression,Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.MultiplyAssignChecked*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MultiplyAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)\n  nameWithType: Expression.MultiplyAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.MultiplyAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.MultiplyAssignChecked*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MultiplyChecked(Expression,Expression)\n  nameWithType: Expression.MultiplyChecked(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.MultiplyChecked(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression MultiplyChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.MultiplyChecked*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: MultiplyChecked(Expression,Expression,MethodInfo)\n  nameWithType: Expression.MultiplyChecked(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.MultiplyChecked(Expression,Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression MultiplyChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.MultiplyChecked*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)\n  id: Negate(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Negate(Expression)\n  nameWithType: Expression.Negate(Expression)\n  fullName: System.Linq.Expressions.Expression.Negate(Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Negate (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Negate*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Negate(Expression,MethodInfo)\n  nameWithType: Expression.Negate(Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Negate(Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Negate (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Negate*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)\n  id: NegateChecked(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: NegateChecked(Expression)\n  nameWithType: Expression.NegateChecked(Expression)\n  fullName: System.Linq.Expressions.Expression.NegateChecked(Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression NegateChecked (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.NegateChecked*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: NegateChecked(Expression,MethodInfo)\n  nameWithType: Expression.NegateChecked(Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.NegateChecked(Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression NegateChecked (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.NegateChecked*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)\n  id: New(System.Reflection.ConstructorInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: New(ConstructorInfo)\n  nameWithType: Expression.New(ConstructorInfo)\n  fullName: System.Linq.Expressions.Expression.New(ConstructorInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor);\n    parameters:\n    - id: constructor\n      type: System.Reflection.ConstructorInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.NewExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.New*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.New(System.Type)\n  id: New(System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: New(Type)\n  nameWithType: Expression.New(Type)\n  fullName: System.Linq.Expressions.Expression.New(Type)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.NewExpression New (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.NewExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.New*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: New(ConstructorInfo,IEnumerable<Expression>)\n  nameWithType: Expression.New(ConstructorInfo,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.New(ConstructorInfo,IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);\n    parameters:\n    - id: constructor\n      type: System.Reflection.ConstructorInfo\n      description: Parameter description to be filled\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.NewExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.New*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])\n  id: New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: New(ConstructorInfo,Expression[])\n  nameWithType: Expression.New(ConstructorInfo,Expression[])\n  fullName: System.Linq.Expressions.Expression.New(ConstructorInfo,Expression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Linq.Expressions.Expression[] arguments);\n    parameters:\n    - id: constructor\n      type: System.Reflection.ConstructorInfo\n      description: Parameter description to be filled\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.NewExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.New*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})\n  id: New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: New(ConstructorInfo,IEnumerable<Expression>,IEnumerable<MemberInfo>)\n  nameWithType: Expression.New(ConstructorInfo,IEnumerable<Expression>,IEnumerable<MemberInfo>)\n  fullName: System.Linq.Expressions.Expression.New(ConstructorInfo,IEnumerable<Expression>,IEnumerable<MemberInfo>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments, System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo> members);\n    parameters:\n    - id: constructor\n      type: System.Reflection.ConstructorInfo\n      description: Parameter description to be filled\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: Parameter description to be filled\n    - id: members\n      type: System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.NewExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.New*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])\n  id: New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: New(ConstructorInfo,IEnumerable<Expression>,MemberInfo[])\n  nameWithType: Expression.New(ConstructorInfo,IEnumerable<Expression>,MemberInfo[])\n  fullName: System.Linq.Expressions.Expression.New(ConstructorInfo,IEnumerable<Expression>,MemberInfo[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments, System.Reflection.MemberInfo[] members);\n    parameters:\n    - id: constructor\n      type: System.Reflection.ConstructorInfo\n      description: Parameter description to be filled\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: Parameter description to be filled\n    - id: members\n      type: System.Reflection.MemberInfo[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.NewExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.New*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: NewArrayBounds(Type,IEnumerable<Expression>)\n  nameWithType: Expression.NewArrayBounds(Type,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.NewArrayBounds(Type,IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.NewArrayExpression NewArrayBounds (Type type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> bounds);\n    parameters:\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    - id: bounds\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.NewArrayExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.NewArrayBounds*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])\n  id: NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: NewArrayBounds(Type,Expression[])\n  nameWithType: Expression.NewArrayBounds(Type,Expression[])\n  fullName: System.Linq.Expressions.Expression.NewArrayBounds(Type,Expression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.NewArrayExpression NewArrayBounds (Type type, System.Linq.Expressions.Expression[] bounds);\n    parameters:\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    - id: bounds\n      type: System.Linq.Expressions.Expression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.NewArrayExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.NewArrayBounds*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: NewArrayInit(Type,IEnumerable<Expression>)\n  nameWithType: Expression.NewArrayInit(Type,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.NewArrayInit(Type,IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.NewArrayExpression NewArrayInit (Type type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> initializers);\n    parameters:\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    - id: initializers\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.NewArrayExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.NewArrayInit*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])\n  id: NewArrayInit(System.Type,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: NewArrayInit(Type,Expression[])\n  nameWithType: Expression.NewArrayInit(Type,Expression[])\n  fullName: System.Linq.Expressions.Expression.NewArrayInit(Type,Expression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.NewArrayExpression NewArrayInit (Type type, System.Linq.Expressions.Expression[] initializers);\n    parameters:\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    - id: initializers\n      type: System.Linq.Expressions.Expression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.NewArrayExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.NewArrayInit*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.NodeType\n  id: NodeType\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: NodeType\n  nameWithType: Expression.NodeType\n  fullName: System.Linq.Expressions.Expression.NodeType\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public virtual System.Linq.Expressions.ExpressionType NodeType { get; }\n    return:\n      type: System.Linq.Expressions.ExpressionType\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)\n  id: Not(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Not(Expression)\n  nameWithType: Expression.Not(Expression)\n  fullName: System.Linq.Expressions.Expression.Not(Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Not (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Not*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Not(Expression,MethodInfo)\n  nameWithType: Expression.Not(Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Not(Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Not (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Not*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: NotEqual(Expression,Expression)\n  nameWithType: Expression.NotEqual(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.NotEqual(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression NotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.NotEqual*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  id: NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: NotEqual(Expression,Expression,Boolean,MethodInfo)\n  nameWithType: Expression.NotEqual(Expression,Expression,Boolean,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.NotEqual(Expression,Expression,Boolean,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression NotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: liftToNull\n      type: System.Boolean\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.NotEqual*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)\n  id: OnesComplement(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: OnesComplement(Expression)\n  nameWithType: Expression.OnesComplement(Expression)\n  fullName: System.Linq.Expressions.Expression.OnesComplement(Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression OnesComplement (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.OnesComplement*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: OnesComplement(Expression,MethodInfo)\n  nameWithType: Expression.OnesComplement(Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.OnesComplement(Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression OnesComplement (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.OnesComplement*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Or(Expression,Expression)\n  nameWithType: Expression.Or(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Or(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Or (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Or*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Or(Expression,Expression,MethodInfo)\n  nameWithType: Expression.Or(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Or(Expression,Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Or (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Or*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: OrAssign(Expression,Expression)\n  nameWithType: Expression.OrAssign(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.OrAssign(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.OrAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: OrAssign(Expression,Expression,MethodInfo)\n  nameWithType: Expression.OrAssign(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.OrAssign(Expression,Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.OrAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: OrAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  nameWithType: Expression.OrAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.OrAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.OrAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: OrElse(Expression,Expression)\n  nameWithType: Expression.OrElse(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.OrElse(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression OrElse (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.OrElse*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: OrElse(Expression,Expression,MethodInfo)\n  nameWithType: Expression.OrElse(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.OrElse(Expression,Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression OrElse (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.OrElse*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Parameter(System.Type)\n  id: Parameter(System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Parameter(Type)\n  nameWithType: Expression.Parameter(Type)\n  fullName: System.Linq.Expressions.Expression.Parameter(Type)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.ParameterExpression Parameter (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.ParameterExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Parameter*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Parameter(System.Type,System.String)\n  id: Parameter(System.Type,System.String)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Parameter(Type,String)\n  nameWithType: Expression.Parameter(Type,String)\n  fullName: System.Linq.Expressions.Expression.Parameter(Type,String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.ParameterExpression Parameter (Type type, string name);\n    parameters:\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.ParameterExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Parameter*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)\n  id: PostDecrementAssign(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: PostDecrementAssign(Expression)\n  nameWithType: Expression.PostDecrementAssign(Expression)\n  fullName: System.Linq.Expressions.Expression.PostDecrementAssign(Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression PostDecrementAssign (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.PostDecrementAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: PostDecrementAssign(Expression,MethodInfo)\n  nameWithType: Expression.PostDecrementAssign(Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.PostDecrementAssign(Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression PostDecrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.PostDecrementAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)\n  id: PostIncrementAssign(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: PostIncrementAssign(Expression)\n  nameWithType: Expression.PostIncrementAssign(Expression)\n  fullName: System.Linq.Expressions.Expression.PostIncrementAssign(Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression PostIncrementAssign (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.PostIncrementAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: PostIncrementAssign(Expression,MethodInfo)\n  nameWithType: Expression.PostIncrementAssign(Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.PostIncrementAssign(Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression PostIncrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.PostIncrementAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Power(Expression,Expression)\n  nameWithType: Expression.Power(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Power(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Power (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Power*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Power(Expression,Expression,MethodInfo)\n  nameWithType: Expression.Power(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Power(Expression,Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Power (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Power*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: PowerAssign(Expression,Expression)\n  nameWithType: Expression.PowerAssign(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.PowerAssign(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.PowerAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: PowerAssign(Expression,Expression,MethodInfo)\n  nameWithType: Expression.PowerAssign(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.PowerAssign(Expression,Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.PowerAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: PowerAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  nameWithType: Expression.PowerAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.PowerAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.PowerAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)\n  id: PreDecrementAssign(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: PreDecrementAssign(Expression)\n  nameWithType: Expression.PreDecrementAssign(Expression)\n  fullName: System.Linq.Expressions.Expression.PreDecrementAssign(Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression PreDecrementAssign (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.PreDecrementAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: PreDecrementAssign(Expression,MethodInfo)\n  nameWithType: Expression.PreDecrementAssign(Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.PreDecrementAssign(Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression PreDecrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.PreDecrementAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)\n  id: PreIncrementAssign(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: PreIncrementAssign(Expression)\n  nameWithType: Expression.PreIncrementAssign(Expression)\n  fullName: System.Linq.Expressions.Expression.PreIncrementAssign(Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression PreIncrementAssign (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.PreIncrementAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: PreIncrementAssign(Expression,MethodInfo)\n  nameWithType: Expression.PreIncrementAssign(Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.PreIncrementAssign(Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression PreIncrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.PreIncrementAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Property(Expression,MethodInfo)\n  nameWithType: Expression.Property(Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Property(Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo propertyAccessor);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: propertyAccessor\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MemberExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Property*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)\n  id: Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Property(Expression,PropertyInfo)\n  nameWithType: Expression.Property(Expression,PropertyInfo)\n  fullName: System.Linq.Expressions.Expression.Property(Expression,PropertyInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, System.Reflection.PropertyInfo property);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: property\n      type: System.Reflection.PropertyInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MemberExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Property*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)\n  id: Property(System.Linq.Expressions.Expression,System.String)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Property(Expression,String)\n  nameWithType: Expression.Property(Expression,String)\n  fullName: System.Linq.Expressions.Expression.Property(Expression,String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, string propertyName);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: propertyName\n      type: System.String\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MemberExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Property*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Property(Expression,PropertyInfo,IEnumerable<Expression>)\n  nameWithType: Expression.Property(Expression,PropertyInfo,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.Property(Expression,PropertyInfo,IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);\n    parameters:\n    - id: instance\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: indexer\n      type: System.Reflection.PropertyInfo\n      description: Parameter description to be filled\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.IndexExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Property*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])\n  id: Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Property(Expression,PropertyInfo,Expression[])\n  nameWithType: Expression.Property(Expression,PropertyInfo,Expression[])\n  fullName: System.Linq.Expressions.Expression.Property(Expression,PropertyInfo,Expression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Linq.Expressions.Expression[] arguments);\n    parameters:\n    - id: instance\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: indexer\n      type: System.Reflection.PropertyInfo\n      description: Parameter description to be filled\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.IndexExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Property*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])\n  id: Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Property(Expression,String,Expression[])\n  nameWithType: Expression.Property(Expression,String,Expression[])\n  fullName: System.Linq.Expressions.Expression.Property(Expression,String,Expression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, string propertyName, System.Linq.Expressions.Expression[] arguments);\n    parameters:\n    - id: instance\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: propertyName\n      type: System.String\n      description: Parameter description to be filled\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.IndexExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Property*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)\n  id: Property(System.Linq.Expressions.Expression,System.Type,System.String)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Property(Expression,Type,String)\n  nameWithType: Expression.Property(Expression,Type,String)\n  fullName: System.Linq.Expressions.Expression.Property(Expression,Type,String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, Type type, string propertyName);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    - id: propertyName\n      type: System.String\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MemberExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Property*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)\n  id: PropertyOrField(System.Linq.Expressions.Expression,System.String)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: PropertyOrField(Expression,String)\n  nameWithType: Expression.PropertyOrField(Expression,String)\n  fullName: System.Linq.Expressions.Expression.PropertyOrField(Expression,String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.MemberExpression PropertyOrField (System.Linq.Expressions.Expression expression, string propertyOrFieldName);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: propertyOrFieldName\n      type: System.String\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.MemberExpression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)\n  id: Quote(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Quote(Expression)\n  nameWithType: Expression.Quote(Expression)\n  fullName: System.Linq.Expressions.Expression.Quote(Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Quote (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Reduce\n  id: Reduce\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Reduce()\n  nameWithType: Expression.Reduce()\n  fullName: System.Linq.Expressions.Expression.Reduce()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public virtual System.Linq.Expressions.Expression Reduce ();\n    parameters: []\n    return:\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ReduceAndCheck\n  id: ReduceAndCheck\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ReduceAndCheck()\n  nameWithType: Expression.ReduceAndCheck()\n  fullName: System.Linq.Expressions.Expression.ReduceAndCheck()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public System.Linq.Expressions.Expression ReduceAndCheck ();\n    parameters: []\n    return:\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ReduceExtensions\n  id: ReduceExtensions\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ReduceExtensions()\n  nameWithType: Expression.ReduceExtensions()\n  fullName: System.Linq.Expressions.Expression.ReduceExtensions()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public System.Linq.Expressions.Expression ReduceExtensions ();\n    parameters: []\n    return:\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ReferenceEqual(Expression,Expression)\n  nameWithType: Expression.ReferenceEqual(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.ReferenceEqual(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression ReferenceEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ReferenceNotEqual(Expression,Expression)\n  nameWithType: Expression.ReferenceNotEqual(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.ReferenceNotEqual(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression ReferenceNotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Rethrow\n  id: Rethrow\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Rethrow()\n  nameWithType: Expression.Rethrow()\n  fullName: System.Linq.Expressions.Expression.Rethrow()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Rethrow ();\n    parameters: []\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Rethrow*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Rethrow(System.Type)\n  id: Rethrow(System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Rethrow(Type)\n  nameWithType: Expression.Rethrow(Type)\n  fullName: System.Linq.Expressions.Expression.Rethrow(Type)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Rethrow (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Rethrow*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)\n  id: Return(System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Return(LabelTarget)\n  nameWithType: Expression.Return(LabelTarget)\n  fullName: System.Linq.Expressions.Expression.Return(LabelTarget)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Return*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  id: Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Return(LabelTarget,Expression)\n  nameWithType: Expression.Return(LabelTarget,Expression)\n  fullName: System.Linq.Expressions.Expression.Return(LabelTarget,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: Parameter description to be filled\n    - id: value\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Return*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)\n  id: Return(System.Linq.Expressions.LabelTarget,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Return(LabelTarget,Type)\n  nameWithType: Expression.Return(LabelTarget,Type)\n  fullName: System.Linq.Expressions.Expression.Return(LabelTarget,Type)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, Type type);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: Parameter description to be filled\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Return*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  id: Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Return(LabelTarget,Expression,Type)\n  nameWithType: Expression.Return(LabelTarget,Expression,Type)\n  fullName: System.Linq.Expressions.Expression.Return(LabelTarget,Expression,Type)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);\n    parameters:\n    - id: target\n      type: System.Linq.Expressions.LabelTarget\n      description: Parameter description to be filled\n    - id: value\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.GotoExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Return*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: RightShift(Expression,Expression)\n  nameWithType: Expression.RightShift(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.RightShift(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression RightShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.RightShift*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: RightShift(Expression,Expression,MethodInfo)\n  nameWithType: Expression.RightShift(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.RightShift(Expression,Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression RightShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.RightShift*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: RightShiftAssign(Expression,Expression)\n  nameWithType: Expression.RightShiftAssign(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.RightShiftAssign(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.RightShiftAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: RightShiftAssign(Expression,Expression,MethodInfo)\n  nameWithType: Expression.RightShiftAssign(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.RightShiftAssign(Expression,Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.RightShiftAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: RightShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  nameWithType: Expression.RightShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.RightShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.RightShiftAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  id: RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: RuntimeVariables(IEnumerable<ParameterExpression>)\n  nameWithType: Expression.RuntimeVariables(IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.RuntimeVariables(IEnumerable<ParameterExpression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables (System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables);\n    parameters:\n    - id: variables\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.RuntimeVariablesExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.RuntimeVariables*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])\n  id: RuntimeVariables(System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: RuntimeVariables(ParameterExpression[])\n  nameWithType: Expression.RuntimeVariables(ParameterExpression[])\n  fullName: System.Linq.Expressions.Expression.RuntimeVariables(ParameterExpression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables (System.Linq.Expressions.ParameterExpression[] variables);\n    parameters:\n    - id: variables\n      type: System.Linq.Expressions.ParameterExpression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.RuntimeVariablesExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.RuntimeVariables*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Subtract(Expression,Expression)\n  nameWithType: Expression.Subtract(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Subtract(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Subtract (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Subtract*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Subtract(Expression,Expression,MethodInfo)\n  nameWithType: Expression.Subtract(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Subtract(Expression,Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression Subtract (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Subtract*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: SubtractAssign(Expression,Expression)\n  nameWithType: Expression.SubtractAssign(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.SubtractAssign(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.SubtractAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: SubtractAssign(Expression,Expression,MethodInfo)\n  nameWithType: Expression.SubtractAssign(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.SubtractAssign(Expression,Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.SubtractAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: SubtractAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  nameWithType: Expression.SubtractAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.SubtractAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.SubtractAssign*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: SubtractAssignChecked(Expression,Expression)\n  nameWithType: Expression.SubtractAssignChecked(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.SubtractAssignChecked(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.SubtractAssignChecked*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: SubtractAssignChecked(Expression,Expression,MethodInfo)\n  nameWithType: Expression.SubtractAssignChecked(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.SubtractAssignChecked(Expression,Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.SubtractAssignChecked*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  id: SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: SubtractAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)\n  nameWithType: Expression.SubtractAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.SubtractAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: conversion\n      type: System.Linq.Expressions.LambdaExpression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.SubtractAssignChecked*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: SubtractChecked(Expression,Expression)\n  nameWithType: Expression.SubtractChecked(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.SubtractChecked(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression SubtractChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.SubtractChecked*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: SubtractChecked(Expression,Expression,MethodInfo)\n  nameWithType: Expression.SubtractChecked(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.SubtractChecked(Expression,Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.BinaryExpression SubtractChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);\n    parameters:\n    - id: left\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: right\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.BinaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.SubtractChecked*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Switch(Expression,SwitchCase[])\n  nameWithType: Expression.Switch(Expression,SwitchCase[])\n  fullName: System.Linq.Expressions.Expression.Switch(Expression,SwitchCase[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.SwitchCase[] cases);\n    parameters:\n    - id: switchValue\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: cases\n      type: System.Linq.Expressions.SwitchCase[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.SwitchExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Switch*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Switch(Expression,Expression,SwitchCase[])\n  nameWithType: Expression.Switch(Expression,Expression,SwitchCase[])\n  fullName: System.Linq.Expressions.Expression.Switch(Expression,Expression,SwitchCase[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Linq.Expressions.SwitchCase[] cases);\n    parameters:\n    - id: switchValue\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: defaultBody\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: cases\n      type: System.Linq.Expressions.SwitchCase[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.SwitchExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Switch*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Switch(Expression,Expression,MethodInfo,IEnumerable<SwitchCase>)\n  nameWithType: Expression.Switch(Expression,Expression,MethodInfo,IEnumerable<SwitchCase>)\n  fullName: System.Linq.Expressions.Expression.Switch(Expression,Expression,MethodInfo,IEnumerable<SwitchCase>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase> cases);\n    parameters:\n    - id: switchValue\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: defaultBody\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: comparison\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: cases\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.SwitchExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Switch*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Switch(Expression,Expression,MethodInfo,SwitchCase[])\n  nameWithType: Expression.Switch(Expression,Expression,MethodInfo,SwitchCase[])\n  fullName: System.Linq.Expressions.Expression.Switch(Expression,Expression,MethodInfo,SwitchCase[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Linq.Expressions.SwitchCase[] cases);\n    parameters:\n    - id: switchValue\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: defaultBody\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: comparison\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: cases\n      type: System.Linq.Expressions.SwitchCase[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.SwitchExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Switch*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  id: Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Switch(Type,Expression,Expression,MethodInfo,IEnumerable<SwitchCase>)\n  nameWithType: Expression.Switch(Type,Expression,Expression,MethodInfo,IEnumerable<SwitchCase>)\n  fullName: System.Linq.Expressions.Expression.Switch(Type,Expression,Expression,MethodInfo,IEnumerable<SwitchCase>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.SwitchExpression Switch (Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase> cases);\n    parameters:\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    - id: switchValue\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: defaultBody\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: comparison\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: cases\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.SwitchExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Switch*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  id: Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Switch(Type,Expression,Expression,MethodInfo,SwitchCase[])\n  nameWithType: Expression.Switch(Type,Expression,Expression,MethodInfo,SwitchCase[])\n  fullName: System.Linq.Expressions.Expression.Switch(Type,Expression,Expression,MethodInfo,SwitchCase[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.SwitchExpression Switch (Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Linq.Expressions.SwitchCase[] cases);\n    parameters:\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    - id: switchValue\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: defaultBody\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: comparison\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    - id: cases\n      type: System.Linq.Expressions.SwitchCase[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.SwitchExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Switch*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: SwitchCase(Expression,IEnumerable<Expression>)\n  nameWithType: Expression.SwitchCase(Expression,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.SwitchCase(Expression,IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.SwitchCase SwitchCase (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> testValues);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: testValues\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.SwitchCase\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.SwitchCase*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  id: SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: SwitchCase(Expression,Expression[])\n  nameWithType: Expression.SwitchCase(Expression,Expression[])\n  fullName: System.Linq.Expressions.Expression.SwitchCase(Expression,Expression[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.SwitchCase SwitchCase (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression[] testValues);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: testValues\n      type: System.Linq.Expressions.Expression[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.SwitchCase\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.SwitchCase*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String)\n  id: SymbolDocument(System.String)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: SymbolDocument(String)\n  nameWithType: Expression.SymbolDocument(String)\n  fullName: System.Linq.Expressions.Expression.SymbolDocument(String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.SymbolDocumentInfo\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.SymbolDocument*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)\n  id: SymbolDocument(System.String,System.Guid)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: SymbolDocument(String,Guid)\n  nameWithType: Expression.SymbolDocument(String,Guid)\n  fullName: System.Linq.Expressions.Expression.SymbolDocument(String,Guid)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: Parameter description to be filled\n    - id: language\n      type: System.Guid\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.SymbolDocumentInfo\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.SymbolDocument*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)\n  id: SymbolDocument(System.String,System.Guid,System.Guid)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: SymbolDocument(String,Guid,Guid)\n  nameWithType: Expression.SymbolDocument(String,Guid,Guid)\n  fullName: System.Linq.Expressions.Expression.SymbolDocument(String,Guid,Guid)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language, Guid languageVendor);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: Parameter description to be filled\n    - id: language\n      type: System.Guid\n      description: Parameter description to be filled\n    - id: languageVendor\n      type: System.Guid\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.SymbolDocumentInfo\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.SymbolDocument*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)\n  id: SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: SymbolDocument(String,Guid,Guid,Guid)\n  nameWithType: Expression.SymbolDocument(String,Guid,Guid,Guid)\n  fullName: System.Linq.Expressions.Expression.SymbolDocument(String,Guid,Guid,Guid)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language, Guid languageVendor, Guid documentType);\n    parameters:\n    - id: fileName\n      type: System.String\n      description: Parameter description to be filled\n    - id: language\n      type: System.Guid\n      description: Parameter description to be filled\n    - id: languageVendor\n      type: System.Guid\n      description: Parameter description to be filled\n    - id: documentType\n      type: System.Guid\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.SymbolDocumentInfo\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.SymbolDocument*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)\n  id: Throw(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Throw(Expression)\n  nameWithType: Expression.Throw(Expression)\n  fullName: System.Linq.Expressions.Expression.Throw(Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Throw (System.Linq.Expressions.Expression value);\n    parameters:\n    - id: value\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Throw*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)\n  id: Throw(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Throw(Expression,Type)\n  nameWithType: Expression.Throw(Expression,Type)\n  fullName: System.Linq.Expressions.Expression.Throw(Expression,Type)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Throw (System.Linq.Expressions.Expression value, Type type);\n    parameters:\n    - id: value\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Throw*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.ToString\n  id: ToString\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: Expression.ToString()\n  fullName: System.Linq.Expressions.Expression.ToString()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  id: TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: TryCatch(Expression,CatchBlock[])\n  nameWithType: Expression.TryCatch(Expression,CatchBlock[])\n  fullName: System.Linq.Expressions.Expression.TryCatch(Expression,CatchBlock[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.TryExpression TryCatch (System.Linq.Expressions.Expression body, System.Linq.Expressions.CatchBlock[] handlers);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: handlers\n      type: System.Linq.Expressions.CatchBlock[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.TryExpression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  id: TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: TryCatchFinally(Expression,Expression,CatchBlock[])\n  nameWithType: Expression.TryCatchFinally(Expression,Expression,CatchBlock[])\n  fullName: System.Linq.Expressions.Expression.TryCatchFinally(Expression,Expression,CatchBlock[])\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.TryExpression TryCatchFinally (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally, System.Linq.Expressions.CatchBlock[] handlers);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: finally\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: handlers\n      type: System.Linq.Expressions.CatchBlock[]\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.TryExpression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: TryFault(Expression,Expression)\n  nameWithType: Expression.TryFault(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.TryFault(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.TryExpression TryFault (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression fault);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: fault\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.TryExpression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: TryFinally(Expression,Expression)\n  nameWithType: Expression.TryFinally(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.TryFinally(Expression,Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.TryExpression TryFinally (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally);\n    parameters:\n    - id: body\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: finally\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.TryExpression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)\n  id: TryGetActionType(System.Type[],System.Type@)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: TryGetActionType(Type[],Type)\n  nameWithType: Expression.TryGetActionType(Type[],Type)\n  fullName: System.Linq.Expressions.Expression.TryGetActionType(Type[],Type)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static bool TryGetActionType (Type[] typeArgs, out Type actionType);\n    parameters:\n    - id: typeArgs\n      type: System.Type[]\n      description: Parameter description to be filled\n    - id: actionType\n      type: System.Type\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)\n  id: TryGetFuncType(System.Type[],System.Type@)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: TryGetFuncType(Type[],Type)\n  nameWithType: Expression.TryGetFuncType(Type[],Type)\n  fullName: System.Linq.Expressions.Expression.TryGetFuncType(Type[],Type)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static bool TryGetFuncType (Type[] typeArgs, out Type funcType);\n    parameters:\n    - id: typeArgs\n      type: System.Type[]\n      description: Parameter description to be filled\n    - id: funcType\n      type: System.Type\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Type\n  id: Type\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Type\n  nameWithType: Expression.Type\n  fullName: System.Linq.Expressions.Expression.Type\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public virtual Type Type { get; }\n    return:\n      type: System.Type\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)\n  id: TypeAs(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: TypeAs(Expression,Type)\n  nameWithType: Expression.TypeAs(Expression,Type)\n  fullName: System.Linq.Expressions.Expression.TypeAs(Expression,Type)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression TypeAs (System.Linq.Expressions.Expression expression, Type type);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)\n  id: TypeEqual(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: TypeEqual(Expression,Type)\n  nameWithType: Expression.TypeEqual(Expression,Type)\n  fullName: System.Linq.Expressions.Expression.TypeEqual(Expression,Type)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.TypeBinaryExpression TypeEqual (System.Linq.Expressions.Expression expression, Type type);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.TypeBinaryExpression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)\n  id: TypeIs(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: TypeIs(Expression,Type)\n  nameWithType: Expression.TypeIs(Expression,Type)\n  fullName: System.Linq.Expressions.Expression.TypeIs(Expression,Type)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.TypeBinaryExpression TypeIs (System.Linq.Expressions.Expression expression, Type type);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.TypeBinaryExpression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)\n  id: UnaryPlus(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: UnaryPlus(Expression)\n  nameWithType: Expression.UnaryPlus(Expression)\n  fullName: System.Linq.Expressions.Expression.UnaryPlus(Expression)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression UnaryPlus (System.Linq.Expressions.Expression expression);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.UnaryPlus*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  id: UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: UnaryPlus(Expression,MethodInfo)\n  nameWithType: Expression.UnaryPlus(Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.UnaryPlus(Expression,MethodInfo)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression UnaryPlus (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.UnaryPlus*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)\n  id: Unbox(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Unbox(Expression,Type)\n  nameWithType: Expression.Unbox(Expression,Type)\n  fullName: System.Linq.Expressions.Expression.Unbox(Expression,Type)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.UnaryExpression Unbox (System.Linq.Expressions.Expression expression, Type type);\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.UnaryExpression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Variable(System.Type)\n  id: Variable(System.Type)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Variable(Type)\n  nameWithType: Expression.Variable(Type)\n  fullName: System.Linq.Expressions.Expression.Variable(Type)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.ParameterExpression Variable (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.ParameterExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Variable*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.Variable(System.Type,System.String)\n  id: Variable(System.Type,System.String)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: Variable(Type,String)\n  nameWithType: Expression.Variable(Type,String)\n  fullName: System.Linq.Expressions.Expression.Variable(Type,String)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public static System.Linq.Expressions.ParameterExpression Variable (Type type, string name);\n    parameters:\n    - id: type\n      type: System.Type\n      description: Parameter description to be filled\n    - id: name\n      type: System.String\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.ParameterExpression\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.Expression.Variable*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)\n  id: VisitChildren(System.Linq.Expressions.ExpressionVisitor)\n  parent: System.Linq.Expressions.Expression\n  langs:\n  - csharp\n  name: VisitChildren(ExpressionVisitor)\n  nameWithType: Expression.VisitChildren(ExpressionVisitor)\n  fullName: System.Linq.Expressions.Expression.VisitChildren(ExpressionVisitor)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: protected virtual System.Linq.Expressions.Expression VisitChildren (System.Linq.Expressions.ExpressionVisitor visitor);\n    parameters:\n    - id: visitor\n      type: System.Linq.Expressions.ExpressionVisitor\n      description: Parameter description to be filled\n    return:\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Linq.Expressions.Expression.#ctor\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Expression()\n  nameWithType: Expression.Expression()\n  fullName: System.Linq.Expressions.Expression.Expression()\n- uid: System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Expression(ExpressionType,Type)\n  nameWithType: Expression.Expression(ExpressionType,Type)\n  fullName: System.Linq.Expressions.Expression.Expression(ExpressionType,Type)\n- uid: System.Linq.Expressions.ExpressionType\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ExpressionType\n  nameWithType: ExpressionType\n  fullName: System.Linq.Expressions.ExpressionType\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Accept(ExpressionVisitor)\n  nameWithType: Expression.Accept(ExpressionVisitor)\n  fullName: System.Linq.Expressions.Expression.Accept(ExpressionVisitor)\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.ExpressionVisitor\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ExpressionVisitor\n  nameWithType: ExpressionVisitor\n  fullName: System.Linq.Expressions.ExpressionVisitor\n- uid: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Add(Expression,Expression)\n  nameWithType: Expression.Add(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Add(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Add(Expression,Expression,MethodInfo)\n  nameWithType: Expression.Add(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Add(Expression,Expression,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AddAssign(Expression,Expression)\n  nameWithType: Expression.AddAssign(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.AddAssign(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AddAssign(Expression,Expression,MethodInfo)\n  nameWithType: Expression.AddAssign(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.AddAssign(Expression,Expression,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AddAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  nameWithType: Expression.AddAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.AddAssign(Expression,Expression,MethodInfo,LambdaExpression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.LambdaExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LambdaExpression\n  nameWithType: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AddAssignChecked(Expression,Expression)\n  nameWithType: Expression.AddAssignChecked(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.AddAssignChecked(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AddAssignChecked(Expression,Expression,MethodInfo)\n  nameWithType: Expression.AddAssignChecked(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.AddAssignChecked(Expression,Expression,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AddAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)\n  nameWithType: Expression.AddAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.AddAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.LambdaExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LambdaExpression\n  nameWithType: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n- uid: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AddChecked(Expression,Expression)\n  nameWithType: Expression.AddChecked(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.AddChecked(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AddChecked(Expression,Expression,MethodInfo)\n  nameWithType: Expression.AddChecked(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.AddChecked(Expression,Expression,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: And(Expression,Expression)\n  nameWithType: Expression.And(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.And(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: And(Expression,Expression,MethodInfo)\n  nameWithType: Expression.And(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.And(Expression,Expression,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AndAlso(Expression,Expression)\n  nameWithType: Expression.AndAlso(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.AndAlso(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AndAlso(Expression,Expression,MethodInfo)\n  nameWithType: Expression.AndAlso(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.AndAlso(Expression,Expression,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AndAssign(Expression,Expression)\n  nameWithType: Expression.AndAssign(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.AndAssign(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AndAssign(Expression,Expression,MethodInfo)\n  nameWithType: Expression.AndAssign(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.AndAssign(Expression,Expression,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AndAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  nameWithType: Expression.AndAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.AndAssign(Expression,Expression,MethodInfo,LambdaExpression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.LambdaExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LambdaExpression\n  nameWithType: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n- uid: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ArrayAccess(Expression,IEnumerable<Expression>)\n  nameWithType: Expression.ArrayAccess(Expression,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.ArrayAccess(Expression,IEnumerable<Expression>)\n- uid: System.Linq.Expressions.IndexExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: IndexExpression\n  nameWithType: IndexExpression\n  fullName: System.Linq.Expressions.IndexExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Expression>\n  nameWithType: IEnumerable<Expression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>\n- uid: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ArrayAccess(Expression,Expression[])\n  nameWithType: Expression.ArrayAccess(Expression,Expression[])\n  fullName: System.Linq.Expressions.Expression.ArrayAccess(Expression,Expression[])\n- uid: System.Linq.Expressions.IndexExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: IndexExpression\n  nameWithType: IndexExpression\n  fullName: System.Linq.Expressions.IndexExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression[]\n- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ArrayIndex(Expression,IEnumerable<Expression>)\n  nameWithType: Expression.ArrayIndex(Expression,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.ArrayIndex(Expression,IEnumerable<Expression>)\n- uid: System.Linq.Expressions.MethodCallExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MethodCallExpression\n  nameWithType: MethodCallExpression\n  fullName: System.Linq.Expressions.MethodCallExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Expression>\n  nameWithType: IEnumerable<Expression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>\n- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ArrayIndex(Expression,Expression)\n  nameWithType: Expression.ArrayIndex(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.ArrayIndex(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ArrayIndex(Expression,Expression[])\n  nameWithType: Expression.ArrayIndex(Expression,Expression[])\n  fullName: System.Linq.Expressions.Expression.ArrayIndex(Expression,Expression[])\n- uid: System.Linq.Expressions.MethodCallExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MethodCallExpression\n  nameWithType: MethodCallExpression\n  fullName: System.Linq.Expressions.MethodCallExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression[]\n- uid: System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ArrayLength(Expression)\n  nameWithType: Expression.ArrayLength(Expression)\n  fullName: System.Linq.Expressions.Expression.ArrayLength(Expression)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Assign(Expression,Expression)\n  nameWithType: Expression.Assign(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Assign(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Bind(MemberInfo,Expression)\n  nameWithType: Expression.Bind(MemberInfo,Expression)\n  fullName: System.Linq.Expressions.Expression.Bind(MemberInfo,Expression)\n- uid: System.Linq.Expressions.MemberAssignment\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberAssignment\n  nameWithType: MemberAssignment\n  fullName: System.Linq.Expressions.MemberAssignment\n- uid: System.Reflection.MemberInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MemberInfo\n  nameWithType: MemberInfo\n  fullName: System.Reflection.MemberInfo\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Bind(MethodInfo,Expression)\n  nameWithType: Expression.Bind(MethodInfo,Expression)\n  fullName: System.Linq.Expressions.Expression.Bind(MethodInfo,Expression)\n- uid: System.Linq.Expressions.MemberAssignment\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberAssignment\n  nameWithType: MemberAssignment\n  fullName: System.Linq.Expressions.MemberAssignment\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(IEnumerable<Expression>)\n  nameWithType: Expression.Block(IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.Block(IEnumerable<Expression>)\n- uid: System.Linq.Expressions.BlockExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BlockExpression\n  nameWithType: BlockExpression\n  fullName: System.Linq.Expressions.BlockExpression\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Expression>\n  nameWithType: IEnumerable<Expression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>\n- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(Expression[])\n  nameWithType: Expression.Block(Expression[])\n  fullName: System.Linq.Expressions.Expression.Block(Expression[])\n- uid: System.Linq.Expressions.BlockExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BlockExpression\n  nameWithType: BlockExpression\n  fullName: System.Linq.Expressions.BlockExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression[]\n- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(IEnumerable<ParameterExpression>,IEnumerable<Expression>)\n  nameWithType: Expression.Block(IEnumerable<ParameterExpression>,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.Block(IEnumerable<ParameterExpression>,IEnumerable<Expression>)\n- uid: System.Linq.Expressions.BlockExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BlockExpression\n  nameWithType: BlockExpression\n  fullName: System.Linq.Expressions.BlockExpression\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<ParameterExpression>\n  nameWithType: IEnumerable<ParameterExpression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Expression>\n  nameWithType: IEnumerable<Expression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>\n- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(IEnumerable<ParameterExpression>,Expression[])\n  nameWithType: Expression.Block(IEnumerable<ParameterExpression>,Expression[])\n  fullName: System.Linq.Expressions.Expression.Block(IEnumerable<ParameterExpression>,Expression[])\n- uid: System.Linq.Expressions.BlockExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BlockExpression\n  nameWithType: BlockExpression\n  fullName: System.Linq.Expressions.BlockExpression\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<ParameterExpression>\n  nameWithType: IEnumerable<ParameterExpression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression[]\n- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(Expression,Expression)\n  nameWithType: Expression.Block(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Block(Expression,Expression)\n- uid: System.Linq.Expressions.BlockExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BlockExpression\n  nameWithType: BlockExpression\n  fullName: System.Linq.Expressions.BlockExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(Type,IEnumerable<Expression>)\n  nameWithType: Expression.Block(Type,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.Block(Type,IEnumerable<Expression>)\n- uid: System.Linq.Expressions.BlockExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BlockExpression\n  nameWithType: BlockExpression\n  fullName: System.Linq.Expressions.BlockExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Expression>\n  nameWithType: IEnumerable<Expression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>\n- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(Type,Expression[])\n  nameWithType: Expression.Block(Type,Expression[])\n  fullName: System.Linq.Expressions.Expression.Block(Type,Expression[])\n- uid: System.Linq.Expressions.BlockExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BlockExpression\n  nameWithType: BlockExpression\n  fullName: System.Linq.Expressions.BlockExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression[]\n- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(Expression,Expression,Expression)\n  nameWithType: Expression.Block(Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Block(Expression,Expression,Expression)\n- uid: System.Linq.Expressions.BlockExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BlockExpression\n  nameWithType: BlockExpression\n  fullName: System.Linq.Expressions.BlockExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(Type,IEnumerable<ParameterExpression>,IEnumerable<Expression>)\n  nameWithType: Expression.Block(Type,IEnumerable<ParameterExpression>,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.Block(Type,IEnumerable<ParameterExpression>,IEnumerable<Expression>)\n- uid: System.Linq.Expressions.BlockExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BlockExpression\n  nameWithType: BlockExpression\n  fullName: System.Linq.Expressions.BlockExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<ParameterExpression>\n  nameWithType: IEnumerable<ParameterExpression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Expression>\n  nameWithType: IEnumerable<Expression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>\n- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(Type,IEnumerable<ParameterExpression>,Expression[])\n  nameWithType: Expression.Block(Type,IEnumerable<ParameterExpression>,Expression[])\n  fullName: System.Linq.Expressions.Expression.Block(Type,IEnumerable<ParameterExpression>,Expression[])\n- uid: System.Linq.Expressions.BlockExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BlockExpression\n  nameWithType: BlockExpression\n  fullName: System.Linq.Expressions.BlockExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<ParameterExpression>\n  nameWithType: IEnumerable<ParameterExpression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression[]\n- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(Expression,Expression,Expression,Expression)\n  nameWithType: Expression.Block(Expression,Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Block(Expression,Expression,Expression,Expression)\n- uid: System.Linq.Expressions.BlockExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BlockExpression\n  nameWithType: BlockExpression\n  fullName: System.Linq.Expressions.BlockExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(Expression,Expression,Expression,Expression,Expression)\n  nameWithType: Expression.Block(Expression,Expression,Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Block(Expression,Expression,Expression,Expression,Expression)\n- uid: System.Linq.Expressions.BlockExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BlockExpression\n  nameWithType: BlockExpression\n  fullName: System.Linq.Expressions.BlockExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Break(LabelTarget)\n  nameWithType: Expression.Break(LabelTarget)\n  fullName: System.Linq.Expressions.Expression.Break(LabelTarget)\n- uid: System.Linq.Expressions.GotoExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: GotoExpression\n  nameWithType: GotoExpression\n  fullName: System.Linq.Expressions.GotoExpression\n- uid: System.Linq.Expressions.LabelTarget\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelTarget\n  nameWithType: LabelTarget\n  fullName: System.Linq.Expressions.LabelTarget\n- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Break(LabelTarget,Expression)\n  nameWithType: Expression.Break(LabelTarget,Expression)\n  fullName: System.Linq.Expressions.Expression.Break(LabelTarget,Expression)\n- uid: System.Linq.Expressions.GotoExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: GotoExpression\n  nameWithType: GotoExpression\n  fullName: System.Linq.Expressions.GotoExpression\n- uid: System.Linq.Expressions.LabelTarget\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelTarget\n  nameWithType: LabelTarget\n  fullName: System.Linq.Expressions.LabelTarget\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Break(LabelTarget,Type)\n  nameWithType: Expression.Break(LabelTarget,Type)\n  fullName: System.Linq.Expressions.Expression.Break(LabelTarget,Type)\n- uid: System.Linq.Expressions.GotoExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: GotoExpression\n  nameWithType: GotoExpression\n  fullName: System.Linq.Expressions.GotoExpression\n- uid: System.Linq.Expressions.LabelTarget\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelTarget\n  nameWithType: LabelTarget\n  fullName: System.Linq.Expressions.LabelTarget\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Break(LabelTarget,Expression,Type)\n  nameWithType: Expression.Break(LabelTarget,Expression,Type)\n  fullName: System.Linq.Expressions.Expression.Break(LabelTarget,Expression,Type)\n- uid: System.Linq.Expressions.GotoExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: GotoExpression\n  nameWithType: GotoExpression\n  fullName: System.Linq.Expressions.GotoExpression\n- uid: System.Linq.Expressions.LabelTarget\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelTarget\n  nameWithType: LabelTarget\n  fullName: System.Linq.Expressions.LabelTarget\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(Expression,MethodInfo)\n  nameWithType: Expression.Call(Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Call(Expression,MethodInfo)\n- uid: System.Linq.Expressions.MethodCallExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MethodCallExpression\n  nameWithType: MethodCallExpression\n  fullName: System.Linq.Expressions.MethodCallExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(MethodInfo,IEnumerable<Expression>)\n  nameWithType: Expression.Call(MethodInfo,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.Call(MethodInfo,IEnumerable<Expression>)\n- uid: System.Linq.Expressions.MethodCallExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MethodCallExpression\n  nameWithType: MethodCallExpression\n  fullName: System.Linq.Expressions.MethodCallExpression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Expression>\n  nameWithType: IEnumerable<Expression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(MethodInfo,Expression)\n  nameWithType: Expression.Call(MethodInfo,Expression)\n  fullName: System.Linq.Expressions.Expression.Call(MethodInfo,Expression)\n- uid: System.Linq.Expressions.MethodCallExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MethodCallExpression\n  nameWithType: MethodCallExpression\n  fullName: System.Linq.Expressions.MethodCallExpression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(MethodInfo,Expression[])\n  nameWithType: Expression.Call(MethodInfo,Expression[])\n  fullName: System.Linq.Expressions.Expression.Call(MethodInfo,Expression[])\n- uid: System.Linq.Expressions.MethodCallExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MethodCallExpression\n  nameWithType: MethodCallExpression\n  fullName: System.Linq.Expressions.MethodCallExpression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression[]\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(Expression,MethodInfo,IEnumerable<Expression>)\n  nameWithType: Expression.Call(Expression,MethodInfo,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.Call(Expression,MethodInfo,IEnumerable<Expression>)\n- uid: System.Linq.Expressions.MethodCallExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MethodCallExpression\n  nameWithType: MethodCallExpression\n  fullName: System.Linq.Expressions.MethodCallExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Expression>\n  nameWithType: IEnumerable<Expression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(Expression,MethodInfo,Expression[])\n  nameWithType: Expression.Call(Expression,MethodInfo,Expression[])\n  fullName: System.Linq.Expressions.Expression.Call(Expression,MethodInfo,Expression[])\n- uid: System.Linq.Expressions.MethodCallExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MethodCallExpression\n  nameWithType: MethodCallExpression\n  fullName: System.Linq.Expressions.MethodCallExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression[]\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(MethodInfo,Expression,Expression)\n  nameWithType: Expression.Call(MethodInfo,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Call(MethodInfo,Expression,Expression)\n- uid: System.Linq.Expressions.MethodCallExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MethodCallExpression\n  nameWithType: MethodCallExpression\n  fullName: System.Linq.Expressions.MethodCallExpression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(Expression,MethodInfo,Expression,Expression)\n  nameWithType: Expression.Call(Expression,MethodInfo,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Call(Expression,MethodInfo,Expression,Expression)\n- uid: System.Linq.Expressions.MethodCallExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MethodCallExpression\n  nameWithType: MethodCallExpression\n  fullName: System.Linq.Expressions.MethodCallExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(Expression,String,Type[],Expression[])\n  nameWithType: Expression.Call(Expression,String,Type[],Expression[])\n  fullName: System.Linq.Expressions.Expression.Call(Expression,String,Type[],Expression[])\n- uid: System.Linq.Expressions.MethodCallExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MethodCallExpression\n  nameWithType: MethodCallExpression\n  fullName: System.Linq.Expressions.MethodCallExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type[]\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression[]\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(MethodInfo,Expression,Expression,Expression)\n  nameWithType: Expression.Call(MethodInfo,Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Call(MethodInfo,Expression,Expression,Expression)\n- uid: System.Linq.Expressions.MethodCallExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MethodCallExpression\n  nameWithType: MethodCallExpression\n  fullName: System.Linq.Expressions.MethodCallExpression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(Type,String,Type[],Expression[])\n  nameWithType: Expression.Call(Type,String,Type[],Expression[])\n  fullName: System.Linq.Expressions.Expression.Call(Type,String,Type[],Expression[])\n- uid: System.Linq.Expressions.MethodCallExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MethodCallExpression\n  nameWithType: MethodCallExpression\n  fullName: System.Linq.Expressions.MethodCallExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type[]\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression[]\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(Expression,MethodInfo,Expression,Expression,Expression)\n  nameWithType: Expression.Call(Expression,MethodInfo,Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Call(Expression,MethodInfo,Expression,Expression,Expression)\n- uid: System.Linq.Expressions.MethodCallExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MethodCallExpression\n  nameWithType: MethodCallExpression\n  fullName: System.Linq.Expressions.MethodCallExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(MethodInfo,Expression,Expression,Expression,Expression)\n  nameWithType: Expression.Call(MethodInfo,Expression,Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Call(MethodInfo,Expression,Expression,Expression,Expression)\n- uid: System.Linq.Expressions.MethodCallExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MethodCallExpression\n  nameWithType: MethodCallExpression\n  fullName: System.Linq.Expressions.MethodCallExpression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(MethodInfo,Expression,Expression,Expression,Expression,Expression)\n  nameWithType: Expression.Call(MethodInfo,Expression,Expression,Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Call(MethodInfo,Expression,Expression,Expression,Expression,Expression)\n- uid: System.Linq.Expressions.MethodCallExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MethodCallExpression\n  nameWithType: MethodCallExpression\n  fullName: System.Linq.Expressions.MethodCallExpression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.CanReduce\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: CanReduce\n  nameWithType: Expression.CanReduce\n  fullName: System.Linq.Expressions.Expression.CanReduce\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Catch(ParameterExpression,Expression)\n  nameWithType: Expression.Catch(ParameterExpression,Expression)\n  fullName: System.Linq.Expressions.Expression.Catch(ParameterExpression,Expression)\n- uid: System.Linq.Expressions.CatchBlock\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: CatchBlock\n  nameWithType: CatchBlock\n  fullName: System.Linq.Expressions.CatchBlock\n- uid: System.Linq.Expressions.ParameterExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ParameterExpression\n  nameWithType: ParameterExpression\n  fullName: System.Linq.Expressions.ParameterExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Catch(Type,Expression)\n  nameWithType: Expression.Catch(Type,Expression)\n  fullName: System.Linq.Expressions.Expression.Catch(Type,Expression)\n- uid: System.Linq.Expressions.CatchBlock\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: CatchBlock\n  nameWithType: CatchBlock\n  fullName: System.Linq.Expressions.CatchBlock\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Catch(ParameterExpression,Expression,Expression)\n  nameWithType: Expression.Catch(ParameterExpression,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Catch(ParameterExpression,Expression,Expression)\n- uid: System.Linq.Expressions.CatchBlock\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: CatchBlock\n  nameWithType: CatchBlock\n  fullName: System.Linq.Expressions.CatchBlock\n- uid: System.Linq.Expressions.ParameterExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ParameterExpression\n  nameWithType: ParameterExpression\n  fullName: System.Linq.Expressions.ParameterExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Catch(Type,Expression,Expression)\n  nameWithType: Expression.Catch(Type,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Catch(Type,Expression,Expression)\n- uid: System.Linq.Expressions.CatchBlock\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: CatchBlock\n  nameWithType: CatchBlock\n  fullName: System.Linq.Expressions.CatchBlock\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ClearDebugInfo(SymbolDocumentInfo)\n  nameWithType: Expression.ClearDebugInfo(SymbolDocumentInfo)\n  fullName: System.Linq.Expressions.Expression.ClearDebugInfo(SymbolDocumentInfo)\n- uid: System.Linq.Expressions.DebugInfoExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DebugInfoExpression\n  nameWithType: DebugInfoExpression\n  fullName: System.Linq.Expressions.DebugInfoExpression\n- uid: System.Linq.Expressions.SymbolDocumentInfo\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: SymbolDocumentInfo\n  nameWithType: SymbolDocumentInfo\n  fullName: System.Linq.Expressions.SymbolDocumentInfo\n- uid: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Coalesce(Expression,Expression)\n  nameWithType: Expression.Coalesce(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Coalesce(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Coalesce(Expression,Expression,LambdaExpression)\n  nameWithType: Expression.Coalesce(Expression,Expression,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.Coalesce(Expression,Expression,LambdaExpression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.LambdaExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LambdaExpression\n  nameWithType: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n- uid: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Condition(Expression,Expression,Expression)\n  nameWithType: Expression.Condition(Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Condition(Expression,Expression,Expression)\n- uid: System.Linq.Expressions.ConditionalExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ConditionalExpression\n  nameWithType: ConditionalExpression\n  fullName: System.Linq.Expressions.ConditionalExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Condition(Expression,Expression,Expression,Type)\n  nameWithType: Expression.Condition(Expression,Expression,Expression,Type)\n  fullName: System.Linq.Expressions.Expression.Condition(Expression,Expression,Expression,Type)\n- uid: System.Linq.Expressions.ConditionalExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ConditionalExpression\n  nameWithType: ConditionalExpression\n  fullName: System.Linq.Expressions.ConditionalExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression.Constant(System.Object)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Constant(Object)\n  nameWithType: Expression.Constant(Object)\n  fullName: System.Linq.Expressions.Expression.Constant(Object)\n- uid: System.Linq.Expressions.ConstantExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ConstantExpression\n  nameWithType: ConstantExpression\n  fullName: System.Linq.Expressions.ConstantExpression\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Linq.Expressions.Expression.Constant(System.Object,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Constant(Object,Type)\n  nameWithType: Expression.Constant(Object,Type)\n  fullName: System.Linq.Expressions.Expression.Constant(Object,Type)\n- uid: System.Linq.Expressions.ConstantExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ConstantExpression\n  nameWithType: ConstantExpression\n  fullName: System.Linq.Expressions.ConstantExpression\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Continue(LabelTarget)\n  nameWithType: Expression.Continue(LabelTarget)\n  fullName: System.Linq.Expressions.Expression.Continue(LabelTarget)\n- uid: System.Linq.Expressions.GotoExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: GotoExpression\n  nameWithType: GotoExpression\n  fullName: System.Linq.Expressions.GotoExpression\n- uid: System.Linq.Expressions.LabelTarget\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelTarget\n  nameWithType: LabelTarget\n  fullName: System.Linq.Expressions.LabelTarget\n- uid: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Continue(LabelTarget,Type)\n  nameWithType: Expression.Continue(LabelTarget,Type)\n  fullName: System.Linq.Expressions.Expression.Continue(LabelTarget,Type)\n- uid: System.Linq.Expressions.GotoExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: GotoExpression\n  nameWithType: GotoExpression\n  fullName: System.Linq.Expressions.GotoExpression\n- uid: System.Linq.Expressions.LabelTarget\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelTarget\n  nameWithType: LabelTarget\n  fullName: System.Linq.Expressions.LabelTarget\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Convert(Expression,Type)\n  nameWithType: Expression.Convert(Expression,Type)\n  fullName: System.Linq.Expressions.Expression.Convert(Expression,Type)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Convert(Expression,Type,MethodInfo)\n  nameWithType: Expression.Convert(Expression,Type,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Convert(Expression,Type,MethodInfo)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ConvertChecked(Expression,Type)\n  nameWithType: Expression.ConvertChecked(Expression,Type)\n  fullName: System.Linq.Expressions.Expression.ConvertChecked(Expression,Type)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ConvertChecked(Expression,Type,MethodInfo)\n  nameWithType: Expression.ConvertChecked(Expression,Type,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.ConvertChecked(Expression,Type,MethodInfo)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: DebugInfo(SymbolDocumentInfo,Int32,Int32,Int32,Int32)\n  nameWithType: Expression.DebugInfo(SymbolDocumentInfo,Int32,Int32,Int32,Int32)\n  fullName: System.Linq.Expressions.Expression.DebugInfo(SymbolDocumentInfo,Int32,Int32,Int32,Int32)\n- uid: System.Linq.Expressions.DebugInfoExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DebugInfoExpression\n  nameWithType: DebugInfoExpression\n  fullName: System.Linq.Expressions.DebugInfoExpression\n- uid: System.Linq.Expressions.SymbolDocumentInfo\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: SymbolDocumentInfo\n  nameWithType: SymbolDocumentInfo\n  fullName: System.Linq.Expressions.SymbolDocumentInfo\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Decrement(Expression)\n  nameWithType: Expression.Decrement(Expression)\n  fullName: System.Linq.Expressions.Expression.Decrement(Expression)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Decrement(Expression,MethodInfo)\n  nameWithType: Expression.Decrement(Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Decrement(Expression,MethodInfo)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.Default(System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Default(Type)\n  nameWithType: Expression.Default(Type)\n  fullName: System.Linq.Expressions.Expression.Default(Type)\n- uid: System.Linq.Expressions.DefaultExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DefaultExpression\n  nameWithType: DefaultExpression\n  fullName: System.Linq.Expressions.DefaultExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Divide(Expression,Expression)\n  nameWithType: Expression.Divide(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Divide(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Divide(Expression,Expression,MethodInfo)\n  nameWithType: Expression.Divide(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Divide(Expression,Expression,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: DivideAssign(Expression,Expression)\n  nameWithType: Expression.DivideAssign(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.DivideAssign(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: DivideAssign(Expression,Expression,MethodInfo)\n  nameWithType: Expression.DivideAssign(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.DivideAssign(Expression,Expression,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: DivideAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  nameWithType: Expression.DivideAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.DivideAssign(Expression,Expression,MethodInfo,LambdaExpression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.LambdaExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LambdaExpression\n  nameWithType: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Dynamic(CallSiteBinder,Type,IEnumerable<Expression>)\n  nameWithType: Expression.Dynamic(CallSiteBinder,Type,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.Dynamic(CallSiteBinder,Type,IEnumerable<Expression>)\n- uid: System.Linq.Expressions.DynamicExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DynamicExpression\n  nameWithType: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n- uid: System.Runtime.CompilerServices.CallSiteBinder\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: CallSiteBinder\n  nameWithType: CallSiteBinder\n  fullName: System.Runtime.CompilerServices.CallSiteBinder\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Expression>\n  nameWithType: IEnumerable<Expression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>\n- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Dynamic(CallSiteBinder,Type,Expression)\n  nameWithType: Expression.Dynamic(CallSiteBinder,Type,Expression)\n  fullName: System.Linq.Expressions.Expression.Dynamic(CallSiteBinder,Type,Expression)\n- uid: System.Linq.Expressions.DynamicExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DynamicExpression\n  nameWithType: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n- uid: System.Runtime.CompilerServices.CallSiteBinder\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: CallSiteBinder\n  nameWithType: CallSiteBinder\n  fullName: System.Runtime.CompilerServices.CallSiteBinder\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Dynamic(CallSiteBinder,Type,Expression[])\n  nameWithType: Expression.Dynamic(CallSiteBinder,Type,Expression[])\n  fullName: System.Linq.Expressions.Expression.Dynamic(CallSiteBinder,Type,Expression[])\n- uid: System.Linq.Expressions.DynamicExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DynamicExpression\n  nameWithType: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n- uid: System.Runtime.CompilerServices.CallSiteBinder\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: CallSiteBinder\n  nameWithType: CallSiteBinder\n  fullName: System.Runtime.CompilerServices.CallSiteBinder\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression[]\n- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Dynamic(CallSiteBinder,Type,Expression,Expression)\n  nameWithType: Expression.Dynamic(CallSiteBinder,Type,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Dynamic(CallSiteBinder,Type,Expression,Expression)\n- uid: System.Linq.Expressions.DynamicExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DynamicExpression\n  nameWithType: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n- uid: System.Runtime.CompilerServices.CallSiteBinder\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: CallSiteBinder\n  nameWithType: CallSiteBinder\n  fullName: System.Runtime.CompilerServices.CallSiteBinder\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Dynamic(CallSiteBinder,Type,Expression,Expression,Expression)\n  nameWithType: Expression.Dynamic(CallSiteBinder,Type,Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Dynamic(CallSiteBinder,Type,Expression,Expression,Expression)\n- uid: System.Linq.Expressions.DynamicExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DynamicExpression\n  nameWithType: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n- uid: System.Runtime.CompilerServices.CallSiteBinder\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: CallSiteBinder\n  nameWithType: CallSiteBinder\n  fullName: System.Runtime.CompilerServices.CallSiteBinder\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Dynamic(CallSiteBinder,Type,Expression,Expression,Expression,Expression)\n  nameWithType: Expression.Dynamic(CallSiteBinder,Type,Expression,Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Dynamic(CallSiteBinder,Type,Expression,Expression,Expression,Expression)\n- uid: System.Linq.Expressions.DynamicExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DynamicExpression\n  nameWithType: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n- uid: System.Runtime.CompilerServices.CallSiteBinder\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: CallSiteBinder\n  nameWithType: CallSiteBinder\n  fullName: System.Runtime.CompilerServices.CallSiteBinder\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ElementInit(MethodInfo,IEnumerable<Expression>)\n  nameWithType: Expression.ElementInit(MethodInfo,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.ElementInit(MethodInfo,IEnumerable<Expression>)\n- uid: System.Linq.Expressions.ElementInit\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ElementInit\n  nameWithType: ElementInit\n  fullName: System.Linq.Expressions.ElementInit\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Expression>\n  nameWithType: IEnumerable<Expression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>\n- uid: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ElementInit(MethodInfo,Expression[])\n  nameWithType: Expression.ElementInit(MethodInfo,Expression[])\n  fullName: System.Linq.Expressions.Expression.ElementInit(MethodInfo,Expression[])\n- uid: System.Linq.Expressions.ElementInit\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ElementInit\n  nameWithType: ElementInit\n  fullName: System.Linq.Expressions.ElementInit\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression[]\n- uid: System.Linq.Expressions.Expression.Empty\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Empty()\n  nameWithType: Expression.Empty()\n  fullName: System.Linq.Expressions.Expression.Empty()\n- uid: System.Linq.Expressions.DefaultExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DefaultExpression\n  nameWithType: DefaultExpression\n  fullName: System.Linq.Expressions.DefaultExpression\n- uid: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Equal(Expression,Expression)\n  nameWithType: Expression.Equal(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Equal(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Equal(Expression,Expression,Boolean,MethodInfo)\n  nameWithType: Expression.Equal(Expression,Expression,Boolean,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Equal(Expression,Expression,Boolean,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ExclusiveOr(Expression,Expression)\n  nameWithType: Expression.ExclusiveOr(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.ExclusiveOr(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ExclusiveOr(Expression,Expression,MethodInfo)\n  nameWithType: Expression.ExclusiveOr(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.ExclusiveOr(Expression,Expression,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ExclusiveOrAssign(Expression,Expression)\n  nameWithType: Expression.ExclusiveOrAssign(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.ExclusiveOrAssign(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ExclusiveOrAssign(Expression,Expression,MethodInfo)\n  nameWithType: Expression.ExclusiveOrAssign(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.ExclusiveOrAssign(Expression,Expression,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ExclusiveOrAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  nameWithType: Expression.ExclusiveOrAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.ExclusiveOrAssign(Expression,Expression,MethodInfo,LambdaExpression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.LambdaExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LambdaExpression\n  nameWithType: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Field(Expression,FieldInfo)\n  nameWithType: Expression.Field(Expression,FieldInfo)\n  fullName: System.Linq.Expressions.Expression.Field(Expression,FieldInfo)\n- uid: System.Linq.Expressions.MemberExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberExpression\n  nameWithType: MemberExpression\n  fullName: System.Linq.Expressions.MemberExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.FieldInfo\n  parent: System.Reflection\n  isExternal: false\n  name: FieldInfo\n  nameWithType: FieldInfo\n  fullName: System.Reflection.FieldInfo\n- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Field(Expression,String)\n  nameWithType: Expression.Field(Expression,String)\n  fullName: System.Linq.Expressions.Expression.Field(Expression,String)\n- uid: System.Linq.Expressions.MemberExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberExpression\n  nameWithType: MemberExpression\n  fullName: System.Linq.Expressions.MemberExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Field(Expression,Type,String)\n  nameWithType: Expression.Field(Expression,Type,String)\n  fullName: System.Linq.Expressions.Expression.Field(Expression,Type,String)\n- uid: System.Linq.Expressions.MemberExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberExpression\n  nameWithType: MemberExpression\n  fullName: System.Linq.Expressions.MemberExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Linq.Expressions.Expression.GetActionType(System.Type[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: GetActionType(Type[])\n  nameWithType: Expression.GetActionType(Type[])\n  fullName: System.Linq.Expressions.Expression.GetActionType(Type[])\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type[]\n- uid: System.Linq.Expressions.Expression.GetDelegateType(System.Type[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: GetDelegateType(Type[])\n  nameWithType: Expression.GetDelegateType(Type[])\n  fullName: System.Linq.Expressions.Expression.GetDelegateType(Type[])\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type[]\n- uid: System.Linq.Expressions.Expression.GetFuncType(System.Type[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: GetFuncType(Type[])\n  nameWithType: Expression.GetFuncType(Type[])\n  fullName: System.Linq.Expressions.Expression.GetFuncType(Type[])\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type[]\n- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Goto(LabelTarget)\n  nameWithType: Expression.Goto(LabelTarget)\n  fullName: System.Linq.Expressions.Expression.Goto(LabelTarget)\n- uid: System.Linq.Expressions.GotoExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: GotoExpression\n  nameWithType: GotoExpression\n  fullName: System.Linq.Expressions.GotoExpression\n- uid: System.Linq.Expressions.LabelTarget\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelTarget\n  nameWithType: LabelTarget\n  fullName: System.Linq.Expressions.LabelTarget\n- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Goto(LabelTarget,Expression)\n  nameWithType: Expression.Goto(LabelTarget,Expression)\n  fullName: System.Linq.Expressions.Expression.Goto(LabelTarget,Expression)\n- uid: System.Linq.Expressions.GotoExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: GotoExpression\n  nameWithType: GotoExpression\n  fullName: System.Linq.Expressions.GotoExpression\n- uid: System.Linq.Expressions.LabelTarget\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelTarget\n  nameWithType: LabelTarget\n  fullName: System.Linq.Expressions.LabelTarget\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Goto(LabelTarget,Type)\n  nameWithType: Expression.Goto(LabelTarget,Type)\n  fullName: System.Linq.Expressions.Expression.Goto(LabelTarget,Type)\n- uid: System.Linq.Expressions.GotoExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: GotoExpression\n  nameWithType: GotoExpression\n  fullName: System.Linq.Expressions.GotoExpression\n- uid: System.Linq.Expressions.LabelTarget\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelTarget\n  nameWithType: LabelTarget\n  fullName: System.Linq.Expressions.LabelTarget\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Goto(LabelTarget,Expression,Type)\n  nameWithType: Expression.Goto(LabelTarget,Expression,Type)\n  fullName: System.Linq.Expressions.Expression.Goto(LabelTarget,Expression,Type)\n- uid: System.Linq.Expressions.GotoExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: GotoExpression\n  nameWithType: GotoExpression\n  fullName: System.Linq.Expressions.GotoExpression\n- uid: System.Linq.Expressions.LabelTarget\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelTarget\n  nameWithType: LabelTarget\n  fullName: System.Linq.Expressions.LabelTarget\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: GreaterThan(Expression,Expression)\n  nameWithType: Expression.GreaterThan(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.GreaterThan(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: GreaterThan(Expression,Expression,Boolean,MethodInfo)\n  nameWithType: Expression.GreaterThan(Expression,Expression,Boolean,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.GreaterThan(Expression,Expression,Boolean,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: GreaterThanOrEqual(Expression,Expression)\n  nameWithType: Expression.GreaterThanOrEqual(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.GreaterThanOrEqual(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: GreaterThanOrEqual(Expression,Expression,Boolean,MethodInfo)\n  nameWithType: Expression.GreaterThanOrEqual(Expression,Expression,Boolean,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.GreaterThanOrEqual(Expression,Expression,Boolean,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: IfThen(Expression,Expression)\n  nameWithType: Expression.IfThen(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.IfThen(Expression,Expression)\n- uid: System.Linq.Expressions.ConditionalExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ConditionalExpression\n  nameWithType: ConditionalExpression\n  fullName: System.Linq.Expressions.ConditionalExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: IfThenElse(Expression,Expression,Expression)\n  nameWithType: Expression.IfThenElse(Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.IfThenElse(Expression,Expression,Expression)\n- uid: System.Linq.Expressions.ConditionalExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ConditionalExpression\n  nameWithType: ConditionalExpression\n  fullName: System.Linq.Expressions.ConditionalExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Increment(Expression)\n  nameWithType: Expression.Increment(Expression)\n  fullName: System.Linq.Expressions.Expression.Increment(Expression)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Increment(Expression,MethodInfo)\n  nameWithType: Expression.Increment(Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Increment(Expression,MethodInfo)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Invoke(Expression,IEnumerable<Expression>)\n  nameWithType: Expression.Invoke(Expression,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.Invoke(Expression,IEnumerable<Expression>)\n- uid: System.Linq.Expressions.InvocationExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: InvocationExpression\n  nameWithType: InvocationExpression\n  fullName: System.Linq.Expressions.InvocationExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Expression>\n  nameWithType: IEnumerable<Expression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>\n- uid: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Invoke(Expression,Expression[])\n  nameWithType: Expression.Invoke(Expression,Expression[])\n  fullName: System.Linq.Expressions.Expression.Invoke(Expression,Expression[])\n- uid: System.Linq.Expressions.InvocationExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: InvocationExpression\n  nameWithType: InvocationExpression\n  fullName: System.Linq.Expressions.InvocationExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression[]\n- uid: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: IsFalse(Expression)\n  nameWithType: Expression.IsFalse(Expression)\n  fullName: System.Linq.Expressions.Expression.IsFalse(Expression)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: IsFalse(Expression,MethodInfo)\n  nameWithType: Expression.IsFalse(Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.IsFalse(Expression,MethodInfo)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: IsTrue(Expression)\n  nameWithType: Expression.IsTrue(Expression)\n  fullName: System.Linq.Expressions.Expression.IsTrue(Expression)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: IsTrue(Expression,MethodInfo)\n  nameWithType: Expression.IsTrue(Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.IsTrue(Expression,MethodInfo)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.Label\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Label()\n  nameWithType: Expression.Label()\n  fullName: System.Linq.Expressions.Expression.Label()\n- uid: System.Linq.Expressions.LabelTarget\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelTarget\n  nameWithType: LabelTarget\n  fullName: System.Linq.Expressions.LabelTarget\n- uid: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Label(LabelTarget)\n  nameWithType: Expression.Label(LabelTarget)\n  fullName: System.Linq.Expressions.Expression.Label(LabelTarget)\n- uid: System.Linq.Expressions.LabelExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelExpression\n  nameWithType: LabelExpression\n  fullName: System.Linq.Expressions.LabelExpression\n- uid: System.Linq.Expressions.LabelTarget\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelTarget\n  nameWithType: LabelTarget\n  fullName: System.Linq.Expressions.LabelTarget\n- uid: System.Linq.Expressions.Expression.Label(System.String)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Label(String)\n  nameWithType: Expression.Label(String)\n  fullName: System.Linq.Expressions.Expression.Label(String)\n- uid: System.Linq.Expressions.LabelTarget\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelTarget\n  nameWithType: LabelTarget\n  fullName: System.Linq.Expressions.LabelTarget\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Linq.Expressions.Expression.Label(System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Label(Type)\n  nameWithType: Expression.Label(Type)\n  fullName: System.Linq.Expressions.Expression.Label(Type)\n- uid: System.Linq.Expressions.LabelTarget\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelTarget\n  nameWithType: LabelTarget\n  fullName: System.Linq.Expressions.LabelTarget\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Label(LabelTarget,Expression)\n  nameWithType: Expression.Label(LabelTarget,Expression)\n  fullName: System.Linq.Expressions.Expression.Label(LabelTarget,Expression)\n- uid: System.Linq.Expressions.LabelExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelExpression\n  nameWithType: LabelExpression\n  fullName: System.Linq.Expressions.LabelExpression\n- uid: System.Linq.Expressions.LabelTarget\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelTarget\n  nameWithType: LabelTarget\n  fullName: System.Linq.Expressions.LabelTarget\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Label(System.Type,System.String)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Label(Type,String)\n  nameWithType: Expression.Label(Type,String)\n  fullName: System.Linq.Expressions.Expression.Label(Type,String)\n- uid: System.Linq.Expressions.LabelTarget\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelTarget\n  nameWithType: LabelTarget\n  fullName: System.Linq.Expressions.LabelTarget\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Expression,IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Expression,IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(Expression,IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.LambdaExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LambdaExpression\n  nameWithType: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<ParameterExpression>\n  nameWithType: IEnumerable<ParameterExpression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Expression,ParameterExpression[])\n  nameWithType: Expression.Lambda(Expression,ParameterExpression[])\n  fullName: System.Linq.Expressions.Expression.Lambda(Expression,ParameterExpression[])\n- uid: System.Linq.Expressions.LambdaExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LambdaExpression\n  nameWithType: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.ParameterExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ParameterExpression\n  nameWithType: ParameterExpression\n  fullName: System.Linq.Expressions.ParameterExpression[]\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Expression,Boolean,IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Expression,Boolean,IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(Expression,Boolean,IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.LambdaExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LambdaExpression\n  nameWithType: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<ParameterExpression>\n  nameWithType: IEnumerable<ParameterExpression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Expression,Boolean,ParameterExpression[])\n  nameWithType: Expression.Lambda(Expression,Boolean,ParameterExpression[])\n  fullName: System.Linq.Expressions.Expression.Lambda(Expression,Boolean,ParameterExpression[])\n- uid: System.Linq.Expressions.LambdaExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LambdaExpression\n  nameWithType: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Linq.Expressions.ParameterExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ParameterExpression\n  nameWithType: ParameterExpression\n  fullName: System.Linq.Expressions.ParameterExpression[]\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Expression,String,IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Expression,String,IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(Expression,String,IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.LambdaExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LambdaExpression\n  nameWithType: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<ParameterExpression>\n  nameWithType: IEnumerable<ParameterExpression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Type,Expression,IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Type,Expression,IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(Type,Expression,IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.LambdaExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LambdaExpression\n  nameWithType: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<ParameterExpression>\n  nameWithType: IEnumerable<ParameterExpression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Type,Expression,ParameterExpression[])\n  nameWithType: Expression.Lambda(Type,Expression,ParameterExpression[])\n  fullName: System.Linq.Expressions.Expression.Lambda(Type,Expression,ParameterExpression[])\n- uid: System.Linq.Expressions.LambdaExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LambdaExpression\n  nameWithType: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.ParameterExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ParameterExpression\n  nameWithType: ParameterExpression\n  fullName: System.Linq.Expressions.ParameterExpression[]\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Expression,String,Boolean,IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Expression,String,Boolean,IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(Expression,String,Boolean,IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.LambdaExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LambdaExpression\n  nameWithType: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<ParameterExpression>\n  nameWithType: IEnumerable<ParameterExpression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Type,Expression,Boolean,IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Type,Expression,Boolean,IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(Type,Expression,Boolean,IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.LambdaExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LambdaExpression\n  nameWithType: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<ParameterExpression>\n  nameWithType: IEnumerable<ParameterExpression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Type,Expression,Boolean,ParameterExpression[])\n  nameWithType: Expression.Lambda(Type,Expression,Boolean,ParameterExpression[])\n  fullName: System.Linq.Expressions.Expression.Lambda(Type,Expression,Boolean,ParameterExpression[])\n- uid: System.Linq.Expressions.LambdaExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LambdaExpression\n  nameWithType: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Linq.Expressions.ParameterExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ParameterExpression\n  nameWithType: ParameterExpression\n  fullName: System.Linq.Expressions.ParameterExpression[]\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Type,Expression,String,IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Type,Expression,String,IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(Type,Expression,String,IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.LambdaExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LambdaExpression\n  nameWithType: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<ParameterExpression>\n  nameWithType: IEnumerable<ParameterExpression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Type,Expression,String,Boolean,IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Type,Expression,String,Boolean,IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(Type,Expression,String,Boolean,IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.LambdaExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LambdaExpression\n  nameWithType: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<ParameterExpression>\n  nameWithType: IEnumerable<ParameterExpression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Expression,IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Expression,IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(Expression,IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.Expression`1\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<TDelegate>\n  nameWithType: Expression<TDelegate>\n  fullName: System.Linq.Expressions.Expression<TDelegate>\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<ParameterExpression>\n  nameWithType: IEnumerable<ParameterExpression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Expression,ParameterExpression[])\n  nameWithType: Expression.Lambda(Expression,ParameterExpression[])\n  fullName: System.Linq.Expressions.Expression.Lambda(Expression,ParameterExpression[])\n- uid: System.Linq.Expressions.Expression`1\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<TDelegate>\n  nameWithType: Expression<TDelegate>\n  fullName: System.Linq.Expressions.Expression<TDelegate>\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.ParameterExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ParameterExpression\n  nameWithType: ParameterExpression\n  fullName: System.Linq.Expressions.ParameterExpression[]\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Expression,Boolean,IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Expression,Boolean,IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(Expression,Boolean,IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.Expression`1\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<TDelegate>\n  nameWithType: Expression<TDelegate>\n  fullName: System.Linq.Expressions.Expression<TDelegate>\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<ParameterExpression>\n  nameWithType: IEnumerable<ParameterExpression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Expression,Boolean,ParameterExpression[])\n  nameWithType: Expression.Lambda(Expression,Boolean,ParameterExpression[])\n  fullName: System.Linq.Expressions.Expression.Lambda(Expression,Boolean,ParameterExpression[])\n- uid: System.Linq.Expressions.Expression`1\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<TDelegate>\n  nameWithType: Expression<TDelegate>\n  fullName: System.Linq.Expressions.Expression<TDelegate>\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Linq.Expressions.ParameterExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ParameterExpression\n  nameWithType: ParameterExpression\n  fullName: System.Linq.Expressions.ParameterExpression[]\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Expression,String,IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Expression,String,IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(Expression,String,IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.Expression`1\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<TDelegate>\n  nameWithType: Expression<TDelegate>\n  fullName: System.Linq.Expressions.Expression<TDelegate>\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<ParameterExpression>\n  nameWithType: IEnumerable<ParameterExpression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Expression,String,Boolean,IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Expression,String,Boolean,IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.Lambda(Expression,String,Boolean,IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.Expression`1\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<TDelegate>\n  nameWithType: Expression<TDelegate>\n  fullName: System.Linq.Expressions.Expression<TDelegate>\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<ParameterExpression>\n  nameWithType: IEnumerable<ParameterExpression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>\n- uid: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: LeftShift(Expression,Expression)\n  nameWithType: Expression.LeftShift(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.LeftShift(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: LeftShift(Expression,Expression,MethodInfo)\n  nameWithType: Expression.LeftShift(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.LeftShift(Expression,Expression,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: LeftShiftAssign(Expression,Expression)\n  nameWithType: Expression.LeftShiftAssign(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.LeftShiftAssign(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: LeftShiftAssign(Expression,Expression,MethodInfo)\n  nameWithType: Expression.LeftShiftAssign(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.LeftShiftAssign(Expression,Expression,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: LeftShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  nameWithType: Expression.LeftShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.LeftShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.LambdaExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LambdaExpression\n  nameWithType: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n- uid: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: LessThan(Expression,Expression)\n  nameWithType: Expression.LessThan(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.LessThan(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: LessThan(Expression,Expression,Boolean,MethodInfo)\n  nameWithType: Expression.LessThan(Expression,Expression,Boolean,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.LessThan(Expression,Expression,Boolean,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: LessThanOrEqual(Expression,Expression)\n  nameWithType: Expression.LessThanOrEqual(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.LessThanOrEqual(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: LessThanOrEqual(Expression,Expression,Boolean,MethodInfo)\n  nameWithType: Expression.LessThanOrEqual(Expression,Expression,Boolean,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.LessThanOrEqual(Expression,Expression,Boolean,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListBind(MemberInfo,IEnumerable<ElementInit>)\n  nameWithType: Expression.ListBind(MemberInfo,IEnumerable<ElementInit>)\n  fullName: System.Linq.Expressions.Expression.ListBind(MemberInfo,IEnumerable<ElementInit>)\n- uid: System.Linq.Expressions.MemberListBinding\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberListBinding\n  nameWithType: MemberListBinding\n  fullName: System.Linq.Expressions.MemberListBinding\n- uid: System.Reflection.MemberInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MemberInfo\n  nameWithType: MemberInfo\n  fullName: System.Reflection.MemberInfo\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<ElementInit>\n  nameWithType: IEnumerable<ElementInit>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>\n- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListBind(MemberInfo,ElementInit[])\n  nameWithType: Expression.ListBind(MemberInfo,ElementInit[])\n  fullName: System.Linq.Expressions.Expression.ListBind(MemberInfo,ElementInit[])\n- uid: System.Linq.Expressions.MemberListBinding\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberListBinding\n  nameWithType: MemberListBinding\n  fullName: System.Linq.Expressions.MemberListBinding\n- uid: System.Reflection.MemberInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MemberInfo\n  nameWithType: MemberInfo\n  fullName: System.Reflection.MemberInfo\n- uid: System.Linq.Expressions.ElementInit\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ElementInit\n  nameWithType: ElementInit\n  fullName: System.Linq.Expressions.ElementInit[]\n- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListBind(MethodInfo,IEnumerable<ElementInit>)\n  nameWithType: Expression.ListBind(MethodInfo,IEnumerable<ElementInit>)\n  fullName: System.Linq.Expressions.Expression.ListBind(MethodInfo,IEnumerable<ElementInit>)\n- uid: System.Linq.Expressions.MemberListBinding\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberListBinding\n  nameWithType: MemberListBinding\n  fullName: System.Linq.Expressions.MemberListBinding\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<ElementInit>\n  nameWithType: IEnumerable<ElementInit>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>\n- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListBind(MethodInfo,ElementInit[])\n  nameWithType: Expression.ListBind(MethodInfo,ElementInit[])\n  fullName: System.Linq.Expressions.Expression.ListBind(MethodInfo,ElementInit[])\n- uid: System.Linq.Expressions.MemberListBinding\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberListBinding\n  nameWithType: MemberListBinding\n  fullName: System.Linq.Expressions.MemberListBinding\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.ElementInit\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ElementInit\n  nameWithType: ElementInit\n  fullName: System.Linq.Expressions.ElementInit[]\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListInit(NewExpression,IEnumerable<ElementInit>)\n  nameWithType: Expression.ListInit(NewExpression,IEnumerable<ElementInit>)\n  fullName: System.Linq.Expressions.Expression.ListInit(NewExpression,IEnumerable<ElementInit>)\n- uid: System.Linq.Expressions.ListInitExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ListInitExpression\n  nameWithType: ListInitExpression\n  fullName: System.Linq.Expressions.ListInitExpression\n- uid: System.Linq.Expressions.NewExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: NewExpression\n  nameWithType: NewExpression\n  fullName: System.Linq.Expressions.NewExpression\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<ElementInit>\n  nameWithType: IEnumerable<ElementInit>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListInit(NewExpression,IEnumerable<Expression>)\n  nameWithType: Expression.ListInit(NewExpression,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.ListInit(NewExpression,IEnumerable<Expression>)\n- uid: System.Linq.Expressions.ListInitExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ListInitExpression\n  nameWithType: ListInitExpression\n  fullName: System.Linq.Expressions.ListInitExpression\n- uid: System.Linq.Expressions.NewExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: NewExpression\n  nameWithType: NewExpression\n  fullName: System.Linq.Expressions.NewExpression\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Expression>\n  nameWithType: IEnumerable<Expression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListInit(NewExpression,ElementInit[])\n  nameWithType: Expression.ListInit(NewExpression,ElementInit[])\n  fullName: System.Linq.Expressions.Expression.ListInit(NewExpression,ElementInit[])\n- uid: System.Linq.Expressions.ListInitExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ListInitExpression\n  nameWithType: ListInitExpression\n  fullName: System.Linq.Expressions.ListInitExpression\n- uid: System.Linq.Expressions.NewExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: NewExpression\n  nameWithType: NewExpression\n  fullName: System.Linq.Expressions.NewExpression\n- uid: System.Linq.Expressions.ElementInit\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ElementInit\n  nameWithType: ElementInit\n  fullName: System.Linq.Expressions.ElementInit[]\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListInit(NewExpression,Expression[])\n  nameWithType: Expression.ListInit(NewExpression,Expression[])\n  fullName: System.Linq.Expressions.Expression.ListInit(NewExpression,Expression[])\n- uid: System.Linq.Expressions.ListInitExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ListInitExpression\n  nameWithType: ListInitExpression\n  fullName: System.Linq.Expressions.ListInitExpression\n- uid: System.Linq.Expressions.NewExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: NewExpression\n  nameWithType: NewExpression\n  fullName: System.Linq.Expressions.NewExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression[]\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListInit(NewExpression,MethodInfo,IEnumerable<Expression>)\n  nameWithType: Expression.ListInit(NewExpression,MethodInfo,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.ListInit(NewExpression,MethodInfo,IEnumerable<Expression>)\n- uid: System.Linq.Expressions.ListInitExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ListInitExpression\n  nameWithType: ListInitExpression\n  fullName: System.Linq.Expressions.ListInitExpression\n- uid: System.Linq.Expressions.NewExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: NewExpression\n  nameWithType: NewExpression\n  fullName: System.Linq.Expressions.NewExpression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Expression>\n  nameWithType: IEnumerable<Expression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListInit(NewExpression,MethodInfo,Expression[])\n  nameWithType: Expression.ListInit(NewExpression,MethodInfo,Expression[])\n  fullName: System.Linq.Expressions.Expression.ListInit(NewExpression,MethodInfo,Expression[])\n- uid: System.Linq.Expressions.ListInitExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ListInitExpression\n  nameWithType: ListInitExpression\n  fullName: System.Linq.Expressions.ListInitExpression\n- uid: System.Linq.Expressions.NewExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: NewExpression\n  nameWithType: NewExpression\n  fullName: System.Linq.Expressions.NewExpression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression[]\n- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Loop(Expression)\n  nameWithType: Expression.Loop(Expression)\n  fullName: System.Linq.Expressions.Expression.Loop(Expression)\n- uid: System.Linq.Expressions.LoopExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LoopExpression\n  nameWithType: LoopExpression\n  fullName: System.Linq.Expressions.LoopExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Loop(Expression,LabelTarget)\n  nameWithType: Expression.Loop(Expression,LabelTarget)\n  fullName: System.Linq.Expressions.Expression.Loop(Expression,LabelTarget)\n- uid: System.Linq.Expressions.LoopExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LoopExpression\n  nameWithType: LoopExpression\n  fullName: System.Linq.Expressions.LoopExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.LabelTarget\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelTarget\n  nameWithType: LabelTarget\n  fullName: System.Linq.Expressions.LabelTarget\n- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Loop(Expression,LabelTarget,LabelTarget)\n  nameWithType: Expression.Loop(Expression,LabelTarget,LabelTarget)\n  fullName: System.Linq.Expressions.Expression.Loop(Expression,LabelTarget,LabelTarget)\n- uid: System.Linq.Expressions.LoopExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LoopExpression\n  nameWithType: LoopExpression\n  fullName: System.Linq.Expressions.LoopExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.LabelTarget\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelTarget\n  nameWithType: LabelTarget\n  fullName: System.Linq.Expressions.LabelTarget\n- uid: System.Linq.Expressions.LabelTarget\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelTarget\n  nameWithType: LabelTarget\n  fullName: System.Linq.Expressions.LabelTarget\n- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeBinary(ExpressionType,Expression,Expression)\n  nameWithType: Expression.MakeBinary(ExpressionType,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.MakeBinary(ExpressionType,Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.ExpressionType\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ExpressionType\n  nameWithType: ExpressionType\n  fullName: System.Linq.Expressions.ExpressionType\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo)\n  nameWithType: Expression.MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.ExpressionType\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ExpressionType\n  nameWithType: ExpressionType\n  fullName: System.Linq.Expressions.ExpressionType\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo,LambdaExpression)\n  nameWithType: Expression.MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo,LambdaExpression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.ExpressionType\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ExpressionType\n  nameWithType: ExpressionType\n  fullName: System.Linq.Expressions.ExpressionType\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.LambdaExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LambdaExpression\n  nameWithType: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n- uid: System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeCatchBlock(Type,ParameterExpression,Expression,Expression)\n  nameWithType: Expression.MakeCatchBlock(Type,ParameterExpression,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.MakeCatchBlock(Type,ParameterExpression,Expression,Expression)\n- uid: System.Linq.Expressions.CatchBlock\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: CatchBlock\n  nameWithType: CatchBlock\n  fullName: System.Linq.Expressions.CatchBlock\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.ParameterExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ParameterExpression\n  nameWithType: ParameterExpression\n  fullName: System.Linq.Expressions.ParameterExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeDynamic(Type,CallSiteBinder,IEnumerable<Expression>)\n  nameWithType: Expression.MakeDynamic(Type,CallSiteBinder,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.MakeDynamic(Type,CallSiteBinder,IEnumerable<Expression>)\n- uid: System.Linq.Expressions.DynamicExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DynamicExpression\n  nameWithType: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Runtime.CompilerServices.CallSiteBinder\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: CallSiteBinder\n  nameWithType: CallSiteBinder\n  fullName: System.Runtime.CompilerServices.CallSiteBinder\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Expression>\n  nameWithType: IEnumerable<Expression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>\n- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeDynamic(Type,CallSiteBinder,Expression)\n  nameWithType: Expression.MakeDynamic(Type,CallSiteBinder,Expression)\n  fullName: System.Linq.Expressions.Expression.MakeDynamic(Type,CallSiteBinder,Expression)\n- uid: System.Linq.Expressions.DynamicExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DynamicExpression\n  nameWithType: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Runtime.CompilerServices.CallSiteBinder\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: CallSiteBinder\n  nameWithType: CallSiteBinder\n  fullName: System.Runtime.CompilerServices.CallSiteBinder\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeDynamic(Type,CallSiteBinder,Expression[])\n  nameWithType: Expression.MakeDynamic(Type,CallSiteBinder,Expression[])\n  fullName: System.Linq.Expressions.Expression.MakeDynamic(Type,CallSiteBinder,Expression[])\n- uid: System.Linq.Expressions.DynamicExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DynamicExpression\n  nameWithType: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Runtime.CompilerServices.CallSiteBinder\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: CallSiteBinder\n  nameWithType: CallSiteBinder\n  fullName: System.Runtime.CompilerServices.CallSiteBinder\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression[]\n- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeDynamic(Type,CallSiteBinder,Expression,Expression)\n  nameWithType: Expression.MakeDynamic(Type,CallSiteBinder,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.MakeDynamic(Type,CallSiteBinder,Expression,Expression)\n- uid: System.Linq.Expressions.DynamicExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DynamicExpression\n  nameWithType: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Runtime.CompilerServices.CallSiteBinder\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: CallSiteBinder\n  nameWithType: CallSiteBinder\n  fullName: System.Runtime.CompilerServices.CallSiteBinder\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression)\n  nameWithType: Expression.MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression)\n- uid: System.Linq.Expressions.DynamicExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DynamicExpression\n  nameWithType: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Runtime.CompilerServices.CallSiteBinder\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: CallSiteBinder\n  nameWithType: CallSiteBinder\n  fullName: System.Runtime.CompilerServices.CallSiteBinder\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression,Expression)\n  nameWithType: Expression.MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression,Expression)\n- uid: System.Linq.Expressions.DynamicExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DynamicExpression\n  nameWithType: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Runtime.CompilerServices.CallSiteBinder\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: CallSiteBinder\n  nameWithType: CallSiteBinder\n  fullName: System.Runtime.CompilerServices.CallSiteBinder\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeGoto(GotoExpressionKind,LabelTarget,Expression,Type)\n  nameWithType: Expression.MakeGoto(GotoExpressionKind,LabelTarget,Expression,Type)\n  fullName: System.Linq.Expressions.Expression.MakeGoto(GotoExpressionKind,LabelTarget,Expression,Type)\n- uid: System.Linq.Expressions.GotoExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: GotoExpression\n  nameWithType: GotoExpression\n  fullName: System.Linq.Expressions.GotoExpression\n- uid: System.Linq.Expressions.GotoExpressionKind\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: GotoExpressionKind\n  nameWithType: GotoExpressionKind\n  fullName: System.Linq.Expressions.GotoExpressionKind\n- uid: System.Linq.Expressions.LabelTarget\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelTarget\n  nameWithType: LabelTarget\n  fullName: System.Linq.Expressions.LabelTarget\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeIndex(Expression,PropertyInfo,IEnumerable<Expression>)\n  nameWithType: Expression.MakeIndex(Expression,PropertyInfo,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.MakeIndex(Expression,PropertyInfo,IEnumerable<Expression>)\n- uid: System.Linq.Expressions.IndexExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: IndexExpression\n  nameWithType: IndexExpression\n  fullName: System.Linq.Expressions.IndexExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.PropertyInfo\n  parent: System.Reflection\n  isExternal: false\n  name: PropertyInfo\n  nameWithType: PropertyInfo\n  fullName: System.Reflection.PropertyInfo\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Expression>\n  nameWithType: IEnumerable<Expression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>\n- uid: System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeMemberAccess(Expression,MemberInfo)\n  nameWithType: Expression.MakeMemberAccess(Expression,MemberInfo)\n  fullName: System.Linq.Expressions.Expression.MakeMemberAccess(Expression,MemberInfo)\n- uid: System.Linq.Expressions.MemberExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberExpression\n  nameWithType: MemberExpression\n  fullName: System.Linq.Expressions.MemberExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MemberInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MemberInfo\n  nameWithType: MemberInfo\n  fullName: System.Reflection.MemberInfo\n- uid: System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeTry(Type,Expression,Expression,Expression,IEnumerable<CatchBlock>)\n  nameWithType: Expression.MakeTry(Type,Expression,Expression,Expression,IEnumerable<CatchBlock>)\n  fullName: System.Linq.Expressions.Expression.MakeTry(Type,Expression,Expression,Expression,IEnumerable<CatchBlock>)\n- uid: System.Linq.Expressions.TryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: TryExpression\n  nameWithType: TryExpression\n  fullName: System.Linq.Expressions.TryExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<CatchBlock>\n  nameWithType: IEnumerable<CatchBlock>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.CatchBlock>\n- uid: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeUnary(ExpressionType,Expression,Type)\n  nameWithType: Expression.MakeUnary(ExpressionType,Expression,Type)\n  fullName: System.Linq.Expressions.Expression.MakeUnary(ExpressionType,Expression,Type)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.ExpressionType\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ExpressionType\n  nameWithType: ExpressionType\n  fullName: System.Linq.Expressions.ExpressionType\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeUnary(ExpressionType,Expression,Type,MethodInfo)\n  nameWithType: Expression.MakeUnary(ExpressionType,Expression,Type,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.MakeUnary(ExpressionType,Expression,Type,MethodInfo)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.ExpressionType\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ExpressionType\n  nameWithType: ExpressionType\n  fullName: System.Linq.Expressions.ExpressionType\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MemberBind(MemberInfo,IEnumerable<MemberBinding>)\n  nameWithType: Expression.MemberBind(MemberInfo,IEnumerable<MemberBinding>)\n  fullName: System.Linq.Expressions.Expression.MemberBind(MemberInfo,IEnumerable<MemberBinding>)\n- uid: System.Linq.Expressions.MemberMemberBinding\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberMemberBinding\n  nameWithType: MemberMemberBinding\n  fullName: System.Linq.Expressions.MemberMemberBinding\n- uid: System.Reflection.MemberInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MemberInfo\n  nameWithType: MemberInfo\n  fullName: System.Reflection.MemberInfo\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<MemberBinding>\n  nameWithType: IEnumerable<MemberBinding>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>\n- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MemberBind(MemberInfo,MemberBinding[])\n  nameWithType: Expression.MemberBind(MemberInfo,MemberBinding[])\n  fullName: System.Linq.Expressions.Expression.MemberBind(MemberInfo,MemberBinding[])\n- uid: System.Linq.Expressions.MemberMemberBinding\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberMemberBinding\n  nameWithType: MemberMemberBinding\n  fullName: System.Linq.Expressions.MemberMemberBinding\n- uid: System.Reflection.MemberInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MemberInfo\n  nameWithType: MemberInfo\n  fullName: System.Reflection.MemberInfo\n- uid: System.Linq.Expressions.MemberBinding\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberBinding\n  nameWithType: MemberBinding\n  fullName: System.Linq.Expressions.MemberBinding[]\n- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MemberBind(MethodInfo,IEnumerable<MemberBinding>)\n  nameWithType: Expression.MemberBind(MethodInfo,IEnumerable<MemberBinding>)\n  fullName: System.Linq.Expressions.Expression.MemberBind(MethodInfo,IEnumerable<MemberBinding>)\n- uid: System.Linq.Expressions.MemberMemberBinding\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberMemberBinding\n  nameWithType: MemberMemberBinding\n  fullName: System.Linq.Expressions.MemberMemberBinding\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<MemberBinding>\n  nameWithType: IEnumerable<MemberBinding>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>\n- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MemberBind(MethodInfo,MemberBinding[])\n  nameWithType: Expression.MemberBind(MethodInfo,MemberBinding[])\n  fullName: System.Linq.Expressions.Expression.MemberBind(MethodInfo,MemberBinding[])\n- uid: System.Linq.Expressions.MemberMemberBinding\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberMemberBinding\n  nameWithType: MemberMemberBinding\n  fullName: System.Linq.Expressions.MemberMemberBinding\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.MemberBinding\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberBinding\n  nameWithType: MemberBinding\n  fullName: System.Linq.Expressions.MemberBinding[]\n- uid: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MemberInit(NewExpression,IEnumerable<MemberBinding>)\n  nameWithType: Expression.MemberInit(NewExpression,IEnumerable<MemberBinding>)\n  fullName: System.Linq.Expressions.Expression.MemberInit(NewExpression,IEnumerable<MemberBinding>)\n- uid: System.Linq.Expressions.MemberInitExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberInitExpression\n  nameWithType: MemberInitExpression\n  fullName: System.Linq.Expressions.MemberInitExpression\n- uid: System.Linq.Expressions.NewExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: NewExpression\n  nameWithType: NewExpression\n  fullName: System.Linq.Expressions.NewExpression\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<MemberBinding>\n  nameWithType: IEnumerable<MemberBinding>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>\n- uid: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MemberInit(NewExpression,MemberBinding[])\n  nameWithType: Expression.MemberInit(NewExpression,MemberBinding[])\n  fullName: System.Linq.Expressions.Expression.MemberInit(NewExpression,MemberBinding[])\n- uid: System.Linq.Expressions.MemberInitExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberInitExpression\n  nameWithType: MemberInitExpression\n  fullName: System.Linq.Expressions.MemberInitExpression\n- uid: System.Linq.Expressions.NewExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: NewExpression\n  nameWithType: NewExpression\n  fullName: System.Linq.Expressions.NewExpression\n- uid: System.Linq.Expressions.MemberBinding\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberBinding\n  nameWithType: MemberBinding\n  fullName: System.Linq.Expressions.MemberBinding[]\n- uid: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Modulo(Expression,Expression)\n  nameWithType: Expression.Modulo(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Modulo(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Modulo(Expression,Expression,MethodInfo)\n  nameWithType: Expression.Modulo(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Modulo(Expression,Expression,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ModuloAssign(Expression,Expression)\n  nameWithType: Expression.ModuloAssign(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.ModuloAssign(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ModuloAssign(Expression,Expression,MethodInfo)\n  nameWithType: Expression.ModuloAssign(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.ModuloAssign(Expression,Expression,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ModuloAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  nameWithType: Expression.ModuloAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.ModuloAssign(Expression,Expression,MethodInfo,LambdaExpression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.LambdaExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LambdaExpression\n  nameWithType: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n- uid: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Multiply(Expression,Expression)\n  nameWithType: Expression.Multiply(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Multiply(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Multiply(Expression,Expression,MethodInfo)\n  nameWithType: Expression.Multiply(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Multiply(Expression,Expression,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MultiplyAssign(Expression,Expression)\n  nameWithType: Expression.MultiplyAssign(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.MultiplyAssign(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MultiplyAssign(Expression,Expression,MethodInfo)\n  nameWithType: Expression.MultiplyAssign(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.MultiplyAssign(Expression,Expression,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MultiplyAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  nameWithType: Expression.MultiplyAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.MultiplyAssign(Expression,Expression,MethodInfo,LambdaExpression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.LambdaExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LambdaExpression\n  nameWithType: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MultiplyAssignChecked(Expression,Expression)\n  nameWithType: Expression.MultiplyAssignChecked(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.MultiplyAssignChecked(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MultiplyAssignChecked(Expression,Expression,MethodInfo)\n  nameWithType: Expression.MultiplyAssignChecked(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.MultiplyAssignChecked(Expression,Expression,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MultiplyAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)\n  nameWithType: Expression.MultiplyAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.MultiplyAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.LambdaExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LambdaExpression\n  nameWithType: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n- uid: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MultiplyChecked(Expression,Expression)\n  nameWithType: Expression.MultiplyChecked(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.MultiplyChecked(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MultiplyChecked(Expression,Expression,MethodInfo)\n  nameWithType: Expression.MultiplyChecked(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.MultiplyChecked(Expression,Expression,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Negate(Expression)\n  nameWithType: Expression.Negate(Expression)\n  fullName: System.Linq.Expressions.Expression.Negate(Expression)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Negate(Expression,MethodInfo)\n  nameWithType: Expression.Negate(Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Negate(Expression,MethodInfo)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: NegateChecked(Expression)\n  nameWithType: Expression.NegateChecked(Expression)\n  fullName: System.Linq.Expressions.Expression.NegateChecked(Expression)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: NegateChecked(Expression,MethodInfo)\n  nameWithType: Expression.NegateChecked(Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.NegateChecked(Expression,MethodInfo)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: New(ConstructorInfo)\n  nameWithType: Expression.New(ConstructorInfo)\n  fullName: System.Linq.Expressions.Expression.New(ConstructorInfo)\n- uid: System.Linq.Expressions.NewExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: NewExpression\n  nameWithType: NewExpression\n  fullName: System.Linq.Expressions.NewExpression\n- uid: System.Reflection.ConstructorInfo\n  parent: System.Reflection\n  isExternal: false\n  name: ConstructorInfo\n  nameWithType: ConstructorInfo\n  fullName: System.Reflection.ConstructorInfo\n- uid: System.Linq.Expressions.Expression.New(System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: New(Type)\n  nameWithType: Expression.New(Type)\n  fullName: System.Linq.Expressions.Expression.New(Type)\n- uid: System.Linq.Expressions.NewExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: NewExpression\n  nameWithType: NewExpression\n  fullName: System.Linq.Expressions.NewExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: New(ConstructorInfo,IEnumerable<Expression>)\n  nameWithType: Expression.New(ConstructorInfo,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.New(ConstructorInfo,IEnumerable<Expression>)\n- uid: System.Linq.Expressions.NewExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: NewExpression\n  nameWithType: NewExpression\n  fullName: System.Linq.Expressions.NewExpression\n- uid: System.Reflection.ConstructorInfo\n  parent: System.Reflection\n  isExternal: false\n  name: ConstructorInfo\n  nameWithType: ConstructorInfo\n  fullName: System.Reflection.ConstructorInfo\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Expression>\n  nameWithType: IEnumerable<Expression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>\n- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: New(ConstructorInfo,Expression[])\n  nameWithType: Expression.New(ConstructorInfo,Expression[])\n  fullName: System.Linq.Expressions.Expression.New(ConstructorInfo,Expression[])\n- uid: System.Linq.Expressions.NewExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: NewExpression\n  nameWithType: NewExpression\n  fullName: System.Linq.Expressions.NewExpression\n- uid: System.Reflection.ConstructorInfo\n  parent: System.Reflection\n  isExternal: false\n  name: ConstructorInfo\n  nameWithType: ConstructorInfo\n  fullName: System.Reflection.ConstructorInfo\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression[]\n- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: New(ConstructorInfo,IEnumerable<Expression>,IEnumerable<MemberInfo>)\n  nameWithType: Expression.New(ConstructorInfo,IEnumerable<Expression>,IEnumerable<MemberInfo>)\n  fullName: System.Linq.Expressions.Expression.New(ConstructorInfo,IEnumerable<Expression>,IEnumerable<MemberInfo>)\n- uid: System.Linq.Expressions.NewExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: NewExpression\n  nameWithType: NewExpression\n  fullName: System.Linq.Expressions.NewExpression\n- uid: System.Reflection.ConstructorInfo\n  parent: System.Reflection\n  isExternal: false\n  name: ConstructorInfo\n  nameWithType: ConstructorInfo\n  fullName: System.Reflection.ConstructorInfo\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Expression>\n  nameWithType: IEnumerable<Expression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>\n- uid: System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<MemberInfo>\n  nameWithType: IEnumerable<MemberInfo>\n  fullName: System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo>\n- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: New(ConstructorInfo,IEnumerable<Expression>,MemberInfo[])\n  nameWithType: Expression.New(ConstructorInfo,IEnumerable<Expression>,MemberInfo[])\n  fullName: System.Linq.Expressions.Expression.New(ConstructorInfo,IEnumerable<Expression>,MemberInfo[])\n- uid: System.Linq.Expressions.NewExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: NewExpression\n  nameWithType: NewExpression\n  fullName: System.Linq.Expressions.NewExpression\n- uid: System.Reflection.ConstructorInfo\n  parent: System.Reflection\n  isExternal: false\n  name: ConstructorInfo\n  nameWithType: ConstructorInfo\n  fullName: System.Reflection.ConstructorInfo\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Expression>\n  nameWithType: IEnumerable<Expression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>\n- uid: System.Reflection.MemberInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MemberInfo\n  nameWithType: MemberInfo\n  fullName: System.Reflection.MemberInfo[]\n- uid: System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: NewArrayBounds(Type,IEnumerable<Expression>)\n  nameWithType: Expression.NewArrayBounds(Type,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.NewArrayBounds(Type,IEnumerable<Expression>)\n- uid: System.Linq.Expressions.NewArrayExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: NewArrayExpression\n  nameWithType: NewArrayExpression\n  fullName: System.Linq.Expressions.NewArrayExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Expression>\n  nameWithType: IEnumerable<Expression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>\n- uid: System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: NewArrayBounds(Type,Expression[])\n  nameWithType: Expression.NewArrayBounds(Type,Expression[])\n  fullName: System.Linq.Expressions.Expression.NewArrayBounds(Type,Expression[])\n- uid: System.Linq.Expressions.NewArrayExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: NewArrayExpression\n  nameWithType: NewArrayExpression\n  fullName: System.Linq.Expressions.NewArrayExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression[]\n- uid: System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: NewArrayInit(Type,IEnumerable<Expression>)\n  nameWithType: Expression.NewArrayInit(Type,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.NewArrayInit(Type,IEnumerable<Expression>)\n- uid: System.Linq.Expressions.NewArrayExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: NewArrayExpression\n  nameWithType: NewArrayExpression\n  fullName: System.Linq.Expressions.NewArrayExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Expression>\n  nameWithType: IEnumerable<Expression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>\n- uid: System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: NewArrayInit(Type,Expression[])\n  nameWithType: Expression.NewArrayInit(Type,Expression[])\n  fullName: System.Linq.Expressions.Expression.NewArrayInit(Type,Expression[])\n- uid: System.Linq.Expressions.NewArrayExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: NewArrayExpression\n  nameWithType: NewArrayExpression\n  fullName: System.Linq.Expressions.NewArrayExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression[]\n- uid: System.Linq.Expressions.Expression.NodeType\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: NodeType\n  nameWithType: Expression.NodeType\n  fullName: System.Linq.Expressions.Expression.NodeType\n- uid: System.Linq.Expressions.ExpressionType\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ExpressionType\n  nameWithType: ExpressionType\n  fullName: System.Linq.Expressions.ExpressionType\n- uid: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Not(Expression)\n  nameWithType: Expression.Not(Expression)\n  fullName: System.Linq.Expressions.Expression.Not(Expression)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Not(Expression,MethodInfo)\n  nameWithType: Expression.Not(Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Not(Expression,MethodInfo)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: NotEqual(Expression,Expression)\n  nameWithType: Expression.NotEqual(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.NotEqual(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: NotEqual(Expression,Expression,Boolean,MethodInfo)\n  nameWithType: Expression.NotEqual(Expression,Expression,Boolean,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.NotEqual(Expression,Expression,Boolean,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: OnesComplement(Expression)\n  nameWithType: Expression.OnesComplement(Expression)\n  fullName: System.Linq.Expressions.Expression.OnesComplement(Expression)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: OnesComplement(Expression,MethodInfo)\n  nameWithType: Expression.OnesComplement(Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.OnesComplement(Expression,MethodInfo)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Or(Expression,Expression)\n  nameWithType: Expression.Or(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Or(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Or(Expression,Expression,MethodInfo)\n  nameWithType: Expression.Or(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Or(Expression,Expression,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: OrAssign(Expression,Expression)\n  nameWithType: Expression.OrAssign(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.OrAssign(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: OrAssign(Expression,Expression,MethodInfo)\n  nameWithType: Expression.OrAssign(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.OrAssign(Expression,Expression,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: OrAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  nameWithType: Expression.OrAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.OrAssign(Expression,Expression,MethodInfo,LambdaExpression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.LambdaExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LambdaExpression\n  nameWithType: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n- uid: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: OrElse(Expression,Expression)\n  nameWithType: Expression.OrElse(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.OrElse(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: OrElse(Expression,Expression,MethodInfo)\n  nameWithType: Expression.OrElse(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.OrElse(Expression,Expression,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.Parameter(System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Parameter(Type)\n  nameWithType: Expression.Parameter(Type)\n  fullName: System.Linq.Expressions.Expression.Parameter(Type)\n- uid: System.Linq.Expressions.ParameterExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ParameterExpression\n  nameWithType: ParameterExpression\n  fullName: System.Linq.Expressions.ParameterExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression.Parameter(System.Type,System.String)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Parameter(Type,String)\n  nameWithType: Expression.Parameter(Type,String)\n  fullName: System.Linq.Expressions.Expression.Parameter(Type,String)\n- uid: System.Linq.Expressions.ParameterExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ParameterExpression\n  nameWithType: ParameterExpression\n  fullName: System.Linq.Expressions.ParameterExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PostDecrementAssign(Expression)\n  nameWithType: Expression.PostDecrementAssign(Expression)\n  fullName: System.Linq.Expressions.Expression.PostDecrementAssign(Expression)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PostDecrementAssign(Expression,MethodInfo)\n  nameWithType: Expression.PostDecrementAssign(Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.PostDecrementAssign(Expression,MethodInfo)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PostIncrementAssign(Expression)\n  nameWithType: Expression.PostIncrementAssign(Expression)\n  fullName: System.Linq.Expressions.Expression.PostIncrementAssign(Expression)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PostIncrementAssign(Expression,MethodInfo)\n  nameWithType: Expression.PostIncrementAssign(Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.PostIncrementAssign(Expression,MethodInfo)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Power(Expression,Expression)\n  nameWithType: Expression.Power(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Power(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Power(Expression,Expression,MethodInfo)\n  nameWithType: Expression.Power(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Power(Expression,Expression,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PowerAssign(Expression,Expression)\n  nameWithType: Expression.PowerAssign(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.PowerAssign(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PowerAssign(Expression,Expression,MethodInfo)\n  nameWithType: Expression.PowerAssign(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.PowerAssign(Expression,Expression,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PowerAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  nameWithType: Expression.PowerAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.PowerAssign(Expression,Expression,MethodInfo,LambdaExpression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.LambdaExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LambdaExpression\n  nameWithType: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n- uid: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PreDecrementAssign(Expression)\n  nameWithType: Expression.PreDecrementAssign(Expression)\n  fullName: System.Linq.Expressions.Expression.PreDecrementAssign(Expression)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PreDecrementAssign(Expression,MethodInfo)\n  nameWithType: Expression.PreDecrementAssign(Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.PreDecrementAssign(Expression,MethodInfo)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PreIncrementAssign(Expression)\n  nameWithType: Expression.PreIncrementAssign(Expression)\n  fullName: System.Linq.Expressions.Expression.PreIncrementAssign(Expression)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PreIncrementAssign(Expression,MethodInfo)\n  nameWithType: Expression.PreIncrementAssign(Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.PreIncrementAssign(Expression,MethodInfo)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Property(Expression,MethodInfo)\n  nameWithType: Expression.Property(Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Property(Expression,MethodInfo)\n- uid: System.Linq.Expressions.MemberExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberExpression\n  nameWithType: MemberExpression\n  fullName: System.Linq.Expressions.MemberExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Property(Expression,PropertyInfo)\n  nameWithType: Expression.Property(Expression,PropertyInfo)\n  fullName: System.Linq.Expressions.Expression.Property(Expression,PropertyInfo)\n- uid: System.Linq.Expressions.MemberExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberExpression\n  nameWithType: MemberExpression\n  fullName: System.Linq.Expressions.MemberExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.PropertyInfo\n  parent: System.Reflection\n  isExternal: false\n  name: PropertyInfo\n  nameWithType: PropertyInfo\n  fullName: System.Reflection.PropertyInfo\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Property(Expression,String)\n  nameWithType: Expression.Property(Expression,String)\n  fullName: System.Linq.Expressions.Expression.Property(Expression,String)\n- uid: System.Linq.Expressions.MemberExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberExpression\n  nameWithType: MemberExpression\n  fullName: System.Linq.Expressions.MemberExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Property(Expression,PropertyInfo,IEnumerable<Expression>)\n  nameWithType: Expression.Property(Expression,PropertyInfo,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.Property(Expression,PropertyInfo,IEnumerable<Expression>)\n- uid: System.Linq.Expressions.IndexExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: IndexExpression\n  nameWithType: IndexExpression\n  fullName: System.Linq.Expressions.IndexExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.PropertyInfo\n  parent: System.Reflection\n  isExternal: false\n  name: PropertyInfo\n  nameWithType: PropertyInfo\n  fullName: System.Reflection.PropertyInfo\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Expression>\n  nameWithType: IEnumerable<Expression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Property(Expression,PropertyInfo,Expression[])\n  nameWithType: Expression.Property(Expression,PropertyInfo,Expression[])\n  fullName: System.Linq.Expressions.Expression.Property(Expression,PropertyInfo,Expression[])\n- uid: System.Linq.Expressions.IndexExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: IndexExpression\n  nameWithType: IndexExpression\n  fullName: System.Linq.Expressions.IndexExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.PropertyInfo\n  parent: System.Reflection\n  isExternal: false\n  name: PropertyInfo\n  nameWithType: PropertyInfo\n  fullName: System.Reflection.PropertyInfo\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression[]\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Property(Expression,String,Expression[])\n  nameWithType: Expression.Property(Expression,String,Expression[])\n  fullName: System.Linq.Expressions.Expression.Property(Expression,String,Expression[])\n- uid: System.Linq.Expressions.IndexExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: IndexExpression\n  nameWithType: IndexExpression\n  fullName: System.Linq.Expressions.IndexExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression[]\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Property(Expression,Type,String)\n  nameWithType: Expression.Property(Expression,Type,String)\n  fullName: System.Linq.Expressions.Expression.Property(Expression,Type,String)\n- uid: System.Linq.Expressions.MemberExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberExpression\n  nameWithType: MemberExpression\n  fullName: System.Linq.Expressions.MemberExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PropertyOrField(Expression,String)\n  nameWithType: Expression.PropertyOrField(Expression,String)\n  fullName: System.Linq.Expressions.Expression.PropertyOrField(Expression,String)\n- uid: System.Linq.Expressions.MemberExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberExpression\n  nameWithType: MemberExpression\n  fullName: System.Linq.Expressions.MemberExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Quote(Expression)\n  nameWithType: Expression.Quote(Expression)\n  fullName: System.Linq.Expressions.Expression.Quote(Expression)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Reduce\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Reduce()\n  nameWithType: Expression.Reduce()\n  fullName: System.Linq.Expressions.Expression.Reduce()\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.ReduceAndCheck\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ReduceAndCheck()\n  nameWithType: Expression.ReduceAndCheck()\n  fullName: System.Linq.Expressions.Expression.ReduceAndCheck()\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.ReduceExtensions\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ReduceExtensions()\n  nameWithType: Expression.ReduceExtensions()\n  fullName: System.Linq.Expressions.Expression.ReduceExtensions()\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ReferenceEqual(Expression,Expression)\n  nameWithType: Expression.ReferenceEqual(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.ReferenceEqual(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ReferenceNotEqual(Expression,Expression)\n  nameWithType: Expression.ReferenceNotEqual(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.ReferenceNotEqual(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Rethrow\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Rethrow()\n  nameWithType: Expression.Rethrow()\n  fullName: System.Linq.Expressions.Expression.Rethrow()\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression.Rethrow(System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Rethrow(Type)\n  nameWithType: Expression.Rethrow(Type)\n  fullName: System.Linq.Expressions.Expression.Rethrow(Type)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Return(LabelTarget)\n  nameWithType: Expression.Return(LabelTarget)\n  fullName: System.Linq.Expressions.Expression.Return(LabelTarget)\n- uid: System.Linq.Expressions.GotoExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: GotoExpression\n  nameWithType: GotoExpression\n  fullName: System.Linq.Expressions.GotoExpression\n- uid: System.Linq.Expressions.LabelTarget\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelTarget\n  nameWithType: LabelTarget\n  fullName: System.Linq.Expressions.LabelTarget\n- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Return(LabelTarget,Expression)\n  nameWithType: Expression.Return(LabelTarget,Expression)\n  fullName: System.Linq.Expressions.Expression.Return(LabelTarget,Expression)\n- uid: System.Linq.Expressions.GotoExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: GotoExpression\n  nameWithType: GotoExpression\n  fullName: System.Linq.Expressions.GotoExpression\n- uid: System.Linq.Expressions.LabelTarget\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelTarget\n  nameWithType: LabelTarget\n  fullName: System.Linq.Expressions.LabelTarget\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Return(LabelTarget,Type)\n  nameWithType: Expression.Return(LabelTarget,Type)\n  fullName: System.Linq.Expressions.Expression.Return(LabelTarget,Type)\n- uid: System.Linq.Expressions.GotoExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: GotoExpression\n  nameWithType: GotoExpression\n  fullName: System.Linq.Expressions.GotoExpression\n- uid: System.Linq.Expressions.LabelTarget\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelTarget\n  nameWithType: LabelTarget\n  fullName: System.Linq.Expressions.LabelTarget\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Return(LabelTarget,Expression,Type)\n  nameWithType: Expression.Return(LabelTarget,Expression,Type)\n  fullName: System.Linq.Expressions.Expression.Return(LabelTarget,Expression,Type)\n- uid: System.Linq.Expressions.GotoExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: GotoExpression\n  nameWithType: GotoExpression\n  fullName: System.Linq.Expressions.GotoExpression\n- uid: System.Linq.Expressions.LabelTarget\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelTarget\n  nameWithType: LabelTarget\n  fullName: System.Linq.Expressions.LabelTarget\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: RightShift(Expression,Expression)\n  nameWithType: Expression.RightShift(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.RightShift(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: RightShift(Expression,Expression,MethodInfo)\n  nameWithType: Expression.RightShift(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.RightShift(Expression,Expression,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: RightShiftAssign(Expression,Expression)\n  nameWithType: Expression.RightShiftAssign(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.RightShiftAssign(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: RightShiftAssign(Expression,Expression,MethodInfo)\n  nameWithType: Expression.RightShiftAssign(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.RightShiftAssign(Expression,Expression,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: RightShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  nameWithType: Expression.RightShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.RightShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.LambdaExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LambdaExpression\n  nameWithType: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n- uid: System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: RuntimeVariables(IEnumerable<ParameterExpression>)\n  nameWithType: Expression.RuntimeVariables(IEnumerable<ParameterExpression>)\n  fullName: System.Linq.Expressions.Expression.RuntimeVariables(IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.RuntimeVariablesExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: RuntimeVariablesExpression\n  nameWithType: RuntimeVariablesExpression\n  fullName: System.Linq.Expressions.RuntimeVariablesExpression\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<ParameterExpression>\n  nameWithType: IEnumerable<ParameterExpression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>\n- uid: System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: RuntimeVariables(ParameterExpression[])\n  nameWithType: Expression.RuntimeVariables(ParameterExpression[])\n  fullName: System.Linq.Expressions.Expression.RuntimeVariables(ParameterExpression[])\n- uid: System.Linq.Expressions.RuntimeVariablesExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: RuntimeVariablesExpression\n  nameWithType: RuntimeVariablesExpression\n  fullName: System.Linq.Expressions.RuntimeVariablesExpression\n- uid: System.Linq.Expressions.ParameterExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ParameterExpression\n  nameWithType: ParameterExpression\n  fullName: System.Linq.Expressions.ParameterExpression[]\n- uid: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Subtract(Expression,Expression)\n  nameWithType: Expression.Subtract(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.Subtract(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Subtract(Expression,Expression,MethodInfo)\n  nameWithType: Expression.Subtract(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.Subtract(Expression,Expression,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SubtractAssign(Expression,Expression)\n  nameWithType: Expression.SubtractAssign(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.SubtractAssign(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SubtractAssign(Expression,Expression,MethodInfo)\n  nameWithType: Expression.SubtractAssign(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.SubtractAssign(Expression,Expression,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SubtractAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  nameWithType: Expression.SubtractAssign(Expression,Expression,MethodInfo,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.SubtractAssign(Expression,Expression,MethodInfo,LambdaExpression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.LambdaExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LambdaExpression\n  nameWithType: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SubtractAssignChecked(Expression,Expression)\n  nameWithType: Expression.SubtractAssignChecked(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.SubtractAssignChecked(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SubtractAssignChecked(Expression,Expression,MethodInfo)\n  nameWithType: Expression.SubtractAssignChecked(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.SubtractAssignChecked(Expression,Expression,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SubtractAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)\n  nameWithType: Expression.SubtractAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)\n  fullName: System.Linq.Expressions.Expression.SubtractAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.LambdaExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LambdaExpression\n  nameWithType: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n- uid: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SubtractChecked(Expression,Expression)\n  nameWithType: Expression.SubtractChecked(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.SubtractChecked(Expression,Expression)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SubtractChecked(Expression,Expression,MethodInfo)\n  nameWithType: Expression.SubtractChecked(Expression,Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.SubtractChecked(Expression,Expression,MethodInfo)\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  nameWithType: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Switch(Expression,SwitchCase[])\n  nameWithType: Expression.Switch(Expression,SwitchCase[])\n  fullName: System.Linq.Expressions.Expression.Switch(Expression,SwitchCase[])\n- uid: System.Linq.Expressions.SwitchExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: SwitchExpression\n  nameWithType: SwitchExpression\n  fullName: System.Linq.Expressions.SwitchExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.SwitchCase\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: SwitchCase\n  nameWithType: SwitchCase\n  fullName: System.Linq.Expressions.SwitchCase[]\n- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Switch(Expression,Expression,SwitchCase[])\n  nameWithType: Expression.Switch(Expression,Expression,SwitchCase[])\n  fullName: System.Linq.Expressions.Expression.Switch(Expression,Expression,SwitchCase[])\n- uid: System.Linq.Expressions.SwitchExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: SwitchExpression\n  nameWithType: SwitchExpression\n  fullName: System.Linq.Expressions.SwitchExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.SwitchCase\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: SwitchCase\n  nameWithType: SwitchCase\n  fullName: System.Linq.Expressions.SwitchCase[]\n- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Switch(Expression,Expression,MethodInfo,IEnumerable<SwitchCase>)\n  nameWithType: Expression.Switch(Expression,Expression,MethodInfo,IEnumerable<SwitchCase>)\n  fullName: System.Linq.Expressions.Expression.Switch(Expression,Expression,MethodInfo,IEnumerable<SwitchCase>)\n- uid: System.Linq.Expressions.SwitchExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: SwitchExpression\n  nameWithType: SwitchExpression\n  fullName: System.Linq.Expressions.SwitchExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<SwitchCase>\n  nameWithType: IEnumerable<SwitchCase>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>\n- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Switch(Expression,Expression,MethodInfo,SwitchCase[])\n  nameWithType: Expression.Switch(Expression,Expression,MethodInfo,SwitchCase[])\n  fullName: System.Linq.Expressions.Expression.Switch(Expression,Expression,MethodInfo,SwitchCase[])\n- uid: System.Linq.Expressions.SwitchExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: SwitchExpression\n  nameWithType: SwitchExpression\n  fullName: System.Linq.Expressions.SwitchExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.SwitchCase\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: SwitchCase\n  nameWithType: SwitchCase\n  fullName: System.Linq.Expressions.SwitchCase[]\n- uid: System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Switch(Type,Expression,Expression,MethodInfo,IEnumerable<SwitchCase>)\n  nameWithType: Expression.Switch(Type,Expression,Expression,MethodInfo,IEnumerable<SwitchCase>)\n  fullName: System.Linq.Expressions.Expression.Switch(Type,Expression,Expression,MethodInfo,IEnumerable<SwitchCase>)\n- uid: System.Linq.Expressions.SwitchExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: SwitchExpression\n  nameWithType: SwitchExpression\n  fullName: System.Linq.Expressions.SwitchExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<SwitchCase>\n  nameWithType: IEnumerable<SwitchCase>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>\n- uid: System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Switch(Type,Expression,Expression,MethodInfo,SwitchCase[])\n  nameWithType: Expression.Switch(Type,Expression,Expression,MethodInfo,SwitchCase[])\n  fullName: System.Linq.Expressions.Expression.Switch(Type,Expression,Expression,MethodInfo,SwitchCase[])\n- uid: System.Linq.Expressions.SwitchExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: SwitchExpression\n  nameWithType: SwitchExpression\n  fullName: System.Linq.Expressions.SwitchExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.SwitchCase\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: SwitchCase\n  nameWithType: SwitchCase\n  fullName: System.Linq.Expressions.SwitchCase[]\n- uid: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SwitchCase(Expression,IEnumerable<Expression>)\n  nameWithType: Expression.SwitchCase(Expression,IEnumerable<Expression>)\n  fullName: System.Linq.Expressions.Expression.SwitchCase(Expression,IEnumerable<Expression>)\n- uid: System.Linq.Expressions.SwitchCase\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: SwitchCase\n  nameWithType: SwitchCase\n  fullName: System.Linq.Expressions.SwitchCase\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Expression>\n  nameWithType: IEnumerable<Expression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>\n- uid: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SwitchCase(Expression,Expression[])\n  nameWithType: Expression.SwitchCase(Expression,Expression[])\n  fullName: System.Linq.Expressions.Expression.SwitchCase(Expression,Expression[])\n- uid: System.Linq.Expressions.SwitchCase\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: SwitchCase\n  nameWithType: SwitchCase\n  fullName: System.Linq.Expressions.SwitchCase\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression[]\n- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SymbolDocument(String)\n  nameWithType: Expression.SymbolDocument(String)\n  fullName: System.Linq.Expressions.Expression.SymbolDocument(String)\n- uid: System.Linq.Expressions.SymbolDocumentInfo\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: SymbolDocumentInfo\n  nameWithType: SymbolDocumentInfo\n  fullName: System.Linq.Expressions.SymbolDocumentInfo\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SymbolDocument(String,Guid)\n  nameWithType: Expression.SymbolDocument(String,Guid)\n  fullName: System.Linq.Expressions.Expression.SymbolDocument(String,Guid)\n- uid: System.Linq.Expressions.SymbolDocumentInfo\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: SymbolDocumentInfo\n  nameWithType: SymbolDocumentInfo\n  fullName: System.Linq.Expressions.SymbolDocumentInfo\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SymbolDocument(String,Guid,Guid)\n  nameWithType: Expression.SymbolDocument(String,Guid,Guid)\n  fullName: System.Linq.Expressions.Expression.SymbolDocument(String,Guid,Guid)\n- uid: System.Linq.Expressions.SymbolDocumentInfo\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: SymbolDocumentInfo\n  nameWithType: SymbolDocumentInfo\n  fullName: System.Linq.Expressions.SymbolDocumentInfo\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SymbolDocument(String,Guid,Guid,Guid)\n  nameWithType: Expression.SymbolDocument(String,Guid,Guid,Guid)\n  fullName: System.Linq.Expressions.Expression.SymbolDocument(String,Guid,Guid,Guid)\n- uid: System.Linq.Expressions.SymbolDocumentInfo\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: SymbolDocumentInfo\n  nameWithType: SymbolDocumentInfo\n  fullName: System.Linq.Expressions.SymbolDocumentInfo\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Throw(Expression)\n  nameWithType: Expression.Throw(Expression)\n  fullName: System.Linq.Expressions.Expression.Throw(Expression)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Throw(Expression,Type)\n  nameWithType: Expression.Throw(Expression,Type)\n  fullName: System.Linq.Expressions.Expression.Throw(Expression,Type)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression.ToString\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ToString()\n  nameWithType: Expression.ToString()\n  fullName: System.Linq.Expressions.Expression.ToString()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TryCatch(Expression,CatchBlock[])\n  nameWithType: Expression.TryCatch(Expression,CatchBlock[])\n  fullName: System.Linq.Expressions.Expression.TryCatch(Expression,CatchBlock[])\n- uid: System.Linq.Expressions.TryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: TryExpression\n  nameWithType: TryExpression\n  fullName: System.Linq.Expressions.TryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.CatchBlock\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: CatchBlock\n  nameWithType: CatchBlock\n  fullName: System.Linq.Expressions.CatchBlock[]\n- uid: System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TryCatchFinally(Expression,Expression,CatchBlock[])\n  nameWithType: Expression.TryCatchFinally(Expression,Expression,CatchBlock[])\n  fullName: System.Linq.Expressions.Expression.TryCatchFinally(Expression,Expression,CatchBlock[])\n- uid: System.Linq.Expressions.TryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: TryExpression\n  nameWithType: TryExpression\n  fullName: System.Linq.Expressions.TryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.CatchBlock\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: CatchBlock\n  nameWithType: CatchBlock\n  fullName: System.Linq.Expressions.CatchBlock[]\n- uid: System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TryFault(Expression,Expression)\n  nameWithType: Expression.TryFault(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.TryFault(Expression,Expression)\n- uid: System.Linq.Expressions.TryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: TryExpression\n  nameWithType: TryExpression\n  fullName: System.Linq.Expressions.TryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TryFinally(Expression,Expression)\n  nameWithType: Expression.TryFinally(Expression,Expression)\n  fullName: System.Linq.Expressions.Expression.TryFinally(Expression,Expression)\n- uid: System.Linq.Expressions.TryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: TryExpression\n  nameWithType: TryExpression\n  fullName: System.Linq.Expressions.TryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TryGetActionType(Type[],Type)\n  nameWithType: Expression.TryGetActionType(Type[],Type)\n  fullName: System.Linq.Expressions.Expression.TryGetActionType(Type[],Type)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type[]\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TryGetFuncType(Type[],Type)\n  nameWithType: Expression.TryGetFuncType(Type[],Type)\n  fullName: System.Linq.Expressions.Expression.TryGetFuncType(Type[],Type)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type[]\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression.Type\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Type\n  nameWithType: Expression.Type\n  fullName: System.Linq.Expressions.Expression.Type\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TypeAs(Expression,Type)\n  nameWithType: Expression.TypeAs(Expression,Type)\n  fullName: System.Linq.Expressions.Expression.TypeAs(Expression,Type)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TypeEqual(Expression,Type)\n  nameWithType: Expression.TypeEqual(Expression,Type)\n  fullName: System.Linq.Expressions.Expression.TypeEqual(Expression,Type)\n- uid: System.Linq.Expressions.TypeBinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: TypeBinaryExpression\n  nameWithType: TypeBinaryExpression\n  fullName: System.Linq.Expressions.TypeBinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TypeIs(Expression,Type)\n  nameWithType: Expression.TypeIs(Expression,Type)\n  fullName: System.Linq.Expressions.Expression.TypeIs(Expression,Type)\n- uid: System.Linq.Expressions.TypeBinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: TypeBinaryExpression\n  nameWithType: TypeBinaryExpression\n  fullName: System.Linq.Expressions.TypeBinaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: UnaryPlus(Expression)\n  nameWithType: Expression.UnaryPlus(Expression)\n  fullName: System.Linq.Expressions.Expression.UnaryPlus(Expression)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: UnaryPlus(Expression,MethodInfo)\n  nameWithType: Expression.UnaryPlus(Expression,MethodInfo)\n  fullName: System.Linq.Expressions.Expression.UnaryPlus(Expression,MethodInfo)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Unbox(Expression,Type)\n  nameWithType: Expression.Unbox(Expression,Type)\n  fullName: System.Linq.Expressions.Expression.Unbox(Expression,Type)\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  nameWithType: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression.Variable(System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Variable(Type)\n  nameWithType: Expression.Variable(Type)\n  fullName: System.Linq.Expressions.Expression.Variable(Type)\n- uid: System.Linq.Expressions.ParameterExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ParameterExpression\n  nameWithType: ParameterExpression\n  fullName: System.Linq.Expressions.ParameterExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.Expression.Variable(System.Type,System.String)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Variable(Type,String)\n  nameWithType: Expression.Variable(Type,String)\n  fullName: System.Linq.Expressions.Expression.Variable(Type,String)\n- uid: System.Linq.Expressions.ParameterExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ParameterExpression\n  nameWithType: ParameterExpression\n  fullName: System.Linq.Expressions.ParameterExpression\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: VisitChildren(ExpressionVisitor)\n  nameWithType: Expression.VisitChildren(ExpressionVisitor)\n  fullName: System.Linq.Expressions.Expression.VisitChildren(ExpressionVisitor)\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.ExpressionVisitor\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ExpressionVisitor\n  nameWithType: ExpressionVisitor\n  fullName: System.Linq.Expressions.ExpressionVisitor\n- uid: System.Linq.Expressions.Expression.Add*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.AddAssign*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.AddAssignChecked*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.AddChecked*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.And*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.AndAlso*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.AndAssign*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.ArrayAccess*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.ArrayIndex*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Bind*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Block*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Break*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Call*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Catch*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Coalesce*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Condition*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Constant*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Continue*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Convert*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.ConvertChecked*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Decrement*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Divide*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.DivideAssign*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Dynamic*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.ElementInit*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Equal*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.ExclusiveOr*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Field*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Goto*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.GreaterThan*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Increment*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Invoke*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.IsFalse*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.IsTrue*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Label*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Lambda*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Lambda<TDelegate>*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.LeftShift*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.LeftShiftAssign*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.LessThan*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.LessThanOrEqual*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.ListBind*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.ListInit*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Loop*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.MakeBinary*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.MakeDynamic*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.MakeUnary*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.MemberBind*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.MemberInit*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Modulo*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.ModuloAssign*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Multiply*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.MultiplyAssign*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.MultiplyChecked*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Negate*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.NegateChecked*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.New*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.NewArrayBounds*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.NewArrayInit*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Not*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.NotEqual*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.OnesComplement*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Or*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.OrAssign*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.OrElse*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Parameter*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.PostDecrementAssign*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.PostIncrementAssign*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Power*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.PowerAssign*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.PreDecrementAssign*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.PreIncrementAssign*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Property*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Rethrow*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Return*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.RightShift*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.RightShiftAssign*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.RuntimeVariables*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Subtract*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.SubtractAssign*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.SubtractAssignChecked*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.SubtractChecked*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Switch*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.SwitchCase*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.SymbolDocument*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Throw*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.UnaryPlus*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n- uid: System.Linq.Expressions.Expression.Variable*\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  nameWithType: Expression.\n"}