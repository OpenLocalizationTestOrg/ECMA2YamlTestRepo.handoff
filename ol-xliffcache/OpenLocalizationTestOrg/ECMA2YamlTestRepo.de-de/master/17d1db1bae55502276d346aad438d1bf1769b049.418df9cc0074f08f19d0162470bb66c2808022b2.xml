{"nodes":[{"pos":[925,941],"content":"LambdaExpression","needQuote":true,"needEscape":true,"nodes":[{"content":"LambdaExpression","pos":[0,16]}]},{"pos":[44059,44063],"content":"Body","needQuote":true,"needEscape":true,"nodes":[{"content":"Body","pos":[0,4]}]},{"pos":[44401,44435],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[44634,44643],"content":"Compile()","needQuote":true,"needEscape":true,"nodes":[{"content":"Compile()","pos":[0,9]}]},{"pos":[44961,44995],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[45360,45387],"content":"Compile(DebugInfoGenerator)","needQuote":true,"needEscape":true,"nodes":[{"content":"Compile(DebugInfoGenerator)","pos":[0,27]}]},{"pos":[45859,45893],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[45953,45987],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[46340,46370],"content":"CompileToMethod(MethodBuilder)","needQuote":true,"needEscape":true,"nodes":[{"content":"CompileToMethod(MethodBuilder)","pos":[0,30]}]},{"pos":[46800,46834],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[47297,47346],"content":"CompileToMethod(MethodBuilder,DebugInfoGenerator)","needQuote":true,"needEscape":true,"nodes":[{"content":"CompileToMethod(MethodBuilder,DebugInfoGenerator)","pos":[0,49]}]},{"pos":[47885,47919],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[48031,48065],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[48328,48332],"content":"Name","needQuote":true,"needEscape":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[48621,48655],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[48856,48864],"content":"NodeType","needQuote":true,"needEscape":true,"nodes":[{"content":"NodeType","pos":[0,8]}]},{"pos":[49238,49272],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[49477,49487],"content":"Parameters","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[49963,49997],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[50202,50212],"content":"ReturnType","needQuote":true,"needEscape":true,"nodes":[{"content":"ReturnType","pos":[0,10]}]},{"pos":[50515,50549],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[50750,50758],"content":"TailCall","needQuote":true,"needEscape":true,"nodes":[{"content":"TailCall","pos":[0,8]}]},{"pos":[51058,51092],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[51285,51289],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[51590,51624],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[51756,51790],"content":"System.Linq.Expressions.Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Linq.Expressions.Expression","pos":[0,34]}]},{"pos":[51923,51927],"content":"Body","needQuote":true,"needEscape":true,"nodes":[{"content":"Body","pos":[0,4]}]},{"pos":[52128,52138],"content":"Expression","needQuote":true,"needEscape":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[52348,52357],"content":"Compile()","needQuote":true,"needEscape":true,"nodes":[{"content":"Compile()","pos":[0,9]}]},{"pos":[52532,52540],"content":"Delegate","needQuote":true,"needEscape":true,"nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[52781,52808],"content":"Compile(DebugInfoGenerator)","needQuote":true,"needEscape":true,"nodes":[{"content":"Compile(DebugInfoGenerator)","pos":[0,27]}]},{"pos":[53019,53027],"content":"Delegate","needQuote":true,"needEscape":true,"nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[53209,53227],"content":"DebugInfoGenerator","needQuote":true,"needEscape":true,"nodes":[{"content":"DebugInfoGenerator","pos":[0,18]}]},{"pos":[53507,53537],"content":"CompileToMethod(MethodBuilder)","needQuote":true,"needEscape":true,"nodes":[{"content":"CompileToMethod(MethodBuilder)","pos":[0,30]}]},{"pos":[53791,53804],"content":"MethodBuilder","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodBuilder","pos":[0,13]}]},{"pos":[54116,54165],"content":"CompileToMethod(MethodBuilder,DebugInfoGenerator)","needQuote":true,"needEscape":true,"nodes":[{"content":"CompileToMethod(MethodBuilder,DebugInfoGenerator)","pos":[0,49]}]},{"pos":[54457,54470],"content":"MethodBuilder","needQuote":true,"needEscape":true,"nodes":[{"content":"MethodBuilder","pos":[0,13]}]},{"pos":[54678,54696],"content":"DebugInfoGenerator","needQuote":true,"needEscape":true,"nodes":[{"content":"DebugInfoGenerator","pos":[0,18]}]},{"pos":[54927,54931],"content":"Name","needQuote":true,"needEscape":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[55094,55100],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[55286,55294],"content":"NodeType","needQuote":true,"needEscape":true,"nodes":[{"content":"NodeType","pos":[0,8]}]},{"pos":[55507,55521],"content":"ExpressionType","needQuote":true,"needEscape":true,"nodes":[{"content":"ExpressionType","pos":[0,14]}]},{"pos":[55742,55752],"content":"Parameters","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[56032,56071],"content":"ReadOnlyCollection<ph id=\"ph1\">&lt;ParameterExpression&gt;</ph>","needQuote":true,"needEscape":true,"source":"ReadOnlyCollection<ParameterExpression>"},{"pos":[56373,56383],"content":"ReturnType","needQuote":true,"needEscape":true,"nodes":[{"content":"ReturnType","pos":[0,10]}]},{"pos":[56556,56560],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[56742,56750],"content":"TailCall","needQuote":true,"needEscape":true,"nodes":[{"content":"TailCall","pos":[0,8]}]},{"pos":[56922,56929],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[57113,57117],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[57278,57282],"content":"Type","needQuote":true,"needEscape":true,"nodes":[{"content":"Type","pos":[0,4]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Linq.Expressions.LambdaExpression\n  id: LambdaExpression\n  children:\n  - System.Linq.Expressions.LambdaExpression.Body\n  - System.Linq.Expressions.LambdaExpression.Compile\n  - System.Linq.Expressions.LambdaExpression.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)\n  - System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder)\n  - System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder,System.Runtime.CompilerServices.DebugInfoGenerator)\n  - System.Linq.Expressions.LambdaExpression.Name\n  - System.Linq.Expressions.LambdaExpression.NodeType\n  - System.Linq.Expressions.LambdaExpression.Parameters\n  - System.Linq.Expressions.LambdaExpression.ReturnType\n  - System.Linq.Expressions.LambdaExpression.TailCall\n  - System.Linq.Expressions.LambdaExpression.Type\n  langs:\n  - csharp\n  name: LambdaExpression\n  nameWithType: LambdaExpression\n  fullName: System.Linq.Expressions.LambdaExpression\n  type: Class\n  syntax:\n    content: >-\n      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Linq.Expressions.Expression/LambdaExpressionProxy))]\n\n      public abstract class LambdaExpression : System.Linq.Expressions.Expression\n  inheritance:\n  - System.Object\n  - System.Linq.Expressions.Expression\n  implements: []\n  inheritedMembers:\n  - System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)\n  - System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.CanReduce\n  - System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)\n  - System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Constant(System.Object)\n  - System.Linq.Expressions.Expression.Constant(System.Object,System.Type)\n  - System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)\n  - System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Default(System.Type)\n  - System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Empty\n  - System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)\n  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)\n  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)\n  - System.Linq.Expressions.Expression.GetActionType(System.Type[])\n  - System.Linq.Expressions.Expression.GetDelegateType(System.Type[])\n  - System.Linq.Expressions.Expression.GetFuncType(System.Type[])\n  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)\n  - System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Label\n  - System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Label(System.String)\n  - System.Linq.Expressions.Expression.Label(System.Type)\n  - System.Linq.Expressions.Expression.Label(System.Type,System.String)\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])\n  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)\n  - System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})\n  - System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])\n  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])\n  - System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  - System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])\n  - System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)\n  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})\n  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])\n  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.New(System.Type)\n  - System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Parameter(System.Type)\n  - System.Linq.Expressions.Expression.Parameter(System.Type,System.String)\n  - System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)\n  - System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)\n  - System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Reduce\n  - System.Linq.Expressions.Expression.ReduceAndCheck\n  - System.Linq.Expressions.Expression.ReduceExtensions\n  - System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Rethrow\n  - System.Linq.Expressions.Expression.Rethrow(System.Type)\n  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)\n  - System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  - System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  - System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  - System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.SymbolDocument(System.String)\n  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)\n  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)\n  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)\n  - System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.ToString\n  - System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  - System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  - System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)\n  - System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)\n  - System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Variable(System.Type)\n  - System.Linq.Expressions.Expression.Variable(System.Type,System.String)\n  - System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.LambdaExpression.Body\n  id: Body\n  parent: System.Linq.Expressions.LambdaExpression\n  langs:\n  - csharp\n  name: Body\n  nameWithType: LambdaExpression.Body\n  fullName: System.Linq.Expressions.LambdaExpression.Body\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public System.Linq.Expressions.Expression Body { get; }\n    return:\n      type: System.Linq.Expressions.Expression\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.LambdaExpression.Compile\n  id: Compile\n  parent: System.Linq.Expressions.LambdaExpression\n  langs:\n  - csharp\n  name: Compile()\n  nameWithType: LambdaExpression.Compile()\n  fullName: System.Linq.Expressions.LambdaExpression.Compile()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public Delegate Compile ();\n    parameters: []\n    return:\n      type: System.Delegate\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.LambdaExpression.Compile*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.LambdaExpression.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)\n  id: Compile(System.Runtime.CompilerServices.DebugInfoGenerator)\n  parent: System.Linq.Expressions.LambdaExpression\n  langs:\n  - csharp\n  name: Compile(DebugInfoGenerator)\n  nameWithType: LambdaExpression.Compile(DebugInfoGenerator)\n  fullName: System.Linq.Expressions.LambdaExpression.Compile(DebugInfoGenerator)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public Delegate Compile (System.Runtime.CompilerServices.DebugInfoGenerator debugInfoGenerator);\n    parameters:\n    - id: debugInfoGenerator\n      type: System.Runtime.CompilerServices.DebugInfoGenerator\n      description: Parameter description to be filled\n    return:\n      type: System.Delegate\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.LambdaExpression.Compile*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder)\n  id: CompileToMethod(System.Reflection.Emit.MethodBuilder)\n  parent: System.Linq.Expressions.LambdaExpression\n  langs:\n  - csharp\n  name: CompileToMethod(MethodBuilder)\n  nameWithType: LambdaExpression.CompileToMethod(MethodBuilder)\n  fullName: System.Linq.Expressions.LambdaExpression.CompileToMethod(MethodBuilder)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public void CompileToMethod (System.Reflection.Emit.MethodBuilder method);\n    parameters:\n    - id: method\n      type: System.Reflection.Emit.MethodBuilder\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.LambdaExpression.CompileToMethod*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder,System.Runtime.CompilerServices.DebugInfoGenerator)\n  id: CompileToMethod(System.Reflection.Emit.MethodBuilder,System.Runtime.CompilerServices.DebugInfoGenerator)\n  parent: System.Linq.Expressions.LambdaExpression\n  langs:\n  - csharp\n  name: CompileToMethod(MethodBuilder,DebugInfoGenerator)\n  nameWithType: LambdaExpression.CompileToMethod(MethodBuilder,DebugInfoGenerator)\n  fullName: System.Linq.Expressions.LambdaExpression.CompileToMethod(MethodBuilder,DebugInfoGenerator)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public void CompileToMethod (System.Reflection.Emit.MethodBuilder method, System.Runtime.CompilerServices.DebugInfoGenerator debugInfoGenerator);\n    parameters:\n    - id: method\n      type: System.Reflection.Emit.MethodBuilder\n      description: Parameter description to be filled\n    - id: debugInfoGenerator\n      type: System.Runtime.CompilerServices.DebugInfoGenerator\n      description: Parameter description to be filled\n  overload: System.Linq.Expressions.LambdaExpression.CompileToMethod*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.LambdaExpression.Name\n  id: Name\n  parent: System.Linq.Expressions.LambdaExpression\n  langs:\n  - csharp\n  name: Name\n  nameWithType: LambdaExpression.Name\n  fullName: System.Linq.Expressions.LambdaExpression.Name\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public string Name { get; }\n    return:\n      type: System.String\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.LambdaExpression.NodeType\n  id: NodeType\n  parent: System.Linq.Expressions.LambdaExpression\n  langs:\n  - csharp\n  name: NodeType\n  nameWithType: LambdaExpression.NodeType\n  fullName: System.Linq.Expressions.LambdaExpression.NodeType\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public override sealed System.Linq.Expressions.ExpressionType NodeType { get; }\n    return:\n      type: System.Linq.Expressions.ExpressionType\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.LambdaExpression.Parameters\n  id: Parameters\n  parent: System.Linq.Expressions.LambdaExpression\n  langs:\n  - csharp\n  name: Parameters\n  nameWithType: LambdaExpression.Parameters\n  fullName: System.Linq.Expressions.LambdaExpression.Parameters\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.ParameterExpression> Parameters { get; }\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.LambdaExpression.ReturnType\n  id: ReturnType\n  parent: System.Linq.Expressions.LambdaExpression\n  langs:\n  - csharp\n  name: ReturnType\n  nameWithType: LambdaExpression.ReturnType\n  fullName: System.Linq.Expressions.LambdaExpression.ReturnType\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public Type ReturnType { get; }\n    return:\n      type: System.Type\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.LambdaExpression.TailCall\n  id: TailCall\n  parent: System.Linq.Expressions.LambdaExpression\n  langs:\n  - csharp\n  name: TailCall\n  nameWithType: LambdaExpression.TailCall\n  fullName: System.Linq.Expressions.LambdaExpression.TailCall\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public bool TailCall { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Linq.Expressions.LambdaExpression.Type\n  id: Type\n  parent: System.Linq.Expressions.LambdaExpression\n  langs:\n  - csharp\n  name: Type\n  nameWithType: LambdaExpression.Type\n  fullName: System.Linq.Expressions.LambdaExpression.Type\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Linq.Expressions\n  syntax:\n    content: public override sealed Type Type { get; }\n    return:\n      type: System.Type\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Linq.Expressions.Expression\n  isExternal: false\n  name: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.LambdaExpression.Body\n  parent: System.Linq.Expressions.LambdaExpression\n  isExternal: false\n  name: Body\n  nameWithType: LambdaExpression.Body\n  fullName: System.Linq.Expressions.LambdaExpression.Body\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.LambdaExpression.Compile\n  parent: System.Linq.Expressions.LambdaExpression\n  isExternal: false\n  name: Compile()\n  nameWithType: LambdaExpression.Compile()\n  fullName: System.Linq.Expressions.LambdaExpression.Compile()\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Linq.Expressions.LambdaExpression.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)\n  parent: System.Linq.Expressions.LambdaExpression\n  isExternal: false\n  name: Compile(DebugInfoGenerator)\n  nameWithType: LambdaExpression.Compile(DebugInfoGenerator)\n  fullName: System.Linq.Expressions.LambdaExpression.Compile(DebugInfoGenerator)\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Runtime.CompilerServices.DebugInfoGenerator\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: DebugInfoGenerator\n  nameWithType: DebugInfoGenerator\n  fullName: System.Runtime.CompilerServices.DebugInfoGenerator\n- uid: System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder)\n  parent: System.Linq.Expressions.LambdaExpression\n  isExternal: false\n  name: CompileToMethod(MethodBuilder)\n  nameWithType: LambdaExpression.CompileToMethod(MethodBuilder)\n  fullName: System.Linq.Expressions.LambdaExpression.CompileToMethod(MethodBuilder)\n- uid: System.Reflection.Emit.MethodBuilder\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: MethodBuilder\n  nameWithType: MethodBuilder\n  fullName: System.Reflection.Emit.MethodBuilder\n- uid: System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder,System.Runtime.CompilerServices.DebugInfoGenerator)\n  parent: System.Linq.Expressions.LambdaExpression\n  isExternal: false\n  name: CompileToMethod(MethodBuilder,DebugInfoGenerator)\n  nameWithType: LambdaExpression.CompileToMethod(MethodBuilder,DebugInfoGenerator)\n  fullName: System.Linq.Expressions.LambdaExpression.CompileToMethod(MethodBuilder,DebugInfoGenerator)\n- uid: System.Reflection.Emit.MethodBuilder\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: MethodBuilder\n  nameWithType: MethodBuilder\n  fullName: System.Reflection.Emit.MethodBuilder\n- uid: System.Runtime.CompilerServices.DebugInfoGenerator\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: DebugInfoGenerator\n  nameWithType: DebugInfoGenerator\n  fullName: System.Runtime.CompilerServices.DebugInfoGenerator\n- uid: System.Linq.Expressions.LambdaExpression.Name\n  parent: System.Linq.Expressions.LambdaExpression\n  isExternal: false\n  name: Name\n  nameWithType: LambdaExpression.Name\n  fullName: System.Linq.Expressions.LambdaExpression.Name\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Linq.Expressions.LambdaExpression.NodeType\n  parent: System.Linq.Expressions.LambdaExpression\n  isExternal: false\n  name: NodeType\n  nameWithType: LambdaExpression.NodeType\n  fullName: System.Linq.Expressions.LambdaExpression.NodeType\n- uid: System.Linq.Expressions.ExpressionType\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ExpressionType\n  nameWithType: ExpressionType\n  fullName: System.Linq.Expressions.ExpressionType\n- uid: System.Linq.Expressions.LambdaExpression.Parameters\n  parent: System.Linq.Expressions.LambdaExpression\n  isExternal: false\n  name: Parameters\n  nameWithType: LambdaExpression.Parameters\n  fullName: System.Linq.Expressions.LambdaExpression.Parameters\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression}\n  parent: System.Collections.ObjectModel\n  isExternal: false\n  name: ReadOnlyCollection<ParameterExpression>\n  nameWithType: ReadOnlyCollection<ParameterExpression>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.ParameterExpression>\n- uid: System.Linq.Expressions.LambdaExpression.ReturnType\n  parent: System.Linq.Expressions.LambdaExpression\n  isExternal: false\n  name: ReturnType\n  nameWithType: LambdaExpression.ReturnType\n  fullName: System.Linq.Expressions.LambdaExpression.ReturnType\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.LambdaExpression.TailCall\n  parent: System.Linq.Expressions.LambdaExpression\n  isExternal: false\n  name: TailCall\n  nameWithType: LambdaExpression.TailCall\n  fullName: System.Linq.Expressions.LambdaExpression.TailCall\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Linq.Expressions.LambdaExpression.Type\n  parent: System.Linq.Expressions.LambdaExpression\n  isExternal: false\n  name: Type\n  nameWithType: LambdaExpression.Type\n  fullName: System.Linq.Expressions.LambdaExpression.Type\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.LambdaExpression.Compile*\n  parent: System.Linq.Expressions.LambdaExpression\n  isExternal: false\n  nameWithType: LambdaExpression.\n- uid: System.Linq.Expressions.LambdaExpression.CompileToMethod*\n  parent: System.Linq.Expressions.LambdaExpression\n  isExternal: false\n  nameWithType: LambdaExpression.\n"}