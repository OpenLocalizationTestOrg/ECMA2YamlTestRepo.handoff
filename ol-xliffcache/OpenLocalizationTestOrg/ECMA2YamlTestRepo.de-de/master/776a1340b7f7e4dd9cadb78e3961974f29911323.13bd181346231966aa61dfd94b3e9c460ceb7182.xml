{"nodes":[{"pos":[939,950],"content":"Partitioner","needQuote":true,"needEscape":true,"nodes":[{"content":"Partitioner","pos":[0,11]}]},{"pos":[1698,1717],"content":"Create(Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"Create(Int32,Int32)","pos":[0,19]}]},{"pos":[2158,2192],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2259,2293],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2429,2463],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2778,2797],"content":"Create(Int64,Int64)","needQuote":true,"needEscape":true,"nodes":[{"content":"Create(Int64,Int64)","pos":[0,19]}]},{"pos":[3242,3276],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3343,3377],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3513,3547],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3888,3913],"content":"Create(Int32,Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"Create(Int32,Int32,Int32)","pos":[0,25]}]},{"pos":[4381,4415],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4482,4516],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4581,4615],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4751,4785],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5126,5151],"content":"Create(Int64,Int64,Int64)","needQuote":true,"needEscape":true,"nodes":[{"content":"Create(Int64,Int64,Int64)","pos":[0,25]}]},{"pos":[5624,5658],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5725,5759],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5824,5858],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5994,6028],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6385,6413],"content":"Create(IEnumerable<ph id=\"ph1\">&lt;TSource&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Create(IEnumerable<TSource>)"},{"pos":[6922,6956],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7053,7087],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7571,7628],"content":"Create(IEnumerable<ph id=\"ph1\">&lt;TSource&gt;</ph>,EnumerablePartitionerOptions)","needQuote":true,"needEscape":true,"source":"Create(IEnumerable<TSource>,EnumerablePartitionerOptions)"},{"pos":[8274,8308],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8428,8462],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8559,8593],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8977,9007],"content":"Create(IList<ph id=\"ph1\">&lt;TSource&gt;</ph>,Boolean)","needQuote":true,"needEscape":true,"source":"Create(IList<TSource>,Boolean)"},{"pos":[9522,9556],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9625,9659],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9756,9790],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10110,10135],"content":"Create(TSource[],Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Create(TSource[],Boolean)","pos":[0,25]}]},{"pos":[10578,10612],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10681,10715],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10812,10846],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11028,11041],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[11205,11224],"content":"Create(Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"Create(Int32,Int32)","pos":[0,19]}]},{"pos":[11514,11554],"content":"OrderablePartitioner<Tuple<Int32,Int32>>","needQuote":true,"needEscape":true,"nodes":[{"content":"OrderablePartitioner&lt;Tuple&lt;Int32,Int32&gt;&gt;","pos":[0,40],"source":"OrderablePartitioner<Tuple<Int32,Int32>>"}]},{"pos":[11781,11786],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[11899,11904],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[12115,12134],"content":"Create(Int64,Int64)","needQuote":true,"needEscape":true,"nodes":[{"content":"Create(Int64,Int64)","pos":[0,19]}]},{"pos":[12424,12464],"content":"OrderablePartitioner<Tuple<Int64,Int64>>","needQuote":true,"needEscape":true,"nodes":[{"content":"OrderablePartitioner&lt;Tuple&lt;Int64,Int64&gt;&gt;","pos":[0,40],"source":"OrderablePartitioner<Tuple<Int64,Int64>>"}]},{"pos":[12691,12696],"content":"Int64","needQuote":true,"needEscape":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[12809,12814],"content":"Int64","needQuote":true,"needEscape":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[13038,13063],"content":"Create(Int32,Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"Create(Int32,Int32,Int32)","pos":[0,25]}]},{"pos":[13365,13405],"content":"OrderablePartitioner<Tuple<Int32,Int32>>","needQuote":true,"needEscape":true,"nodes":[{"content":"OrderablePartitioner&lt;Tuple&lt;Int32,Int32&gt;&gt;","pos":[0,40],"source":"OrderablePartitioner<Tuple<Int32,Int32>>"}]},{"pos":[13632,13637],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[13750,13755],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[13868,13873],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[14097,14122],"content":"Create(Int64,Int64,Int64)","needQuote":true,"needEscape":true,"nodes":[{"content":"Create(Int64,Int64,Int64)","pos":[0,25]}]},{"pos":[14424,14464],"content":"OrderablePartitioner<Tuple<Int64,Int64>>","needQuote":true,"needEscape":true,"nodes":[{"content":"OrderablePartitioner&lt;Tuple&lt;Int64,Int64&gt;&gt;","pos":[0,40],"source":"OrderablePartitioner<Tuple<Int64,Int64>>"}]},{"pos":[14691,14696],"content":"Int64","needQuote":true,"needEscape":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[14809,14814],"content":"Int64","needQuote":true,"needEscape":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[14927,14932],"content":"Int64","needQuote":true,"needEscape":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[15164,15192],"content":"Create(IEnumerable<ph id=\"ph1\">&lt;TSource&gt;</ph>)","needQuote":true,"needEscape":true,"source":"Create(IEnumerable<TSource>)"},{"pos":[15461,15490],"content":"OrderablePartitioner<ph id=\"ph1\">&lt;TSource&gt;</ph>","needQuote":true,"needEscape":true,"source":"OrderablePartitioner<TSource>"},{"pos":[15729,15749],"content":"IEnumerable<ph id=\"ph1\">&lt;TSource&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<TSource>"},{"pos":[16090,16147],"content":"Create(IEnumerable<ph id=\"ph1\">&lt;TSource&gt;</ph>,EnumerablePartitionerOptions)","needQuote":true,"needEscape":true,"source":"Create(IEnumerable<TSource>,EnumerablePartitionerOptions)"},{"pos":[16474,16503],"content":"OrderablePartitioner<ph id=\"ph1\">&lt;TSource&gt;</ph>","needQuote":true,"needEscape":true,"source":"OrderablePartitioner<TSource>"},{"pos":[16742,16762],"content":"IEnumerable<ph id=\"ph1\">&lt;TSource&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<TSource>"},{"pos":[16994,17022],"content":"EnumerablePartitionerOptions","needQuote":true,"needEscape":true,"nodes":[{"content":"EnumerablePartitionerOptions","pos":[0,28]}]},{"pos":[17332,17362],"content":"Create(IList<ph id=\"ph1\">&lt;TSource&gt;</ph>,Boolean)","needQuote":true,"needEscape":true,"source":"Create(IList<TSource>,Boolean)"},{"pos":[17635,17664],"content":"OrderablePartitioner<ph id=\"ph1\">&lt;TSource&gt;</ph>","needQuote":true,"needEscape":true,"source":"OrderablePartitioner<TSource>"},{"pos":[17897,17911],"content":"IList<ph id=\"ph1\">&lt;TSource&gt;</ph>","needQuote":true,"needEscape":true,"source":"IList<TSource>"},{"pos":[18064,18071],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[18284,18309],"content":"Create(TSource[],Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Create(TSource[],Boolean)","pos":[0,25]}]},{"pos":[18572,18601],"content":"OrderablePartitioner<ph id=\"ph1\">&lt;TSource&gt;</ph>","needQuote":true,"needEscape":true,"source":"OrderablePartitioner<TSource>"},{"pos":[18775,18782],"content":"TSource","needQuote":true,"needEscape":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[18896,18903],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Concurrent.Partitioner\n  id: Partitioner\n  children:\n  - System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32)\n  - System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64)\n  - System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32,System.Int32)\n  - System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64,System.Int64)\n  - System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)\n  - System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IList{``0},System.Boolean)\n  - System.Collections.Concurrent.Partitioner.Create``1(``0[],System.Boolean)\n  langs:\n  - csharp\n  name: Partitioner\n  nameWithType: Partitioner\n  fullName: System.Collections.Concurrent.Partitioner\n  type: Class\n  syntax:\n    content: public static class Partitioner\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32)\n  id: Create(System.Int32,System.Int32)\n  parent: System.Collections.Concurrent.Partitioner\n  langs:\n  - csharp\n  name: Create(Int32,Int32)\n  nameWithType: Partitioner.Create(Int32,Int32)\n  fullName: System.Collections.Concurrent.Partitioner.Create(Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public static System.Collections.Concurrent.OrderablePartitioner<Tuple<int,int>> Create (int fromInclusive, int toExclusive);\n    parameters:\n    - id: fromInclusive\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: toExclusive\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int32,System.Int32}}\n      description: Parameter description to be filled\n  overload: System.Collections.Concurrent.Partitioner.Create*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64)\n  id: Create(System.Int64,System.Int64)\n  parent: System.Collections.Concurrent.Partitioner\n  langs:\n  - csharp\n  name: Create(Int64,Int64)\n  nameWithType: Partitioner.Create(Int64,Int64)\n  fullName: System.Collections.Concurrent.Partitioner.Create(Int64,Int64)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public static System.Collections.Concurrent.OrderablePartitioner<Tuple<long,long>> Create (long fromInclusive, long toExclusive);\n    parameters:\n    - id: fromInclusive\n      type: System.Int64\n      description: Parameter description to be filled\n    - id: toExclusive\n      type: System.Int64\n      description: Parameter description to be filled\n    return:\n      type: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int64,System.Int64}}\n      description: Parameter description to be filled\n  overload: System.Collections.Concurrent.Partitioner.Create*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32,System.Int32)\n  id: Create(System.Int32,System.Int32,System.Int32)\n  parent: System.Collections.Concurrent.Partitioner\n  langs:\n  - csharp\n  name: Create(Int32,Int32,Int32)\n  nameWithType: Partitioner.Create(Int32,Int32,Int32)\n  fullName: System.Collections.Concurrent.Partitioner.Create(Int32,Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public static System.Collections.Concurrent.OrderablePartitioner<Tuple<int,int>> Create (int fromInclusive, int toExclusive, int rangeSize);\n    parameters:\n    - id: fromInclusive\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: toExclusive\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: rangeSize\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int32,System.Int32}}\n      description: Parameter description to be filled\n  overload: System.Collections.Concurrent.Partitioner.Create*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64,System.Int64)\n  id: Create(System.Int64,System.Int64,System.Int64)\n  parent: System.Collections.Concurrent.Partitioner\n  langs:\n  - csharp\n  name: Create(Int64,Int64,Int64)\n  nameWithType: Partitioner.Create(Int64,Int64,Int64)\n  fullName: System.Collections.Concurrent.Partitioner.Create(Int64,Int64,Int64)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public static System.Collections.Concurrent.OrderablePartitioner<Tuple<long,long>> Create (long fromInclusive, long toExclusive, long rangeSize);\n    parameters:\n    - id: fromInclusive\n      type: System.Int64\n      description: Parameter description to be filled\n    - id: toExclusive\n      type: System.Int64\n      description: Parameter description to be filled\n    - id: rangeSize\n      type: System.Int64\n      description: Parameter description to be filled\n    return:\n      type: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int64,System.Int64}}\n      description: Parameter description to be filled\n  overload: System.Collections.Concurrent.Partitioner.Create*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0})\n  id: Create``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Concurrent.Partitioner\n  langs:\n  - csharp\n  name: Create(IEnumerable<TSource>)\n  nameWithType: Partitioner.Create(IEnumerable<TSource>)\n  fullName: System.Collections.Concurrent.Partitioner.Create(IEnumerable<TSource>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public static System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource> (System.Collections.Generic.IEnumerable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: Parameter description to be filled\n    return:\n      type: System.Collections.Concurrent.OrderablePartitioner`1\n      description: Parameter description to be filled\n  overload: System.Collections.Concurrent.Partitioner.Create<TSource>*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)\n  id: Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)\n  parent: System.Collections.Concurrent.Partitioner\n  langs:\n  - csharp\n  name: Create(IEnumerable<TSource>,EnumerablePartitionerOptions)\n  nameWithType: Partitioner.Create(IEnumerable<TSource>,EnumerablePartitionerOptions)\n  fullName: System.Collections.Concurrent.Partitioner.Create(IEnumerable<TSource>,EnumerablePartitionerOptions)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public static System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource> (System.Collections.Generic.IEnumerable<TSource> source, System.Collections.Concurrent.EnumerablePartitionerOptions partitionerOptions);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: Parameter description to be filled\n    - id: partitionerOptions\n      type: System.Collections.Concurrent.EnumerablePartitionerOptions\n      description: Parameter description to be filled\n    return:\n      type: System.Collections.Concurrent.OrderablePartitioner`1\n      description: Parameter description to be filled\n  overload: System.Collections.Concurrent.Partitioner.Create<TSource>*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IList{``0},System.Boolean)\n  id: Create``1(System.Collections.Generic.IList{``0},System.Boolean)\n  parent: System.Collections.Concurrent.Partitioner\n  langs:\n  - csharp\n  name: Create(IList<TSource>,Boolean)\n  nameWithType: Partitioner.Create(IList<TSource>,Boolean)\n  fullName: System.Collections.Concurrent.Partitioner.Create(IList<TSource>,Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public static System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource> (System.Collections.Generic.IList<TSource> list, bool loadBalance);\n    parameters:\n    - id: list\n      type: System.Collections.Generic.IList{TSource}\n      description: Parameter description to be filled\n    - id: loadBalance\n      type: System.Boolean\n      description: Parameter description to be filled\n    return:\n      type: System.Collections.Concurrent.OrderablePartitioner`1\n      description: Parameter description to be filled\n  overload: System.Collections.Concurrent.Partitioner.Create<TSource>*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.Partitioner.Create``1(``0[],System.Boolean)\n  id: Create``1(``0[],System.Boolean)\n  parent: System.Collections.Concurrent.Partitioner\n  langs:\n  - csharp\n  name: Create(TSource[],Boolean)\n  nameWithType: Partitioner.Create(TSource[],Boolean)\n  fullName: System.Collections.Concurrent.Partitioner.Create(TSource[],Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public static System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource> (TSource[] array, bool loadBalance);\n    parameters:\n    - id: array\n      type: TSource[]\n      description: Parameter description to be filled\n    - id: loadBalance\n      type: System.Boolean\n      description: Parameter description to be filled\n    return:\n      type: System.Collections.Concurrent.OrderablePartitioner`1\n      description: Parameter description to be filled\n  overload: System.Collections.Concurrent.Partitioner.Create<TSource>*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32)\n  parent: System.Collections.Concurrent.Partitioner\n  isExternal: false\n  name: Create(Int32,Int32)\n  nameWithType: Partitioner.Create(Int32,Int32)\n  fullName: System.Collections.Concurrent.Partitioner.Create(Int32,Int32)\n- uid: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int32,System.Int32}}\n  parent: System.Collections.Concurrent\n  isExternal: false\n  name: OrderablePartitioner<Tuple<Int32,Int32>>\n  nameWithType: OrderablePartitioner<Tuple<Int32,Int32>>\n  fullName: System.Collections.Concurrent.OrderablePartitioner<System.Tuple<System.Int32,System.Int32>>\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64)\n  parent: System.Collections.Concurrent.Partitioner\n  isExternal: false\n  name: Create(Int64,Int64)\n  nameWithType: Partitioner.Create(Int64,Int64)\n  fullName: System.Collections.Concurrent.Partitioner.Create(Int64,Int64)\n- uid: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int64,System.Int64}}\n  parent: System.Collections.Concurrent\n  isExternal: false\n  name: OrderablePartitioner<Tuple<Int64,Int64>>\n  nameWithType: OrderablePartitioner<Tuple<Int64,Int64>>\n  fullName: System.Collections.Concurrent.OrderablePartitioner<System.Tuple<System.Int64,System.Int64>>\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32,System.Int32)\n  parent: System.Collections.Concurrent.Partitioner\n  isExternal: false\n  name: Create(Int32,Int32,Int32)\n  nameWithType: Partitioner.Create(Int32,Int32,Int32)\n  fullName: System.Collections.Concurrent.Partitioner.Create(Int32,Int32,Int32)\n- uid: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int32,System.Int32}}\n  parent: System.Collections.Concurrent\n  isExternal: false\n  name: OrderablePartitioner<Tuple<Int32,Int32>>\n  nameWithType: OrderablePartitioner<Tuple<Int32,Int32>>\n  fullName: System.Collections.Concurrent.OrderablePartitioner<System.Tuple<System.Int32,System.Int32>>\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64,System.Int64)\n  parent: System.Collections.Concurrent.Partitioner\n  isExternal: false\n  name: Create(Int64,Int64,Int64)\n  nameWithType: Partitioner.Create(Int64,Int64,Int64)\n  fullName: System.Collections.Concurrent.Partitioner.Create(Int64,Int64,Int64)\n- uid: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int64,System.Int64}}\n  parent: System.Collections.Concurrent\n  isExternal: false\n  name: OrderablePartitioner<Tuple<Int64,Int64>>\n  nameWithType: OrderablePartitioner<Tuple<Int64,Int64>>\n  fullName: System.Collections.Concurrent.OrderablePartitioner<System.Tuple<System.Int64,System.Int64>>\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Collections.Concurrent.Partitioner\n  isExternal: false\n  name: Create(IEnumerable<TSource>)\n  nameWithType: Partitioner.Create(IEnumerable<TSource>)\n  fullName: System.Collections.Concurrent.Partitioner.Create(IEnumerable<TSource>)\n- uid: System.Collections.Concurrent.OrderablePartitioner`1\n  parent: System.Collections.Concurrent\n  isExternal: false\n  name: OrderablePartitioner<TSource>\n  nameWithType: OrderablePartitioner<TSource>\n  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>\n- uid: System.Collections.Generic.IEnumerable{TSource}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TSource>\n  nameWithType: IEnumerable<TSource>\n  fullName: System.Collections.Generic.IEnumerable<TSource>\n- uid: System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)\n  parent: System.Collections.Concurrent.Partitioner\n  isExternal: false\n  name: Create(IEnumerable<TSource>,EnumerablePartitionerOptions)\n  nameWithType: Partitioner.Create(IEnumerable<TSource>,EnumerablePartitionerOptions)\n  fullName: System.Collections.Concurrent.Partitioner.Create(IEnumerable<TSource>,EnumerablePartitionerOptions)\n- uid: System.Collections.Concurrent.OrderablePartitioner`1\n  parent: System.Collections.Concurrent\n  isExternal: false\n  name: OrderablePartitioner<TSource>\n  nameWithType: OrderablePartitioner<TSource>\n  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>\n- uid: System.Collections.Generic.IEnumerable{TSource}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TSource>\n  nameWithType: IEnumerable<TSource>\n  fullName: System.Collections.Generic.IEnumerable<TSource>\n- uid: System.Collections.Concurrent.EnumerablePartitionerOptions\n  parent: System.Collections.Concurrent\n  isExternal: false\n  name: EnumerablePartitionerOptions\n  nameWithType: EnumerablePartitionerOptions\n  fullName: System.Collections.Concurrent.EnumerablePartitionerOptions\n- uid: System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IList{``0},System.Boolean)\n  parent: System.Collections.Concurrent.Partitioner\n  isExternal: false\n  name: Create(IList<TSource>,Boolean)\n  nameWithType: Partitioner.Create(IList<TSource>,Boolean)\n  fullName: System.Collections.Concurrent.Partitioner.Create(IList<TSource>,Boolean)\n- uid: System.Collections.Concurrent.OrderablePartitioner`1\n  parent: System.Collections.Concurrent\n  isExternal: false\n  name: OrderablePartitioner<TSource>\n  nameWithType: OrderablePartitioner<TSource>\n  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>\n- uid: System.Collections.Generic.IList{TSource}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IList<TSource>\n  nameWithType: IList<TSource>\n  fullName: System.Collections.Generic.IList<TSource>\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Concurrent.Partitioner.Create``1(``0[],System.Boolean)\n  parent: System.Collections.Concurrent.Partitioner\n  isExternal: false\n  name: Create(TSource[],Boolean)\n  nameWithType: Partitioner.Create(TSource[],Boolean)\n  fullName: System.Collections.Concurrent.Partitioner.Create(TSource[],Boolean)\n- uid: System.Collections.Concurrent.OrderablePartitioner`1\n  parent: System.Collections.Concurrent\n  isExternal: false\n  name: OrderablePartitioner<TSource>\n  nameWithType: OrderablePartitioner<TSource>\n  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>\n- uid: TSource\n  parent: ''\n  isExternal: true\n  name: TSource\n  nameWithType: TSource\n  fullName: TSource[]\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Concurrent.Partitioner.Create*\n  parent: System.Collections.Concurrent.Partitioner\n  isExternal: false\n  nameWithType: Partitioner.\n- uid: System.Collections.Concurrent.Partitioner.Create<TSource>*\n  parent: System.Collections.Concurrent.Partitioner\n  isExternal: false\n  nameWithType: Partitioner.\n"}