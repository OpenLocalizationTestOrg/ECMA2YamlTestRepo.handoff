{"nodes":[{"pos":[962,980],"content":"SecurityPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"SecurityPermission","pos":[0,18]}]},{"pos":[2523,2558],"content":"SecurityPermission(PermissionState)","needQuote":true,"needEscape":true,"nodes":[{"content":"SecurityPermission(PermissionState)","pos":[0,35]}]},{"pos":[3022,3056],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3369,3411],"content":"SecurityPermission(SecurityPermissionFlag)","needQuote":true,"needEscape":true,"nodes":[{"content":"SecurityPermission(SecurityPermissionFlag)","pos":[0,42]}]},{"pos":[3901,3935],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4140,4146],"content":"Copy()","needQuote":true,"needEscape":true,"nodes":[{"content":"Copy()","pos":[0,6]}]},{"pos":[4504,4538],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4745,4750],"content":"Flags","needQuote":true,"needEscape":true,"nodes":[{"content":"Flags","pos":[0,5]}]},{"pos":[5137,5171],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5448,5472],"content":"FromXml(SecurityElement)","needQuote":true,"needEscape":true,"nodes":[{"content":"FromXml(SecurityElement)","pos":[0,24]}]},{"pos":[5884,5918],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6191,6213],"content":"Intersect(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"Intersect(IPermission)","pos":[0,22]}]},{"pos":[6644,6678],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6750,6784],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7059,7082],"content":"IsSubsetOf(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"IsSubsetOf(IPermission)","pos":[0,23]}]},{"pos":[7493,7527],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7586,7620],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7845,7861],"content":"IsUnrestricted()","needQuote":true,"needEscape":true,"nodes":[{"content":"IsUnrestricted()","pos":[0,16]}]},{"pos":[8204,8238],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8445,8452],"content":"ToXml()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToXml()","pos":[0,7]}]},{"pos":[8821,8855],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9120,9138],"content":"Union(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"Union(IPermission)","pos":[0,18]}]},{"pos":[9557,9591],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9663,9697],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9831,9867],"content":"System.Security.CodeAccessPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Security.CodeAccessPermission","pos":[0,36]}]},{"pos":[10058,10093],"content":"SecurityPermission(PermissionState)","needQuote":true,"needEscape":true,"nodes":[{"content":"SecurityPermission(PermissionState)","pos":[0,35]}]},{"pos":[10377,10392],"content":"PermissionState","needQuote":true,"needEscape":true,"nodes":[{"content":"PermissionState","pos":[0,15]}]},{"pos":[10678,10720],"content":"SecurityPermission(SecurityPermissionFlag)","needQuote":true,"needEscape":true,"nodes":[{"content":"SecurityPermission(SecurityPermissionFlag)","pos":[0,42]}]},{"pos":[11025,11047],"content":"SecurityPermissionFlag","needQuote":true,"needEscape":true,"nodes":[{"content":"SecurityPermissionFlag","pos":[0,22]}]},{"pos":[11294,11300],"content":"Copy()","needQuote":true,"needEscape":true,"nodes":[{"content":"Copy()","pos":[0,6]}]},{"pos":[11498,11509],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[11723,11728],"content":"Flags","needQuote":true,"needEscape":true,"nodes":[{"content":"Flags","pos":[0,5]}]},{"pos":[11959,11981],"content":"SecurityPermissionFlag","needQuote":true,"needEscape":true,"nodes":[{"content":"SecurityPermissionFlag","pos":[0,22]}]},{"pos":[12264,12288],"content":"FromXml(SecurityElement)","needQuote":true,"needEscape":true,"nodes":[{"content":"FromXml(SecurityElement)","pos":[0,24]}]},{"pos":[12526,12541],"content":"SecurityElement","needQuote":true,"needEscape":true,"nodes":[{"content":"SecurityElement","pos":[0,15]}]},{"pos":[12796,12818],"content":"Intersect(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"Intersect(IPermission)","pos":[0,22]}]},{"pos":[13048,13059],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[13217,13228],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[13476,13499],"content":"IsSubsetOf(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"IsSubsetOf(IPermission)","pos":[0,23]}]},{"pos":[13709,13716],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[13857,13868],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[14091,14107],"content":"IsUnrestricted()","needQuote":true,"needEscape":true,"nodes":[{"content":"IsUnrestricted()","pos":[0,16]}]},{"pos":[14303,14310],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[14507,14514],"content":"ToXml()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToXml()","pos":[0,7]}]},{"pos":[14718,14733],"content":"SecurityElement","needQuote":true,"needEscape":true,"nodes":[{"content":"SecurityElement","pos":[0,15]}]},{"pos":[14984,15002],"content":"Union(IPermission)","needQuote":true,"needEscape":true,"nodes":[{"content":"Union(IPermission)","pos":[0,18]}]},{"pos":[15224,15235],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]},{"pos":[15393,15404],"content":"IPermission","needQuote":true,"needEscape":true,"nodes":[{"content":"IPermission","pos":[0,11]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Permissions.SecurityPermission\n  id: SecurityPermission\n  children:\n  - System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.PermissionState)\n  - System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.SecurityPermissionFlag)\n  - System.Security.Permissions.SecurityPermission.Copy\n  - System.Security.Permissions.SecurityPermission.Flags\n  - System.Security.Permissions.SecurityPermission.FromXml(System.Security.SecurityElement)\n  - System.Security.Permissions.SecurityPermission.Intersect(System.Security.IPermission)\n  - System.Security.Permissions.SecurityPermission.IsSubsetOf(System.Security.IPermission)\n  - System.Security.Permissions.SecurityPermission.IsUnrestricted\n  - System.Security.Permissions.SecurityPermission.ToXml\n  - System.Security.Permissions.SecurityPermission.Union(System.Security.IPermission)\n  langs:\n  - csharp\n  name: SecurityPermission\n  nameWithType: SecurityPermission\n  fullName: System.Security.Permissions.SecurityPermission\n  type: Class\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class SecurityPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission\n  inheritance:\n  - System.Object\n  - System.Security.CodeAccessPermission\n  implements:\n  - System.Security.Permissions.IUnrestrictedPermission\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Security.CodeAccessPermission.Assert\n  - System.Security.CodeAccessPermission.Demand\n  - System.Security.CodeAccessPermission.Deny\n  - System.Security.CodeAccessPermission.Equals(System.Object)\n  - System.Security.CodeAccessPermission.GetHashCode\n  - System.Security.CodeAccessPermission.PermitOnly\n  - System.Security.CodeAccessPermission.RevertAll\n  - System.Security.CodeAccessPermission.RevertAssert\n  - System.Security.CodeAccessPermission.RevertDeny\n  - System.Security.CodeAccessPermission.RevertPermitOnly\n  - System.Security.CodeAccessPermission.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.PermissionState)\n  id: '#ctor(System.Security.Permissions.PermissionState)'\n  parent: System.Security.Permissions.SecurityPermission\n  langs:\n  - csharp\n  name: SecurityPermission(PermissionState)\n  nameWithType: SecurityPermission.SecurityPermission(PermissionState)\n  fullName: System.Security.Permissions.SecurityPermission.SecurityPermission(PermissionState)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public SecurityPermission (System.Security.Permissions.PermissionState state);\n    parameters:\n    - id: state\n      type: System.Security.Permissions.PermissionState\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.SecurityPermissionFlag)\n  id: '#ctor(System.Security.Permissions.SecurityPermissionFlag)'\n  parent: System.Security.Permissions.SecurityPermission\n  langs:\n  - csharp\n  name: SecurityPermission(SecurityPermissionFlag)\n  nameWithType: SecurityPermission.SecurityPermission(SecurityPermissionFlag)\n  fullName: System.Security.Permissions.SecurityPermission.SecurityPermission(SecurityPermissionFlag)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public SecurityPermission (System.Security.Permissions.SecurityPermissionFlag flag);\n    parameters:\n    - id: flag\n      type: System.Security.Permissions.SecurityPermissionFlag\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.SecurityPermission.Copy\n  id: Copy\n  parent: System.Security.Permissions.SecurityPermission\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: SecurityPermission.Copy()\n  fullName: System.Security.Permissions.SecurityPermission.Copy()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public override System.Security.IPermission Copy ();\n    parameters: []\n    return:\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.SecurityPermission.Flags\n  id: Flags\n  parent: System.Security.Permissions.SecurityPermission\n  langs:\n  - csharp\n  name: Flags\n  nameWithType: SecurityPermission.Flags\n  fullName: System.Security.Permissions.SecurityPermission.Flags\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public System.Security.Permissions.SecurityPermissionFlag Flags { get; set; }\n    return:\n      type: System.Security.Permissions.SecurityPermissionFlag\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.SecurityPermission.FromXml(System.Security.SecurityElement)\n  id: FromXml(System.Security.SecurityElement)\n  parent: System.Security.Permissions.SecurityPermission\n  langs:\n  - csharp\n  name: FromXml(SecurityElement)\n  nameWithType: SecurityPermission.FromXml(SecurityElement)\n  fullName: System.Security.Permissions.SecurityPermission.FromXml(SecurityElement)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public override void FromXml (System.Security.SecurityElement esd);\n    parameters:\n    - id: esd\n      type: System.Security.SecurityElement\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.SecurityPermission.Intersect(System.Security.IPermission)\n  id: Intersect(System.Security.IPermission)\n  parent: System.Security.Permissions.SecurityPermission\n  langs:\n  - csharp\n  name: Intersect(IPermission)\n  nameWithType: SecurityPermission.Intersect(IPermission)\n  fullName: System.Security.Permissions.SecurityPermission.Intersect(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n    return:\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.SecurityPermission.IsSubsetOf(System.Security.IPermission)\n  id: IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.Permissions.SecurityPermission\n  langs:\n  - csharp\n  name: IsSubsetOf(IPermission)\n  nameWithType: SecurityPermission.IsSubsetOf(IPermission)\n  fullName: System.Security.Permissions.SecurityPermission.IsSubsetOf(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public override bool IsSubsetOf (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.SecurityPermission.IsUnrestricted\n  id: IsUnrestricted\n  parent: System.Security.Permissions.SecurityPermission\n  langs:\n  - csharp\n  name: IsUnrestricted()\n  nameWithType: SecurityPermission.IsUnrestricted()\n  fullName: System.Security.Permissions.SecurityPermission.IsUnrestricted()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public bool IsUnrestricted ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.SecurityPermission.ToXml\n  id: ToXml\n  parent: System.Security.Permissions.SecurityPermission\n  langs:\n  - csharp\n  name: ToXml()\n  nameWithType: SecurityPermission.ToXml()\n  fullName: System.Security.Permissions.SecurityPermission.ToXml()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public override System.Security.SecurityElement ToXml ();\n    parameters: []\n    return:\n      type: System.Security.SecurityElement\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Permissions.SecurityPermission.Union(System.Security.IPermission)\n  id: Union(System.Security.IPermission)\n  parent: System.Security.Permissions.SecurityPermission\n  langs:\n  - csharp\n  name: Union(IPermission)\n  nameWithType: SecurityPermission.Union(IPermission)\n  fullName: System.Security.Permissions.SecurityPermission.Union(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Permissions\n  syntax:\n    content: public override System.Security.IPermission Union (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n    return:\n      type: System.Security.IPermission\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Security.CodeAccessPermission\n  isExternal: false\n  name: System.Security.CodeAccessPermission\n- uid: System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.PermissionState)\n  parent: System.Security.Permissions.SecurityPermission\n  isExternal: false\n  name: SecurityPermission(PermissionState)\n  nameWithType: SecurityPermission.SecurityPermission(PermissionState)\n  fullName: System.Security.Permissions.SecurityPermission.SecurityPermission(PermissionState)\n- uid: System.Security.Permissions.PermissionState\n  parent: System.Security.Permissions\n  isExternal: false\n  name: PermissionState\n  nameWithType: PermissionState\n  fullName: System.Security.Permissions.PermissionState\n- uid: System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.SecurityPermissionFlag)\n  parent: System.Security.Permissions.SecurityPermission\n  isExternal: false\n  name: SecurityPermission(SecurityPermissionFlag)\n  nameWithType: SecurityPermission.SecurityPermission(SecurityPermissionFlag)\n  fullName: System.Security.Permissions.SecurityPermission.SecurityPermission(SecurityPermissionFlag)\n- uid: System.Security.Permissions.SecurityPermissionFlag\n  parent: System.Security.Permissions\n  isExternal: false\n  name: SecurityPermissionFlag\n  nameWithType: SecurityPermissionFlag\n  fullName: System.Security.Permissions.SecurityPermissionFlag\n- uid: System.Security.Permissions.SecurityPermission.Copy\n  parent: System.Security.Permissions.SecurityPermission\n  isExternal: false\n  name: Copy()\n  nameWithType: SecurityPermission.Copy()\n  fullName: System.Security.Permissions.SecurityPermission.Copy()\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.Permissions.SecurityPermission.Flags\n  parent: System.Security.Permissions.SecurityPermission\n  isExternal: false\n  name: Flags\n  nameWithType: SecurityPermission.Flags\n  fullName: System.Security.Permissions.SecurityPermission.Flags\n- uid: System.Security.Permissions.SecurityPermissionFlag\n  parent: System.Security.Permissions\n  isExternal: false\n  name: SecurityPermissionFlag\n  nameWithType: SecurityPermissionFlag\n  fullName: System.Security.Permissions.SecurityPermissionFlag\n- uid: System.Security.Permissions.SecurityPermission.FromXml(System.Security.SecurityElement)\n  parent: System.Security.Permissions.SecurityPermission\n  isExternal: false\n  name: FromXml(SecurityElement)\n  nameWithType: SecurityPermission.FromXml(SecurityElement)\n  fullName: System.Security.Permissions.SecurityPermission.FromXml(SecurityElement)\n- uid: System.Security.SecurityElement\n  parent: System.Security\n  isExternal: false\n  name: SecurityElement\n  nameWithType: SecurityElement\n  fullName: System.Security.SecurityElement\n- uid: System.Security.Permissions.SecurityPermission.Intersect(System.Security.IPermission)\n  parent: System.Security.Permissions.SecurityPermission\n  isExternal: false\n  name: Intersect(IPermission)\n  nameWithType: SecurityPermission.Intersect(IPermission)\n  fullName: System.Security.Permissions.SecurityPermission.Intersect(IPermission)\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.Permissions.SecurityPermission.IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.Permissions.SecurityPermission\n  isExternal: false\n  name: IsSubsetOf(IPermission)\n  nameWithType: SecurityPermission.IsSubsetOf(IPermission)\n  fullName: System.Security.Permissions.SecurityPermission.IsSubsetOf(IPermission)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.Permissions.SecurityPermission.IsUnrestricted\n  parent: System.Security.Permissions.SecurityPermission\n  isExternal: false\n  name: IsUnrestricted()\n  nameWithType: SecurityPermission.IsUnrestricted()\n  fullName: System.Security.Permissions.SecurityPermission.IsUnrestricted()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Permissions.SecurityPermission.ToXml\n  parent: System.Security.Permissions.SecurityPermission\n  isExternal: false\n  name: ToXml()\n  nameWithType: SecurityPermission.ToXml()\n  fullName: System.Security.Permissions.SecurityPermission.ToXml()\n- uid: System.Security.SecurityElement\n  parent: System.Security\n  isExternal: false\n  name: SecurityElement\n  nameWithType: SecurityElement\n  fullName: System.Security.SecurityElement\n- uid: System.Security.Permissions.SecurityPermission.Union(System.Security.IPermission)\n  parent: System.Security.Permissions.SecurityPermission\n  isExternal: false\n  name: Union(IPermission)\n  nameWithType: SecurityPermission.Union(IPermission)\n  fullName: System.Security.Permissions.SecurityPermission.Union(IPermission)\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n"}