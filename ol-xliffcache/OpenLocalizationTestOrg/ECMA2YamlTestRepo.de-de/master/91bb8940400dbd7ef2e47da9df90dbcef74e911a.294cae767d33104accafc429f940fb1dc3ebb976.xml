{"nodes":[{"pos":[1746,1759],"content":"HashAlgorithm","needQuote":true,"needEscape":true,"nodes":[{"content":"HashAlgorithm","pos":[0,13]}]},{"pos":[2623,2638],"content":"HashAlgorithm()","needQuote":true,"needEscape":true,"nodes":[{"content":"HashAlgorithm()","pos":[0,15]}]},{"pos":[3137,3154],"content":"CanReuseTransform","needQuote":true,"needEscape":true,"nodes":[{"content":"CanReuseTransform","pos":[0,17]}]},{"pos":[3490,3524],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3765,3791],"content":"CanTransformMultipleBlocks","needQuote":true,"needEscape":true,"nodes":[{"content":"CanTransformMultipleBlocks","pos":[0,26]}]},{"pos":[4154,4188],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4387,4394],"content":"Clear()","needQuote":true,"needEscape":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[4884,4903],"content":"ComputeHash(Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"ComputeHash(Byte[])","pos":[0,19]}]},{"pos":[5257,5291],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5349,5383],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5698,5717],"content":"ComputeHash(Stream)","needQuote":true,"needEscape":true,"nodes":[{"content":"ComputeHash(Stream)","pos":[0,19]}]},{"pos":[6094,6128],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6186,6220],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6581,6612],"content":"ComputeHash(Byte[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"ComputeHash(Byte[],Int32,Int32)","pos":[0,31]}]},{"pos":[7013,7047],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7109,7143],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7204,7238],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7296,7330],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7599,7607],"content":"Create()","needQuote":true,"needEscape":true,"nodes":[{"content":"Create()","pos":[0,8]}]},{"pos":[7991,8025],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8319,8333],"content":"Create(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Create(String)","pos":[0,14]}]},{"pos":[8719,8753],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8840,8874],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9140,9149],"content":"Dispose()","needQuote":true,"needEscape":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[9703,9719],"content":"Dispose(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[10077,10111],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10372,10376],"content":"Hash","needQuote":true,"needEscape":true,"nodes":[{"content":"Hash","pos":[0,4]}]},{"pos":[10674,10708],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10995,11023],"content":"HashCore(Byte[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"HashCore(Byte[],Int32,Int32)","pos":[0,28]}]},{"pos":[11425,11459],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11522,11556],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11618,11652],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11859,11870],"content":"HashFinal()","needQuote":true,"needEscape":true,"nodes":[{"content":"HashFinal()","pos":[0,11]}]},{"pos":[12203,12237],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12442,12450],"content":"HashSize","needQuote":true,"needEscape":true,"nodes":[{"content":"HashSize","pos":[0,8]}]},{"pos":[12756,12790],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13005,13018],"content":"HashSizeValue","needQuote":true,"needEscape":true,"nodes":[{"content":"HashSizeValue","pos":[0,13]}]},{"pos":[13323,13357],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13564,13573],"content":"HashValue","needQuote":true,"needEscape":true,"nodes":[{"content":"HashValue","pos":[0,9]}]},{"pos":[13870,13904],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14113,14125],"content":"Initialize()","needQuote":true,"needEscape":true,"nodes":[{"content":"Initialize()","pos":[0,12]}]},{"pos":[14615,14629],"content":"InputBlockSize","needQuote":true,"needEscape":true,"nodes":[{"content":"InputBlockSize","pos":[0,14]}]},{"pos":[14953,14987],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15206,15221],"content":"OutputBlockSize","needQuote":true,"needEscape":true,"nodes":[{"content":"OutputBlockSize","pos":[0,15]}]},{"pos":[15548,15582],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15781,15786],"content":"State","needQuote":true,"needEscape":true,"nodes":[{"content":"State","pos":[0,5]}]},{"pos":[16067,16101],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16454,16501],"content":"TransformBlock(Byte[],Int32,Int32,Byte[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"TransformBlock(Byte[],Int32,Int32,Byte[],Int32)","pos":[0,47]}]},{"pos":[16993,17027],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17094,17128],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17194,17228],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17297,17331],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17399,17433],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17490,17524],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17833,17872],"content":"TransformFinalBlock(Byte[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"TransformFinalBlock(Byte[],Int32,Int32)","pos":[0,39]}]},{"pos":[18317,18351],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18418,18452],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18518,18552],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18610,18644],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18755,18768],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[18906,18921],"content":"HashAlgorithm()","needQuote":true,"needEscape":true,"nodes":[{"content":"HashAlgorithm()","pos":[0,15]}]},{"pos":[19188,19205],"content":"CanReuseTransform","needQuote":true,"needEscape":true,"nodes":[{"content":"CanReuseTransform","pos":[0,17]}]},{"pos":[19394,19401],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[19611,19637],"content":"CanTransformMultipleBlocks","needQuote":true,"needEscape":true,"nodes":[{"content":"CanTransformMultipleBlocks","pos":[0,26]}]},{"pos":[19844,19851],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[20040,20047],"content":"Clear()","needQuote":true,"needEscape":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[20307,20326],"content":"ComputeHash(Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"ComputeHash(Byte[])","pos":[0,19]}]},{"pos":[20516,20520],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[20632,20636],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[20845,20864],"content":"ComputeHash(Stream)","needQuote":true,"needEscape":true,"nodes":[{"content":"ComputeHash(Stream)","pos":[0,19]}]},{"pos":[21054,21058],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[21178,21184],"content":"Stream","needQuote":true,"needEscape":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[21421,21452],"content":"ComputeHash(Byte[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"ComputeHash(Byte[],Int32,Int32)","pos":[0,31]}]},{"pos":[21666,21670],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[21782,21786],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[21899,21904],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[22017,22022],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[22208,22216],"content":"Create()","needQuote":true,"needEscape":true,"nodes":[{"content":"Create()","pos":[0,8]}]},{"pos":[22437,22450],"content":"HashAlgorithm","needQuote":true,"needEscape":true,"nodes":[{"content":"HashAlgorithm","pos":[0,13]}]},{"pos":[22689,22703],"content":"Create(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Create(String)","pos":[0,14]}]},{"pos":[22936,22949],"content":"HashAlgorithm","needQuote":true,"needEscape":true,"nodes":[{"content":"HashAlgorithm","pos":[0,13]}]},{"pos":[23101,23107],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[23296,23305],"content":"Dispose()","needQuote":true,"needEscape":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[23566,23582],"content":"Dispose(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[23769,23776],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[23964,23968],"content":"Hash","needQuote":true,"needEscape":true,"nodes":[{"content":"Hash","pos":[0,4]}]},{"pos":[24128,24132],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[24361,24389],"content":"HashCore(Byte[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"HashCore(Byte[],Int32,Int32)","pos":[0,28]}]},{"pos":[24597,24601],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[24714,24719],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[24832,24837],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[25026,25037],"content":"HashFinal()","needQuote":true,"needEscape":true,"nodes":[{"content":"HashFinal()","pos":[0,11]}]},{"pos":[25211,25215],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[25403,25411],"content":"HashSize","needQuote":true,"needEscape":true,"nodes":[{"content":"HashSize","pos":[0,8]}]},{"pos":[25580,25585],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[25778,25791],"content":"HashSizeValue","needQuote":true,"needEscape":true,"nodes":[{"content":"HashSizeValue","pos":[0,13]}]},{"pos":[25970,25975],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[26164,26173],"content":"HashValue","needQuote":true,"needEscape":true,"nodes":[{"content":"HashValue","pos":[0,9]}]},{"pos":[26343,26347],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[26537,26549],"content":"Initialize()","needQuote":true,"needEscape":true,"nodes":[{"content":"Initialize()","pos":[0,12]}]},{"pos":[26807,26821],"content":"InputBlockSize","needQuote":true,"needEscape":true,"nodes":[{"content":"InputBlockSize","pos":[0,14]}]},{"pos":[27002,27007],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[27202,27217],"content":"OutputBlockSize","needQuote":true,"needEscape":true,"nodes":[{"content":"OutputBlockSize","pos":[0,15]}]},{"pos":[27400,27405],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[27590,27595],"content":"State","needQuote":true,"needEscape":true,"nodes":[{"content":"State","pos":[0,5]}]},{"pos":[27758,27763],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28025,28072],"content":"TransformBlock(Byte[],Int32,Int32,Byte[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"TransformBlock(Byte[],Int32,Int32,Byte[],Int32)","pos":[0,47]}]},{"pos":[28319,28324],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28436,28440],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[28553,28558],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28671,28676],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28788,28792],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[28905,28910],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[29150,29189],"content":"TransformFinalBlock(Byte[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"TransformFinalBlock(Byte[],Int32,Int32)","pos":[0,39]}]},{"pos":[29419,29423],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[29535,29539],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[29652,29657],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[29770,29775],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.HashAlgorithm\n  id: HashAlgorithm\n  children:\n  - System.Security.Cryptography.HashAlgorithm.#ctor\n  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  - System.Security.Cryptography.HashAlgorithm.Clear\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.Create\n  - System.Security.Cryptography.HashAlgorithm.Create(System.String)\n  - System.Security.Cryptography.HashAlgorithm.Dispose\n  - System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)\n  - System.Security.Cryptography.HashAlgorithm.Hash\n  - System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.HashFinal\n  - System.Security.Cryptography.HashAlgorithm.HashSize\n  - System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  - System.Security.Cryptography.HashAlgorithm.HashValue\n  - System.Security.Cryptography.HashAlgorithm.Initialize\n  - System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.State\n  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  langs:\n  - csharp\n  name: HashAlgorithm\n  nameWithType: HashAlgorithm\n  fullName: System.Security.Cryptography.HashAlgorithm\n  type: Class\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class HashAlgorithm : System.Security.Cryptography.ICryptoTransform\n  inheritance:\n  - System.Object\n  implements:\n  - System.Security.Cryptography.ICryptoTransform\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.HashAlgorithm.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: HashAlgorithm()\n  nameWithType: HashAlgorithm.HashAlgorithm()\n  fullName: System.Security.Cryptography.HashAlgorithm.HashAlgorithm()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected HashAlgorithm ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  id: CanReuseTransform\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: CanReuseTransform\n  nameWithType: HashAlgorithm.CanReuseTransform\n  fullName: System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual bool CanReuseTransform { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  id: CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: CanTransformMultipleBlocks\n  nameWithType: HashAlgorithm.CanTransformMultipleBlocks\n  fullName: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual bool CanTransformMultipleBlocks { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.HashAlgorithm.Clear\n  id: Clear\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: HashAlgorithm.Clear()\n  fullName: System.Security.Cryptography.HashAlgorithm.Clear()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  id: ComputeHash(System.Byte[])\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: ComputeHash(Byte[])\n  nameWithType: HashAlgorithm.ComputeHash(Byte[])\n  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public byte[] ComputeHash (byte[] buffer);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: Parameter description to be filled\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.HashAlgorithm.ComputeHash*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  id: ComputeHash(System.IO.Stream)\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: ComputeHash(Stream)\n  nameWithType: HashAlgorithm.ComputeHash(Stream)\n  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(Stream)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public byte[] ComputeHash (System.IO.Stream inputStream);\n    parameters:\n    - id: inputStream\n      type: System.IO.Stream\n      description: Parameter description to be filled\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.HashAlgorithm.ComputeHash*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  id: ComputeHash(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: ComputeHash(Byte[],Int32,Int32)\n  nameWithType: HashAlgorithm.ComputeHash(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public byte[] ComputeHash (byte[] buffer, int offset, int count);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: offset\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.HashAlgorithm.ComputeHash*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.HashAlgorithm.Create\n  id: Create\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: Create()\n  nameWithType: HashAlgorithm.Create()\n  fullName: System.Security.Cryptography.HashAlgorithm.Create()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static System.Security.Cryptography.HashAlgorithm Create ();\n    parameters: []\n    return:\n      type: System.Security.Cryptography.HashAlgorithm\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.HashAlgorithm.Create*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.HashAlgorithm.Create(System.String)\n  id: Create(System.String)\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: Create(String)\n  nameWithType: HashAlgorithm.Create(String)\n  fullName: System.Security.Cryptography.HashAlgorithm.Create(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static System.Security.Cryptography.HashAlgorithm Create (string hashName);\n    parameters:\n    - id: hashName\n      type: System.String\n      description: Parameter description to be filled\n    return:\n      type: System.Security.Cryptography.HashAlgorithm\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.HashAlgorithm.Create*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.HashAlgorithm.Dispose\n  id: Dispose\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: HashAlgorithm.Dispose()\n  fullName: System.Security.Cryptography.HashAlgorithm.Dispose()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Security.Cryptography.HashAlgorithm.Dispose*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: HashAlgorithm.Dispose(Boolean)\n  fullName: System.Security.Cryptography.HashAlgorithm.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.HashAlgorithm.Dispose*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.HashAlgorithm.Hash\n  id: Hash\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: Hash\n  nameWithType: HashAlgorithm.Hash\n  fullName: System.Security.Cryptography.HashAlgorithm.Hash\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual byte[] Hash { get; }\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)\n  id: HashCore(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: HashCore(Byte[],Int32,Int32)\n  nameWithType: HashAlgorithm.HashCore(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.HashCore(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected abstract void HashCore (byte[] array, int ibStart, int cbSize);\n    parameters:\n    - id: array\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: ibStart\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: cbSize\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.HashAlgorithm.HashFinal\n  id: HashFinal\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: HashFinal()\n  nameWithType: HashAlgorithm.HashFinal()\n  fullName: System.Security.Cryptography.HashAlgorithm.HashFinal()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected abstract byte[] HashFinal ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.HashAlgorithm.HashSize\n  id: HashSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: HashSize\n  nameWithType: HashAlgorithm.HashSize\n  fullName: System.Security.Cryptography.HashAlgorithm.HashSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual int HashSize { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  id: HashSizeValue\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: HashSizeValue\n  nameWithType: HashAlgorithm.HashSizeValue\n  fullName: System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected int HashSizeValue;\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.HashAlgorithm.HashValue\n  id: HashValue\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: HashValue\n  nameWithType: HashAlgorithm.HashValue\n  fullName: System.Security.Cryptography.HashAlgorithm.HashValue\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected byte[] HashValue;\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.HashAlgorithm.Initialize\n  id: Initialize\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: Initialize()\n  nameWithType: HashAlgorithm.Initialize()\n  fullName: System.Security.Cryptography.HashAlgorithm.Initialize()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public abstract void Initialize ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  id: InputBlockSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: InputBlockSize\n  nameWithType: HashAlgorithm.InputBlockSize\n  fullName: System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual int InputBlockSize { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  id: OutputBlockSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: OutputBlockSize\n  nameWithType: HashAlgorithm.OutputBlockSize\n  fullName: System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual int OutputBlockSize { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.HashAlgorithm.State\n  id: State\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: State\n  nameWithType: HashAlgorithm.State\n  fullName: System.Security.Cryptography.HashAlgorithm.State\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected int State;\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  nameWithType: HashAlgorithm.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);\n    parameters:\n    - id: inputBuffer\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: inputOffset\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: inputCount\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: outputBuffer\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: outputOffset\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  id: TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  langs:\n  - csharp\n  name: TransformFinalBlock(Byte[],Int32,Int32)\n  nameWithType: HashAlgorithm.TransformFinalBlock(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(Byte[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);\n    parameters:\n    - id: inputBuffer\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: inputOffset\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: inputCount\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Security.Cryptography.HashAlgorithm.#ctor\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashAlgorithm()\n  nameWithType: HashAlgorithm.HashAlgorithm()\n  fullName: System.Security.Cryptography.HashAlgorithm.HashAlgorithm()\n- uid: System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: CanReuseTransform\n  nameWithType: HashAlgorithm.CanReuseTransform\n  fullName: System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: CanTransformMultipleBlocks\n  nameWithType: HashAlgorithm.CanTransformMultipleBlocks\n  fullName: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.HashAlgorithm.Clear\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Clear()\n  nameWithType: HashAlgorithm.Clear()\n  fullName: System.Security.Cryptography.HashAlgorithm.Clear()\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: ComputeHash(Byte[])\n  nameWithType: HashAlgorithm.ComputeHash(Byte[])\n  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(Byte[])\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: ComputeHash(Stream)\n  nameWithType: HashAlgorithm.ComputeHash(Stream)\n  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(Stream)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: ComputeHash(Byte[],Int32,Int32)\n  nameWithType: HashAlgorithm.ComputeHash(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(Byte[],Int32,Int32)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.HashAlgorithm.Create\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Create()\n  nameWithType: HashAlgorithm.Create()\n  fullName: System.Security.Cryptography.HashAlgorithm.Create()\n- uid: System.Security.Cryptography.HashAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithm\n  nameWithType: HashAlgorithm\n  fullName: System.Security.Cryptography.HashAlgorithm\n- uid: System.Security.Cryptography.HashAlgorithm.Create(System.String)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Create(String)\n  nameWithType: HashAlgorithm.Create(String)\n  fullName: System.Security.Cryptography.HashAlgorithm.Create(String)\n- uid: System.Security.Cryptography.HashAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithm\n  nameWithType: HashAlgorithm\n  fullName: System.Security.Cryptography.HashAlgorithm\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.HashAlgorithm.Dispose\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Dispose()\n  nameWithType: HashAlgorithm.Dispose()\n  fullName: System.Security.Cryptography.HashAlgorithm.Dispose()\n- uid: System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: HashAlgorithm.Dispose(Boolean)\n  fullName: System.Security.Cryptography.HashAlgorithm.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.HashAlgorithm.Hash\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Hash\n  nameWithType: HashAlgorithm.Hash\n  fullName: System.Security.Cryptography.HashAlgorithm.Hash\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashCore(Byte[],Int32,Int32)\n  nameWithType: HashAlgorithm.HashCore(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.HashCore(Byte[],Int32,Int32)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.HashAlgorithm.HashFinal\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashFinal()\n  nameWithType: HashAlgorithm.HashFinal()\n  fullName: System.Security.Cryptography.HashAlgorithm.HashFinal()\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.HashAlgorithm.HashSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashSize\n  nameWithType: HashAlgorithm.HashSize\n  fullName: System.Security.Cryptography.HashAlgorithm.HashSize\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashSizeValue\n  nameWithType: HashAlgorithm.HashSizeValue\n  fullName: System.Security.Cryptography.HashAlgorithm.HashSizeValue\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.HashAlgorithm.HashValue\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashValue\n  nameWithType: HashAlgorithm.HashValue\n  fullName: System.Security.Cryptography.HashAlgorithm.HashValue\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.HashAlgorithm.Initialize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Initialize()\n  nameWithType: HashAlgorithm.Initialize()\n  fullName: System.Security.Cryptography.HashAlgorithm.Initialize()\n- uid: System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: InputBlockSize\n  nameWithType: HashAlgorithm.InputBlockSize\n  fullName: System.Security.Cryptography.HashAlgorithm.InputBlockSize\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: OutputBlockSize\n  nameWithType: HashAlgorithm.OutputBlockSize\n  fullName: System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.HashAlgorithm.State\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: State\n  nameWithType: HashAlgorithm.State\n  fullName: System.Security.Cryptography.HashAlgorithm.State\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  nameWithType: HashAlgorithm.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: TransformFinalBlock(Byte[],Int32,Int32)\n  nameWithType: HashAlgorithm.TransformFinalBlock(Byte[],Int32,Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(Byte[],Int32,Int32)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash*\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  nameWithType: HashAlgorithm.\n- uid: System.Security.Cryptography.HashAlgorithm.Create*\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  nameWithType: HashAlgorithm.\n- uid: System.Security.Cryptography.HashAlgorithm.Dispose*\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  nameWithType: HashAlgorithm.\n"}