{"nodes":[{"pos":[1487,1505],"content":"ConcurrentQueue<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"ConcurrentQueue<T>"},{"pos":[2160,2194],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2911,2928],"content":"ConcurrentQueue()","needQuote":true,"needEscape":true,"nodes":[{"content":"ConcurrentQueue()","pos":[0,17]}]},{"pos":[3514,3545],"content":"ConcurrentQueue(IEnumerable<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ConcurrentQueue(IEnumerable<T>)"},{"pos":[4007,4041],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4290,4307],"content":"CopyTo(T[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"CopyTo(T[],Int32)","pos":[0,17]}]},{"pos":[4658,4692],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4753,4787],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4996,5001],"content":"Count","needQuote":true,"needEscape":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[5302,5336],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5557,5567],"content":"Enqueue(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"Enqueue(T)","pos":[0,10]}]},{"pos":[5888,5922],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6147,6162],"content":"GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[6569,6603],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6816,6823],"content":"IsEmpty","needQuote":true,"needEscape":true,"nodes":[{"content":"IsEmpty","pos":[0,7]}]},{"pos":[7133,7167],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7522,7582],"content":"System.Collections.Concurrent.IProducerConsumerCollection(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Concurrent.IProducerConsumerCollection(T)","pos":[0,60]}]},{"pos":[8026,8060],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8119,8153],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8512,8572],"content":"System.Collections.Concurrent.IProducerConsumerCollection(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Concurrent.IProducerConsumerCollection(T)","pos":[0,60]}]},{"pos":[9021,9055],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9114,9148],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9489,9539],"content":"System.Collections.ICollection.CopyTo(Array,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.CopyTo(Array,Int32)","pos":[0,50]}]},{"pos":[9972,10006],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10067,10101],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10404,10449],"content":"System.Collections.ICollection.IsSynchronized","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.IsSynchronized","pos":[0,45]}]},{"pos":[10866,10900],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11191,11230],"content":"System.Collections.ICollection.SyncRoot","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.SyncRoot","pos":[0,39]}]},{"pos":[11630,11664],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11965,12011],"content":"System.Collections.IEnumerable.GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IEnumerable.GetEnumerator()","pos":[0,46]}]},{"pos":[12464,12498],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12711,12720],"content":"ToArray()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToArray()","pos":[0,9]}]},{"pos":[13034,13068],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13297,13310],"content":"TryDequeue(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryDequeue(T)","pos":[0,13]}]},{"pos":[13648,13682],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13741,13775],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13998,14008],"content":"TryPeek(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryPeek(T)","pos":[0,10]}]},{"pos":[14337,14371],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14430,14464],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14575,14588],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[14736,14753],"content":"ConcurrentQueue()","needQuote":true,"needEscape":true,"nodes":[{"content":"ConcurrentQueue()","pos":[0,17]}]},{"pos":[15075,15106],"content":"ConcurrentQueue(IEnumerable<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ConcurrentQueue(IEnumerable<T>)"},{"pos":[15380,15394],"content":"IEnumerable<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<T>"},{"pos":[15647,15664],"content":"CopyTo(T[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"CopyTo(T[],Int32)","pos":[0,17]}]},{"pos":[15846,15847],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[15947,15952],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[16147,16152],"content":"Count","needQuote":true,"needEscape":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[16326,16331],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[16532,16542],"content":"Enqueue(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"Enqueue(T)","pos":[0,10]}]},{"pos":[16710,16711],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[16899,16914],"content":"GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[17156,17170],"content":"IEnumerator<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerator<T>"},{"pos":[17405,17412],"content":"IsEmpty","needQuote":true,"needEscape":true,"nodes":[{"content":"IsEmpty","pos":[0,7]}]},{"pos":[17592,17599],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[17864,17924],"content":"System.Collections.Concurrent.IProducerConsumerCollection(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Concurrent.IProducerConsumerCollection(T)","pos":[0,60]}]},{"pos":[18210,18217],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[18318,18319],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[18567,18627],"content":"System.Collections.Concurrent.IProducerConsumerCollection(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Concurrent.IProducerConsumerCollection(T)","pos":[0,60]}]},{"pos":[18913,18920],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[19021,19022],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[19261,19311],"content":"System.Collections.ICollection.CopyTo(Array,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.CopyTo(Array,Int32)","pos":[0,50]}]},{"pos":[19575,19580],"content":"Array","needQuote":true,"needEscape":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[19693,19698],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[19933,19978],"content":"System.Collections.ICollection.IsSynchronized","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.IsSynchronized","pos":[0,45]}]},{"pos":[20234,20241],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[20474,20513],"content":"System.Collections.ICollection.SyncRoot","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.SyncRoot","pos":[0,39]}]},{"pos":[20756,20762],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20998,21044],"content":"System.Collections.IEnumerable.GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IEnumerable.GetEnumerator()","pos":[0,46]}]},{"pos":[21330,21341],"content":"IEnumerator","needQuote":true,"needEscape":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[21562,21571],"content":"ToArray()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToArray()","pos":[0,9]}]},{"pos":[21737,21738],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[21930,21943],"content":"TryDequeue(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryDequeue(T)","pos":[0,13]}]},{"pos":[22135,22142],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[22243,22244],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[22431,22441],"content":"TryPeek(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryPeek(T)","pos":[0,10]}]},{"pos":[22627,22634],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[22735,22736],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Concurrent.ConcurrentQueue`1\n  id: ConcurrentQueue`1\n  children:\n  - System.Collections.Concurrent.ConcurrentQueue`1.#ctor\n  - System.Collections.Concurrent.ConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable`1)\n  - System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)\n  - System.Collections.Concurrent.ConcurrentQueue`1.Count\n  - System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)\n  - System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator\n  - System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty\n  - System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)\n  - System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)\n  - System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#IsSynchronized\n  - System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot\n  - System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#IEnumerable#GetEnumerator\n  - System.Collections.Concurrent.ConcurrentQueue`1.ToArray\n  - System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)\n  - System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)\n  langs:\n  - csharp\n  name: ConcurrentQueue<T>\n  nameWithType: ConcurrentQueue<T>\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>\n  type: Class\n  syntax:\n    content: >-\n      [System.Diagnostics.DebuggerDisplay(\"Count = {Count}\")]\n\n      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Concurrent.SystemCollectionsConcurrent_ProducerConsumerCollectionDebugView`1))]\n\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public class ConcurrentQueue<T> : System.Collections.Concurrent.IProducerConsumerCollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IReadOnlyCollection<T>\n    typeParameters:\n    - id: T\n      description: Parameter description to be filled\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Concurrent.IProducerConsumerCollection<T>\n  - System.Collections.Generic.IEnumerable<T>\n  - System.Collections.Generic.IReadOnlyCollection<T>\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.#ctor\n  id: '#ctor'\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  langs:\n  - csharp\n  name: ConcurrentQueue()\n  nameWithType: ConcurrentQueue<T>.ConcurrentQueue()\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.ConcurrentQueue()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public ConcurrentQueue ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable`1)\n  id: '#ctor(System.Collections.Generic.IEnumerable`1)'\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  langs:\n  - csharp\n  name: ConcurrentQueue(IEnumerable<T>)\n  nameWithType: ConcurrentQueue<T>.ConcurrentQueue(IEnumerable<T>)\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.ConcurrentQueue(IEnumerable<T>)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public ConcurrentQueue (System.Collections.Generic.IEnumerable<T> collection);\n    parameters:\n    - id: collection\n      type: System.Collections.Generic.IEnumerable`1\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)\n  id: CopyTo(`0[],System.Int32)\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  langs:\n  - csharp\n  name: CopyTo(T[],Int32)\n  nameWithType: ConcurrentQueue<T>.CopyTo(T[],Int32)\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.CopyTo(T[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public void CopyTo (T[] array, int index);\n    parameters:\n    - id: array\n      type: T[]\n      description: Parameter description to be filled\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.Count\n  id: Count\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  langs:\n  - csharp\n  name: Count\n  nameWithType: ConcurrentQueue<T>.Count\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.Count\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)\n  id: Enqueue(`0)\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  langs:\n  - csharp\n  name: Enqueue(T)\n  nameWithType: ConcurrentQueue<T>.Enqueue(T)\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.Enqueue(T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public void Enqueue (T item);\n    parameters:\n    - id: item\n      type: T\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: ConcurrentQueue<T>.GetEnumerator()\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public System.Collections.Generic.IEnumerator<T> GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator`1\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty\n  id: IsEmpty\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  langs:\n  - csharp\n  name: IsEmpty\n  nameWithType: ConcurrentQueue<T>.IsEmpty\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.IsEmpty\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public bool IsEmpty { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)\n  id: System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  langs:\n  - csharp\n  name: System.Collections.Concurrent.IProducerConsumerCollection(T)\n  nameWithType: ConcurrentQueue<T>.System.Collections.Concurrent.IProducerConsumerCollection(T)\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.Concurrent.IProducerConsumerCollection(T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: bool IProducerConsumerCollection<T>.TryAdd (T item);\n    parameters:\n    - id: item\n      type: T\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)\n  id: System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  langs:\n  - csharp\n  name: System.Collections.Concurrent.IProducerConsumerCollection(T)\n  nameWithType: ConcurrentQueue<T>.System.Collections.Concurrent.IProducerConsumerCollection(T)\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.Concurrent.IProducerConsumerCollection(T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: bool IProducerConsumerCollection<T>.TryTake (out T item);\n    parameters:\n    - id: item\n      type: T\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  langs:\n  - csharp\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: ConcurrentQueue<T>.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.ICollection.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: void ICollection.CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: Parameter description to be filled\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  langs:\n  - csharp\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: ConcurrentQueue<T>.System.Collections.ICollection.IsSynchronized\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  langs:\n  - csharp\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: ConcurrentQueue<T>.System.Collections.ICollection.SyncRoot\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: ConcurrentQueue<T>.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.ToArray\n  id: ToArray\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  langs:\n  - csharp\n  name: ToArray()\n  nameWithType: ConcurrentQueue<T>.ToArray()\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.ToArray()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public T[] ToArray ();\n    parameters: []\n    return:\n      type: T[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)\n  id: TryDequeue(`0@)\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  langs:\n  - csharp\n  name: TryDequeue(T)\n  nameWithType: ConcurrentQueue<T>.TryDequeue(T)\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.TryDequeue(T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public bool TryDequeue (out T result);\n    parameters:\n    - id: result\n      type: T\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)\n  id: TryPeek(`0@)\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  langs:\n  - csharp\n  name: TryPeek(T)\n  nameWithType: ConcurrentQueue<T>.TryPeek(T)\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.TryPeek(T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public bool TryPeek (out T result);\n    parameters:\n    - id: result\n      type: T\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.#ctor\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  isExternal: false\n  name: ConcurrentQueue()\n  nameWithType: ConcurrentQueue<T>.ConcurrentQueue()\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.ConcurrentQueue()\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable`1)\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  isExternal: false\n  name: ConcurrentQueue(IEnumerable<T>)\n  nameWithType: ConcurrentQueue<T>.ConcurrentQueue(IEnumerable<T>)\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.ConcurrentQueue(IEnumerable<T>)\n- uid: System.Collections.Generic.IEnumerable`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  isExternal: false\n  name: CopyTo(T[],Int32)\n  nameWithType: ConcurrentQueue<T>.CopyTo(T[],Int32)\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.CopyTo(T[],Int32)\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.Count\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  isExternal: false\n  name: Count\n  nameWithType: ConcurrentQueue<T>.Count\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.Count\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  isExternal: false\n  name: Enqueue(T)\n  nameWithType: ConcurrentQueue<T>.Enqueue(T)\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.Enqueue(T)\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: ConcurrentQueue<T>.GetEnumerator()\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.GetEnumerator()\n- uid: System.Collections.Generic.IEnumerator`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerator<T>\n  nameWithType: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  isExternal: false\n  name: IsEmpty\n  nameWithType: ConcurrentQueue<T>.IsEmpty\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.IsEmpty\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  isExternal: false\n  name: System.Collections.Concurrent.IProducerConsumerCollection(T)\n  nameWithType: ConcurrentQueue<T>.System.Collections.Concurrent.IProducerConsumerCollection(T)\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.Concurrent.IProducerConsumerCollection(T)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  isExternal: false\n  name: System.Collections.Concurrent.IProducerConsumerCollection(T)\n  nameWithType: ConcurrentQueue<T>.System.Collections.Concurrent.IProducerConsumerCollection(T)\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.Concurrent.IProducerConsumerCollection(T)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: ConcurrentQueue<T>.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.ICollection.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#IsSynchronized\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: ConcurrentQueue<T>.System.Collections.ICollection.IsSynchronized\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.ICollection.IsSynchronized\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: ConcurrentQueue<T>.System.Collections.ICollection.SyncRoot\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.ICollection.SyncRoot\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: ConcurrentQueue<T>.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.ToArray\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  isExternal: false\n  name: ToArray()\n  nameWithType: ConcurrentQueue<T>.ToArray()\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.ToArray()\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T[]\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  isExternal: false\n  name: TryDequeue(T)\n  nameWithType: ConcurrentQueue<T>.TryDequeue(T)\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.TryDequeue(T)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)\n  parent: System.Collections.Concurrent.ConcurrentQueue`1\n  isExternal: false\n  name: TryPeek(T)\n  nameWithType: ConcurrentQueue<T>.TryPeek(T)\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.TryPeek(T)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n"}