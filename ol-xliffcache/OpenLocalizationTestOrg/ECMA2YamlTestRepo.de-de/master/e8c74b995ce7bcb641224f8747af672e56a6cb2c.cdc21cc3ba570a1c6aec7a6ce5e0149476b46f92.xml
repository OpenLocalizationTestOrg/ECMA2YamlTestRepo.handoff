{"nodes":[{"pos":[620,641],"content":"DSASignatureFormatter","needQuote":true,"needEscape":true,"nodes":[{"content":"DSASignatureFormatter","pos":[0,21]}]},{"pos":[1685,1708],"content":"DSASignatureFormatter()","needQuote":true,"needEscape":true,"nodes":[{"content":"DSASignatureFormatter()","pos":[0,23]}]},{"pos":[2338,2380],"content":"DSASignatureFormatter(AsymmetricAlgorithm)","needQuote":true,"needEscape":true,"nodes":[{"content":"DSASignatureFormatter(AsymmetricAlgorithm)","pos":[0,42]}]},{"pos":[2875,2909],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3174,3197],"content":"CreateSignature(Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"CreateSignature(Byte[])","pos":[0,23]}]},{"pos":[3590,3624],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3682,3716],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3983,4007],"content":"SetHashAlgorithm(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"SetHashAlgorithm(String)","pos":[0,24]}]},{"pos":[4401,4435],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4752,4779],"content":"SetKey(AsymmetricAlgorithm)","needQuote":true,"needEscape":true,"nodes":[{"content":"SetKey(AsymmetricAlgorithm)","pos":[0,27]}]},{"pos":[5238,5272],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5427,5484],"content":"System.Security.Cryptography.AsymmetricSignatureFormatter","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Security.Cryptography.AsymmetricSignatureFormatter","pos":[0,57]}]},{"pos":[5638,5661],"content":"DSASignatureFormatter()","needQuote":true,"needEscape":true,"nodes":[{"content":"DSASignatureFormatter()","pos":[0,23]}]},{"pos":[6014,6056],"content":"DSASignatureFormatter(AsymmetricAlgorithm)","needQuote":true,"needEscape":true,"nodes":[{"content":"DSASignatureFormatter(AsymmetricAlgorithm)","pos":[0,42]}]},{"pos":[6367,6386],"content":"AsymmetricAlgorithm","needQuote":true,"needEscape":true,"nodes":[{"content":"AsymmetricAlgorithm","pos":[0,19]}]},{"pos":[6662,6685],"content":"CreateSignature(Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"CreateSignature(Byte[])","pos":[0,23]}]},{"pos":[6899,6903],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[7015,7019],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[7246,7270],"content":"SetHashAlgorithm(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"SetHashAlgorithm(String)","pos":[0,24]}]},{"pos":[7488,7494],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[7748,7775],"content":"SetKey(AsymmetricAlgorithm)","needQuote":true,"needEscape":true,"nodes":[{"content":"SetKey(AsymmetricAlgorithm)","pos":[0,27]}]},{"pos":[8056,8075],"content":"AsymmetricAlgorithm","needQuote":true,"needEscape":true,"nodes":[{"content":"AsymmetricAlgorithm","pos":[0,19]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.DSASignatureFormatter\n  id: DSASignatureFormatter\n  children:\n  - System.Security.Cryptography.DSASignatureFormatter.#ctor\n  - System.Security.Cryptography.DSASignatureFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)\n  - System.Security.Cryptography.DSASignatureFormatter.CreateSignature(System.Byte[])\n  - System.Security.Cryptography.DSASignatureFormatter.SetHashAlgorithm(System.String)\n  - System.Security.Cryptography.DSASignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)\n  langs:\n  - csharp\n  name: DSASignatureFormatter\n  nameWithType: DSASignatureFormatter\n  fullName: System.Security.Cryptography.DSASignatureFormatter\n  type: Class\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class DSASignatureFormatter : System.Security.Cryptography.AsymmetricSignatureFormatter\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.AsymmetricSignatureFormatter\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Security.Cryptography.HashAlgorithm)\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSASignatureFormatter.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.DSASignatureFormatter\n  langs:\n  - csharp\n  name: DSASignatureFormatter()\n  nameWithType: DSASignatureFormatter.DSASignatureFormatter()\n  fullName: System.Security.Cryptography.DSASignatureFormatter.DSASignatureFormatter()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public DSASignatureFormatter ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSASignatureFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)\n  id: '#ctor(System.Security.Cryptography.AsymmetricAlgorithm)'\n  parent: System.Security.Cryptography.DSASignatureFormatter\n  langs:\n  - csharp\n  name: DSASignatureFormatter(AsymmetricAlgorithm)\n  nameWithType: DSASignatureFormatter.DSASignatureFormatter(AsymmetricAlgorithm)\n  fullName: System.Security.Cryptography.DSASignatureFormatter.DSASignatureFormatter(AsymmetricAlgorithm)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public DSASignatureFormatter (System.Security.Cryptography.AsymmetricAlgorithm key);\n    parameters:\n    - id: key\n      type: System.Security.Cryptography.AsymmetricAlgorithm\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSASignatureFormatter.CreateSignature(System.Byte[])\n  id: CreateSignature(System.Byte[])\n  parent: System.Security.Cryptography.DSASignatureFormatter\n  langs:\n  - csharp\n  name: CreateSignature(Byte[])\n  nameWithType: DSASignatureFormatter.CreateSignature(Byte[])\n  fullName: System.Security.Cryptography.DSASignatureFormatter.CreateSignature(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override byte[] CreateSignature (byte[] rgbHash);\n    parameters:\n    - id: rgbHash\n      type: System.Byte[]\n      description: Parameter description to be filled\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSASignatureFormatter.SetHashAlgorithm(System.String)\n  id: SetHashAlgorithm(System.String)\n  parent: System.Security.Cryptography.DSASignatureFormatter\n  langs:\n  - csharp\n  name: SetHashAlgorithm(String)\n  nameWithType: DSASignatureFormatter.SetHashAlgorithm(String)\n  fullName: System.Security.Cryptography.DSASignatureFormatter.SetHashAlgorithm(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override void SetHashAlgorithm (string strName);\n    parameters:\n    - id: strName\n      type: System.String\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.DSASignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)\n  id: SetKey(System.Security.Cryptography.AsymmetricAlgorithm)\n  parent: System.Security.Cryptography.DSASignatureFormatter\n  langs:\n  - csharp\n  name: SetKey(AsymmetricAlgorithm)\n  nameWithType: DSASignatureFormatter.SetKey(AsymmetricAlgorithm)\n  fullName: System.Security.Cryptography.DSASignatureFormatter.SetKey(AsymmetricAlgorithm)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override void SetKey (System.Security.Cryptography.AsymmetricAlgorithm key);\n    parameters:\n    - id: key\n      type: System.Security.Cryptography.AsymmetricAlgorithm\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Security.Cryptography.AsymmetricSignatureFormatter\n  isExternal: false\n  name: System.Security.Cryptography.AsymmetricSignatureFormatter\n- uid: System.Security.Cryptography.DSASignatureFormatter.#ctor\n  parent: System.Security.Cryptography.DSASignatureFormatter\n  isExternal: false\n  name: DSASignatureFormatter()\n  nameWithType: DSASignatureFormatter.DSASignatureFormatter()\n  fullName: System.Security.Cryptography.DSASignatureFormatter.DSASignatureFormatter()\n- uid: System.Security.Cryptography.DSASignatureFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)\n  parent: System.Security.Cryptography.DSASignatureFormatter\n  isExternal: false\n  name: DSASignatureFormatter(AsymmetricAlgorithm)\n  nameWithType: DSASignatureFormatter.DSASignatureFormatter(AsymmetricAlgorithm)\n  fullName: System.Security.Cryptography.DSASignatureFormatter.DSASignatureFormatter(AsymmetricAlgorithm)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsymmetricAlgorithm\n  nameWithType: AsymmetricAlgorithm\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm\n- uid: System.Security.Cryptography.DSASignatureFormatter.CreateSignature(System.Byte[])\n  parent: System.Security.Cryptography.DSASignatureFormatter\n  isExternal: false\n  name: CreateSignature(Byte[])\n  nameWithType: DSASignatureFormatter.CreateSignature(Byte[])\n  fullName: System.Security.Cryptography.DSASignatureFormatter.CreateSignature(Byte[])\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.DSASignatureFormatter.SetHashAlgorithm(System.String)\n  parent: System.Security.Cryptography.DSASignatureFormatter\n  isExternal: false\n  name: SetHashAlgorithm(String)\n  nameWithType: DSASignatureFormatter.SetHashAlgorithm(String)\n  fullName: System.Security.Cryptography.DSASignatureFormatter.SetHashAlgorithm(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.DSASignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)\n  parent: System.Security.Cryptography.DSASignatureFormatter\n  isExternal: false\n  name: SetKey(AsymmetricAlgorithm)\n  nameWithType: DSASignatureFormatter.SetKey(AsymmetricAlgorithm)\n  fullName: System.Security.Cryptography.DSASignatureFormatter.SetKey(AsymmetricAlgorithm)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsymmetricAlgorithm\n  nameWithType: AsymmetricAlgorithm\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm\n"}