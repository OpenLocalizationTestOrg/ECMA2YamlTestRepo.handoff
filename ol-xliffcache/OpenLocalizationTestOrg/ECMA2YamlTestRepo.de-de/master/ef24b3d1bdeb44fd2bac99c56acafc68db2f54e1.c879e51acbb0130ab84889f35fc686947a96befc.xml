{"nodes":[{"pos":[2221,2239],"content":"SymmetricAlgorithm","needQuote":true,"needEscape":true,"nodes":[{"content":"SymmetricAlgorithm","pos":[0,18]}]},{"pos":[3067,3087],"content":"SymmetricAlgorithm()","needQuote":true,"needEscape":true,"nodes":[{"content":"SymmetricAlgorithm()","pos":[0,20]}]},{"pos":[3605,3614],"content":"BlockSize","needQuote":true,"needEscape":true,"nodes":[{"content":"BlockSize","pos":[0,9]}]},{"pos":[3938,3972],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4199,4213],"content":"BlockSizeValue","needQuote":true,"needEscape":true,"nodes":[{"content":"BlockSizeValue","pos":[0,14]}]},{"pos":[4531,4565],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4774,4781],"content":"Clear()","needQuote":true,"needEscape":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[5251,5259],"content":"Create()","needQuote":true,"needEscape":true,"nodes":[{"content":"Create()","pos":[0,8]}]},{"pos":[5663,5697],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6006,6020],"content":"Create(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Create(String)","pos":[0,14]}]},{"pos":[6419,6453],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6545,6579],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6876,6893],"content":"CreateDecryptor()","needQuote":true,"needEscape":true,"nodes":[{"content":"CreateDecryptor()","pos":[0,17]}]},{"pos":[7321,7355],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7719,7749],"content":"CreateDecryptor(Byte[],Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"CreateDecryptor(Byte[],Byte[])","pos":[0,30]}]},{"pos":[8201,8235],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8297,8331],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8421,8455],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8761,8778],"content":"CreateEncryptor()","needQuote":true,"needEscape":true,"nodes":[{"content":"CreateEncryptor()","pos":[0,17]}]},{"pos":[9206,9240],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9604,9634],"content":"CreateEncryptor(Byte[],Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"CreateEncryptor(Byte[],Byte[])","pos":[0,30]}]},{"pos":[10086,10120],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10182,10216],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10306,10340],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10630,10639],"content":"Dispose()","needQuote":true,"needEscape":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[11218,11234],"content":"Dispose(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[11602,11636],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11928,11940],"content":"FeedbackSize","needQuote":true,"needEscape":true,"nodes":[{"content":"FeedbackSize","pos":[0,12]}]},{"pos":[12273,12307],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12540,12557],"content":"FeedbackSizeValue","needQuote":true,"needEscape":true,"nodes":[{"content":"FeedbackSizeValue","pos":[0,17]}]},{"pos":[12884,12918],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13137,13149],"content":"GenerateIV()","needQuote":true,"needEscape":true,"nodes":[{"content":"GenerateIV()","pos":[0,12]}]},{"pos":[13653,13666],"content":"GenerateKey()","needQuote":true,"needEscape":true,"nodes":[{"content":"GenerateKey()","pos":[0,13]}]},{"pos":[14155,14157],"content":"IV","needQuote":true,"needEscape":true,"nodes":[{"content":"IV","pos":[0,2]}]},{"pos":[14464,14498],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14711,14718],"content":"IVValue","needQuote":true,"needEscape":true,"nodes":[{"content":"IVValue","pos":[0,7]}]},{"pos":[15019,15053],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15258,15261],"content":"Key","needQuote":true,"needEscape":true,"nodes":[{"content":"Key","pos":[0,3]}]},{"pos":[15571,15605],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15818,15825],"content":"KeySize","needQuote":true,"needEscape":true,"nodes":[{"content":"KeySize","pos":[0,7]}]},{"pos":[16143,16177],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16400,16412],"content":"KeySizeValue","needQuote":true,"needEscape":true,"nodes":[{"content":"KeySizeValue","pos":[0,12]}]},{"pos":[16724,16758],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16973,16981],"content":"KeyValue","needQuote":true,"needEscape":true,"nodes":[{"content":"KeyValue","pos":[0,8]}]},{"pos":[17285,17319],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17548,17563],"content":"LegalBlockSizes","needQuote":true,"needEscape":true,"nodes":[{"content":"LegalBlockSizes","pos":[0,15]}]},{"pos":[17963,17997],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18236,18256],"content":"LegalBlockSizesValue","needQuote":true,"needEscape":true,"nodes":[{"content":"LegalBlockSizesValue","pos":[0,20]}]},{"pos":[18655,18689],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18914,18927],"content":"LegalKeySizes","needQuote":true,"needEscape":true,"nodes":[{"content":"LegalKeySizes","pos":[0,13]}]},{"pos":[19321,19355],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[19590,19608],"content":"LegalKeySizesValue","needQuote":true,"needEscape":true,"nodes":[{"content":"LegalKeySizesValue","pos":[0,18]}]},{"pos":[20001,20035],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20242,20246],"content":"Mode","needQuote":true,"needEscape":true,"nodes":[{"content":"Mode","pos":[0,4]}]},{"pos":[20618,20652],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[20869,20878],"content":"ModeValue","needQuote":true,"needEscape":true,"nodes":[{"content":"ModeValue","pos":[0,9]}]},{"pos":[21244,21278],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[21491,21498],"content":"Padding","needQuote":true,"needEscape":true,"nodes":[{"content":"Padding","pos":[0,7]}]},{"pos":[21881,21915],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22138,22150],"content":"PaddingValue","needQuote":true,"needEscape":true,"nodes":[{"content":"PaddingValue","pos":[0,12]}]},{"pos":[22527,22561],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[22812,22831],"content":"ValidKeySize(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"ValidKeySize(Int32)","pos":[0,19]}]},{"pos":[23196,23230],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[23289,23323],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[23434,23447],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[23595,23615],"content":"SymmetricAlgorithm()","needQuote":true,"needEscape":true,"nodes":[{"content":"SymmetricAlgorithm()","pos":[0,20]}]},{"pos":[23904,23913],"content":"BlockSize","needQuote":true,"needEscape":true,"nodes":[{"content":"BlockSize","pos":[0,9]}]},{"pos":[24094,24099],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[24303,24317],"content":"BlockSizeValue","needQuote":true,"needEscape":true,"nodes":[{"content":"BlockSizeValue","pos":[0,14]}]},{"pos":[24508,24513],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[24708,24715],"content":"Clear()","needQuote":true,"needEscape":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[24975,24983],"content":"Create()","needQuote":true,"needEscape":true,"nodes":[{"content":"Create()","pos":[0,8]}]},{"pos":[25219,25237],"content":"SymmetricAlgorithm","needQuote":true,"needEscape":true,"nodes":[{"content":"SymmetricAlgorithm","pos":[0,18]}]},{"pos":[25496,25510],"content":"Create(String)","needQuote":true,"needEscape":true,"nodes":[{"content":"Create(String)","pos":[0,14]}]},{"pos":[25758,25776],"content":"SymmetricAlgorithm","needQuote":true,"needEscape":true,"nodes":[{"content":"SymmetricAlgorithm","pos":[0,18]}]},{"pos":[25938,25944],"content":"String","needQuote":true,"needEscape":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[26151,26168],"content":"CreateDecryptor()","needQuote":true,"needEscape":true,"nodes":[{"content":"CreateDecryptor()","pos":[0,17]}]},{"pos":[26420,26436],"content":"ICryptoTransform","needQuote":true,"needEscape":true,"nodes":[{"content":"ICryptoTransform","pos":[0,16]}]},{"pos":[26714,26744],"content":"CreateDecryptor(Byte[],Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"CreateDecryptor(Byte[],Byte[])","pos":[0,30]}]},{"pos":[27022,27038],"content":"ICryptoTransform","needQuote":true,"needEscape":true,"nodes":[{"content":"ICryptoTransform","pos":[0,16]}]},{"pos":[27194,27198],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[27310,27314],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[27519,27536],"content":"CreateEncryptor()","needQuote":true,"needEscape":true,"nodes":[{"content":"CreateEncryptor()","pos":[0,17]}]},{"pos":[27788,27804],"content":"ICryptoTransform","needQuote":true,"needEscape":true,"nodes":[{"content":"ICryptoTransform","pos":[0,16]}]},{"pos":[28082,28112],"content":"CreateEncryptor(Byte[],Byte[])","needQuote":true,"needEscape":true,"nodes":[{"content":"CreateEncryptor(Byte[],Byte[])","pos":[0,30]}]},{"pos":[28390,28406],"content":"ICryptoTransform","needQuote":true,"needEscape":true,"nodes":[{"content":"ICryptoTransform","pos":[0,16]}]},{"pos":[28562,28566],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[28678,28682],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[28879,28888],"content":"Dispose()","needQuote":true,"needEscape":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[29169,29185],"content":"Dispose(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[29382,29389],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[29595,29607],"content":"FeedbackSize","needQuote":true,"needEscape":true,"nodes":[{"content":"FeedbackSize","pos":[0,12]}]},{"pos":[29794,29799],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[30006,30023],"content":"FeedbackSizeValue","needQuote":true,"needEscape":true,"nodes":[{"content":"FeedbackSizeValue","pos":[0,17]}]},{"pos":[30220,30225],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[30425,30437],"content":"GenerateIV()","needQuote":true,"needEscape":true,"nodes":[{"content":"GenerateIV()","pos":[0,12]}]},{"pos":[30712,30725],"content":"GenerateKey()","needQuote":true,"needEscape":true,"nodes":[{"content":"GenerateKey()","pos":[0,13]}]},{"pos":[30993,30995],"content":"IV","needQuote":true,"needEscape":true,"nodes":[{"content":"IV","pos":[0,2]}]},{"pos":[31161,31165],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[31362,31369],"content":"IVValue","needQuote":true,"needEscape":true,"nodes":[{"content":"IVValue","pos":[0,7]}]},{"pos":[31545,31549],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[31742,31745],"content":"Key","needQuote":true,"needEscape":true,"nodes":[{"content":"Key","pos":[0,3]}]},{"pos":[31913,31917],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[32114,32121],"content":"KeySize","needQuote":true,"needEscape":true,"nodes":[{"content":"KeySize","pos":[0,7]}]},{"pos":[32298,32303],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[32505,32517],"content":"KeySizeValue","needQuote":true,"needEscape":true,"nodes":[{"content":"KeySizeValue","pos":[0,12]}]},{"pos":[32704,32709],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[32907,32915],"content":"KeyValue","needQuote":true,"needEscape":true,"nodes":[{"content":"KeyValue","pos":[0,8]}]},{"pos":[33093,33097],"content":"Byte","needQuote":true,"needEscape":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[33302,33317],"content":"LegalBlockSizes","needQuote":true,"needEscape":true,"nodes":[{"content":"LegalBlockSizes","pos":[0,15]}]},{"pos":[33557,33565],"content":"KeySizes","needQuote":true,"needEscape":true,"nodes":[{"content":"KeySizes","pos":[0,8]}]},{"pos":[33805,33825],"content":"LegalBlockSizesValue","needQuote":true,"needEscape":true,"nodes":[{"content":"LegalBlockSizesValue","pos":[0,20]}]},{"pos":[34075,34083],"content":"KeySizes","needQuote":true,"needEscape":true,"nodes":[{"content":"KeySizes","pos":[0,8]}]},{"pos":[34316,34329],"content":"LegalKeySizes","needQuote":true,"needEscape":true,"nodes":[{"content":"LegalKeySizes","pos":[0,13]}]},{"pos":[34565,34573],"content":"KeySizes","needQuote":true,"needEscape":true,"nodes":[{"content":"KeySizes","pos":[0,8]}]},{"pos":[34811,34829],"content":"LegalKeySizesValue","needQuote":true,"needEscape":true,"nodes":[{"content":"LegalKeySizesValue","pos":[0,18]}]},{"pos":[35075,35083],"content":"KeySizes","needQuote":true,"needEscape":true,"nodes":[{"content":"KeySizes","pos":[0,8]}]},{"pos":[35307,35311],"content":"Mode","needQuote":true,"needEscape":true,"nodes":[{"content":"Mode","pos":[0,4]}]},{"pos":[35531,35541],"content":"CipherMode","needQuote":true,"needEscape":true,"nodes":[{"content":"CipherMode","pos":[0,10]}]},{"pos":[35772,35781],"content":"ModeValue","needQuote":true,"needEscape":true,"nodes":[{"content":"ModeValue","pos":[0,9]}]},{"pos":[36011,36021],"content":"CipherMode","needQuote":true,"needEscape":true,"nodes":[{"content":"CipherMode","pos":[0,10]}]},{"pos":[36250,36257],"content":"Padding","needQuote":true,"needEscape":true,"nodes":[{"content":"Padding","pos":[0,7]}]},{"pos":[36484,36495],"content":"PaddingMode","needQuote":true,"needEscape":true,"nodes":[{"content":"PaddingMode","pos":[0,11]}]},{"pos":[36731,36743],"content":"PaddingValue","needQuote":true,"needEscape":true,"nodes":[{"content":"PaddingValue","pos":[0,12]}]},{"pos":[36980,36991],"content":"PaddingMode","needQuote":true,"needEscape":true,"nodes":[{"content":"PaddingMode","pos":[0,11]}]},{"pos":[37241,37260],"content":"ValidKeySize(Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"ValidKeySize(Int32)","pos":[0,19]}]},{"pos":[37463,37470],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[37587,37592],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.SymmetricAlgorithm\n  id: SymmetricAlgorithm\n  children:\n  - System.Security.Cryptography.SymmetricAlgorithm.#ctor\n  - System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  - System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.Clear\n  - System.Security.Cryptography.SymmetricAlgorithm.Create\n  - System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n  - System.Security.Cryptography.SymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n  - System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n  - System.Security.Cryptography.SymmetricAlgorithm.IV\n  - System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  - System.Security.Cryptography.SymmetricAlgorithm.Key\n  - System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  - System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  - System.Security.Cryptography.SymmetricAlgorithm.Mode\n  - System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.Padding\n  - System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  - System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n  langs:\n  - csharp\n  name: SymmetricAlgorithm\n  nameWithType: SymmetricAlgorithm\n  fullName: System.Security.Cryptography.SymmetricAlgorithm\n  type: Class\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class SymmetricAlgorithm : IDisposable\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.SymmetricAlgorithm.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: SymmetricAlgorithm()\n  nameWithType: SymmetricAlgorithm.SymmetricAlgorithm()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.SymmetricAlgorithm()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected SymmetricAlgorithm ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  id: BlockSize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: BlockSize\n  nameWithType: SymmetricAlgorithm.BlockSize\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual int BlockSize { get; set; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  id: BlockSizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: BlockSizeValue\n  nameWithType: SymmetricAlgorithm.BlockSizeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected int BlockSizeValue;\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Clear\n  id: Clear\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: SymmetricAlgorithm.Clear()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Clear()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Create\n  id: Create\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: Create()\n  nameWithType: SymmetricAlgorithm.Create()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Create()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static System.Security.Cryptography.SymmetricAlgorithm Create ();\n    parameters: []\n    return:\n      type: System.Security.Cryptography.SymmetricAlgorithm\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.SymmetricAlgorithm.Create*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)\n  id: Create(System.String)\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: Create(String)\n  nameWithType: SymmetricAlgorithm.Create(String)\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Create(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static System.Security.Cryptography.SymmetricAlgorithm Create (string algName);\n    parameters:\n    - id: algName\n      type: System.String\n      description: Parameter description to be filled\n    return:\n      type: System.Security.Cryptography.SymmetricAlgorithm\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.SymmetricAlgorithm.Create*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n  id: CreateDecryptor\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: CreateDecryptor()\n  nameWithType: SymmetricAlgorithm.CreateDecryptor()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual System.Security.Cryptography.ICryptoTransform CreateDecryptor ();\n    parameters: []\n    return:\n      type: System.Security.Cryptography.ICryptoTransform\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n  id: CreateDecryptor(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: CreateDecryptor(Byte[],Byte[])\n  nameWithType: SymmetricAlgorithm.CreateDecryptor(Byte[],Byte[])\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(Byte[],Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public abstract System.Security.Cryptography.ICryptoTransform CreateDecryptor (byte[] rgbKey, byte[] rgbIV);\n    parameters:\n    - id: rgbKey\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: rgbIV\n      type: System.Byte[]\n      description: Parameter description to be filled\n    return:\n      type: System.Security.Cryptography.ICryptoTransform\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n  id: CreateEncryptor\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: CreateEncryptor()\n  nameWithType: SymmetricAlgorithm.CreateEncryptor()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual System.Security.Cryptography.ICryptoTransform CreateEncryptor ();\n    parameters: []\n    return:\n      type: System.Security.Cryptography.ICryptoTransform\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n  id: CreateEncryptor(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: CreateEncryptor(Byte[],Byte[])\n  nameWithType: SymmetricAlgorithm.CreateEncryptor(Byte[],Byte[])\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(Byte[],Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public abstract System.Security.Cryptography.ICryptoTransform CreateEncryptor (byte[] rgbKey, byte[] rgbIV);\n    parameters:\n    - id: rgbKey\n      type: System.Byte[]\n      description: Parameter description to be filled\n    - id: rgbIV\n      type: System.Byte[]\n      description: Parameter description to be filled\n    return:\n      type: System.Security.Cryptography.ICryptoTransform\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n  id: Dispose\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: SymmetricAlgorithm.Dispose()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Security.Cryptography.SymmetricAlgorithm.Dispose*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: SymmetricAlgorithm.Dispose(Boolean)\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Security.Cryptography.SymmetricAlgorithm.Dispose*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n  id: FeedbackSize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: FeedbackSize\n  nameWithType: SymmetricAlgorithm.FeedbackSize\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual int FeedbackSize { get; set; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n  id: FeedbackSizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: FeedbackSizeValue\n  nameWithType: SymmetricAlgorithm.FeedbackSizeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected int FeedbackSizeValue;\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n  id: GenerateIV\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: GenerateIV()\n  nameWithType: SymmetricAlgorithm.GenerateIV()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public abstract void GenerateIV ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n  id: GenerateKey\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: GenerateKey()\n  nameWithType: SymmetricAlgorithm.GenerateKey()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public abstract void GenerateKey ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.SymmetricAlgorithm.IV\n  id: IV\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: IV\n  nameWithType: SymmetricAlgorithm.IV\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.IV\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual byte[] IV { get; set; }\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  id: IVValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: IVValue\n  nameWithType: SymmetricAlgorithm.IVValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected byte[] IVValue;\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Key\n  id: Key\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: Key\n  nameWithType: SymmetricAlgorithm.Key\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Key\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual byte[] Key { get; set; }\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  id: KeySize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: KeySize\n  nameWithType: SymmetricAlgorithm.KeySize\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual int KeySize { get; set; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  id: KeySizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: KeySizeValue\n  nameWithType: SymmetricAlgorithm.KeySizeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected int KeySizeValue;\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  id: KeyValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: KeyValue\n  nameWithType: SymmetricAlgorithm.KeyValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected byte[] KeyValue;\n    return:\n      type: System.Byte[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  id: LegalBlockSizes\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: LegalBlockSizes\n  nameWithType: SymmetricAlgorithm.LegalBlockSizes\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual System.Security.Cryptography.KeySizes[] LegalBlockSizes { get; }\n    return:\n      type: System.Security.Cryptography.KeySizes[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  id: LegalBlockSizesValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: LegalBlockSizesValue\n  nameWithType: SymmetricAlgorithm.LegalBlockSizesValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected System.Security.Cryptography.KeySizes[] LegalBlockSizesValue;\n    return:\n      type: System.Security.Cryptography.KeySizes[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  id: LegalKeySizes\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: LegalKeySizes\n  nameWithType: SymmetricAlgorithm.LegalKeySizes\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual System.Security.Cryptography.KeySizes[] LegalKeySizes { get; }\n    return:\n      type: System.Security.Cryptography.KeySizes[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  id: LegalKeySizesValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: LegalKeySizesValue\n  nameWithType: SymmetricAlgorithm.LegalKeySizesValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected System.Security.Cryptography.KeySizes[] LegalKeySizesValue;\n    return:\n      type: System.Security.Cryptography.KeySizes[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Mode\n  id: Mode\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: Mode\n  nameWithType: SymmetricAlgorithm.Mode\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Mode\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual System.Security.Cryptography.CipherMode Mode { get; set; }\n    return:\n      type: System.Security.Cryptography.CipherMode\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  id: ModeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: ModeValue\n  nameWithType: SymmetricAlgorithm.ModeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected System.Security.Cryptography.CipherMode ModeValue;\n    return:\n      type: System.Security.Cryptography.CipherMode\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Padding\n  id: Padding\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: Padding\n  nameWithType: SymmetricAlgorithm.Padding\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Padding\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual System.Security.Cryptography.PaddingMode Padding { get; set; }\n    return:\n      type: System.Security.Cryptography.PaddingMode\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  id: PaddingValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: PaddingValue\n  nameWithType: SymmetricAlgorithm.PaddingValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected System.Security.Cryptography.PaddingMode PaddingValue;\n    return:\n      type: System.Security.Cryptography.PaddingMode\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n  id: ValidKeySize(System.Int32)\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  langs:\n  - csharp\n  name: ValidKeySize(Int32)\n  nameWithType: SymmetricAlgorithm.ValidKeySize(Int32)\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public bool ValidKeySize (int bitLength);\n    parameters:\n    - id: bitLength\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Security.Cryptography.SymmetricAlgorithm.#ctor\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: SymmetricAlgorithm()\n  nameWithType: SymmetricAlgorithm.SymmetricAlgorithm()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.SymmetricAlgorithm()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: BlockSize\n  nameWithType: SymmetricAlgorithm.BlockSize\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: BlockSizeValue\n  nameWithType: SymmetricAlgorithm.BlockSizeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Clear\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Clear()\n  nameWithType: SymmetricAlgorithm.Clear()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Clear()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Create\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Create()\n  nameWithType: SymmetricAlgorithm.Create()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Create()\n- uid: System.Security.Cryptography.SymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: SymmetricAlgorithm\n  nameWithType: SymmetricAlgorithm\n  fullName: System.Security.Cryptography.SymmetricAlgorithm\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Create(String)\n  nameWithType: SymmetricAlgorithm.Create(String)\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Create(String)\n- uid: System.Security.Cryptography.SymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: SymmetricAlgorithm\n  nameWithType: SymmetricAlgorithm\n  fullName: System.Security.Cryptography.SymmetricAlgorithm\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: CreateDecryptor()\n  nameWithType: SymmetricAlgorithm.CreateDecryptor()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor()\n- uid: System.Security.Cryptography.ICryptoTransform\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ICryptoTransform\n  nameWithType: ICryptoTransform\n  fullName: System.Security.Cryptography.ICryptoTransform\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: CreateDecryptor(Byte[],Byte[])\n  nameWithType: SymmetricAlgorithm.CreateDecryptor(Byte[],Byte[])\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(Byte[],Byte[])\n- uid: System.Security.Cryptography.ICryptoTransform\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ICryptoTransform\n  nameWithType: ICryptoTransform\n  fullName: System.Security.Cryptography.ICryptoTransform\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: CreateEncryptor()\n  nameWithType: SymmetricAlgorithm.CreateEncryptor()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor()\n- uid: System.Security.Cryptography.ICryptoTransform\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ICryptoTransform\n  nameWithType: ICryptoTransform\n  fullName: System.Security.Cryptography.ICryptoTransform\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: CreateEncryptor(Byte[],Byte[])\n  nameWithType: SymmetricAlgorithm.CreateEncryptor(Byte[],Byte[])\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(Byte[],Byte[])\n- uid: System.Security.Cryptography.ICryptoTransform\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ICryptoTransform\n  nameWithType: ICryptoTransform\n  fullName: System.Security.Cryptography.ICryptoTransform\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Dispose()\n  nameWithType: SymmetricAlgorithm.Dispose()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: SymmetricAlgorithm.Dispose(Boolean)\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: FeedbackSize\n  nameWithType: SymmetricAlgorithm.FeedbackSize\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: FeedbackSizeValue\n  nameWithType: SymmetricAlgorithm.FeedbackSizeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: GenerateIV()\n  nameWithType: SymmetricAlgorithm.GenerateIV()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: GenerateKey()\n  nameWithType: SymmetricAlgorithm.GenerateKey()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.IV\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: IV\n  nameWithType: SymmetricAlgorithm.IV\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.IV\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: IVValue\n  nameWithType: SymmetricAlgorithm.IVValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.IVValue\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Key\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Key\n  nameWithType: SymmetricAlgorithm.Key\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Key\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: KeySize\n  nameWithType: SymmetricAlgorithm.KeySize\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySize\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: KeySizeValue\n  nameWithType: SymmetricAlgorithm.KeySizeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: KeyValue\n  nameWithType: SymmetricAlgorithm.KeyValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte[]\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: LegalBlockSizes\n  nameWithType: SymmetricAlgorithm.LegalBlockSizes\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n- uid: System.Security.Cryptography.KeySizes\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: KeySizes\n  nameWithType: KeySizes\n  fullName: System.Security.Cryptography.KeySizes[]\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: LegalBlockSizesValue\n  nameWithType: SymmetricAlgorithm.LegalBlockSizesValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n- uid: System.Security.Cryptography.KeySizes\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: KeySizes\n  nameWithType: KeySizes\n  fullName: System.Security.Cryptography.KeySizes[]\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: LegalKeySizes\n  nameWithType: SymmetricAlgorithm.LegalKeySizes\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n- uid: System.Security.Cryptography.KeySizes\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: KeySizes\n  nameWithType: KeySizes\n  fullName: System.Security.Cryptography.KeySizes[]\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: LegalKeySizesValue\n  nameWithType: SymmetricAlgorithm.LegalKeySizesValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n- uid: System.Security.Cryptography.KeySizes\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: KeySizes\n  nameWithType: KeySizes\n  fullName: System.Security.Cryptography.KeySizes[]\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Mode\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Mode\n  nameWithType: SymmetricAlgorithm.Mode\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Mode\n- uid: System.Security.Cryptography.CipherMode\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CipherMode\n  nameWithType: CipherMode\n  fullName: System.Security.Cryptography.CipherMode\n- uid: System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: ModeValue\n  nameWithType: SymmetricAlgorithm.ModeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n- uid: System.Security.Cryptography.CipherMode\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CipherMode\n  nameWithType: CipherMode\n  fullName: System.Security.Cryptography.CipherMode\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Padding\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Padding\n  nameWithType: SymmetricAlgorithm.Padding\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Padding\n- uid: System.Security.Cryptography.PaddingMode\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: PaddingMode\n  nameWithType: PaddingMode\n  fullName: System.Security.Cryptography.PaddingMode\n- uid: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: PaddingValue\n  nameWithType: SymmetricAlgorithm.PaddingValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n- uid: System.Security.Cryptography.PaddingMode\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: PaddingMode\n  nameWithType: PaddingMode\n  fullName: System.Security.Cryptography.PaddingMode\n- uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: ValidKeySize(Int32)\n  nameWithType: SymmetricAlgorithm.ValidKeySize(Int32)\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(Int32)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Create*\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  nameWithType: SymmetricAlgorithm.\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor*\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  nameWithType: SymmetricAlgorithm.\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor*\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  nameWithType: SymmetricAlgorithm.\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose*\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  nameWithType: SymmetricAlgorithm.\n"}