{"nodes":[{"pos":[827,855],"content":"GenericPair<TValue1,TValue2>","needQuote":true,"needEscape":true,"nodes":[{"content":"GenericPair&lt;TValue1,TValue2&gt;","pos":[0,28],"source":"GenericPair<TValue1,TValue2>"}]},{"pos":[1103,1137],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[1175,1209],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[1706,1719],"content":"GenericPair()","needQuote":true,"needEscape":true,"nodes":[{"content":"GenericPair()","pos":[0,13]}]},{"pos":[2293,2317],"content":"GenericPair(GenericPair)","needQuote":true,"needEscape":true,"nodes":[{"content":"GenericPair(GenericPair)","pos":[0,24]}]},{"pos":[2770,2804],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3095,3137],"content":"GenericPair(KeyValuePair<TValue1,TValue2>)","needQuote":true,"needEscape":true,"nodes":[{"content":"GenericPair(KeyValuePair&lt;TValue1,TValue2&gt;)","pos":[0,42],"source":"GenericPair(KeyValuePair<TValue1,TValue2>)"}]},{"pos":[3670,3704],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3905,3925],"content":"GenericPair(TValue1)","needQuote":true,"needEscape":true,"nodes":[{"content":"GenericPair(TValue1)","pos":[0,20]}]},{"pos":[4310,4344],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4551,4579],"content":"GenericPair(TValue1,TValue2)","needQuote":true,"needEscape":true,"nodes":[{"content":"GenericPair(TValue1,TValue2)","pos":[0,28]}]},{"pos":[4995,5029],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5085,5119],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5342,5356],"content":"Equals(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[5748,5782],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5841,5875],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6066,6071],"content":"first","needQuote":true,"needEscape":true,"nodes":[{"content":"first","pos":[0,5]}]},{"pos":[6386,6420],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6695,6717],"content":"op_Assign(GenericPair)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Assign(GenericPair)","pos":[0,22]}]},{"pos":[7198,7232],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7313,7347],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7540,7546],"content":"second","needQuote":true,"needEscape":true,"nodes":[{"content":"second","pos":[0,6]}]},{"pos":[7864,7898],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8163,8180],"content":"swap(GenericPair)","needQuote":true,"needEscape":true,"nodes":[{"content":"swap(GenericPair)","pos":[0,17]}]},{"pos":[8612,8646],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8757,8770],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[8900,8913],"content":"GenericPair()","needQuote":true,"needEscape":true,"nodes":[{"content":"GenericPair()","pos":[0,13]}]},{"pos":[9220,9244],"content":"GenericPair(GenericPair)","needQuote":true,"needEscape":true,"nodes":[{"content":"GenericPair(GenericPair)","pos":[0,24]}]},{"pos":[9512,9523],"content":"GenericPair","needQuote":true,"needEscape":true,"nodes":[{"content":"GenericPair","pos":[0,11]}]},{"pos":[9779,9821],"content":"GenericPair(KeyValuePair<TValue1,TValue2>)","needQuote":true,"needEscape":true,"nodes":[{"content":"GenericPair(KeyValuePair&lt;TValue1,TValue2&gt;)","pos":[0,42],"source":"GenericPair(KeyValuePair<TValue1,TValue2>)"}]},{"pos":[10148,10177],"content":"KeyValuePair<TValue1,TValue2>","needQuote":true,"needEscape":true,"nodes":[{"content":"KeyValuePair&lt;TValue1,TValue2&gt;","pos":[0,29],"source":"KeyValuePair<TValue1,TValue2>"}]},{"pos":[10426,10446],"content":"GenericPair(TValue1)","needQuote":true,"needEscape":true,"nodes":[{"content":"GenericPair(TValue1)","pos":[0,20]}]},{"pos":[10655,10662],"content":"TValue1","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue1","pos":[0,7]}]},{"pos":[10843,10871],"content":"GenericPair(TValue1,TValue2)","needQuote":true,"needEscape":true,"nodes":[{"content":"GenericPair(TValue1,TValue2)","pos":[0,28]}]},{"pos":[11096,11103],"content":"TValue1","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue1","pos":[0,7]}]},{"pos":[11203,11210],"content":"TValue2","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue2","pos":[0,7]}]},{"pos":[11400,11414],"content":"Equals(Object)","needQuote":true,"needEscape":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[11623,11630],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[11748,11754],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11933,11938],"content":"first","needQuote":true,"needEscape":true,"nodes":[{"content":"first","pos":[0,5]}]},{"pos":[12117,12124],"content":"TValue1","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue1","pos":[0,7]}]},{"pos":[12340,12362],"content":"op_Assign(GenericPair)","needQuote":true,"needEscape":true,"nodes":[{"content":"op_Assign(GenericPair)","pos":[0,22]}]},{"pos":[12626,12637],"content":"GenericPair","needQuote":true,"needEscape":true,"nodes":[{"content":"GenericPair","pos":[0,11]}]},{"pos":[12821,12832],"content":"GenericPair","needQuote":true,"needEscape":true,"nodes":[{"content":"GenericPair","pos":[0,11]}]},{"pos":[13040,13046],"content":"second","needQuote":true,"needEscape":true,"nodes":[{"content":"second","pos":[0,6]}]},{"pos":[13227,13234],"content":"TValue2","needQuote":true,"needEscape":true,"nodes":[{"content":"TValue2","pos":[0,7]}]},{"pos":[13445,13462],"content":"swap(GenericPair)","needQuote":true,"needEscape":true,"nodes":[{"content":"swap(GenericPair)","pos":[0,17]}]},{"pos":[13716,13727],"content":"GenericPair","needQuote":true,"needEscape":true,"nodes":[{"content":"GenericPair","pos":[0,11]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.VisualC.StlClr.GenericPair`2\n  id: GenericPair`2\n  children:\n  - Microsoft.VisualC.StlClr.GenericPair`2.#ctor\n  - Microsoft.VisualC.StlClr.GenericPair`2.#ctor(Microsoft.VisualC.StlClr.GenericPair)\n  - Microsoft.VisualC.StlClr.GenericPair`2.#ctor(System.Collections.Generic.KeyValuePair{`0,`1}@)\n  - Microsoft.VisualC.StlClr.GenericPair`2.#ctor(`0)\n  - Microsoft.VisualC.StlClr.GenericPair`2.#ctor(`0,`1)\n  - Microsoft.VisualC.StlClr.GenericPair`2.Equals(System.Object)\n  - Microsoft.VisualC.StlClr.GenericPair`2.first\n  - Microsoft.VisualC.StlClr.GenericPair`2.op_Assign(Microsoft.VisualC.StlClr.GenericPair)\n  - Microsoft.VisualC.StlClr.GenericPair`2.second\n  - Microsoft.VisualC.StlClr.GenericPair`2.swap(Microsoft.VisualC.StlClr.GenericPair)\n  langs:\n  - csharp\n  name: GenericPair<TValue1,TValue2>\n  nameWithType: GenericPair<TValue1,TValue2>\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>\n  type: Class\n  syntax:\n    content: public class GenericPair<TValue1,TValue2>\n    typeParameters:\n    - id: TValue1\n      description: Parameter description to be filled\n    - id: TValue2\n      description: Parameter description to be filled\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.#ctor\n  id: '#ctor'\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  langs:\n  - csharp\n  name: GenericPair()\n  nameWithType: GenericPair<TValue1,TValue2>.GenericPair()\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.GenericPair()\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public GenericPair ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.#ctor(Microsoft.VisualC.StlClr.GenericPair)\n  id: '#ctor(Microsoft.VisualC.StlClr.GenericPair)'\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  langs:\n  - csharp\n  name: GenericPair(GenericPair)\n  nameWithType: GenericPair<TValue1,TValue2>.GenericPair(GenericPair)\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.GenericPair(GenericPair)\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public GenericPair (Microsoft.VisualC.StlClr.GenericPair _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.GenericPair\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.#ctor(System.Collections.Generic.KeyValuePair{`0,`1}@)\n  id: '#ctor(System.Collections.Generic.KeyValuePair{`0,`1}@)'\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  langs:\n  - csharp\n  name: GenericPair(KeyValuePair<TValue1,TValue2>)\n  nameWithType: GenericPair<TValue1,TValue2>.GenericPair(KeyValuePair<TValue1,TValue2>)\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.GenericPair(KeyValuePair<TValue1,TValue2>)\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public GenericPair (ref System.Collections.Generic.KeyValuePair<TValue1,TValue2> _Right);\n    parameters:\n    - id: _Right\n      type: System.Collections.Generic.KeyValuePair{TValue1,TValue2}\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.#ctor(`0)\n  id: '#ctor(`0)'\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  langs:\n  - csharp\n  name: GenericPair(TValue1)\n  nameWithType: GenericPair<TValue1,TValue2>.GenericPair(TValue1)\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.GenericPair(TValue1)\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public GenericPair (TValue1 _Val1);\n    parameters:\n    - id: _Val1\n      type: TValue1\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.#ctor(`0,`1)\n  id: '#ctor(`0,`1)'\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  langs:\n  - csharp\n  name: GenericPair(TValue1,TValue2)\n  nameWithType: GenericPair<TValue1,TValue2>.GenericPair(TValue1,TValue2)\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.GenericPair(TValue1,TValue2)\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public GenericPair (TValue1 _Val1, TValue2 _Val2);\n    parameters:\n    - id: _Val1\n      type: TValue1\n      description: Parameter description to be filled\n    - id: _Val2\n      type: TValue2\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: GenericPair<TValue1,TValue2>.Equals(Object)\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.Equals(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public override bool Equals (object _Right_arg);\n    parameters:\n    - id: _Right_arg\n      type: System.Object\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.first\n  id: first\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  langs:\n  - csharp\n  name: first\n  nameWithType: GenericPair<TValue1,TValue2>.first\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.first\n  type: Field\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public TValue1 first;\n    return:\n      type: TValue1\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.op_Assign(Microsoft.VisualC.StlClr.GenericPair)\n  id: op_Assign(Microsoft.VisualC.StlClr.GenericPair)\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  langs:\n  - csharp\n  name: op_Assign(GenericPair)\n  nameWithType: GenericPair<TValue1,TValue2>.op_Assign(GenericPair)\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.op_Assign(GenericPair)\n  type: Operator\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public Microsoft.VisualC.StlClr.GenericPair op_Assign (Microsoft.VisualC.StlClr.GenericPair _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.GenericPair\n      description: Parameter description to be filled\n    return:\n      type: Microsoft.VisualC.StlClr.GenericPair\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.second\n  id: second\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  langs:\n  - csharp\n  name: second\n  nameWithType: GenericPair<TValue1,TValue2>.second\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.second\n  type: Field\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public TValue2 second;\n    return:\n      type: TValue2\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.swap(Microsoft.VisualC.StlClr.GenericPair)\n  id: swap(Microsoft.VisualC.StlClr.GenericPair)\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  langs:\n  - csharp\n  name: swap(GenericPair)\n  nameWithType: GenericPair<TValue1,TValue2>.swap(GenericPair)\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.swap(GenericPair)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr\n  syntax:\n    content: public void swap (Microsoft.VisualC.StlClr.GenericPair _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.GenericPair\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.#ctor\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  isExternal: false\n  name: GenericPair()\n  nameWithType: GenericPair<TValue1,TValue2>.GenericPair()\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.GenericPair()\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.#ctor(Microsoft.VisualC.StlClr.GenericPair)\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  isExternal: false\n  name: GenericPair(GenericPair)\n  nameWithType: GenericPair<TValue1,TValue2>.GenericPair(GenericPair)\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.GenericPair(GenericPair)\n- uid: Microsoft.VisualC.StlClr.GenericPair\n  parent: Microsoft.VisualC.StlClr\n  isExternal: true\n  name: GenericPair\n  nameWithType: GenericPair\n  fullName: Microsoft.VisualC.StlClr.GenericPair\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.#ctor(System.Collections.Generic.KeyValuePair{`0,`1}@)\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  isExternal: false\n  name: GenericPair(KeyValuePair<TValue1,TValue2>)\n  nameWithType: GenericPair<TValue1,TValue2>.GenericPair(KeyValuePair<TValue1,TValue2>)\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.GenericPair(KeyValuePair<TValue1,TValue2>)\n- uid: System.Collections.Generic.KeyValuePair{TValue1,TValue2}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: KeyValuePair<TValue1,TValue2>\n  nameWithType: KeyValuePair<TValue1,TValue2>\n  fullName: System.Collections.Generic.KeyValuePair<TValue1,TValue2>\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.#ctor(`0)\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  isExternal: false\n  name: GenericPair(TValue1)\n  nameWithType: GenericPair<TValue1,TValue2>.GenericPair(TValue1)\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.GenericPair(TValue1)\n- uid: TValue1\n  parent: ''\n  isExternal: true\n  name: TValue1\n  nameWithType: TValue1\n  fullName: TValue1\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.#ctor(`0,`1)\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  isExternal: false\n  name: GenericPair(TValue1,TValue2)\n  nameWithType: GenericPair<TValue1,TValue2>.GenericPair(TValue1,TValue2)\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.GenericPair(TValue1,TValue2)\n- uid: TValue1\n  parent: ''\n  isExternal: true\n  name: TValue1\n  nameWithType: TValue1\n  fullName: TValue1\n- uid: TValue2\n  parent: ''\n  isExternal: true\n  name: TValue2\n  nameWithType: TValue2\n  fullName: TValue2\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.Equals(System.Object)\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: GenericPair<TValue1,TValue2>.Equals(Object)\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.first\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  isExternal: false\n  name: first\n  nameWithType: GenericPair<TValue1,TValue2>.first\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.first\n- uid: TValue1\n  parent: ''\n  isExternal: true\n  name: TValue1\n  nameWithType: TValue1\n  fullName: TValue1\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.op_Assign(Microsoft.VisualC.StlClr.GenericPair)\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  isExternal: false\n  name: op_Assign(GenericPair)\n  nameWithType: GenericPair<TValue1,TValue2>.op_Assign(GenericPair)\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.op_Assign(GenericPair)\n- uid: Microsoft.VisualC.StlClr.GenericPair\n  parent: Microsoft.VisualC.StlClr\n  isExternal: true\n  name: GenericPair\n  nameWithType: GenericPair\n  fullName: Microsoft.VisualC.StlClr.GenericPair\n- uid: Microsoft.VisualC.StlClr.GenericPair\n  parent: Microsoft.VisualC.StlClr\n  isExternal: true\n  name: GenericPair\n  nameWithType: GenericPair\n  fullName: Microsoft.VisualC.StlClr.GenericPair\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.second\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  isExternal: false\n  name: second\n  nameWithType: GenericPair<TValue1,TValue2>.second\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.second\n- uid: TValue2\n  parent: ''\n  isExternal: true\n  name: TValue2\n  nameWithType: TValue2\n  fullName: TValue2\n- uid: Microsoft.VisualC.StlClr.GenericPair`2.swap(Microsoft.VisualC.StlClr.GenericPair)\n  parent: Microsoft.VisualC.StlClr.GenericPair`2\n  isExternal: false\n  name: swap(GenericPair)\n  nameWithType: GenericPair<TValue1,TValue2>.swap(GenericPair)\n  fullName: Microsoft.VisualC.StlClr.GenericPair<TValue1,TValue2>.swap(GenericPair)\n- uid: Microsoft.VisualC.StlClr.GenericPair\n  parent: Microsoft.VisualC.StlClr\n  isExternal: true\n  name: GenericPair\n  nameWithType: GenericPair\n  fullName: Microsoft.VisualC.StlClr.GenericPair\n"}