{"nodes":[{"pos":[1023,1033],"content":"SafeHandle","needQuote":true,"needEscape":true,"nodes":[{"content":"SafeHandle","pos":[0,10]}]},{"pos":[1997,2023],"content":"SafeHandle(IntPtr,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"SafeHandle(IntPtr,Boolean)","pos":[0,26]}]},{"pos":[2430,2464],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2532,2566],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[2763,2770],"content":"Close()","needQuote":true,"needEscape":true,"nodes":[{"content":"Close()","pos":[0,7]}]},{"pos":[3268,3292],"content":"DangerousAddRef(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"DangerousAddRef(Boolean)","pos":[0,24]}]},{"pos":[3661,3695],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3918,3938],"content":"DangerousGetHandle()","needQuote":true,"needEscape":true,"nodes":[{"content":"DangerousGetHandle()","pos":[0,20]}]},{"pos":[4284,4318],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4537,4555],"content":"DangerousRelease()","needQuote":true,"needEscape":true,"nodes":[{"content":"DangerousRelease()","pos":[0,18]}]},{"pos":[5036,5045],"content":"Dispose()","needQuote":true,"needEscape":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[5594,5610],"content":"Dispose(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[5966,6000],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6266,6276],"content":"Finalize()","needQuote":true,"needEscape":true,"nodes":[{"content":"Finalize()","pos":[0,10]}]},{"pos":[6722,6728],"content":"handle","needQuote":true,"needEscape":true,"nodes":[{"content":"handle","pos":[0,6]}]},{"pos":[7014,7048],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7251,7259],"content":"IsClosed","needQuote":true,"needEscape":true,"nodes":[{"content":"IsClosed","pos":[0,8]}]},{"pos":[7558,7592],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7797,7806],"content":"IsInvalid","needQuote":true,"needEscape":true,"nodes":[{"content":"IsInvalid","pos":[0,9]}]},{"pos":[8117,8151],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8364,8379],"content":"ReleaseHandle()","needQuote":true,"needEscape":true,"nodes":[{"content":"ReleaseHandle()","pos":[0,15]}]},{"pos":[8721,8755],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8990,9007],"content":"SetHandle(IntPtr)","needQuote":true,"needEscape":true,"nodes":[{"content":"SetHandle(IntPtr)","pos":[0,17]}]},{"pos":[9354,9388],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9611,9631],"content":"SetHandleAsInvalid()","needQuote":true,"needEscape":true,"nodes":[{"content":"SetHandleAsInvalid()","pos":[0,20]}]},{"pos":[10074,10133],"content":"System.Runtime.ConstrainedExecution.CriticalFinalizerObject","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Runtime.ConstrainedExecution.CriticalFinalizerObject","pos":[0,59]}]},{"pos":[10299,10325],"content":"SafeHandle(IntPtr,Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"SafeHandle(IntPtr,Boolean)","pos":[0,26]}]},{"pos":[10527,10533],"content":"IntPtr","needQuote":true,"needEscape":true,"nodes":[{"content":"IntPtr","pos":[0,6]}]},{"pos":[10650,10657],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[10844,10851],"content":"Close()","needQuote":true,"needEscape":true,"nodes":[{"content":"Close()","pos":[0,7]}]},{"pos":[11111,11135],"content":"DangerousAddRef(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"DangerousAddRef(Boolean)","pos":[0,24]}]},{"pos":[11334,11341],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[11541,11561],"content":"DangerousGetHandle()","needQuote":true,"needEscape":true,"nodes":[{"content":"DangerousGetHandle()","pos":[0,20]}]},{"pos":[11751,11757],"content":"IntPtr","needQuote":true,"needEscape":true,"nodes":[{"content":"IntPtr","pos":[0,6]}]},{"pos":[11953,11971],"content":"DangerousRelease()","needQuote":true,"needEscape":true,"nodes":[{"content":"DangerousRelease()","pos":[0,18]}]},{"pos":[12228,12237],"content":"Dispose()","needQuote":true,"needEscape":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[12492,12508],"content":"Dispose(Boolean)","needQuote":true,"needEscape":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[12691,12698],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[12888,12898],"content":"Finalize()","needQuote":true,"needEscape":true,"nodes":[{"content":"Finalize()","pos":[0,10]}]},{"pos":[13138,13144],"content":"handle","needQuote":true,"needEscape":true,"nodes":[{"content":"handle","pos":[0,6]}]},{"pos":[13306,13312],"content":"IntPtr","needQuote":true,"needEscape":true,"nodes":[{"content":"IntPtr","pos":[0,6]}]},{"pos":[13500,13508],"content":"IsClosed","needQuote":true,"needEscape":true,"nodes":[{"content":"IsClosed","pos":[0,8]}]},{"pos":[13675,13682],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[13873,13882],"content":"IsInvalid","needQuote":true,"needEscape":true,"nodes":[{"content":"IsInvalid","pos":[0,9]}]},{"pos":[14051,14058],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[14253,14268],"content":"ReleaseHandle()","needQuote":true,"needEscape":true,"nodes":[{"content":"ReleaseHandle()","pos":[0,15]}]},{"pos":[14449,14456],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[14662,14679],"content":"SetHandle(IntPtr)","needQuote":true,"needEscape":true,"nodes":[{"content":"SetHandle(IntPtr)","pos":[0,17]}]},{"pos":[14863,14869],"content":"IntPtr","needQuote":true,"needEscape":true,"nodes":[{"content":"IntPtr","pos":[0,6]}]},{"pos":[15067,15087],"content":"SetHandleAsInvalid()","needQuote":true,"needEscape":true,"nodes":[{"content":"SetHandleAsInvalid()","pos":[0,20]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.InteropServices.SafeHandle\n  id: SafeHandle\n  children:\n  - System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)\n  - System.Runtime.InteropServices.SafeHandle.Close\n  - System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)\n  - System.Runtime.InteropServices.SafeHandle.DangerousGetHandle\n  - System.Runtime.InteropServices.SafeHandle.DangerousRelease\n  - System.Runtime.InteropServices.SafeHandle.Dispose\n  - System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)\n  - System.Runtime.InteropServices.SafeHandle.Finalize\n  - System.Runtime.InteropServices.SafeHandle.handle\n  - System.Runtime.InteropServices.SafeHandle.IsClosed\n  - System.Runtime.InteropServices.SafeHandle.IsInvalid\n  - System.Runtime.InteropServices.SafeHandle.ReleaseHandle\n  - System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)\n  - System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid\n  langs:\n  - csharp\n  name: SafeHandle\n  nameWithType: SafeHandle\n  fullName: System.Runtime.InteropServices.SafeHandle\n  type: Class\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public abstract class SafeHandle : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable\n  inheritance:\n  - System.Object\n  - System.Runtime.ConstrainedExecution.CriticalFinalizerObject\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)\n  id: '#ctor(System.IntPtr,System.Boolean)'\n  parent: System.Runtime.InteropServices.SafeHandle\n  langs:\n  - csharp\n  name: SafeHandle(IntPtr,Boolean)\n  nameWithType: SafeHandle.SafeHandle(IntPtr,Boolean)\n  fullName: System.Runtime.InteropServices.SafeHandle.SafeHandle(IntPtr,Boolean)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  syntax:\n    content: protected SafeHandle (IntPtr invalidHandleValue, bool ownsHandle);\n    parameters:\n    - id: invalidHandleValue\n      type: System.IntPtr\n      description: Parameter description to be filled\n    - id: ownsHandle\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Runtime.InteropServices.SafeHandle.Close\n  id: Close\n  parent: System.Runtime.InteropServices.SafeHandle\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: SafeHandle.Close()\n  fullName: System.Runtime.InteropServices.SafeHandle.Close()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  syntax:\n    content: public void Close ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)\n  id: DangerousAddRef(System.Boolean@)\n  parent: System.Runtime.InteropServices.SafeHandle\n  langs:\n  - csharp\n  name: DangerousAddRef(Boolean)\n  nameWithType: SafeHandle.DangerousAddRef(Boolean)\n  fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  syntax:\n    content: public void DangerousAddRef (ref bool success);\n    parameters:\n    - id: success\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle\n  id: DangerousGetHandle\n  parent: System.Runtime.InteropServices.SafeHandle\n  langs:\n  - csharp\n  name: DangerousGetHandle()\n  nameWithType: SafeHandle.DangerousGetHandle()\n  fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  syntax:\n    content: public IntPtr DangerousGetHandle ();\n    parameters: []\n    return:\n      type: System.IntPtr\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease\n  id: DangerousRelease\n  parent: System.Runtime.InteropServices.SafeHandle\n  langs:\n  - csharp\n  name: DangerousRelease()\n  nameWithType: SafeHandle.DangerousRelease()\n  fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  syntax:\n    content: public void DangerousRelease ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Runtime.InteropServices.SafeHandle.Dispose\n  id: Dispose\n  parent: System.Runtime.InteropServices.SafeHandle\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: SafeHandle.Dispose()\n  fullName: System.Runtime.InteropServices.SafeHandle.Dispose()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Runtime.InteropServices.SafeHandle.Dispose*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Runtime.InteropServices.SafeHandle\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: SafeHandle.Dispose(Boolean)\n  fullName: System.Runtime.InteropServices.SafeHandle.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: Parameter description to be filled\n  overload: System.Runtime.InteropServices.SafeHandle.Dispose*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Runtime.InteropServices.SafeHandle.Finalize\n  id: Finalize\n  parent: System.Runtime.InteropServices.SafeHandle\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: SafeHandle.Finalize()\n  fullName: System.Runtime.InteropServices.SafeHandle.Finalize()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  syntax:\n    content: ~SafeHandle ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Runtime.InteropServices.SafeHandle.handle\n  id: handle\n  parent: System.Runtime.InteropServices.SafeHandle\n  langs:\n  - csharp\n  name: handle\n  nameWithType: SafeHandle.handle\n  fullName: System.Runtime.InteropServices.SafeHandle.handle\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  syntax:\n    content: protected IntPtr handle;\n    return:\n      type: System.IntPtr\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Runtime.InteropServices.SafeHandle.IsClosed\n  id: IsClosed\n  parent: System.Runtime.InteropServices.SafeHandle\n  langs:\n  - csharp\n  name: IsClosed\n  nameWithType: SafeHandle.IsClosed\n  fullName: System.Runtime.InteropServices.SafeHandle.IsClosed\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  syntax:\n    content: public bool IsClosed { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Runtime.InteropServices.SafeHandle.IsInvalid\n  id: IsInvalid\n  parent: System.Runtime.InteropServices.SafeHandle\n  langs:\n  - csharp\n  name: IsInvalid\n  nameWithType: SafeHandle.IsInvalid\n  fullName: System.Runtime.InteropServices.SafeHandle.IsInvalid\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  syntax:\n    content: public abstract bool IsInvalid { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle\n  id: ReleaseHandle\n  parent: System.Runtime.InteropServices.SafeHandle\n  langs:\n  - csharp\n  name: ReleaseHandle()\n  nameWithType: SafeHandle.ReleaseHandle()\n  fullName: System.Runtime.InteropServices.SafeHandle.ReleaseHandle()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  syntax:\n    content: protected abstract bool ReleaseHandle ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)\n  id: SetHandle(System.IntPtr)\n  parent: System.Runtime.InteropServices.SafeHandle\n  langs:\n  - csharp\n  name: SetHandle(IntPtr)\n  nameWithType: SafeHandle.SetHandle(IntPtr)\n  fullName: System.Runtime.InteropServices.SafeHandle.SetHandle(IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  syntax:\n    content: protected void SetHandle (IntPtr handle);\n    parameters:\n    - id: handle\n      type: System.IntPtr\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid\n  id: SetHandleAsInvalid\n  parent: System.Runtime.InteropServices.SafeHandle\n  langs:\n  - csharp\n  name: SetHandleAsInvalid()\n  nameWithType: SafeHandle.SetHandleAsInvalid()\n  fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  syntax:\n    content: public void SetHandleAsInvalid ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Runtime.ConstrainedExecution.CriticalFinalizerObject\n  isExternal: false\n  name: System.Runtime.ConstrainedExecution.CriticalFinalizerObject\n- uid: System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: SafeHandle(IntPtr,Boolean)\n  nameWithType: SafeHandle.SafeHandle(IntPtr,Boolean)\n  fullName: System.Runtime.InteropServices.SafeHandle.SafeHandle(IntPtr,Boolean)\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Runtime.InteropServices.SafeHandle.Close\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: Close()\n  nameWithType: SafeHandle.Close()\n  fullName: System.Runtime.InteropServices.SafeHandle.Close()\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: DangerousAddRef(Boolean)\n  nameWithType: SafeHandle.DangerousAddRef(Boolean)\n  fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: DangerousGetHandle()\n  nameWithType: SafeHandle.DangerousGetHandle()\n  fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle()\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: DangerousRelease()\n  nameWithType: SafeHandle.DangerousRelease()\n  fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease()\n- uid: System.Runtime.InteropServices.SafeHandle.Dispose\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: Dispose()\n  nameWithType: SafeHandle.Dispose()\n  fullName: System.Runtime.InteropServices.SafeHandle.Dispose()\n- uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: SafeHandle.Dispose(Boolean)\n  fullName: System.Runtime.InteropServices.SafeHandle.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Runtime.InteropServices.SafeHandle.Finalize\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: Finalize()\n  nameWithType: SafeHandle.Finalize()\n  fullName: System.Runtime.InteropServices.SafeHandle.Finalize()\n- uid: System.Runtime.InteropServices.SafeHandle.handle\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: handle\n  nameWithType: SafeHandle.handle\n  fullName: System.Runtime.InteropServices.SafeHandle.handle\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Runtime.InteropServices.SafeHandle.IsClosed\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: IsClosed\n  nameWithType: SafeHandle.IsClosed\n  fullName: System.Runtime.InteropServices.SafeHandle.IsClosed\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Runtime.InteropServices.SafeHandle.IsInvalid\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: IsInvalid\n  nameWithType: SafeHandle.IsInvalid\n  fullName: System.Runtime.InteropServices.SafeHandle.IsInvalid\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: ReleaseHandle()\n  nameWithType: SafeHandle.ReleaseHandle()\n  fullName: System.Runtime.InteropServices.SafeHandle.ReleaseHandle()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: SetHandle(IntPtr)\n  nameWithType: SafeHandle.SetHandle(IntPtr)\n  fullName: System.Runtime.InteropServices.SafeHandle.SetHandle(IntPtr)\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: SetHandleAsInvalid()\n  nameWithType: SafeHandle.SetHandleAsInvalid()\n  fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid()\n- uid: System.Runtime.InteropServices.SafeHandle.Dispose*\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  nameWithType: SafeHandle.\n"}