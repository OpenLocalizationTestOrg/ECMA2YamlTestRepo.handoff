{"nodes":[{"pos":[1866,1884],"content":"ConcurrentStack<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"ConcurrentStack<T>"},{"pos":[2481,2515],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[3232,3249],"content":"ConcurrentStack()","needQuote":true,"needEscape":true,"nodes":[{"content":"ConcurrentStack()","pos":[0,17]}]},{"pos":[3835,3866],"content":"ConcurrentStack(IEnumerable<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ConcurrentStack(IEnumerable<T>)"},{"pos":[4328,4362],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[4571,4578],"content":"Clear()","needQuote":true,"needEscape":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[5088,5105],"content":"CopyTo(T[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"CopyTo(T[],Int32)","pos":[0,17]}]},{"pos":[5456,5490],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5551,5585],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[5794,5799],"content":"Count","needQuote":true,"needEscape":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[6100,6134],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[6359,6374],"content":"GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[6781,6815],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7028,7035],"content":"IsEmpty","needQuote":true,"needEscape":true,"nodes":[{"content":"IsEmpty","pos":[0,7]}]},{"pos":[7345,7379],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[7594,7601],"content":"Push(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"Push(T)","pos":[0,7]}]},{"pos":[7913,7947],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8176,8190],"content":"PushRange(T[])","needQuote":true,"needEscape":true,"nodes":[{"content":"PushRange(T[])","pos":[0,14]}]},{"pos":[8527,8561],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[8913,8939],"content":"PushRange(T[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"PushRange(T[],Int32,Int32)","pos":[0,26]}]},{"pos":[9327,9361],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9427,9461],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9522,9556],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[9982,10042],"content":"System.Collections.Concurrent.IProducerConsumerCollection(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Concurrent.IProducerConsumerCollection(T)","pos":[0,60]}]},{"pos":[10486,10520],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10579,10613],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[10972,11032],"content":"System.Collections.Concurrent.IProducerConsumerCollection(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Concurrent.IProducerConsumerCollection(T)","pos":[0,60]}]},{"pos":[11481,11515],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11574,11608],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[11949,11999],"content":"System.Collections.ICollection.CopyTo(Array,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.CopyTo(Array,Int32)","pos":[0,50]}]},{"pos":[12432,12466],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12527,12561],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[12864,12909],"content":"System.Collections.ICollection.IsSynchronized","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.IsSynchronized","pos":[0,45]}]},{"pos":[13326,13360],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[13651,13690],"content":"System.Collections.ICollection.SyncRoot","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.SyncRoot","pos":[0,39]}]},{"pos":[14090,14124],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[14425,14471],"content":"System.Collections.IEnumerable.GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IEnumerable.GetEnumerator()","pos":[0,46]}]},{"pos":[14924,14958],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15171,15180],"content":"ToArray()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToArray()","pos":[0,9]}]},{"pos":[15494,15528],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[15751,15761],"content":"TryPeek(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryPeek(T)","pos":[0,10]}]},{"pos":[16090,16124],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16183,16217],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16438,16447],"content":"TryPop(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryPop(T)","pos":[0,9]}]},{"pos":[16773,16807],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[16866,16900],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17133,17149],"content":"TryPopRange(T[])","needQuote":true,"needEscape":true,"nodes":[{"content":"TryPopRange(T[])","pos":[0,16]}]},{"pos":[17491,17525],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17582,17616],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[17974,18002],"content":"TryPopRange(T[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryPopRange(T[],Int32,Int32)","pos":[0,28]}]},{"pos":[18395,18429],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18495,18529],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18590,18624],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18681,18715],"content":"Parameter description to be filled","needQuote":true,"needEscape":true,"nodes":[{"content":"Parameter description to be filled","pos":[0,34]}]},{"pos":[18899,18912],"content":"System.Object","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Object","pos":[0,13]}]},{"pos":[19060,19077],"content":"ConcurrentStack()","needQuote":true,"needEscape":true,"nodes":[{"content":"ConcurrentStack()","pos":[0,17]}]},{"pos":[19399,19430],"content":"ConcurrentStack(IEnumerable<ph id=\"ph1\">&lt;T&gt;</ph>)","needQuote":true,"needEscape":true,"source":"ConcurrentStack(IEnumerable<T>)"},{"pos":[19704,19718],"content":"IEnumerable<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerable<T>"},{"pos":[19951,19958],"content":"Clear()","needQuote":true,"needEscape":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[20238,20255],"content":"CopyTo(T[],Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"CopyTo(T[],Int32)","pos":[0,17]}]},{"pos":[20437,20438],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[20538,20543],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[20738,20743],"content":"Count","needQuote":true,"needEscape":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[20917,20922],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[21125,21140],"content":"GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[21382,21396],"content":"IEnumerator<ph id=\"ph1\">&lt;T&gt;</ph>","needQuote":true,"needEscape":true,"source":"IEnumerator<T>"},{"pos":[21631,21638],"content":"IsEmpty","needQuote":true,"needEscape":true,"nodes":[{"content":"IsEmpty","pos":[0,7]}]},{"pos":[21818,21825],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[22027,22034],"content":"Push(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"Push(T)","pos":[0,7]}]},{"pos":[22196,22197],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[22387,22401],"content":"PushRange(T[])","needQuote":true,"needEscape":true,"nodes":[{"content":"PushRange(T[])","pos":[0,14]}]},{"pos":[22577,22578],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[22796,22822],"content":"PushRange(T[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"PushRange(T[],Int32,Int32)","pos":[0,26]}]},{"pos":[23022,23023],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[23123,23128],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[23241,23246],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[23507,23567],"content":"System.Collections.Concurrent.IProducerConsumerCollection(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Concurrent.IProducerConsumerCollection(T)","pos":[0,60]}]},{"pos":[23853,23860],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[23961,23962],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[24210,24270],"content":"System.Collections.Concurrent.IProducerConsumerCollection(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.Concurrent.IProducerConsumerCollection(T)","pos":[0,60]}]},{"pos":[24556,24563],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[24664,24665],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[24904,24954],"content":"System.Collections.ICollection.CopyTo(Array,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.CopyTo(Array,Int32)","pos":[0,50]}]},{"pos":[25218,25223],"content":"Array","needQuote":true,"needEscape":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[25336,25341],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[25576,25621],"content":"System.Collections.ICollection.IsSynchronized","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.IsSynchronized","pos":[0,45]}]},{"pos":[25877,25884],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[26117,26156],"content":"System.Collections.ICollection.SyncRoot","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.ICollection.SyncRoot","pos":[0,39]}]},{"pos":[26399,26405],"content":"Object","needQuote":true,"needEscape":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26641,26687],"content":"System.Collections.IEnumerable.GetEnumerator()","needQuote":true,"needEscape":true,"nodes":[{"content":"System.Collections.IEnumerable.GetEnumerator()","pos":[0,46]}]},{"pos":[26973,26984],"content":"IEnumerator","needQuote":true,"needEscape":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[27205,27214],"content":"ToArray()","needQuote":true,"needEscape":true,"nodes":[{"content":"ToArray()","pos":[0,9]}]},{"pos":[27380,27381],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[27570,27580],"content":"TryPeek(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryPeek(T)","pos":[0,10]}]},{"pos":[27766,27773],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[27874,27875],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[28061,28070],"content":"TryPop(T)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryPop(T)","pos":[0,9]}]},{"pos":[28254,28261],"content":"Boolean","needQuote":true,"needEscape":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[28362,28363],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[28555,28571],"content":"TryPopRange(T[])","needQuote":true,"needEscape":true,"nodes":[{"content":"TryPopRange(T[])","pos":[0,16]}]},{"pos":[28767,28772],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28869,28870],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[29090,29118],"content":"TryPopRange(T[],Int32,Int32)","needQuote":true,"needEscape":true,"nodes":[{"content":"TryPopRange(T[],Int32,Int32)","pos":[0,28]}]},{"pos":[29338,29343],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[29440,29441],"content":"T","needQuote":true,"needEscape":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[29541,29546],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[29659,29664],"content":"Int32","needQuote":true,"needEscape":true,"nodes":[{"content":"Int32","pos":[0,5]}]}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Concurrent.ConcurrentStack`1\n  id: ConcurrentStack`1\n  children:\n  - System.Collections.Concurrent.ConcurrentStack`1.#ctor\n  - System.Collections.Concurrent.ConcurrentStack`1.#ctor(System.Collections.Generic.IEnumerable`1)\n  - System.Collections.Concurrent.ConcurrentStack`1.Clear\n  - System.Collections.Concurrent.ConcurrentStack`1.CopyTo(`0[],System.Int32)\n  - System.Collections.Concurrent.ConcurrentStack`1.Count\n  - System.Collections.Concurrent.ConcurrentStack`1.GetEnumerator\n  - System.Collections.Concurrent.ConcurrentStack`1.IsEmpty\n  - System.Collections.Concurrent.ConcurrentStack`1.Push(`0)\n  - System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[])\n  - System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)\n  - System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)\n  - System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)\n  - System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#IsSynchronized\n  - System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#SyncRoot\n  - System.Collections.Concurrent.ConcurrentStack`1.System#Collections#IEnumerable#GetEnumerator\n  - System.Collections.Concurrent.ConcurrentStack`1.ToArray\n  - System.Collections.Concurrent.ConcurrentStack`1.TryPeek(`0@)\n  - System.Collections.Concurrent.ConcurrentStack`1.TryPop(`0@)\n  - System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[])\n  - System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)\n  langs:\n  - csharp\n  name: ConcurrentStack<T>\n  nameWithType: ConcurrentStack<T>\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>\n  type: Class\n  syntax:\n    content: >-\n      [System.Diagnostics.DebuggerDisplay(\"Count = {Count}\")]\n\n      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Concurrent.SystemCollectionsConcurrent_ProducerConsumerCollectionDebugView`1))]\n\n      public class ConcurrentStack<T> : System.Collections.Concurrent.IProducerConsumerCollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IReadOnlyCollection<T>\n    typeParameters:\n    - id: T\n      description: Parameter description to be filled\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Concurrent.IProducerConsumerCollection<T>\n  - System.Collections.Generic.IEnumerable<T>\n  - System.Collections.Generic.IReadOnlyCollection<T>\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentStack`1.#ctor\n  id: '#ctor'\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  langs:\n  - csharp\n  name: ConcurrentStack()\n  nameWithType: ConcurrentStack<T>.ConcurrentStack()\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.ConcurrentStack()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public ConcurrentStack ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentStack`1.#ctor(System.Collections.Generic.IEnumerable`1)\n  id: '#ctor(System.Collections.Generic.IEnumerable`1)'\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  langs:\n  - csharp\n  name: ConcurrentStack(IEnumerable<T>)\n  nameWithType: ConcurrentStack<T>.ConcurrentStack(IEnumerable<T>)\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.ConcurrentStack(IEnumerable<T>)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public ConcurrentStack (System.Collections.Generic.IEnumerable<T> collection);\n    parameters:\n    - id: collection\n      type: System.Collections.Generic.IEnumerable`1\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentStack`1.Clear\n  id: Clear\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: ConcurrentStack<T>.Clear()\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.Clear()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentStack`1.CopyTo(`0[],System.Int32)\n  id: CopyTo(`0[],System.Int32)\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  langs:\n  - csharp\n  name: CopyTo(T[],Int32)\n  nameWithType: ConcurrentStack<T>.CopyTo(T[],Int32)\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.CopyTo(T[],Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public void CopyTo (T[] array, int index);\n    parameters:\n    - id: array\n      type: T[]\n      description: Parameter description to be filled\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentStack`1.Count\n  id: Count\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  langs:\n  - csharp\n  name: Count\n  nameWithType: ConcurrentStack<T>.Count\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.Count\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentStack`1.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: ConcurrentStack<T>.GetEnumerator()\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public System.Collections.Generic.IEnumerator<T> GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator`1\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentStack`1.IsEmpty\n  id: IsEmpty\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  langs:\n  - csharp\n  name: IsEmpty\n  nameWithType: ConcurrentStack<T>.IsEmpty\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.IsEmpty\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public bool IsEmpty { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentStack`1.Push(`0)\n  id: Push(`0)\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  langs:\n  - csharp\n  name: Push(T)\n  nameWithType: ConcurrentStack<T>.Push(T)\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.Push(T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public void Push (T item);\n    parameters:\n    - id: item\n      type: T\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[])\n  id: PushRange(`0[])\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  langs:\n  - csharp\n  name: PushRange(T[])\n  nameWithType: ConcurrentStack<T>.PushRange(T[])\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.PushRange(T[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public void PushRange (T[] items);\n    parameters:\n    - id: items\n      type: T[]\n      description: Parameter description to be filled\n  overload: System.Collections.Concurrent.ConcurrentStack`1.PushRange*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)\n  id: PushRange(`0[],System.Int32,System.Int32)\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  langs:\n  - csharp\n  name: PushRange(T[],Int32,Int32)\n  nameWithType: ConcurrentStack<T>.PushRange(T[],Int32,Int32)\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.PushRange(T[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public void PushRange (T[] items, int startIndex, int count);\n    parameters:\n    - id: items\n      type: T[]\n      description: Parameter description to be filled\n    - id: startIndex\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Collections.Concurrent.ConcurrentStack`1.PushRange*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)\n  id: System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  langs:\n  - csharp\n  name: System.Collections.Concurrent.IProducerConsumerCollection(T)\n  nameWithType: ConcurrentStack<T>.System.Collections.Concurrent.IProducerConsumerCollection(T)\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.System.Collections.Concurrent.IProducerConsumerCollection(T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: bool IProducerConsumerCollection<T>.TryAdd (T item);\n    parameters:\n    - id: item\n      type: T\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)\n  id: System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  langs:\n  - csharp\n  name: System.Collections.Concurrent.IProducerConsumerCollection(T)\n  nameWithType: ConcurrentStack<T>.System.Collections.Concurrent.IProducerConsumerCollection(T)\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.System.Collections.Concurrent.IProducerConsumerCollection(T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: bool IProducerConsumerCollection<T>.TryTake (out T item);\n    parameters:\n    - id: item\n      type: T\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  langs:\n  - csharp\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: ConcurrentStack<T>.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.System.Collections.ICollection.CopyTo(Array,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: void ICollection.CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: Parameter description to be filled\n    - id: index\n      type: System.Int32\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  langs:\n  - csharp\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: ConcurrentStack<T>.System.Collections.ICollection.IsSynchronized\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.System.Collections.ICollection.IsSynchronized\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: bool System.Collections.ICollection.IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  langs:\n  - csharp\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: ConcurrentStack<T>.System.Collections.ICollection.SyncRoot\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.System.Collections.ICollection.SyncRoot\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: object System.Collections.ICollection.SyncRoot { get; }\n    return:\n      type: System.Object\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  langs:\n  - csharp\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: ConcurrentStack<T>.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentStack`1.ToArray\n  id: ToArray\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  langs:\n  - csharp\n  name: ToArray()\n  nameWithType: ConcurrentStack<T>.ToArray()\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.ToArray()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public T[] ToArray ();\n    parameters: []\n    return:\n      type: T[]\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPeek(`0@)\n  id: TryPeek(`0@)\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  langs:\n  - csharp\n  name: TryPeek(T)\n  nameWithType: ConcurrentStack<T>.TryPeek(T)\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.TryPeek(T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public bool TryPeek (out T result);\n    parameters:\n    - id: result\n      type: T\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPop(`0@)\n  id: TryPop(`0@)\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  langs:\n  - csharp\n  name: TryPop(T)\n  nameWithType: ConcurrentStack<T>.TryPop(T)\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.TryPop(T)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public bool TryPop (out T result);\n    parameters:\n    - id: result\n      type: T\n      description: Parameter description to be filled\n    return:\n      type: System.Boolean\n      description: Parameter description to be filled\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[])\n  id: TryPopRange(`0[])\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  langs:\n  - csharp\n  name: TryPopRange(T[])\n  nameWithType: ConcurrentStack<T>.TryPopRange(T[])\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.TryPopRange(T[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public int TryPopRange (T[] items);\n    parameters:\n    - id: items\n      type: T[]\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Collections.Concurrent.ConcurrentStack`1.TryPopRange*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\n- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)\n  id: TryPopRange(`0[],System.Int32,System.Int32)\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  langs:\n  - csharp\n  name: TryPopRange(T[],Int32,Int32)\n  nameWithType: ConcurrentStack<T>.TryPopRange(T[],Int32,Int32)\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.TryPopRange(T[],Int32,Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Collections.Concurrent\n  syntax:\n    content: public int TryPopRange (T[] items, int startIndex, int count);\n    parameters:\n    - id: items\n      type: T[]\n      description: Parameter description to be filled\n    - id: startIndex\n      type: System.Int32\n      description: Parameter description to be filled\n    - id: count\n      type: System.Int32\n      description: Parameter description to be filled\n    return:\n      type: System.Int32\n      description: Parameter description to be filled\n  overload: System.Collections.Concurrent.ConcurrentStack`1.TryPopRange*\n  platform:\n  - net-11\n  - net-20\n  - netcore-10\nreferences:\n- uid: System.Object\n  isExternal: false\n  name: System.Object\n- uid: System.Collections.Concurrent.ConcurrentStack`1.#ctor\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  isExternal: false\n  name: ConcurrentStack()\n  nameWithType: ConcurrentStack<T>.ConcurrentStack()\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.ConcurrentStack()\n- uid: System.Collections.Concurrent.ConcurrentStack`1.#ctor(System.Collections.Generic.IEnumerable`1)\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  isExternal: false\n  name: ConcurrentStack(IEnumerable<T>)\n  nameWithType: ConcurrentStack<T>.ConcurrentStack(IEnumerable<T>)\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.ConcurrentStack(IEnumerable<T>)\n- uid: System.Collections.Generic.IEnumerable`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Collections.Concurrent.ConcurrentStack`1.Clear\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  isExternal: false\n  name: Clear()\n  nameWithType: ConcurrentStack<T>.Clear()\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.Clear()\n- uid: System.Collections.Concurrent.ConcurrentStack`1.CopyTo(`0[],System.Int32)\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  isExternal: false\n  name: CopyTo(T[],Int32)\n  nameWithType: ConcurrentStack<T>.CopyTo(T[],Int32)\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.CopyTo(T[],Int32)\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Concurrent.ConcurrentStack`1.Count\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  isExternal: false\n  name: Count\n  nameWithType: ConcurrentStack<T>.Count\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.Count\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Concurrent.ConcurrentStack`1.GetEnumerator\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: ConcurrentStack<T>.GetEnumerator()\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.GetEnumerator()\n- uid: System.Collections.Generic.IEnumerator`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerator<T>\n  nameWithType: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n- uid: System.Collections.Concurrent.ConcurrentStack`1.IsEmpty\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  isExternal: false\n  name: IsEmpty\n  nameWithType: ConcurrentStack<T>.IsEmpty\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.IsEmpty\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Concurrent.ConcurrentStack`1.Push(`0)\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  isExternal: false\n  name: Push(T)\n  nameWithType: ConcurrentStack<T>.Push(T)\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.Push(T)\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[])\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  isExternal: false\n  name: PushRange(T[])\n  nameWithType: ConcurrentStack<T>.PushRange(T[])\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.PushRange(T[])\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T[]\n- uid: System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  isExternal: false\n  name: PushRange(T[],Int32,Int32)\n  nameWithType: ConcurrentStack<T>.PushRange(T[],Int32,Int32)\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.PushRange(T[],Int32,Int32)\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  isExternal: false\n  name: System.Collections.Concurrent.IProducerConsumerCollection(T)\n  nameWithType: ConcurrentStack<T>.System.Collections.Concurrent.IProducerConsumerCollection(T)\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.System.Collections.Concurrent.IProducerConsumerCollection(T)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  isExternal: false\n  name: System.Collections.Concurrent.IProducerConsumerCollection(T)\n  nameWithType: ConcurrentStack<T>.System.Collections.Concurrent.IProducerConsumerCollection(T)\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.System.Collections.Concurrent.IProducerConsumerCollection(T)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  isExternal: false\n  name: System.Collections.ICollection.CopyTo(Array,Int32)\n  nameWithType: ConcurrentStack<T>.System.Collections.ICollection.CopyTo(Array,Int32)\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.System.Collections.ICollection.CopyTo(Array,Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#IsSynchronized\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  isExternal: false\n  name: System.Collections.ICollection.IsSynchronized\n  nameWithType: ConcurrentStack<T>.System.Collections.ICollection.IsSynchronized\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.System.Collections.ICollection.IsSynchronized\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#SyncRoot\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  isExternal: false\n  name: System.Collections.ICollection.SyncRoot\n  nameWithType: ConcurrentStack<T>.System.Collections.ICollection.SyncRoot\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.System.Collections.ICollection.SyncRoot\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: ConcurrentStack<T>.System.Collections.IEnumerable.GetEnumerator()\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Collections.Concurrent.ConcurrentStack`1.ToArray\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  isExternal: false\n  name: ToArray()\n  nameWithType: ConcurrentStack<T>.ToArray()\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.ToArray()\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T[]\n- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPeek(`0@)\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  isExternal: false\n  name: TryPeek(T)\n  nameWithType: ConcurrentStack<T>.TryPeek(T)\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.TryPeek(T)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPop(`0@)\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  isExternal: false\n  name: TryPop(T)\n  nameWithType: ConcurrentStack<T>.TryPop(T)\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.TryPop(T)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[])\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  isExternal: false\n  name: TryPopRange(T[])\n  nameWithType: ConcurrentStack<T>.TryPopRange(T[])\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.TryPopRange(T[])\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T[]\n- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  isExternal: false\n  name: TryPopRange(T[],Int32,Int32)\n  nameWithType: ConcurrentStack<T>.TryPopRange(T[],Int32,Int32)\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>.TryPopRange(T[],Int32,Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: T\n  parent: ''\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T[]\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Concurrent.ConcurrentStack`1.PushRange*\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  isExternal: false\n  nameWithType: ConcurrentStack<T>.\n- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPopRange*\n  parent: System.Collections.Concurrent.ConcurrentStack`1\n  isExternal: false\n  nameWithType: ConcurrentStack<T>.\n"}